[
  {
    "title": "Strapi vs Contentful - Which Is The Best CMS In 2022?",
    "plaintext": "Content Management Systems (CMSs) are software systems that help you manage the content of your website. A CMS allows you to input, update, delete content, and publish it online. It also makes it easy to create a database of content/blogs that is searchable by users. While there are many types of CMS available in the market, in this article, we'll compare two popular choices, Contentful vs. Strapi, and see how they stack up against each other.What is Contentful?Contentful is a cloud-based headless CMS that enables businesses to publish and distribute content to different outlets from a centralized hub. You can build custom content models using the provided templates and integrate various third-party services for improved workflow and customer experience. The platform supports virtually all content types, including blogs, images, and even music, which can be edited collaboratively by a team of editors with role-based permissions. Contentful also supports GraphQL and REST APIs, enabling content delivery across multiple channels, such as websites, mobile apps, and IoT devices.Contentful featuresContentful is a feature-rich CMS that's optimized to work with all types of presentation layers. This is supported by the following features:Content delivery network (CDN)A CDN is a distributed server network that aims to ensure fast content delivery to users. The network also relies on advanced caching to enhance site performance. Contentful CDN is optimized to fast and round-the-clock content delivery. It uses Fastly and CloudFront CDNs, which are also used by renowned companies such as Twitter, Vimeo, and Github. The CDN responds to every request with a JSON document.Customization toolboxContentful features a toolbox for customizing content. This allows you to tailor your content model to meet your business needs and improve readability. For example, you can set up custom fields for their content so that it's well-organized. If you have a blog about basketball games, you can create custom fields like\" team,\" players,\" and\" season.\" This way, when writing blog posts on basketball games, you can fill out these custom fields so that the information is organized in an easy-to-read fashion. You can also publish content in different time zones and languages in one click to ensure your audience views fresh content on time.Uncluttered UIContentful offers a straightforward user interface that's intuitive for everyone, even for those without a software development background. The platform also supports numerous UI extensions for enhanced functionality and customization.Asset sharingBefore any content is published, it undergoes a long chain of people for approval and modifications. This process is usually tedious and time-consuming as it often takes place offline. However, Contentful is built to optimize real-time collaboration, allowing users to create content libraries with managed permissions. This way, editors and developers can work on different blog parts and finally merge their changes in production. Developers can set up a preview site using the native Preview API to enable editors to monitor live changes of their edits in real time. This saves time and increases productivity, unlike in the early days when editors had to go through developers for a quick content fix.Pros and cons of ContentfulAdvantages of Contentful include: * Value for moneyContentful offers three pricing tiers: community, team, and premium. The community plan allows up to five users and supports all basic functionalities such as GraphQL support, SDKs, language, and framework agnostic. The team plan is ideal for small teams working on a scalable project. The plan goes for $489 per month with a one-month free option. The premium plans offer all features of the team plan with additional functionality, such as enhanced permission control and unlimited API calls. The plan is ideal for a single team or an entire organization looking to build multiple projects. * Unifies content management and distributionThis eliminates the need to use different CMS for each channel. This single hub of control approach makes it easier to update content and fix bugs. * Offers fast performance, which consequently improves user experience * Easy to use * Highly customizableDisadvantages of Contentful include: * You're limited on the number of content types you can use. The free and community plans are limited to 48 content types, while the premium plan has unlimited types. * It needs more customer support. The support team can only be contacted by opening a ticket on the vendor's website.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is Strapi?Strapi is a headless CMS written in JavaScript. Unlike Contentful, Strapi is open-source, meaning you can install your own server and customize the front and back end through an API. This complete control over the client and server-side allows developers to work with their favorite tools; in turn, they can optimize security standards and performance and manage the cost of a project. Content teams use Strapi to publish and manage all types of content to all channels from a single hub. The platform also has an intuitive user interface and an admin panel for efficient content management. This panel is supported by the Role Based Access Control (RBAC) system, which allows an admin to configure permissions. The platform offers three roles; super admin, editor, and author. Super admins have access and control to all data, while the editors are allowed only to publish and edit content. The authors are allowed to post content they have created.Strapi featuresBelow are some of the features that make Strapi an efficient CMS:Self-hostedStrapi is a self-hosted CMS, meaning you're free to choose your hosting option. As such, you maintain complete control over your data; consequently, you won't lock yourself to the vendor. You can move your data to a different CMS. The platform has integrations to support third-party hosting providers.Authentication and authorization pluginStrapi allows you to install Roles and Permission plugins. As the name suggests, this plugin enables controlled access by managing processes such as sign-ups, logins, and password reset. You can control who has access to certain data while working as a team. You can also establish your open authentication (OAuth) to facilitate secure interactions with third-party services.REST and GraphQL APIStrapi comes with a built-in GraphQL and RESTful API that can be used to access your content from anywhere. With the recent update, the platform has improved filtering systems that allow you to dictate precise data to fetch using the APIs.PricingStrapi has four main pricing plans -- standard, bronze, silver, and gold. All plans feature basic features such as unlimited locales and access control. The standard version is free to use for as long as you wish. The bronze and silver plans go for $9 and $29 per admin user per month. The gold plan, on the other hand, is charged based on your custom business needs and comes with perks such as technical onboarding and premium customer support.Pros and cons of using StrapiThere are several reasons why you might want to consider using Strapi for your next project, including:It's easy to useStrapi is designed to be easy to use, even for those new to web development. It has a user-friendly interface and extensive documentation to help you get started quickly.It's flexibleStrapi is a flexible CMS that can be used for a wide range of projects. It can be easily customized to meet your specific needs.It's scalableStrapi is built on Node.js, which is a scalable platform. This means that your Strapi applications can easily handle spikes in traffic as your business grows.SecurityStrapi comes with built-in security features that protect your data and user information. It has features like role-based access control and JWT authentication that make it secure and trustworthy.It has a growing communityStrapi has an active community that can help you with questions or problems that you might have.It's also worth noting that the new Strapi version supports Typescript.Cons of Strapi CMS * One of the downsides of using Strapi is that it is a resource hog. If you're not careful, you can easily use more resources than you need, slowing down your website or application. * It's less feature-rich than some of the other headless CMSs out there. It doesn't have as many plugins or themes and has limited documentation. * Another downside of Strapi is that it can be relatively challenging to set up. While the learning curve is shallow, there is still much to learn to get everything set up correctly. This can be especially true if you're not a developer.Contentful vs. Strapi ComparisonTo help you choose which CMS is more suitable for your business, let's compare the two based on the following criteria:CustomizationBoth Strapi and Contentful offer robust customization tools for content and markdown editing. However, Strapi has more room for customization than Contentful due to its self-hosted model. This allows you to customize the backend and front-end to cater to your business needs. Contentful is a proprietary Software-as-a-Service (SaaS) that provides hosting in its business model. This means you're limited to using the vendor's backend service, unlike with Strapi. As a result, you have no control over where your data is stored. Also, with your data hosted by the vendor, you face increased switching costs.Ease of useIdeally, you want a CMS that's user-friendly to not only your development team but also your content creators and editors. Contentful and Strapi score well on the user-friendliness front, as they have an intuitive user interface built for developers and non-developers alike. Editing and publishing content is easy and non-technical on both platforms. They also spare developers the tedious process of creating databases and controllers thanks to the APIs. This allows the development team to focus on other critical business logic processes. Most importantly, the two systems serve as a centralized hub for efficient management and distribution of content across all devices.PricingContentful and Strapi have similar payment plans. Both have a free community plan for new users. However, a slight difference makes Strapi free plan more appealing. With Contentful's free community plan, you're limited to; 48 content types, 25,000 records, two admin panel roles, two locales, three environments, and five users. To remove these restrictions, you have to upgrade to a paid plan which starts at $489 a month. While the standard plan is relatively expensive, the real drawback is that you can only fully test whether the solution works for your business by committing to a paid plan.On the other hand, Strapi's free community plan doesn't have these restrictions. This means you can test the platform fully to see if it suits your business model without necessarily having to pay for access to basic features. Also, Strapi's per user per month payment model, which starts at $9, is more cost-effective than Contentful. It allows you to enjoy premium CMS service without committing a significant initial investment.Which CMS should you use?Strapi scores highly in cost-effectiveness and customization. It is ideal for large enterprises that prioritize security and want complete data control. It's also suitable for small businesses operating on a strict budget.Despite being cost-effective, the Strapi payment model is built so that you'll incur high costs if you run numerous projects. So, if you're working on numerous projects, consider using Contentful. Also, the since the platform is cloud-hosted, you don't have to worry about configuring your own hosting service. This works well for small businesses with limited development talent.Frequently asked questionsQ: What is a headless CMS?A headless content management system is a backend content management platform that separates the content repository from the presentation layer/front-end. This allows you to fetch the content via REST or GraphQL API and display it on any device. These systems were built to make it possible to display the same content across multiple digital platforms/viewports.Q: Is Contentful better than Strapi?It depends on your business needs. But generally, Strapi works well for large enterprises, while Contentful is ideal for small and medium businesses.Key takeawayThe main difference between Contentful and Strapi is that the former is a cloud-hosted SaaS while the latter is self-hosted. Think of it as renting a house vs. owning a home. With Contentful, you're renting a home; that is, you'll use the vendor's hosting service. Using Strapi is like owning a home, meaning you're free to customize it as much as you would like."
  },
  {
    "title": "Composable Commerce vs Headless - What's The Difference?",
    "plaintext": "The eCommerce space constantly evolves as businesses strive to keep up with dynamic consumer trends. The need to stay current is further accelerated by the ever-increasing number of digital touchpoints (even refrigerators are digital these days). This pressure has given rise to a new architectural pattern known as headless commerce that decouples the frontend from the underlying backend commerce services. The frontend communicates with the backend through an API. The goal is to give businesses the flexibility they need to deliver innovative digital experiences to improve overall customer satisfaction.However, despite its flexibility, the headless eCommerce architecture is still limited because all of the eCommerce services are bundled together into a single system (i.e. Shopify Plus, Commercelayer, Crystallize, etc). As a result, if one part of the puzzle is causing inefficiencies, the business can either suck it up or move its entire solution to a different platform.This is where composable commerce comes in. The idea is that microservices are used to drive a modular architecture where dedicated services can be connected to the broader system.Instead of using Next.js as the frontend and Shopify as the backend, the architecture now evolves to using Next.js as the frontend, Stripe as the payment gateway, Commercelayer as the order management system, Segment for analytics, Nostro for A/B testing, etc.There’s a large overlap conceptually between composable and headless commerce, so the aim of this article is to expand on both and make the distinction crystal clear.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is composable commerce?Composable commerce architecture consists of independent microservices that can be combined and configured to create a fully featured solution. It's often spoken about in the same breath as MACH  (Microservices, API-first, Cloud-native and Headless) architecture. Note that every component is independent, not just the frontend as is the case with a headless commerce platform.The modularity of composable commerce allows businesses to choose the best-of-breed solutions for their needs instead of being locked into a single vendor or technology stack. This approach also enables businesses to quickly adapt to changing market conditions and customer needs by adding or removing services as needed.Think of it as pieces of LEGO which can be stacked in infinite ways to build a structure that aligns with your vision. You’re free to innovate your business model and tweak it as much as you want to better meet your consumers’ needs. This flexibility is a huge advantage in implementing new and in-demand business models such as subscription-based services, same-day delivery, and in-store returns.Features of composable commerceSome key characteristics of composable commerce:Modular designA composable commerce platform is built from a collection of pre-built, loosely coupled services or microservices that can be combined and configured to create a customized solution. Each service or microservice addresses a specific aspect of the eCommerce process, such as product management, order fulfilment, or payment processing. This modular architecture allows businesses to pick and choose the services they need and add or remove them as needed.API-first approachIn a composable commerce architecture, all components/microservice are independent including the front-end and back-end. You choose the service that will make up your backend and create your custom frontend.Each service or microservice has its own API, which can be used to communicate with other services or with external systems such as inventory management, shipping, or payment gateways. This API-first approach makes it easier to build and integrate new services into the platform and allows businesses to take advantage of existing tools and services without developing everything from scratch. This approach also allows developers to build new features and functionality on top of existing services without worrying about the underlying technology stack.Omnichannel supportOmnichannel refers to the ability of an e-commerce platform to support a wide range of sales channels, including web, mobile, social media, marketplaces, and brick-and-mortar stores. A composable commerce platform has omnichannel support to track the customer's journey across all channels, providing a unified view of their behavior and preferences. This way, businesses can offer a seamless shopping experience to their customers across all channels, regardless of where they are in the buying journey. For example, a customer may browse a product on a mobile app, add it to their cart on a desktop website, and complete the purchase in a brick-and-mortar store.Cloud-nativeComposable commerce platforms are typically cloud-native, which means that businesses do not have to worry about managing their own infrastructure or software updates. This can help reduce IT costs and allow businesses to focus on their core competencies.Being cloud-native also means that composable commerce platforms offer great scalability allowing businesses to keep up with their fluctuating demand for computing resources.Why would any business choose to go composable?Composable commerce is an architecture best suited to enterprise-grade organisations. The financial overhead of maintaining a dozen different services to power a single store is significant. It also adds a ton of complexity for the poor development team that needs to keep all of the services in sync, documented and bug-free.If it’s pricey, complex and difficult to maintain, so why would any business choose this architecture? The simplest answer is it allows innovation.When multinational companies reach the level of Walmart, Jaguar, Costco or Ticketmaster, they’re less concerned about the subscription price of software services and more about staying at the top of the food chain. If there’s a service that can help deliver a more personalized solution to new customers that pushes them to convert, it keeps profits up and shareholders happy.It wouldn’t be accurate to say that composable commerce is “the best” approach because that always depends on the business. However, composable commerce allows the best services in their respective category to be combined into a single storefront.What is headless commerce?Headless commerce platforms are similar to composable commerce in that they decouple the backend and frontend. So, they both share most features and advantages and even function similarly. However, with headless eCommerce, you’re tethered to what the eCommerce backend engine offers. You don’t have the flexibility to change your tech stack or business model by adding new services such as buy-online-pick-in-store.Composable commerce is almost the evolution of headless eCommerce. The first jump for most online retailers is to build a decoupled frontend and then over time, replacing services from the eCommerce backend with best-in-class microservices.What’s the difference between composable commerce vs headlessComposable and headless commerce are often used interchangeably to refer to decoupled architecture. But this notion isn’t entirely true. Here is a comparative analysis of the two based to highlight their subtle differences:FlexibilityA composable commerce platform separates the backend into individual components, unlike headless. This gives businesses more control over their stack as they can pick, swap, and drop components to create systems that work best for them. This modular architecture allows businesses to quickly and easily make changes to their e-commerce platform without having to overhaul the entire system.For example, if a business wants to add a new payment gateway, it can simply choose a payment gateway microservice that best fits its needs and integrate it into its system without the need for extensive technical expertise.In contrast, headless commerce is less flexible because changes to the front or backend require more technical expertise. Changes to the backend of a headless commerce platform may require significant coding changes, which can be time-consuming and require specialized technical knowledge.Cost-effectivenessWith a composable commerce platform, you curate the components which work best for your business model. As such, you only pay for those specific components rather than the entire platform. As your business grows, you can add more components to suit your demands.Conversely, a headless eCommerce can be more expensive, as businesses typically pay for the entire platform, even if they only use certain features. This can lead to increased costs for businesses that don't require all the features of the platform. Furthermore, because headless commerce can be more complex, it may require more specialized technical resources to manage and maintain, which can further increase costs.Ease of integrationBoth composable and headless commerce provides APIs for integration with third-party systems and applications. However, composable commerce is designed to be more plug-and-play, with pre-built integrations available for many popular systems. Headless commerce, however, requires more development effort to integrate with other systems and applications.Factors to consider when choosing between composable and headless commerceBusiness needs and objectivesEvery business has unique needs and objectives, so it's essential to consider these when choosing an e-commerce platform. Composable commerce is ideal for businesses that require more flexibility and customization, as it allows for the easy addition or removal of components and services. On the other hand, headless commerce may be a better fit for businesses that need to focus more on the frontend presentation layer, as it offers greater control over the user experience across different channels.Cost and time-to-marketIf you’re working with a tight budget and limited project timeline, it makes more sense to go for a composable eCommerce platform. It offers a more cost-effective approach as businesses can add or remove components as needed without the need for significant modifications to the backend architecture. This can help businesses save on development and maintenance costs. In contrast, headless commerce may require a more significant upfront investment in backend architecture, but the costs may be more predictable and stable in the long run.Composable commerce platforms also enable businesses to launch new features or services more quickly and respond rapidly to changing market demands. On the other hand, a headless commerce platform may require more time upfront to develop and maintain the backend architecture.Frequently asked questionsQ: What is composable commerce?A: Composable commerce is a modern approach to building eCommerce experiences that involves breaking down an eCommerce platform into smaller, composable services that can be mixed and matched to create a tailored eCommerce experience. This allows businesses to create more flexible, agile eCommerce experiences that can be customized to meet the specific needs of their customers.Q: What is headless commerce?Headless commerce design involves separating the front-end presentation layer from the back-end eCommerce functionality. This allows businesses to use different front-end technologies, such as mobile apps or voice assistants, while still leveraging the back-end eCommerce functionality of their platform.Q: What are the differences between composable commerce and headless commerce?Composable commerce and headless commerce share many similarities in their approach to building eCommerce experiences. However, composable commerce focuses more on breaking down the eCommerce platform into independent services that can be curated in ‘what-works-best-for-me’, while headless commerce focuses more on separating the front-end presentation layer from the back-end eCommerce functionality.Q: Which approach is more suitable for businesses with complex needs?Both composable commerce and headless commerce are suitable for businesses with complex needs. However, composable commerce is more customizable, allowing you to iterate your business model in line the consumer trends.Wrapping upChoosing between composable commerce and headless commerce requires careful consideration of several factors, such as flexibility, customization, time-to-market, and cost. While both approaches have their advantages and disadvantages, composable commerce offers greater future-proofing as businesses can add or remove components and services as needed without the need for significant modifications to the backend architecture. This allows businesses to stay agile and adapt to changing customer needs and market trends, ensuring their e-commerce platform remains relevant and competitive in the long run."
  },
  {
    "title": "AFTCO - A great MACH architecture example",
    "plaintext": "The American Fishing & Tackle Company are an excellent example of a business that understands the value of composable commerce, rapidly rolling out prototypes and the need to be reactive to their customer's changing needs. Over the past few months, we've partnered with AFTCO to help implement their new headless store. With their permission, we're publishing the case study to provide insights for other businesses looking to commit to the same growth play.For years, AFTCO had operated a successful monolithic Shopify store that stocked all the great products they carry in their chain of stores across the Western parts of the U.S. What separates them from the competition (besides their awesome gear) is their willingness to take bold steps to improve their digital operations and customer experience.The legacy Shopify store was performing well enough but had reached a natural plateau. AFTCO wanted the site to keep evolving through A/B testing, optimizations, a modern UI, and product personalisation. Adding plugins or extensions to the site to achieve these goals was hurting their core web vitals and page load times, preventing them from getting closer to their goals.The AFTCO team were aware of the high-level benefits of moving to a headless store; * Faster load speeds * Better user experience * Having complete unrestricted freedom to build innovative frontend features * Accessing a pool of high-talent developers * Introducing multi-lingual and multi-currency options to expand into new marketsThese promises are super compelling for a business that had reached a technical ceiling.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitAFTCO's first hurdle - functional architectureAFTCO boasts a team of highly experienced and capable product experts, marketers, content writers, and other professionals that keep their operation at the top of it's game. They don't have in-house development resources or anyone experienced with MACH technology. This posed a challenge. While the team knew roughly where they wanted to be, they didn't have the experience to map the best path with the least resistance.MACH architecture relies heavily on combining the right products to solve problems and provide a workflow that's not cumbersome for everyday users. This is the role of a functional architect. They're responsible for selecting the puzzle pieces that will fit together to make the solution whole.In AFTCO's case, they needed to pick the right solutions for: * Hosting (Options: Vercel, DigitalOcean, Cloudflare, AWS) * Frontend framework (Options: Next.js, Nuxt.js, Hydrogen) * Content management (Options: Contentful, Prismic, Strapi, Plain Shopify, Sanity, Storyblok, Builder.io) * eCommerce (Options: Shopify, Commercelayer, Crystallize) * Product recommendations & search (Options: Klevu, Elastic Search, Algolia)There are tons of other composable areas that can make up an eCommerce solution, but as a company in its infancy of microservices based architecture, this breakdown was a great place to start.We're functional architectsOne of the ways we brought value to AFTCO's project is by acting as the functional architect. We're official partners of most of the big services AFTCO was considering using (Shopify, Contentful, Prismic, Crystallize, Commercelayer) and deeply understand how these services fit particular needs. Answering AFTCO's question \"which tools are the best for us?\" made the project feel less risky for their team.Prototyping for visibilityEven after receiving our advice on the best of breed approach, it's difficult for a company like AFTCO to be absolutely confident the final solution will tick all their boxes. That's why we helped them spin up prototypes to try out.The solution options we wanted to showcase through prototypes were: * Hosting * Consolidated product and content managementThe AFTCO team were working with Vercel for hosting. Vercel are an exceptional host, and we're quick to recommend them because the range of native functionality (edge rendering, A/B testing, turning functions into APIs with a couple of commands) the service offers. However, AFTCO weren't using all the bells and whistles and were better suited to a simpler setup.We spun up two new environments to showcase the experience; DigitalOcean and Cloudflare. This let AFTCO see the limitations and experiences using both platforms before taking our advice.The next prototyping mission was to showcase different CMS options to provide a more streamlined approach to managing products and content. AFTCO's initial CMS provider was Contentful (again, an excellent choice!) which solved 95% of their issues, but left a bit of a splintered approach to adding new products and creating the sales page where the product is advertised.At the time of writing, we're spinning up the new prototypes, but our leading options are Prismic, Strapi and Shopify's default CMS. The goal of setting up each platform is to create a clearer, more defined workflow for adding new products and product variations.The results: improving performanceWhen we first started working with AFTCO, their site's performance was decent on desktop but not passing the CWV due to some cumulative layout shift problems and some under-frontend optimized code.Even though these numbers look a bit scary at first, they posed an excellent opportunity to unlock the performance gains AFTCO had identified before starting the project.Our focus was implementing Next.js's performant server-side rendering techniques and streamlining the codebase. It's worth noting that the site was half-built by the time our team had the opportunity to implement some of the standards we believed would improve performance.There's always \"a little more\" than can be done to improve a store's performance, but after refactoring the critical parts of the site, this is what the performance looks like:The performance improvements saw AFTCO sail through a successful (and stable) Black Friday and have total confidence in the upcoming Christmas period.While there has been a huge increase in traffic and sales since unlocking the full potential of headless performance, this trend is likely the result of Black Friday and the holiday period. We'll circle back and update the case study in 12 months for more accurate insights into the effect of moving to a MACH architecture.What's next for AFTCO?AFTCO have the opportunity to implement its choice for MACH technologies. There's nothing tieing them to outdated technologies. It's a really exciting time to be in this position, as the MACH Alliance is gaining traction and every day a new service leverages AI creatively to improve the shopping experience.The next big tickets for the AFTCO team are expanding internationally and creating a customized shopping experience, all while dialling their conversion rate with A/B testing.Without the store's current architecture, there wouldn't be a way to achieve these goals.For instance, Next.js and Shopify Plus work together nicely with native support for multi-lingual and multi-currency sites. It doesn't just work out of the box but can be configured for a seamless shopping experience. The same can be said for most modern CMSs. Contentful, Prismic and Strapi all have case studies showing how they've helped retailers and multinationals manage content and stores in different languages.Shopping personalisation platforms like Nostro can be integrated into the existing architecture to leverage the power of AI segmentation, user purchasing predictions and content customisation.Finally, A/B testing can be unlocked through various services but can work on The Edge. The Edge is a global network of servers that distribute static assets and can run some basic operations. This means no matter where in the world a user enters the site, they'll be part of the split test but won't have to suffer the slow page load times that are usually associated with A/B testing.Wrapping upAFTCO is a really cool MACH architecture example and the perfect growth model for many online retailers who are considering the jump to headless eCommerce.While we wanted the spotlight to be firmly on the AFTCO team, our team indeed played a bit part in the success of their new setup. An idea is only as good as the execution!Our team are focused on helping growing companies make the jump to composable websites and applications. If you're considering a project like this and need to speak with a team that's proved it can get it right, please reach out to us! The worst that can happen if you get some free experience-backed advice."
  },
  {
    "title": "Three Of The Best Travel Agent Website Designs",
    "plaintext": "3 Best Travel Agent Website Designs - A Deeper AnalysisIt’s no secret the travel industry is a crowded place. Agencies push advertising and promotions to their limits and use every advantage they can find to get a leg up. At the center of these strategies is the website, quietly working to convince travelers to take their next trip. As the hardest working tool in the promotional arsenal, every aspect of a real estate agent’s website needs to be optimized to influences the person on the other side of the screen.To get a better understanding of how super successful travel agent websites do their job, we’re going to analyze three of the best travel agent website designs and dig into the elements and arrangements that make them successful. By breaking the web design down we should uncover patterns that provide inspiration and direction for us to create new (and even better) designs.This review is not paid, and we aren’t affiliated with any of these sites. We’re just here to look at different types of sites find out what kind of design techniques are working for the big dogs of the travel agent industry.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPricelineAt the top of the list is Priceline. This travel goliath rakes in billions of dollars each year and is ranked in the top 500 most visited websites in the U.S. With that kind of traffic it’s fair to say that each part of their website design has been thoroughly tested and optimized.While Priceline’s design isn’t extravagant or even particularly artistic, it excels in making efficient use of real estate to display a lot of information and functionality.Have a look at illustration below.This is the first fold of Priceline’s website. They manage to cram in a significant amount of information without creating overwhelm. It’s relatively easy for the user to digest all of these various elements.Looking from the top down they’ve used a simple, non-nested menu, a hero section with a slim but fully functional search bar, a brief benefits section and a focused call-to-action. It’s nothing flashy but it’s clean and conveys a lot of information without the user having to scroll.In this one fold a user can search for accommodation, see that they have been granted a discount voucher, they’re welcomed to the site by a smiling Kaley Cuoco, they’ve been told the benefits of Priceline, and they’ve been called to take an action. Writing it all out sounds a little overwhelming, but it fits together nicely on the page.If there was any critique to be made of this page it would be the first header above the search bar which doesn’t have great contrast with the background and is a little washed out. This is reflected in the accessibility score in Chrome’s native audit tool seen below.Looking a little further down Priceline’s page, they’ve put together a nice little display grid that does a great job inferring a lot of personality with just the use of fonts and high quality images. I’m personally very drawn to unique grids so this part of their design appeals to me and was one of the reasons Priceline made the review list.AltourAltour offer a much different user experience than most travel sites and it makes sense when you look at the services they offer, including corporate retreats, luxury holidays and even private jet travel… how lavish!These kind of exclusive services call for a different design style that isn’t focused around finding the best deal like a traditional travel agency. Their aim is to take the user on a more immersive journey to reflect the indulgent nature of their services.One of the unique features of the Altour website is their lack of concern for screen real estate. This is a stark contrast to the other sites in this review. Instead, the top of their site is a full fold HTML5 video section that joins to a smooth horizontal scrolling showcase of their services.While I’m not personally a fan of using full fold video backgrounds, there is a time and a place, and this builds on top of the design experience.I always love seeing a website where the designer and developer have worked together to make something special. A horizontal slider on it’s own isn’t much, and they often scroll poorly and feel clunky. This one however is smooth and decked with beautiful, high quality images that do a great job of communicating while using minimal text.The sections further down the landing page aren’t of great note but they do push a colour scheme that is distinctly corporate. The whole site almost feels like wearing a nicely tailored blue suit. It’s fair to say Altour have created a beautiful design that flaunt elegant imagery and javascript driven features while using powerful but minimalistic headlines and calls to action. There’s actually only 250 words on their entire page including their footer (yes I counted them… which was great fun).I really like Altour’s design. It’s minimalistic, it’s sells their product and their branding is clear. It’s the kind of design that is hand-crafted and couldn’t be accomplished with website builders like Wix, LeadPages or SquareSpace. With that said, it’s worth pointing out that their accessibility and site performance is poor, but this is a website design review not a website performance review so we’ll let it slide.Flight CentreFlight Centre is arguably the most well known travel agency website in Australia. According to the London Telegraph, Australians rank at number 9 for the most international trips per head. Whether this statistic is accurate is besides the point. Australians travel a lot, and Flight Centre plays a part in greasing those wheels.The Flight Centre website is a smorgasbord of calls to action. The website is layered head to toe with incentives to travel. It almost feels like walking through a busy fruit market on a weekend.Despite the busy nature of the site, they’ve still managed to bring in some personality through recognisable models, a clear and striking colour scheme and enough structure that it’s easy to consume everything on the screen.This page is literally covered in calls to action. Flight Centre know that there’s a good chance their users aren’t going to make it past the first fold of their website since their crown jewel is the flight search tool. They’ve taken this on board and made it their mission to solve as many potential user problems as possible in the first fold.The impressive part of deconstructing Flight Centre’s website is you can see the decisions that lead to the design. Weight is given to each of the components based on their importance to the business.The flight search functionality sits in front of the rest of the design because it’s what most users are looking for. However, Flight Centre make their money from selling package deals, and they have the chance to use this real estate for advertising their latest and greatest offers. Down the bottom of the food chain are the specific questions, and avenues support less effective ways of converting visitors.Flights Centre’s intentions are no less clear further down their website. They’ve adopted an attractive and clean approach to the “newspaper” layout of information; most important stuff up top, moderately important stuff in the middle and least important stuff down the bottom.Using tidy typography and overlapping on-page elements allows information to be squeezed into as much little real estate as possible. The overlapping grid elements also come with the added benefit of slotting straight into a perfectly arranged mobile display.While I wouldn’t go around telling my friends that the Flight Centre website is my main source of design inspiration, it does a really great job of packing everything in without looking like it’s about to leak out the side of the screen.Of course, our review wouldn’t be complete without scrutinizing Flight Centre’s accessibility and performance. We can probably all agree that travel agencies care a lot about design composition and search engine optimization, and less about accessibility.If you enjoyed our deconstruction of these websites and would like a similar audit of your current site done, reach out to us and we’ll write an article about your site and how it can be improved. If you run a travel agency and are due for a website overhaul, contact us for an obligation free quote today. We know what makes a perfect travel agency website and can help you create a design that brings in clients."
  },
  {
    "title": "What is MACH architecture? The ultimate growth play",
    "plaintext": "What is MACH architecture?MACH architecture has become a red-hot trend in the enterprise world for the past few years. It's an abbreviation of Microservices, API-first, Cloud native, SaaS and Headless. Companies like Contentful, Commercetools, Algolia and a host of other commerce-focused services have popped up that preach an API, composable model of building systems.It's a cool concept that our team implemented on a handful of headless Shopify stores and complex web applications. The general idea is that rather than committing to one platform that does everything, your system should be made up of individual services that all specialise in doing one thing really well.If one service isn't cutting the mustard, it's no sweat. You can pick another provider that's doing a better job, plug its API into your codebase and continue meeting your customer's needs.This sounds great and almost too good to be true. We're going to dive into a few of the caveats of MACH architecture and explain why all of the providers are so heavily geared toward enterprise clients.MACH Architecture: Explaining the four principalsA system is only considered \"MACH\" if it ticks the four boxes.MicroservicesMicroservices is another architectural concept that captures much of what MACH is about. Microservices are loosely coupled services that work together to achieve a set of functionality. Popular microservices are things like eCommerce & inventory management (Commercelayer, Commercetools, Shopify, Crystallize), search (Algolia, Elastic Search), content management (Contentful, Prismic, Strapi), product recommendations (Klevu, Search Spring), and tons of other areas.The MACH alliance has a neat diagram on its website that captures a great overview that categorises the common microservices.API-firstAPI-first is the idea that a system should provide a set of modular, well-maintained, and carefully architectured APIs that drive interoperability. The APIs in MACH architecture are the key to integrating with all the other pieces of the puzzle, so they're treated as the lynchpin.This is different from a monolithic-style API that isn't modular, bundles a ton of different data together, and isn't really appropriate for sharing outside of the context of the application.Cloud-native SaaSCloud-native SaaS is the concept of building an application intentionally to live in containers on a series of cloud-based servers rather than the traditional approach of installing an application on an on-premises server.There are tons of great cloud-based hosting companies (AWS, Vercel, Netlify, Gatsby Cloud, DigitalOcean, Cloudflare, Linode, Azure) that have developed exceptional tools for services to scale up quickly at a global level. MACH takes advantage of these cloud facilities.HeadlessBeing headless means there's no coupling between the frontend display layer and the backend. This allows a completely custom interface to be developed, while accessing all the power of the service's backend.This concept is best demonstrated with something like a smart fridge that needs to run a custom frontend but also access backend functionality to drive its operations.Challenges of monolithic architecture - the reason for MACHMonolithic architecture is one where the entire application's codebase and services are packaged together for simplicity and ease of maintenance. This approach is excellent for most businesses. It's how the two biggest website frameworks are designed; WordPress and Shopify.The straightforward architecture of a monolith leads to particular challenges that have caused headaches for larger, more complex businesses.Coupled front and backend slows developmentMaking a change to the frontend of a monolith may stop delivering data to the backend, leading to a string of problems (breaking analytics, affecting other features that use the same data, and causing null state errors). Similarly, making a change to the backend may break the frontend.As websites or applications with this architecture grow, the complex coupling between the front and backend can completely tank the development team's ability to implement quick changes.If part of the application doesn't fit, you're stuckSay your product requires heavy personalisation prior to purchase, like an individually tailored dog food regime, and you're using a monolithic platform like Shopify; there's no great way to bring in a more customisable cart and checkout service. In situations where you can make changes to fit a requirement, it often requires heavy development, and the results may not be amazing.Being wedded to how a single platform handles particular operations is limiting for businesses that grow in complexity, especially if their user's demands and requirements are evolving quickly.Popular monolithic platforms have their own limiting protocolsShopify is built using liquid templating and WordPress is PHP based but has its own set of rules for how things need to be done. The opinionated way they force developers to build new stores is a dampener on productivity and limits what can realistically be built.Smaller pool of qualified developersBeing forced to work in a particular way, with a specific (usually outdated) language or framework, is not conducive to how successful companies work. Talented developers typically gravitate towards the most mature and powerful frameworks, which also means that businesses working with monolithic applications have a smaller pool of qualified devs to pick from.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBenefits of MACH architectureYou can sum up many of the benefits of MACH architecture by saying it allows for the best software components for companies that need to stay ahead of the game.Keep in mind that MACH architecture is focused on enterprise-level companies that turn over hundreds of millions of dollars a year and can find it difficult to change quickly with the amount of process overhead they have to contend with.Work with the latest cutting-edge technologyThe evolution of products over the past few years has been exponential. Just a few years ago, artificial intelligence had no place in eCommerce. Now, its reach has permeated through analytics, product recommendations, marketing and advertising.An application built with MACH architecture can take advantage of these kinds of big technology leaps. The flexibility to swap in new services opens up an opportunity to trial the latest cutting-edge tech as it arrives.Avoid traditional monolithic restrictionsThere's no need to inherit unnecessary framework restrictions if the applications don't mandate it. The popular frontend frameworks used in MACH architecture (React, Vue, Angular, Blazor) also have limitations, but they're continually evolving and actively seeking to remove inefficiencies.MACH architecture also bypasses the common problems with scaling and bottlenecks that can plague monolithic setups. Each microservice can provide focused optimisations through dedicated infrastructure.For example, searching through a product catalogue of 1,500,000 products on Shopify would take... forever.By comparison, Algolia has a mature, dedicated search service with a ton of infrastructure behind it focused on doing nothing but returning search results. It can execute these kinds of search queries in less than a second - often much faster than that.Work with a pool of elite talentPretty much every professional wants to make their job easier. For developers, this equates to working with a language or framework that helps them solve big problems in more straightforward ways with less effort.The technology that solves the problems with the least effort and with the best results is the one that big companies want to pay for, and as a result, it is the same technology that commands the largest pool of elite talent.Rapid prototypes & reduced time to marketPlugging in a new service's API and rebuilding part of the frontend to accommodate the new functionality can happen relatively quickly compared with building the same functionality into a monolithic application.Leveraging functionality through a series of flexible services and utilities and manipulating the way they work together within the context of an application is also an efficient way to get to market quickly.There's no need to spend time reinventing the wheel, but at the same time, integrating API-first services through a MACH architecture isn't restrictive in the same way as adding plugins to a monolithic setup.Meet evolving business requirementsWhat consumers expect from online retailers is wildly different now than before the panic. And thinking back even further to 2006, when smartphones hadn't arrived, customers' expectations and business requirements could barely compare with today.The point is that business requirements in online commerce change quickly, and a MACH architecture provides a way for businesses to adjust their setup quickly.Future proofSince MACH architecture is built on the idea of modularity and interchangeable services, it's future-proofed in the sense that it can continually upgrade.Using the analogy of a laptop vs a desktop computer, desktops are \"future-proofed\" because you can upgrade the individual pieces to keep the entire system fresh.Limitations of MACH architectureWe have a lot of good things to say about MACH architecture since we're an official service integrator of some of the most popular MACH alliance services.This is an unbiased review of the architecture, and there are better fits for some use cases. There are limitations of a MACH architecture that deter a lot of businesses. Most of them overlap heavily with the benefits, but with the context of money and resources, they become determents.ComplexityMACH architecture is more complex than other architecture for a number of reasons: * Requires a custom frontend * Functionality is facilitated through API * A number of different services involved * Requires configuration of cloud infrastructureA ton of minor workflow differences in a MACH setup add complexity, too - it's the difference between a website and a web application.Organisational workflow changesOn the note of workflow changes, these can cause headaches for businesses wedded to how a particular technology operates. Changing processes and adjusting to a new workflow is never easy. Still, this can be a dealbreaker for businesses where \"the whirlwind\" is all consuming, and there's simply no overhead to adjust to a new way of business.Jumping from Shopify to a MACH architecture means using a combination of different services, like a new CMS, eCommerce, analytics, and marketing, at a bare minimum.Implementation and maintenance costImplementing a MACH application with an experienced agency is at least a $100,000 investment at the bottom of the scale. It takes months of careful planning, design and development.The last implementation we executed took around 800 hours of effort. It's complicated work even for established agencies. We've jumped in to save a handful of headless builds going down the toilet because of poor organisation and optimisation.Once the build is established, ongoing costs are geared towards enterprise clients that can easily afford them. For small to medium businesses, these costs often don't make sense. Contentful's paid plans start at about $500 a month but are limited; Vercel's sweet spot is $30k a month, and Commerce Layer's full commitment to clients comes at around the $80k a month mark.Locked into a developer relationshipCompanies that don't have the budget to pay for experienced developers shy away from an ongoing relationship which seems like an expense more than an investment.Once a business has implemented a MACH application, the days of hiring a $15/hour Filipino developer to make \"tweaks\" is over.A proper implementation shouldn't need a developer to be constantly involved - each service should provide the tools for non-technical users to do what they need. However, the philosophy backing MACH architecture is continual evolution to meet users' needs, which involves coding changes.Enterprise focus & baselinesA lot of MACH alliance SaaS companies have a free or \"self-serve\" plan to cater to small businesses. But that's not where the magic happens. These companies were built to serve the enterprise. They acknowledge that Shopify and WordPress are the entry points and focus on the businesses that have outgrown those platforms.A MACH architecture might not be a good fit if your business isn't profitable and growing. For example, some services have a minimum volume requirement they expect their customers to hit. If you're not there, that's fine, but they'll still charge you $1000/month.Is MACH Alliance really necessary?The MACH alliance is the governing body that is supposed to steer the principals behind MACH architecture but is it really necessary?Well, probably not, but it's a great thing for the future of MACH services. The idea of Microservices, API-first, Cloud-native and headless is still relatively new in the world of technology. As ideas like this emerge, different businesses tend to head in their own direction and do things slightly differently. Committing to a centralise board (as hypocritical as that seems), will help align the best practices of companies committed to this architecture.FAQI like to throw in some FAQs at the end of the article for SEO purposes but also to answer some questions that didn't fit into the flow of the main article body.Q: How does Composable Commerce fit into MACH?MACH is the broader architecture encompassing the internet of things, eCommerce, non-commerce applications and pretty much any software that meets the definition. Composable commerce is almost synonymous with MACH but dedicated to selling stuff online. It preaches the idea of dividing an eCommerce system into composable services connected through API with a custom frontend.Q: Is MACH the same as headless architecture?Not precisely, but headless architecture is a subset of theory within the MACH principles. A headless system doesn't need to rely on microservices to provide a complex experience - it can have a custom frontend and a complete backend with no additional services.Q: Is MACH only for enterprise?Absolutely not. MACH services' target market is enterprise, but that's simply because the small business to the mid-market realm is saturated with other great products. I've spoken with a number of MACH Alliance members, Contentful, Commerce Tools, Crystallise, Algolia, and Klevu, and they all agree that small to medium business is a perfect fit for MACH architecture.Wrapping upMACH architecture is the \"next growth play\" for a lot of businesses that find their technology starting to be a bottleneck. There's a learning curve involved in figuring out how to enter the scene, and hopefully, we've outlined some information that can be used to help your team make decisions."
  },
  {
    "title": "Impact Of A Well Designed Website To An E-Business",
    "plaintext": "Most websites aim to make money and how well they’re put together influences their success. Big corporations pour buckets of money into their website design, and they’re probably not doing it on a hunch. So the question is what is the impact of a well designed website on e-business?The first part of the equation is communicating a company’s brand. Why is this so important you ask? Well let me talk you through a metaphor...Landing on a website for the first time is like bumping into someone on the street. Sometimes they’ll notice you’re lost and offer you a helping hand with clear directions and knowledgeable instructions. They make you feel safe and you’re happy to follow their instructions. Other times they’ll push an agenda, get in your face, interrupt your day, and leave you frustrated with the experience.Sounds familiar right? Websites with a strong overall branding strategy tend to build trust. They understand that coherent design, color schemes and styling guides breed a feeling of consistency.In addition to consistency, strong website branding helps companies stand out from the crowd. There are approximately 1.94 billion active websites in the world and $3.45 trillion in online sales. It’s important that a visitor can remember a company logo, what they’re offering, and if they can be trusted.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPresenting an inconsistent brand leads to a 23% increase in business costs. These costs often manifest by confusing the market, damaging company credibility and reducing the effectiveness of lead gathering.Having a strong and consistent brand is important for a website. Is it necessary to create a beautiful and clean website design? Well, yes. But only if you care about visitors staying on your website.With the uprising of social media, we are constantly bombarded with content. Most of it doesn’t make it through our internal noise filters. The bits and pieces that do need to be exceptional to achieve any kind of prolonged attention or retention.A study Adobe ran in 2015 found that 66% of of time-starved, skeptical consumers crave content that is beautifully designed. 73% of participants said they would switch device or stop engaging with content altogether if they encountered design or display issues.Retaining visitors on your website until they have completed an action is the key to being successful on the web.A poorly designed website leads to visitors leaving without conducting any business with your company. Good website design on the other hand will turn shoppers into buyers. This becomes extremely important when companies are paying for people to visit their website through online advertising.Online advertising is a huge market and a common way to attract visitors to a website. According to eMarketer, Google Ads pulls in around $42 billion dollars of ad spend and owns 37% of total market share. It is the largest and most mature ad platform and it cares how you design your website.Google hides most of the complex logic of its algorithm from prying eyes. However, they have published extensive guidelines on how to set up an effective landing page for a successful advertisement. The key ingredients boil down to a landing page that is relevant, easy to navigate and well designed.The Google Ads platform works on an auction system where advertisers bid for the top spot on the search results page. In addition to the bid price, Google takes into account other factors when determining which ad wins the auction. Even if an ad is perfectly crafted, it can still be heavily penalized by pointing to a poorly designed website. This ends up costing more in advertising dollars to appear lower in the search rankings.Putting this concept into words can be a bit convoluted, so here’s a super simple example:Advertiser A = $5 bid * 0.8 relevance * 0.9 landing page score = 3.6 total scoreAdvertiser B = $8 bid * 0.8 relevance * 0.4 landing page score = 2.56 total scoreIn this example Advertiser B has a significantly higher bid and an equal relevance score. However, a low landing page score has pushed their total score down. Since their score is lower than Advertiser A they would appear further down the results page and receive less clicks. Less clicks for more cash… That’s bad news for Advertiser B.Almost every kind of internet marketing costs money in some form. Operating a good website plays a big part in squeezing the most results from that money, ultimately impacting the bottom line.At this point you might be agreeing that it’s obvious good website design plays a big part in achieving online success. Maybe you even came into this article with this opinion. The next question is - what is good design?There are plenty of “experts” claiming they’ve cracked the code to designing the perfect website. They’ll preach about responsive web design, calls to action, testimonials and social proof. These are all thoroughly tested concepts that work. However, the most important part of creating well designed websites is being purposeful.It sounds a little cliche but the first step to creating a great website design is thinking about your visitors and their goals. The look and feel of any website is important, but only if it’s easy to use. Often companies (especially in the creative space) favour experimental designs with hidden and confusing navigation features over simpler designs. If the user struggles to find what they're looking for is it really a good design?It’s difficult to pin down exactly what good design is because what works for one business may not work for others. Thankfully there’s plenty of tools on the market that track how users interact with online content such as Google Optimize, VWO or and Optimizely. These platforms allow web design elements to be rearranged on the page while measuring the level of engagement and conversion rates from visitors.Making small changes to a website's content and design can have a big impact. There are countless examples of businesses tweaking their websites and seeing huge increases in visitor engagement. The goal of this article wasn’t to focus on case studies, but in the future we’ll outline some awesome success stories.We’re not blind to the fact that investing in good website design is not something every business will prioritize. For starters, It costs time and money. It can often be hard to justify the cost. However, if a company is running any kind of digital marketing perhaps the question should be whether they can justify not having a well designed website?If you made it all the way to the end of this article, thank you! If you're here because you're exploring the idea of creating a new website or redesigning your existing site, please get in contact to see if we can help. We're experts at understanding your audience and crafting an experience that will turn visitors into customers. Reach out to us today!"
  },
  {
    "title": "Gatsby vs WordPress",
    "plaintext": "Is WordPress still the king of the internet in 2020?It sure is. This is unlikely to change anytime. A third of all internet sites are based on WordPress.WordPress boasts a ridiculously huge ecosystem of plugins, extensions, tutorials, themes and customization. There are empires built within its walls. Some of the biggest companies in the world run their dynamic websites on WordPress. It’s more than proved itself as a legitimate choice as the underlying technology for a website.Does this mean it’s the best solution for your business? Not at all.Are there better, faster, more modern solutions? Yes, and it’s worth considering before you make the blind jump into a new or revamped Wordpress site.This article isn’t going to list all the various options you can choose instead of WordPress. We’re digging deep into the static site generator, Gatsby. Why? Well, it's running this site and we love it. It fits our needs perfectly. If you haven’t noticed, our site is highly optimized and it’s super fast. Just try clicking a few links like this one, or here, or even over here.Okay, so we’ve established that Gatsby does a good job. So onto the important questions. * How does it look? * Is it easy to use? * How much does it cost? * How do I use it on my website?Before we answer these questions, we need to explain a little bit about what Gatsby is. We’ll keep it quick and avoid getting too technical, I promise.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is Gatsby?Websites are a composition of smaller pieces. Their most notably pieces are; * HTML (the bones of the website) * CSS (the website’s clothes) * Javascript (the website’s muscles and brains) * Data (the website’s memory and voice)Static site generators like Gatsby take all these pieces from their sources and builds them together into a finished product that is pushed up for viewing.I should probably point out that my analogy is a little clumsy and there’s actually a lot more happening, but for the sake of simplicity this will do.The diagram below contains a more detailed overview of how Gatsby works. This will probably only make things clearer if you have a basic understanding of web technology.In a nutshell, Gatsby takes inputs, combines it with the website’s look and feel and spits out a static site.Static sites are a buzz word in 2020 because they’re super fast and secure, which cannot be said for WordPress.Since static sites are just HTML files they can live on content distribution networks (CDNs) rather than servers. What this means is BIG cost savings. No more managed hosting, no more server costs and most importantly - no risk of malicious software or time wasted fixing these issues.WordPress on the other hand is installed on a server. When a user visits a page, commands are issued to the server to gather the bits and pieces that make up a page. This takes time. Gathering images, fonts, style sheets and all the rest can be a slow process.So we’re on board with what Gatsby is now, but what about those important questions from earlier?How does it look and is it easy to use?It looks great. In fact, it looks like your favorite content management system. It can look like WordPress, Drupal, Netlify, Contentful, Shopify, and a range of other platforms.Gatsby itself doesn’t have an interface for logging in and writing blog posts. It leans on other platforms to take care of this.If your team has been using WordPress for years you can continue to use the administrative backend to write your blog articles and let Gatsby do the rest.At Clean Commit we prefer Netlify CMS. It boasts a beautiful interface with all the SEO functionality you would expect from a blogging platform.How much does it cost?This is the one of the best things about Gatsby. It’s an open source, meaning it’s free to install and use. Sure, but so is WordPress and most popular CMS platforms… but a Gatsby site doesn’t need to run on a server, meaning it can be very cheap to run month to month.There are a handful of services, such as Netlify, that offer free hosting of static files. If you’re a bit technical and know how to get things working, you can run a blazing fast, incredibly secure website for free. This offer doesn’t extend to bigger sites, but if you’re getting started out this is an excellent deal.you’re not technical but like the sound of running a free website, we’re here to help. Our world-class team is excellent at designing beautiful websites that will wow your users. Plus we offer really competitive rates so we’re not going to break the bank.Drop us a line right now. What are you waiting for? We’ll send you a free quote.What about people trying to hack my site?A WordPress site one of our founders manages received 2,500 brute force (hacking) attempts in ONE MONTH.Unfortunately, this is a symptom of running WordPress. It’s the most common platform in the world and hackers know how it works. They look for opportunities to exploit poorly configured setups.Gatsby sites don’t have this problem. To hack a website, you need to take control of the computer (server) it’s running on. A Gatsby site doesn’t run on a server as we discussed earlier, so there’s nothing to hack. This makes it incredibly secure. It's also pushing out static html, css and javascript files, so there's not a lot to hack.This benefit shouldn’t be understated. We’ve had several clients that were hoping to run a low-cost, low-maintenance website. After just one month of their site being live they reached out to us desperately asking for help because their contact forms were being plagued by spam and bots.The solution to bots is throwing up a firewall like Cloudflare or Imperva. Cloudflare has a free plan, but both services are eventually going to end up costing money. Adding more money onto your monthly bills is not ideal.Does this mean Gatsby can't do fancy, interactive sites?Fancy, interactive and immersive website experiences are driven by Javascript. Gatsby delivers all the Javascript that is required.There are good examples of Gatsby even being leveraged for e Commerce websites. There are virtually no limits on what the platform can be used for.What’s the downside of Gatsby?As a development agency, we’re hard pushed to say there are any big faults with Gatsby sites. But that’s actually the first downside. Unless you’re a developer, Gatsby isn’t something you can just pick up and install.Once upon a time this was true for WordPress sites but there are a number of great services that offer easy WordPress installation and customisation (like DigitalOcean’s one-click installation!).Needing development help is a bit of a downside, but keep in mind that once it’s up and running it doesn’t have an ongoing cost. The same cannot be said for WordPress or any other developer-less website solution. Services like Wix or Squarespace will set you back around $12 - $13 a month but these costs tend to increase quickly.The other downside is that you can’t leverage the massive ecosystem of WordPress plugins for a Gatsby site. There’s a plugin for just about everything and if you’re trying to do everything yourself, you’ll quickly find that most tutorials on the website are written for WordPress.It could be argued that this isn’t a true downside of Gatsby, but it’s worth mentioning. If you’re expecting to be able to do all the things your friend (the successful website owner) recommends, you won’t be able to do it yourself.Gatsby has its own array of plugins and extensions for just about everything, but they’re accessible through a one-click install system like WordPress.So what’s the bottom line?The bottom line is this. Gatsby will be a perfect fit for some businesses or online stores. These are the big benefits you’ll get: * Incredible speed * Better rankings from Google (because of the speed!) * No more worrying about being hacked * Free hosting * Use of your favourite CMS (you can keep using WordPress)What do you lose by using Gatsby? * WordPress plugin options (and the headache of updating them!) * The ability to make big changes yourselfWe would argue that the pros outweigh the cons here. If you’re considering using Gatsby and have more questions or are still unsure if it’s going to be the right fit, just drop us a line! We love hearing from you."
  },
  {
    "title": "How To Write An Effective Design Brief",
    "plaintext": "Writing an effective design brief is a skill that will save you time and money.Before you hire a designer to create your new logo, website or company branding you’ll want to give them some instructions on the kind of outcomes you want to see. That's where the design brief comes in.A design brief is simply a document where you list all the details your designer needs to know to do their job.That’s not to say it’s necessary for every job. If you’re hiring someone to build a cool looking logo that won’t feature in the middle of your brand or some banners to add to your website, a design brief would be overkill.In most cases it helps to give your designer as MUCH detail as possible. The more context you give, the more opportunity they have to align their work with your vision.If you’re just skimming the article looking for a decent template for writing a design brief then click here. This is a Google doc template that we use for writing design briefs. To start using the template just create a copy and start plugging away.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat does a design brief cover?A design brief covers anything that is important for designers to know.Imagine you're giving instructions to a tailor. You’d want them to understand things like what you’re going to do in the clothes, what kind of occasion the clothes are for, and when you need them to be finished.This is the rule for writing a design brief. If you think it’s important for the designer to know then add it into the brief.Whenever we’re working on a design project for a client, or our own projects we use the following categories to structure our design brief:01 - Project overview02 - Project & team background03 - Objectives04 - Target audience05 - Message and tone06 - Scope & deliverables07 - Timeframes08 - CommunicationAt first glance it looks like there’s some duplication in how we’ve structured this, so let’s briefly talk about what falls under each heading.01 - Project overviewThe project overview is a chance to introduce the big picture. Your overview should touch on a few things: * One sentence explaining the aim of the project * A brief explanation of the problem this job solves * What needs to be doneKeep in mind that design briefs are flexible and these are just suggestions. If your design brief is instructions for a logo you probably don’t need to write about the problem that’s being solved.Here’s an example of a project overview in a recent project brief our team wrote up:This project aims to help small businesses and marketing teams in gathering leads and segmenting their existing lists.The problem is that the tools that currently exist are overpriced and poorly designed. For small businesses, the ongoing monthly cost is not worth the return. For larger businesses, the styling and design would reflect poorly on their brand.To address this problem we require a new lead gathering application design.02 - Project backgroundIf there’s a background to tell, this is the time to do it. Tell the designer if this project has been alive for days, months, or years. Briefly explain anything that has happened in the past that might be valuable for the designer to understand.For example, if you’re redesigning a website because it doesn’t speak to your audience in the right way, or you know that most of your users visit on their phones rather than computers - include these details.Here’s an example from the briefing of our quiz application.Clean Commit are a web design and development company based in Canberra, Australia. They are planning to build a quiz styled application. While the company typically focus on building applications for their clients, this project will be internal.With extensive development skills, the team will expect the finished design to be prepared in a way that is easy for development to begin immediately.This is the first major internal application the team have built. The Clean Commit team will give extensive feedback on the application as it comes to life.The project may continue for several months as new features are identified.03 - Project ObjectivesProject objectives often seem like common sense, but they make a significant difference to the output of the design.There’s no need to overthink this section. Simply list out what the project is aiming to achieve.Here’s an example.The quiz application will aim to provide an affordable solution for small businesses and fill the hole that currently exists in the market.It can be this simple if you’re not trying to solve a complex problem.04 - Target AudienceApplications and websites are typically designed to speak to a particular group of people.For example, accounting software is designed to be used by professionals that understand spreadsheet style layouts, balance sheets and accounting frameworks. While children’s iPad games are designed with big buttons and easy controls.These examples are a bit extreme but they illustrate the fact that it’s helpful for your designer to know who they're designing for.A great way to visually build your user's profile is Hubspots’ persona tool. The tool asks you a series of short questions about your user. When you've answered all the questions, it will spit out a PDF with your user’s persona. This is the perfect material to pass on to your designer.05 - Message and ToneThe message and tone section should outline what image you what users to associate with your application or website.If you’re designing a new portfolio website showcasing your talents as a mortgage broker, you would want to use a professional, warm and personal tone. Your site would want to come off like a confident handshake.Where as someone designing a new eCommerce site selling high end shoes would want them message and tone to be much more sleek, sophisticated and minimal.The message and tone section is a good opportunity to list example designs that come close to your vision.06 - Scope & DeliverablesThis section is the most contract-like part of the design brief. This is where you want to list out all the outcomes (deliverables) of the project.Assuming you’re hiring a skilled professional, they don’t need you to list out how they should go about doing their job or the granular details. Just focus on the big ticket items; * Wireframes * Sketches * Mood boards * Website designs * Application designs * Style guides * Logos * Design systemsThese are all great examples of final products you expect to see from the designer. If you’re uncertain exactly what you expect to see at the end of the engagement your designer should be able to fill in some of the blanks.Here’s an example from our quiz application design brief:The branding should answer all the big questions of how the application will look and feel. This includes but is not limited to;Colour palletFonts and typographyPrimary components (buttons, panels, navigation) The overall goal is to build a style guide and the majority of components that will be referenced as the application is designed.These will be the final deliverables of the project; * Style guide (Specifically listing out all the H1s, H2s, H3s, H4s, H5s, and paragraph variations) * Colour pallet (including in the style guide)Logo (with several variations) * Sketch, Figma or raw vector files of primary components such as buttons, images, panels, navigation07 - TimeframesIf you’re on a schedule, let the designer know. The key thing to remember here is you need to be realistic about what can be achieved.Some designers are very fast, but if you’re expecting a whole website to come together over the weekend then you’re probably going to be disappointed.We’ve had the most success listing timeframes out in a simple table so there’s no confusion:08 - Communication and Project ManagementThe last bit of the puzzle is some guidelines for how you’ll keep the project running smoothly. If you’re working with a local developer they may be comfortable coming into your office for updates and communicating through email.In most cases this won’t work out and you’ll need to use some tools to keep everything running. At the very least consider using Slack for communication. If you’re new to Slack, we’ve got a great article on how to get the most out of it. Slack is an incredible, free messaging service that saves you from sending hundreds of emails.If you’re a bit more adventurous and aren’t afraid of new systems I’d also highly recommend signing up for a free account with Asana and building your task list there.You can invite your designer to both of these platforms to make things run much more smoothly.Design projects are more often successful when communication is flowing and both the designer and your team know what needs to be done.Wrapping it upWriting a solid design brief before you dive into your next design project will save you money and time. This is a guarantee.If you haven’t made your mind up about which designer to work with, sending your design brief around and asking for a quote is the perfect way to give designers everything they need to provide an accurate estimate.If you’re looking for a designer to make your next project a success, why not pick us? As you can gather from this article, we’re experts at executing effective projects and constantly looking for ways to help our clients through the process.💡We're specialists in building beautiful website and complex web applications. Reach out today!"
  },
  {
    "title": "Why Your Website MUST Be Secure in 2023",
    "plaintext": "Securing your websites with SSLSecure Sockets Layer (SSL) certificates are a must have in 2023. A few years ago you could get away without having one installed without too many real repercussions. These were the golden times for most beginners that just wanted to get a site working quickly without dealing with any “technical stuff”.Unfortunately for this crowd, that trend ended in 2017 when Google updated their policies around sites not running an SSL. You have probably seen the result of these policy changes. Unsecured sites throw up a big red error page reading something along the lines of “this site is unsecured and you may be in trouble if you proceed”.Even if this scary message page isn’t driving your users away, Google will heavily penalise your site if it’s not running an SSL. This is a very big issue. Websites need users, and the vast majority of users come from Google.Installing an SSL can be a bit intimidating for the uninitiated but there’s really no excuse for not having one in 2023.In this article we’re going to run through our approach to installing SSL certificates. We use a free service called Let’s Encrypt and a deployment tool called Laravel Forge (Forge for short). These tools rely on you having some understanding of how servers work and how to use the command line.If you’re not technical or don’t have a developer to help you through the following guide, reach out to use right now. We’ll get your site secured straight away.Before we get into the guide we’re going to explain a little about why SSLs are important. If you’re simply looking for the steps to installing your SSL, jump down to the instructions.Does a SSL certificate protect me from hackers?SSL certificates won’t stop hackers from targeting you or accessing your data. That’s a much more complex problem to solve. What they do is make it very difficult for “hackers” to intercept the data coming into and out of your website.The problem with running an unsecured website is if an attacker manages to intercept your website’s data they can theoretically see the personal details being sent back to the server. There’s a whole range of other nasty things an attacker can do with this data. The bottom line is, if your site isn’t secured with a certificate you’re inviting trouble.How can I tell if my site is secured?Easy - open your website and look at the URL bar. If your address starts with “https://” then you’re running a valid certificate. There will also be a little padlock next to the search bar.If your address doesn’t have an “s” at the end of the http, then you’re not secured and should take the steps to install a certificate immediately.Why don’t websites run SSL certificates by default?This all boils down to money. Secure sockets layer certificates require a trusted third party to act as the authenticator and sign digital certificates. Just a few years ago this process wasn’t cheap. Before SSLs became mainstream, running an authenticated and secured website was reserved for payment services and corporate information services.Attitudes to SSLs really only changed a few years ago when Let’s Encrypt was founded in April, 2016. The mission of this non-for profit project was to bring encryption to the web by offering hassle free encryption at no charge.Let’s Encrypt have been incredibly successful. SSL certificates are standard practice for modern web development. And with support from browser developers like Google and Mozilla, they’re on track to make encrypted connections the default use case for the entire web.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitLaravel Forge - the answer to renewing SSLsAt Clean Commit we manage the hosting for our clients. Since we’re making regular changes to the code base, it’s WAY quicker to manage the server ourselves. To make this job easier we use Forge.It’s worth noting that if your site is running on managed hosting like Bluehost or GoDaddy, then Forge won’t work for you. Without getting into the details, this solution is reserved for sites running on self managed hosting like Digital Ocean or Linode.Forge is an awesome deployment tool. It installs all the up-to-date services, facilitates easy continuous deployment and takes the hassle out of deploying websites. One Forge feature we love is its LetsEncrypt integration that automatically installs SSL certificates.No more setting reminders to reinstall certificates when they’re about to expire. This makes us (and our clients) very happy.Unless you need to manage multiple websites on different servers, then Forge is probably overkill and you’re better to install your SSL manually.Before you jump into installing the certificate, you’ll want to check if your site supports the ACME (automated certificate management environment) protocol. If your site is running on managed hosting like Bluehost or GoDaddy then you’re probably out of luck. You can check if your hosting makes the cut over here.Without the ACME protocol being supported the certificate won’t auto renew after 60 days. This ends up leaving you with a lot of work and running the risk of forgetting to secure your site.How to set up your LetsEncrypt SSLBefore you dive into this tutorial, there are a few pre-requisites:You’re comfortable using the command line You manage or own a HTTP website that is online and has port 80 open You’re running a server that is accessible through SSH to run commands as the root userUsing Certbot on your serverIn this guide we’ll be working on a server running Ubuntu 18.04 and will use Certbot to automatically renew our SSL certificate.To begin, log into your server via SSH. Make sure you’re logged in as a user that has root privileges. Once you’re logged in, install Certbot. Start by adding Certbot PPA to a list of repositories on the server.sudo apt-get updatesudo apt-get install software-properties-commonsudo add-apt-repository universesudo add-apt-repository ppa:certbot/certbotsudo apt-get updateNext, install Certbot with the following command.## If you're using Apachesudo apt-get install certbot python-certbot-apache## If you're using Nginxsudo apt-get install certbot python-certbot-nginxOnce Certbot is installed, set up your certificate:## If you're using Apachesudo certbot --apache## If you're using Nginxsudo certbot --nginxAt this point Certbot will prompt you to enter your email address. You’ll receive some details about your certificate status. You’ll also let Certbot know which domains you’d like it encrypt. From here Certbot takes care of the heavy lifting and will handle the automatic renews for you.If you’re running a different operating environment and want to give Certbot a try, head over to their website for further instructions.To install Certbot on other environments please check Certbot website for more information.My website hosting won’t let me install CertbotIf you can’t log into your server using SSH (i.e. you have a cpanel instead), chances are you won’t be able to install Certbot.Don’t stress - you will still typically have a few options. The first one is to ask your provider if they issue SSL certificates. Hosting providers like Bluehost and GoDaddy will secure your website for an extra charge.If you’re with a more boutique hosting company and they can’t do the SSL for you and don’t give you the option to do it yourself… then it’s time to get a new hosting provider.In our opinion, DigitalOcean and Linode are the two best virtual hosting providers. They’re cheap, fast and relatively easy to deal with.The only catch of these providers is knowing your way around the command line. DigitalOcean has a great one-click WordPress installation feature, but there are still a few tricks you need to know to make things go smoothly.If you’re interested in getting set up with one of these providers but aren’t confident playing around with the technical stuff, send us a message through our contact form. Our team of experienced developers will get you set up quickly for a super reasonable price."
  },
  {
    "title": "11 Things To Prepare For A Website or App Project",
    "plaintext": "Every application or website development project we run is a partnership.It's often hard to explain to new clients that we desperately want all our projects to be a success. Not because we're motivated to receive rave reviews, or have our clients refer us (although that's always nice!).It's because we're motivated by doing quality work.We take every step we can to ensure our projects are home runs and this guide is part of that equation.The following write up is a guide to getting prepared for a website project. To make sure things happen on time and nothing is missed along the way, we’ve prepared a list of “things” we (Clean Commit) need from you, the client.If you’ve stumbled across this article and you’re not currently a client, please feel free to use this as a guide for your own project.1. Images and videos to be used on the siteBefore we get into the design of the project, it’s important for you to send over the images and video you want included on the website.It’s no stress if you don’t have your images or video ready to roll early in the piece. In fact, it’s rare that our clients do.The only “gotcha” in this situation is if we design images in landscape and where you intended them to be portrait. This is easy to avoid, and we make sure to have this conversation early in the project!If you do have your images ready to go, make sure they’re as small as they can be without losing quality.The trick here is to make sure your images aren’t wider than 1920px and saved as jpg unless they have a transparent background.If image dimensions are too large when they’ve saved, the file sizes end up being quite large which can make your page load slower (this is bad news!). Similarly, if you’re saving the file using the wrong format, the file size may end up being a big old whopper.Finally, once you’ve saved your images it’s best practice to compress them. All our websites are built with image compression, but it’s a great habit to quickly drop your images into tinyjpg.com to make them as small as possible.Our goal is to give your users the best experience possible, which means making your site exceptionally fast… and that’s hard if you have a bunch of big images that need to download when someone visits your site.When you’ve got all your compressed images ready, drop them into a Google Drive or Dropbox folder and share the folder with us. Job done!Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit2. Website contentTypically, we’ll add lorem ipsum on all pages as a kind of placeholder if the project needs to move quickly but it’s always better to have actual content up front.When we say “content” or “copy” we’re referring to the words that will be displayed on your website or application.If you’re creating a website or application from scratch you will find our template super useful.3. Privacy PolicyIn some cases you don’t have to have a privacy policy but not having one limits what you’re legally allowed to do with your website or application, so it’s just a wise idea to use one.We recommend you work with a lawyer or legally trained professional to write a privacy policy. However, this is often not realistic. In the situation you’re bootstrapping your project, this privacy policy generator does a great job.4. Terms of useIf we’re working together to build an application then you’ll need to tell your users what they can and can’t do with your application. You don’t want users to do anything illegal or unbecoming with your platform, so it’s wise to write these conditions yourself. It’s fine to use a template like this one offered by Shopify.This is probably stating the obvious, but terms of use only really applies to something that gets used. Websites don’t typically fall into that category, so you don’t worry about working on this if you’re building a new website.5. Social media linksAdding social media links to your website is standard fare these days. It gives your readers a way to interact with you in different ways, keeping you connected to them.There are also some mild search engine optimisation benefits of adding links to your social media presences on your website.We typically ask our clients for their Facebook, Instagram and Twitter or Linkedin accounts, but if you’re a business that is really invested in social media and you have other accounts like Pinterest, YouTube, TikTok, or Snapchat, make sure you pass the links over early in the process so we can build them into the design.6. Google Tag Manager Installation SnippetIf you’re not familiar with Google Tag Manager (GTM) then get ready, because it’s worth knowing. GTM is the answer to having too many 3rd party scripts running concurrently on your website.Whenever you want to “integrate” your website with an external service like Facebook ads, Google Analytics, Pinterest remarketing, or any one of the other million applications available, you typically need to take a piece of their code and stick it on your website. This gives the 3rd party application a chance to send information from your site back to their site to trigger actions.Facebook ads are a great example. If you want to show Facebook ads to people who have visited your site, Facebook needs to know who has visited your site. So you install a small snippet of code on your site that tells Facebook what’s going on so it can do the rest of the work.The problem with this approach is that over time you may end up with a lot of additional code on your site which can slow it down and cause other unintended issues.This is where GTM comes in handy. It’s a single script that gets installed on your sites. Every other script is managed through the simple and intuitive GTM interface. So once the base script is installed you don’t need development help to manage your “tags” going forward!To get started with GTM, head over to their sign up page and go through all the steps to create an account. During the process you’ll be presented with a script to install GTM on your site. Send that over to us and we’ll do the rest.7. Customer Relationship Management or Emailing Service Provider formsIf your website is aiming to get readers or potential customers to give you their email addresses, you’ll need somewhere to store them.This is the role of Customer Relationship Management (CRM) and Email Service Provider (ESP) platforms. Some common CRMs are MailChimp, ActiveCampaign, ConvertKit and Keap (formerly Infusionsoft).If you’re planning on using one of these platforms to manage your “email list” then we can help. We typically design opt-in forms into the website design and then connect those forms up to your CRM. To make this happen we usually just need the HTML code that is used to embed your opt-in form on a website. Sometimes, however, we’ll need access to your system to retrieve API details.8. Stripe and PayPal permissionsTo collect money from users for goods or services your website will need help from a “payment gateway”. Stripe and PayPal really own the space here. These services charge you a transaction fee for user of their payment processing power. All this means is that they’ll facilitate the payment from your customer and send you the money, but they’ll take a small cut.Connecting Stripe and PayPal requires us to integrate your website and these services. To make this happen, you’ll need to have an established account and invite us as new users (with restricted permissions) so we can connect all the right things.The process here is different for both platforms. You can find a guide on how to do this for Stripe on their website, and over here for PayPal.If your website isn’t selling anything, you can skip this step.9. LogoIf your business already has a logo, that’s great! You can send it straight over to us and we’ll work it into the design.The ideal format for a logo is .svg. This is a vector format and allows images to be sized up or down without losing quality. If you have this file format laying around, we can also work with .png.10. Branding guidelinesIt’s not uncommon for our clients to have existing style or branding guides that define a colour pallet, fonts and standard elements. These documents are often created during the logo design process.If you have one of these, email it over to us. If not, no stress. We’ll work together to create one during the design process.11. Domain credentialsDomain credentials essentially means the user name and password you used to log into the website where you purchased your domain.Having these details early in the process allows us to set up a testing environment with your domain name. This isn’t super necessary but it does make for a nice touch.We need these details to make your website live, so they are important to have!Is that it?There are other details we need along the way, but they are often contextual to the project such as reviewing a feature, checking the design to see that you’re happy with it’s look and feel, or showing us how to replicate a bug.Besides that, this list is a great starting point and if you’re able to round up all the details then we’re on the right track to a successful project!"
  },
  {
    "title": "Case Study: Clean Commit",
    "plaintext": "Every so often there comes a time when the team here at Clean Commit rethink our approach towards our services. Over many projects, we slowly test what's most efficient to do and adopt new standards. Usually, it's a technical change or a new framework introduction that improves our development experience. But there are rare moments when it’s a significant change that allows us to deliver much better results than we have in the past.Our first significant shift was the way we build, deploy, and maintain WordPress projects. We moved from a wide variety of starter templates to Roots stack.This time the paradigm shift was the addition of a static website to our stack. In 2020 alone we completed 8 projects using Gatsby and learned a lot during that time. We strongly believe JAMStack coupled with a headless CMS is the best solution to most businesses' problems while providing unprecedented speed of development and blazing performance for clients.We wanted to use the experiences we'd gained to finally redesign our own website with speed and SEO in mind.We wanted to start 2021 strong.And we wanted to do it with our website.First website for Clean Commit and it's problemsThe first site we made for Clean Commit was done quite hastily. We just wanted something to show to our potential clients, but this time around we had more time to perfect it.Our original website had some obvious flaws.The biggest one? Presentation of our past projects.The most annoying one? Outdated stack.Last time we decided to use React Static which we never ended up using again on any client work. While the page load speed was fast, it was a hard platform to update and add new content.Our goals for redesigningIn terms of the design we had a couple goals: * Improve the portfolio presentation * Improve our services pages * Grow our careers pagesAbove that, we felt like we needed changes implemented on our home page. It said very little about what we do and how we do it. With these goals in mind, we set out on a designing adventure our vision - bigger, bolder, and devilishly fast.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitREALLY showcasing our portfolioPortfolio pages were the biggest issue for me personally. Take a look at this screenshot taken from our old website presenting the Dionysus project.Not too good, right? There's very little content hierarchy. At first glance it's hard to say what Clean Commit did as an agency in this project. The small image suggests we're not too proud of the project, and there's nothing that grabs your attention.The solution? We decided to blow up the image making it a central part of the page. Additionally, we've added large headers to focus the reader's attention and inform about the most important points of the project.The next problem was the lack of flexibility for our projects. Sometimes we want to add more content or show different images on the website. We decided to build portfolio pages in a modular way, where each section is a separate component. Now the editors can compose pages to their liking adding more content or images with ease.Redesigning the services pageService pages are a hard subject in every company. The offering tends to change a bit. Sometimes you want to add more information or reorganize it to give clients a better idea of what they can get.We knew these problems too well. What did we do? A modular approach of course! Instead of a long block of text, now we can extend content by adding new modules or updating existing ones. Editors can use the sections to order content however they see fit.Redesigning the careers pagePreviously careers page was only a list of currently open positions. The single listing page was quite simple with a singular block of content. Instead of a form, we asked all candidates to send us an email, which was inefficient and hard to manage.The new design separates listings content into the position's description and it's requirements. We've also added a form that helps us manage applications based on the position there were send for.The new careers page features a better distinction on currently open positions. We also highlighted the benefits we offer to our applicants and tell a bit more about our company.How did we choose our stack?Selecting our stack was easy. Our main site generation framework is Gatsby. This decision was a no-brainer. It's the most battle-tested static framework at Clean Commit, with which we have a lot of experience. We used our open-sourced Gatsby starter called Henlo to speed up development and configuration.Which CMS did we use?Our previous CMS was a Git-based Netlify CMS, it worked great so we decided to keep it with a couple of improvements. Instead of using single-file configuration, we switched to Manual Initialization. It makes configuration of collections and pages a breeze using JavaScript objects instead of hard to debug Yaml files. The only downside of git-based CMS is longer build times (we average ~2.5 minutes). But, since we don't have a lot of pages on our website and we won't update it a lot it's not much of a problem.Additionally, quick changes can be made within our code editors or my favorite Markdown editor - iA Writer - and pushed directly to production. Flat file solution will also keep our data in-sync across all developers without worrying about database migration.How did we ensure the best performance?We wanted our website to be fast. And when I say fast I mean absurdly fast. No matter where you are accessing the website from and what network you're using.To achieve such speeds we had to optimize the code base and deploy our website on a great performing CDN network.When it comes to codebase optimization we used our usual solutions.With the gatsby-image package we made sure our images will be optimized and load correctly depending on the device you're using. To save time we opt-in for different loading strategies depending on where the image is used.We optimized GraphQL queries to make sure we're not loading redundant content for any page. This would result in bloated JSON files that are loaded on each page. Additionally, we optimized the strategy for loading CSS files and fonts efficiently by enabling prefetching for the most important assets. On top of that, we've enabled brotli compression to save bandwidth however we can.These small improvements made a huge difference on top of a great code.When it comes to hosting and deployment we went with Netlify, our go-to service for our static projects. To take full advantage of Netlify's CDN we needed to opt-in for their DNS service or find an alternative solution that supports ALIAS or ANAME records.Since we use the cleancommit.io domain for a couple of other projects we wanted to use a more flexible DNS service. After some digging and testing, we bundled Netlify with Cloudflare DNS. Thanks to Cloudflare's CNAME flattening we took full advantage of Netlify's CDN while having a centralized solution for all of our domains.After all these changes and tweaks we were able to significantly improve our website performance, achieving an almost perfect score in Lighthouse :)Would you like to have a faster website? Reach out to us, we can schedule a call and talk through your project!"
  },
  {
    "title": "Shopify vs WooCommerce",
    "plaintext": "Covid pandemic profoundly changed retail. Entrepreneurs had to rely on online channels to keep their companies afloat. In lockdown affected areas, companies had to shift focus from physical locations to e-commerce platforms. In 2020 we worked closely with our European clients to help them execute this change.We looked into a wide array of different solutions trying to come up with the most cost effective solutions that would meet the demands of businesses we work with. We took a look at platforms like BigCommerce, Prestashop, OpenCart, Shopware, and others.We found that there are 2 major solutions on the market that our clients wanted to use - WooCommerce (a WordPress plugin) and Shopify. These 2 solutions are, in many ways, total opposites of each other.Learn which one is the right one for your business.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWooCommerce vs Shopify - things to considerThe choice of different e-commerce solutions is so wide because there are different use cases for businesses in that space.Choosing an e-commerce solution to fuel your business has long-lasting consequences that have to be well-thought-out.There's a lot of things to consider when selecting an e-commerce platform: * Retail, Wholesale, or both - What kind of sales you want to do B2C, B2B, or both? * Payments processing - Are your customers fond of any local payment systems? * Integration with physical locations - Do you want to integrate your system with the in-store sales system? * Existing solutions - Do you already have a website that will be extended with a store? * Implementation budget - What's your budget for implementing the store? - What's your budget for ongoing expenses?Retail and a wholesale e-commerceBoth Shopify and WooCommerce can offer retail and wholesale sales. Unfortunately, if you decide to go with Shopify, the only option to enable wholesale sales on Shopify is joining Shopify Plus Plan (2000 USD/month at the time of the writing).With WooCommerce you can implement B2B sales by adding a plugin. WooCommerce plugins such as Wholesale for WooCommerce enable role-based pricing, registration form for B2B clients, and much more. Comparing to Shopify's plan, the plugin approach significantly lowers monthly costs for smaller wholesale businesses.Payments processingReceiving payments from clients is a crucial part of selling online. The world is full of payment processing platforms that differ from region to region. Integrating local payment processors might be crucial for your business. The easier it is for the client to check out the higher conversion you'll see.Both WooCommerce and Shopify allows you to choose from a range of different 3rd party processing platforms. Unfortunately, Shopify recently changed policies regarding additional payment methods which might greatly influence your decision on which platform to use.On the other hand, WooCommerce offers additional payment processing support by 3rd party plugins. It comes with many caveats. Some plugins can be outdated and not support the latest legal requirements for online payments. For WooCommerce we mostly use Stripe as our payment processor which enables us to add payment methods offered on the platform.Point of Sale integrationFor businesses that have physical locations, it's worth thinking about integrating their point of sale system with your e-commerce platform.Shopify has a superior solution when it comes to POS. Shopify POS costs 89 USD per month for each location on top of your Shopify Plan. You can also use Shopify POS Lite which is free to use but has limited features.On WooCommerce we've implemented Oliver POS. It's the only POS system that's worth considering for implementation with WooCommerce stores. The costs are a bit lower at starting 19 USD per month. Oliver POS also offers free plans for small stores, if you'd like to test that solution.Existing online presenceHaving existing online channels doesn't really influence your store. Creating a custom e-commerce solution often requires custom implementation. Companies that use WordPress as their CMS tend to lean towards implementing WooCommerce within their current setup. Depending on the quality of the implementation of the current theme that may not be possible.Integration of your current website with an e-commerce solution will probably generate more costs than creating a new separate software solution.Existing e-commerce solutionWhen clients ask us to update their e-commerce stores, the first thing we do is to look into their existing platform. Some stores use out-of-date systems that are no longer supported, which poses a significant security issue. Others tend to use platforms that don't support the needs of their business.Depending on your case it might be possible that the most cost-efficient solution is creating a new store. For example, we recently moved a Shopify store over to WooCommerce to enable B2B sales. Given 2000 USD/month savings on Shopify Plus, additional costs for WooCommerce will pay for themselves within 6-months of store operations!Ongoing upkeep & maintenanceMost people tend to forget about monthly maintenance and upkeep costs, which are crucial to every e-commerce project. With Shopify, your basic cost is the cost of a Shopify subscription (9 USD for Shopify Lite, 29 USD for Shopify, and 2000 USD for Shopify Plus) and additional costs for other services like POS.Because Shopify is a SaaS (software-as-a-service) solution the hosting cost is included. Currently, the large problem for Shopify is making changes to custom themes. There's no good way to make changes to Shopify themes and deliver them to clients, which will cause higher costs for maintenance. Fortunately, we're working hard to solve this issue. You can read more about it in Developer's take on Shopify and WooCommerce section of this article.With WooCommerce you need to have your own server, which cost varies depending on the traffic you're expecting. Fortunately, WooCommerce has a lot of tools making deployment and changes much cheaper. But the upkeep of your server might be more expensive since someone needs to keep your software updated and resolve issues that can come up later in the life-cycle of your store.Generally, the costs of running WooCommerce and Shopify are comparable for most cases. It all comes down to what you need as a business.Developer's take on Shopify and WooCommerceBoth platforms have their issues when it comes to development. But with every project, we come up with new ways to speed up the development and deliver better value to our clients and their customers.Shopify developmentShopify doesn't currently have an opinionated framework that can be used to build custom solutions. Slate was discontinued in January of 2020, and there's a bit of a workaround to implement custom themes for Shopify right now. The Shopify IDE isn't an efficient tool for development. Implementing Continous Deployment and version control is tricky.Our solution to this problem is treating Shopify as a headless CMS for e-commerce. We're creating Storefronts with Next.js or Gatsby.js frameworks that deliver unprecedented performance and security to your store. We treat Shopify as a backend platform to store your orders, products, and client data.Your store is set up as a frontend application that uses Shopify's API as a datapoint to render your website. This solution allows us to optimize performance and allow clients to install your store as an application on phones and tablets.With the better performance, the conversion rates also go up (less waiting means more buying!). The downside of this approach is that not all plugins will work correctly with your website. From a technical perspective, it's actually good. Every plugin on Shopify tends to load assets in a suboptimal way. This forces your customers to load more data when accessing your store, degrading the overall experience.The other benefit is that you can use a 9 USD plan for Shopify instead of a $29 plan.WooCommerce developmentWooCommerce has been around since 2011, and WordPress has been around since 2003. That means there's a lot of technical debt in the codebase. This makes developing WooCommerce somewhat problematic. Some parts of WooCommerce could really use an overhaul.To tackle issues with WooCommerce development, we've developed our own starter theme that helps us with performance optimizations.The problem with plugins is the same as in Shopify. Each plugin loads additional assets into your theme, lowering the performance of the store. Usually, there are some plugins that we need to use to deliver the project.In general WooCommerce stores are slower and less secure than our Shopify solution.SummaryE-commerce is an extremely competitive space and will become even more competitive in the future. There's a strong trend for creating headless solutions. New frameworks allow developers to bring unprecedented performance and security. This holds a direct impact on the bottom line. From my perspective, it's worth investing in static today. Higher performance will give you an edge over your competition.Unfortunately, due to required features or budget limitations, it's not always possible. That's why it's crucial to think about your needs and expectations for the e-commerce platform.The general rule-of-thumb would be: * Shopify will be a better solution for smaller businesses providing better performance, easier maintenance, and lower overhead costs. * WooCommerce will be a better choice if you need custom features that require a fully customizable backend.It's always worth comparing the total costs of your solution, calculated for your specific needs. If you'd like to talk about your e-commerce solution, reach out to us - let's talk!"
  },
  {
    "title": "How to measure website performance?",
    "plaintext": "At Clean Commit we are dedicated to bringing our clients the highest possible performance and quality of code we ship. With businesses aggressively moving into the online space performance of websites is getting more important as well. This article will show you the best tools to measure your website performance and detect potential problems.Why does website performance matter?Your website performance affects basically everything from customer experience to the marketing budget efficiency. It has a fundamental influence on your bottom line and is too often overlooked. Having the world's best-performing website won't suddenly guarantee an influx of clients. Content strategy and sales funnels are still crucial to success. Having an unoptimized website that loads slowly will set you at a disadvantage from the start.Faster websites have higher conversion ratesWhen a visitor purchases your service or product, subscribes to a mailing list, or reaches out to you, you just made a conversion that improves your business metrics.According to skilled.co pages that loaded in: * 2.4 seconds had a 1.9% conversion rate * At 3.3 seconds, the conversion rate was 1.5% * At 4.2 seconds, the conversion rate was less than 1% * At 5.7+ seconds, the conversion rate was 0.6%These seemingly minor increases can compound substantial lost opportunities. Let's assume your company brings 220 000 AUD from online conversions every year. Improving your website conversions by 20%, could result in a 44 000 AUD increase in revenues. That's significantly less than the investment required to optimize your website.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitGreat website performance improves SEO and brand awarenessMany factors come into play to determine search engine rankings; one of the newer ranking factors is page performance. Google drops slow pages lower in the rankings. Improving website performance will improve your visibility in organic searches, therefore, increasing inbound traffic.The easier your company is to be found the better for its brand awareness. Producing content is difficult as it is. Having that effort thwarted by a slow website is something no businesses can afford.Mobile users will appreciate better performing websitesMost users expect your website to load in under 2 seconds. Unoptimized websites tend to load more assets than required. Bandwidth is not unlimited and free for most mobile users around the world. Loading large images or a large collection of icons is not a good practice. When clients try to access your website on the go, using a 3G connection or dodgy WiFi can be crucial to serving information quickly.Performance directly affects user experience, conversion rates and touches every point of your visitors' experience. Nobody likes waiting. An outdated website that's slow to load will also send a wrong first impression to your potential clients. If your website isn't fast and reliable how can your service or product be?A faster website allows people to reach you swiftly, get the information they need quickly, improves your efficiency, and makes your brand higher quality.Tools to measure your website's performanceUnderstanding that performance matters is one thing, measuring it can cause some headaches as well. There's a huge amount of tools that allow you to measure your website reliably, but there are some caveats.Location and measuring the performance of websitesThere's one problem with measuring performance reliably - the location of your server and the test server. Most of the time your website will have a geographically limited target audience. If you're running a services business based in Sydney or Melbourne it's safe to assume that your potential clients won't be located in Barcelona or Berlin.That's why it's important to measure the performance of your website relative to your client's location. It doesn't really matter that your site is fast when accessed from Europe if your target audience is not there.PageSpeed InsightsThe most common tool that is used is Google's PageSpeed Insights it tests your website on both mobile and desktop.The problem with this tool is the location of servers. It's impossible to check where your site is being tested from. It seems that page speed insights use servers located in the US. This will cause your scores to be significantly lower than when tested locally. It's a good place to start with your first test.Chrome build-in Lighthouse toolPageSpeed is based on the Lighthouse engine, which is also available in every chromium-based browser (Chrome, Edge, Opera, and more). This uses your local network and computer to test the speed of the website.To access this tool you need to open Developer Tools. All you have to do is click Command+Option+I on Mac (F12 or Control+Shift+I on Windows) and navigate to the Lighthouse tab as shown in the image.Then all you need to do is click the \"Generate Report\" button to start running an audit. The lighthouse shows more than just performance. It also helps with accessibility, best practices, and SEO scores to help you solve other issues on your website.In-browser Lighthouse is what we use daily in our internal QA processes, it helps us to quickly validate builds and test for ongoing issues.GTmetrix - best tool for testing different locationsLighthouse still has the same issue, we can't test the website from a different location than our present one. That's where GTmetrix comes in.By default, GTmetrix tests performed using a server located in Vancouver. All you need to do is sign up for a free account to have a wider selection of servers and network speed presets to choose from.This way you can test your websites from servers closer to your users receiving a more real-life result.Experte Page Speed Tool - when testing multiple pagesExperte Page Speed Tool is a great tool when you want to test multiple pages instead of singular pages. It will help you found the most problematic pages on your website quickly.The biggest reason to use this tool? Finding issues on large websites with multiple templates is sometimes difficult. Running each query by hand is problematic. With a batch speed measuring tool, you can find the most problematic pages on your website and focus your efforts there.Unfortunately, you can't select the server location for your test, but you can measure problematic pages using other tools. On the upside - there's no limit on how many pages you can test this way!Test your website performance under load with Loader.ioThis tool requires some experience with servers to use. Loader.io allows you to send more traffic to your server testing the performance of the website under load. If your business can expect more traffic in a short period, it's crucial to test for that occasion.With the free account, you need to upload a file to your server to verify that you own it. With paid accounts, it's also possible to verify the ownership using a DNS setting.Loader allows us to send traffic to the server measuring response times that your visitors would experience in case of higher traffic. This stress test can show you problems with your infrastructure and better show the results of implemented practices to optimize performance.This test is crucial if you expect spikes in traffic, or see the potential for growing traffic in the upcoming months. The test I run on one of our staging servers shows issues after the traffic spiked.Website performance is crucial to your success and it's important to measure it.I hope I gave you some ideas on which tools to use to measure your website's performance. As I pointed out, website performance is extremely important to monitor and, later, to improve.The tools I listed above help us to find issues with websites every day here at Clean Commit. If you'd like us to take a look at your website and help navigate these issues, reach out and we'll set up a call to go through your site."
  },
  {
    "title": "How can UX Design help your blog?",
    "plaintext": "If your website doesn’t have a blog, your business is ignoring a huge opportunity. Gone are the days where just having a website would get you noticed. There are 2 BILLION websites.Let that sink in for a second. That’s a website for every fourth person on the planet…Chances are there are tens, hundreds, even thousands of websites advertising businesses similar to yours. The level of competition is hard to conceptualise.Everyone is trying to get noticed, and if your content is good enough in Google’s eyes, then this is completely achievable even for small businesses. So it’s no surprise that just about every serious website is posting regular content.Blog articles are a great vehicle for attracting new audiences to our website and building a brand identity. This allows us to translate readers into potential customers.A report by Hubspot shows that running a company blog translates into a 55% increase in website visits. These visitors are often the lifeblood of a business. They become email subscribers, purchasers, and clients - ultimately contributing to the bottom line.But what if our blog does not generate leads? What if you’re getting traffic with a super high bounce rate? Or what if your readers are sticking around and never turning into customers?Unfortunately the answer to these questions is not clear-cut. Every website is unique and the spectrum of issues our modest team has seen is… large.There is one constant that we’ve seen improve the money-making performance of every blog we’ve worked on; user experience.The better the user experience, the greater the chance the content will be consumed by the visitor, which moves them closer to achieving the goal of the website.In this article, I will describe how taking care of good UI/UX principles will help your readers have a better experience on your blog, and ultimately improve the likelihood of them coming back.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit1. TypographySounds innocent, doesn't it? Well, it isn’t. A blog is mostly text so properly adjusted font is a key way to keep readers' attention for longer. After all, no one will read our wonderful post if the letters are so small that readers will have to squint their eyes. Or if the line spacing is so small that the lines of the text will blend together and reading the text will induce a headache.Let's not exaggerate the other way too. We should make sure that our text is readable and accessible for all users.Adjust size, contrast, line spacing, and weight. The easier it will be for the person on the other side of the screen to read the article, the greater the chance that it will come to the end and (hopefully!) become familiar with our offer.2. Content widthDid you know that people prefer shorter lines of text when they read text online?The digital world dominated by social media has accustomed us to high dynamics and thus we have become more impatient. Consequently - by using a narrower width of the text, we force the reader to jump between lines more often, which makes the text easier to read.We don't have to refer to the internet world anyway. Newspapers also benefit from this practice. We rarely notice situations where the text line is the full width of the page. The shorter lines of text just seem more organized and easier to read.3. AccessibilityIt’s difficult to describe in a few sentences how important it is to make our website accessible to everyone.In Australia, 4.4 million people (about 1/6 of the population) have some form of disability. It’s therefore very important and even necessary to achieve proper accessibility.This not only has a positive effect on the reception of our blog, but also on brand identity. After all, we do not want people with e.g. visual impairments to be unable to read anything on our website.What can you do? There are a lot of things to be aware of, but there are some improvements that can be implemented very quickly and easily. * Text contrast - make sure that the contrast ratio is at least 4.5:1 (level AA), and if the text is from 14px to 18px this ratio changes to 3:1. You can use this handy tool to check. * Describe your photos - the purpose of describing a photo is to be as informative as possible. Try to ensure that the description of the photo best reflects what is on it.Bad example: a cup of coffeeGood Example: a man in a suit holds a cup of coffeeMake sure that the photos are not crucial to understanding the text, but only to complement it. * Use white space - sounds mysterious but it's basically very easy. Let's try to keep our headers and other elements clearly separated and grouped.Here's a great article with more about accessibility in design.4. ResponsivenessIf you’ve had any contact with UX design, you would have come across responsiveness at one point or another.It is not surprising, after all, ensuring that our blog is displayed correctly on all devices is directly related to how many users it will attract. According to StatCounter, the internet is dominated by mobile users (55.55%), followed by desktop users (41.61%).You should also bear in mind that these devices have different resolutions. Our blog may look completely different on a 13-inch laptop display and a 27-inch Mac, even though both of these devices are in the same category (desktop).A plugin called Window Resizer for our browser can help you check your site’s responsiveness. It allows you to check the appearance of websites on the most popular resolutions. Once you find an issue, squash it as quickly as possible to keep your readers happy.5. Page loading speedWe’ve got no time to wait for things to load. We want everything fast, and we want it now.Waiting for someone in the line ahead of you at the supermarket is boring. You feel like you’re wasting your time. So why would you ever replicate that experience on your website?If your users click something on your site, they expect an immediate response. A blog that takes too long to load is going to make people feel like they’re wasting their time, and they will leave.Jakob Nielsen - one of the most famous specialists in the field of UX stated that the reaction time of the website to our action should not exceed one second. The higher this value is, the more likely the visitor will leave the site immediately. In most cases, the user will leave our website if it takes longer than 10 seconds to load.Realistically, if your site takes more than 4 or 5 seconds to load, you’re going to lose a lot of people. They won’t just leave, they’ll associate your business with a website that doesn’t work properly.6. Remember the goal of your blogThe key to good UX Design is to make the platform useful for the readers, while achieving goals for the business.There’s a ton of different ways to monetize traffic to your website; showing them paid advertising, getting them to purchase affiliated products, selling them subscriptions, or getting them to reach out to you directly to purchase a service, just to name a few.Whatever your approach, you need to make sure your readers have easy access to the call to action or money making resource regardless of where they are on the page. If they can’t find the call to action, it’s effectively useless.It is a common practice to place a call to action at the bottom of an article so the reader is not left \"on their own'' after reading the text.You should also consider putting your call to action in a more accessible place, as only 20% of users read the article to the end. Adding something to a sticky-header can be an effective move if it makes sense. Another good tactic, especially for longer blog articles is repeating the call to action in several places.Keep in mind that the average visitor to the blog only reads the first 25% of the article (sometimes not even that much).7. UX is not only about designA website with great usability must also present itself with excellent content. After all, that's what it's all about. The content you write should be: * Clear (write understandable, use the language of your audience) * Concise (the text must be clear, without empty sentences) * Useful (give users useful information and value) * Consistent (keep the same style and terminology)Nothing will attract the person to revisit your website more than getting real value from your articles. Throw quick load times, beautiful typography and an easy reading experience into the mix and you’re well on your way to establishing a business-growing website.Wrap upDesigning, developing and running a blog is by no means easy. It often feels like a never-ending job. Here at Clean Commit our team has sunk hundreds of hours into our blog and it’s still in its infancy.It’s a long and time-consuming process, but it’s also one of the most powerful digital strategies for launching your business into hyperspace.Our advice is ‘stick at it’ and use some of the tips in this article to get you UX tuned up as your next step in the journey.P.S. If you're a designer and hunting for jobs you can find UX designer vacancies at Jooble."
  },
  {
    "title": "Clean Commit Wins Canberra’s Top Software Developer Award on Clutch",
    "plaintext": "Last year was a rollercoaster ride for everyone. The COVID-19 pandemic has really changed the development landscape and we’re glad that we successfully made it through. As a small team of developers, we aim to raise the standard in terms of website and app development.We love doing good work; it’s our simple yet genuine mantra that drives us to deliver excellent results. The Clean Commit team values client feedback above all; we love hearing from our clients because that helps us create beautiful projects.Having said that, we are excited to announce that we’ve been chosen by Clutch as Canberra’s leading company in the software development scene. If you’re not aware, Clutch is a data-driven review platform that ranks and recognizes the best companies in the IT, marketing, and business services industries.“We're stoked to be receiving early recognition of the software, application, and web work we've been doing around Australia and the globe!” — WK, Clean Commit Technical DirectorWe celebrate another milestone for our small team. We are thankful for everyone who has made this possible, especially our clients and team members.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitSpeaking of clients, without their excellent reviews, this Clutch award wouldn’t be possible. We appreciate our loving, trusting, and supportive clients who continue to open more doors for us. Their reviews on our Clutch profile motivate us to work even harder and aim even higher.Here are some of the most memorable quotes from our clients’ Clutch reviews:“I’d say their responsiveness, flexibility, and reasonable attitude were the most impressive. It was a new website design, so we weren’t always sure of what we wanted, which resulted in quite a bit of back-and-forth. There were things that we thought we’d wanted a certain way but would then request to change back or go in a different direction.” — George Bonito Director CEO, SEMPlicity Cybersecurity Consulting Firm“One of the reasons why I love working with Tim (Owner) is because he cares. He’s responsive and honest — if they say they’re going to do something, they’ll often go above and beyond to deliver. I really appreciate that level of integrity.” — CEO, AngelsTeachWant to work with us? Contact us and let’s build something together!"
  },
  {
    "title": "7 Most Common Website Performance Mistakes",
    "plaintext": "For the past couple of week's, we've been prioritizing work on our client's website performance. When updating old websites, we often find a lot of performance issues. Low website performance costs money by lowering your conversion rates, damaging your brand, and directly impacts your rankings in Google.I came up with a list of the most common mistakes that we encountered on various websites: 1. Poor image optimization 2. Fonts causing performance issues 3. Overuse of third-party party scripts and widgets 4. Disabled server compression 5. Lack of server cache 6. Outdated or underpowered server 7. Unoptimized codeImage optimization can hurt your website badlyOne of the biggest mistakes people tend to make is loading unnecessarily large images onto your website. All images for the web should be optimized and, ideally, have exact dimensions as they are displayed. You can use tools like PageSpeed Insights or GTmetrix to efficiently measure website's performance. These tools will help you find problematic images on your website.Optimizing images can be done in various ways. WordPress supports image sizes. This feature allows you to select a version of the image that's used in the template. You can select image sizes both in the WYSIWYG editor and code templates. You can use the add_image_size() function, to create additional image sizes in WordPress. The other option is to use a plugin like Easy Image Sizes. It's important to remember that you need to reload images to force WordPress to create new versions of existing images. There's a great plugin for that called - Regenerate Thumbnails.If your website is using a website builder or is HTML-based without support for resizing images you need to optimize images yourself.Optimizing images before upload for better site performanceThe problem we often encounter is that images are unoptimized before being uploaded to WordPress or other CMS.Usually, you can leave that to an optimization plugin or script. We had issues with WordPress for optimizing images wider or higher than 10.000px (editorial images). That's why it's always good to preoptimize images before upload. 2500px width or height is the best size, in my opinion, rarely do you need wider/higher images than that.We've found image optimisation is usually easier on WordPress and Gatsby than other platforms. If you're unsure what CMS your website is running, you can check out this article we wrote on how to tell what platform a website is built on.If you need much wider images it's worth cropping them as well. For optimizing images before uploading my go-to app is Pixelmator Pro for batch optimization I tend to use ImageOptin, both of these apps are exclusive to macOS. If you're using Windows or Linux check alternatives to ImageOptin. You can substitute Pixelmator with most image editors such as Lightroom or GIMP.Further image optimization to improve performanceWhen using a traditional CMS like WordPress you should consider using a plugin for image optimization. WordPress doesn't natively support the .webp format for images. This new format provides smaller file sizes without compromising the quality of the image. To optimize images on WordPress you can use a plugin like ShortPixel. It will reduce image sizes and provide a .webp versions of images for newest browsers (check compatibility for .webp format).The other thing to consider doing is lazy loading images. The lazy load will delay fetching the image until it's visible by the user. WordPress 5.5 and up supports lazy loading natively there's also plugins that can enable that feature for older WordPress versions.Optimizing images - key takeaways * Make sure your website uses properly sized images in the content * Optimize and crop images before uploading * Optimize images on the server when possible.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFonts can cause issues with website performanceUsing too many fonts or font variants or even the way you load fonts may impact your website performance. On one website, a specific font caused rendering issues with carousels (dropped frames and choppy UX).Using font hosting services actually has an impact too. Services such as Typekit or Google Fonts make a call to a third party to retrieve that font. There are some cases when adding a font will cause a couple of additional connections to verify the license. This can impact your website's performance.Optimizing fonts for website performanceThere are some ways you can optimize the font loading speed. It's best to serve fonts from your own server using WOFF2 format to load the smallest size possible.If you can't serve fonts locally there is still a lot you can do. First look at how many fonts and weights are loaded. Loading more than 4 weights (aim for 2-3) and 2 fonts are usually unnecessary.To check how many fonts are loaded use Developer's Tools in your browser and check the Sources tab to show all files that are loaded.https://fonts.googleapis.com/css?family=Abril+Fatface|Source+Code+Pro|Source+Sans+Pro:300,400,700,900&display=swap&subset=latin-extIf using Google Fonts or other font services you can check out the link for implementation. The above link shows that we're probably using too many weights and there's room to reduce the load.Preloading fonts & using font-display:swapOne more thing that you need to keep in mind is font preloading and using swap property. Why it's important? Your website's rendering won't be blocked by loading fonts.Browser waits until the font is required, before loading it. With preloading, you're forcing the browser to load the most important fonts immediately. Therefore this should be used only for required assets, not for all (if you're using multiple fonts on different pages). To preload fonts, you need to add link tags to the head of your page.<link  rel=\"preload\"  href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\"  as=\"style\"/><link  rel=\"stylesheet\"  href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\"/>The example above shows how to preload Roboto font from Google Fonts. When preloading local fonts you need to preload them as font rather than style.With the newest change to google's algorithm, it's recommended to use the font-display descriptor with swap value. This prevents the browser from not displaying content until the font is loading. Users will see content earlier, but it can be in a fallback font. Google Fonts adds display swap via the URL param &display=swap. In the case of self-hosted fonts, all you need to do is add font-display: swap; to the CSS definition of the font.@font-face {  font-family: 'Abril Fatface';  font-style: normal;  font-weight: 400;  font-display: swap;  ...;}To optimize the fonts further it's worth considering using system fonts instead. These fonts are always available for visitors and require no additional download. Many large websites like Facebook Github or Instagram actually use system fonts. The downside is the lack of personalization and missing brand typography. That's why it's a difficult choice to make and not often seen.Fonts optimization key takeaways * Load necessary fonts only in weights that are used * When feasible, load fonts from your server * Use woff2 format to minimize the size of font files * Preload most important fonts, and use font-display: swap to avoid blocking text rendering * Consider using system fonts instead of custom fonts.3rd party scripts significantly lower the performance of the websiteEvery 3rd party widget comes with a huge cost to the overall performance of the website. 3rd party scripts are all scripts that are loaded outside of your domain.Third party scripts include a wide array of different solutions such as: * Enabling web analytics (e.g. Google Analytics, Facebook Pixel) * Adding chat widgets (e.g. Facebook) * Embedding videos (e.g. YouTube, Vimeo) * Adding social sharing buttons * Embedding comment systems (e.g. Disqus) * Embedding ads * Embedding reviewsIt's sometimes hard to avoid them, but you need to measure their impact on the performance of your website to avoid that issue growing out of hand.Optimizing 3rd party scriptsThere's plenty of strategies to handle 3rd party scripts. Paradoxically, the best approach in my opinion is too simple to remove them. If your Facebook chat widget is not used why keep it? You can link to chat instead. The same comes to different tracking scripts. Is Facebook Pixel really needed for your business, maybe one tracking script is enough?Load scripts where they are neededThe second tactic I use is loading scripts only on pages they are required. Loading comments on the home page seems like a bad idea, the same goes for a calendar widget that is used on one page. Check which plugins are redundant on problematic pages using these tools for monitoring website performance or Chrome Developer Tools.In WordPress, you can change functions.php to load files only on specific templates by using the code below.add_action('wp_enqueue_scripts', 'my_theme_load_scripts');//Load scripts (and/or styles)function my_theme_load_scripts(){   wp_enqueue_script('jquery');   wp_enqueue_script('my_first_script', get_template_directory_uri() . '/includes/js/my_first_script.js');   wp_enqueue_script('my_second_script', get_template_directory_uri() . '/includes/js/my_second_script.js');   if(is_page()){ //Check if we are viewing a page\tglobal $wp_query;        //Check which template is assigned to current page we are looking at        $template_name = get_post_meta( $wp_query->post->ID, '_wp_page_template', true );\tif($template_name == 'slider-portfolio.php'){           //If page is using slider portfolio template then load our slider script\t   wp_enqueue_script('my_third_script', get_template_directory_uri() .'/includes/js/my_third_script.js');\t}   }}This will optimize your critical pages that don't require these scripts.Delay loading of Third-Party ScriptsYou can use attributes on script tags in your code to delay loading third-party scripts to speed up initial rendering and decrease blocking time. There are 2 attributes that you can use - async and defer.The async attribute forces the browser to parse the HTML page while the script is being downloaded. Once the script loads, the code is executed while HTML parsing is paused.The defer attribute loads the script after the HTML page is parsed.If you are using WordPress you can defer scripts using a plugin, or you can use script_loader_tag filter to add the param yourself by modifying the functions.php file (WP >= 4.1).An example to defer Contact Form 7 plugin's script.add_filter( 'script_loader_tag', function ( $tag, $handle ) {    if ( 'contact-form-7' !== $handle )        return $tag;    return str_replace( ' src', ' defer=\"defer\" src', $tag );}, 10, 2 );Organize 3rd party JavaScript with Tag ManagerWith a tag manager like GTM (Google Tag Manager) you can optimize all your scripts in one place. Tag managers basically bundle necessary requests into one helping you maintain the better performance of your website.Scripts with Google Tag Manager are loaded asynchronously which results in websites being rendered without pause. But they still require download and add time to execution so be mindful of how you're using them.Key takeaways for third-party scripts * Remove scripts that are not benefiting your business * Load third-party scripts only on pages that use them * When possible use defer or async parameters to load scripts later * If needed use GTM to manage third-party scripts.Compression and its impact on the website performanceIt's possible, but rather rare, that your server is not supporting compression. Compression basically makes files smaller during load. The basic compression technology is Gzip and it's quite rare to find servers that don't support it out of the box. To check if your server uses compression you can use any of tools that check your website performance.But there's a new kid on the block - Brotli. It's not yet supported in all browsers but has large benefits over Gzip. * Javascript files compressed with Brotli are ~14% smaller than gzip. * HTML files are ~21% smaller * CSS files are ~17% smallerCheck if your site is using Brotli. To support every browser with the best compression you need to use both Brotli and Gzip. Enabling them requires tinkering with servers, and I won't go into that in this article. Although if your hosting provider doesn't support compressions out-of-the-box, it's one of the signs that you might have subpar hosting.Caching for better website performanceA common solution to all problems with web performance is caching. Caching basically means storing compiled HTML code and returning it instead of dynamically creating the page using server resources.Efficient caching can dramatically cut the time needed to render pages, but there are some gotchas.Server CachingWhen working with WordPress our first level of caching is OPCache. OPcache compiles PHP code that someone wrote into an optimized version for a server. This occurs when the PHP file executes for the first time. Then, it’s saved to the server’s memory for faster loading at each subsequent page visit. You should be able to turn on OPCache using your hosting provider. On average, OPCaches speeds up WordPress by 300%, at the very least for medium to large sites.WordPress CachingThe next level of cache is the WordPress cache (not applicable to users not using WP). This cache is compiling pages as HTML files. The idea is that instead of rendering pages on each visit, the server is doing it once, saves them in memory, and then returns these files to visitors. To set up WordPress cache I would suggest you start at the WordPress optimization - cache guide.This can dramatically improve your WordPress website, but it can also have unwanted consequences. You can see issues page rendering, some HTTP errors, for most pages that are the biggest risk. Unfortunately, if you use other dynamic elements it's possible to break checkouts for membership pages or other widgets so thread carefully.Browser CachingThe last cache you can leverage is browser caching. It won't help with initial loads but can make the user experience of returning visitors much quicker. The idea behind browser caching is simple when a user downloads a CSS, js file, or image that won't change you can ask the browser to cache it. Instead of being downloaded, it will be loaded from memory.Enabling browser caching requires changing web server configuration (in the case of WordPress caching plugin will take care of that).Here's the example for NGINXlocation ~* \\.(png|jpg|jpeg|gif)$ {    expires 365d;    add_header Cache-Control \"public, no-transform\";}location ~* \\.(js|css|pdf|html|swf)$ {    expires 30d;    add_header Cache-Control \"public, no-transform\";}Here's one for the Apache server<filesMatch \".(ico|pdf|flv|jpg|jpeg|png|gif|js|css|swf)$\">    Header set Cache-Control \"max-age=2592000, public\"</filesMatch><IfModule mod_expires.c>    ExpiresActive On    ExpiresByType image/jpg \"access 1 year\"    ExpiresByType image/jpeg \"access 1 year\"    ExpiresByType image/gif \"access 1 year\"    ExpiresByType image/png \"access 1 year\"    ExpiresByType text/css \"access 1 month\"    ExpiresByType text/html \"access 1 month\"    ExpiresByType application/pdf \"access 1 month\"    ExpiresByType text/x-javascript \"access 1 month\"    ExpiresByType application/x-shockwave-flash \"access 1 month\"    ExpiresByType image/x-icon \"access 1 year\"    ExpiresDefault \"access 1 month\"</IfModule>Slow servers and their cost to web performanceOptimization is nice, but sometimes your server is the one to blame. The first source of problems might be your web server. To check the webserver I'm using Wappalyzer extension for Chrome.If you inspect the website you can see which web server your site is using. Apache used to be the most popular web server, but currently, there are more performant options.Switch webserver to Nginx or LiteSpeed for better performanceInstead of using Apache or IIS, it's worth switching to Nginx (pronounced engine x) or LiteSpeed for better performance. Nginx became a standard over the last couple of years while LiteSpeed is quickly gaining popularity.Add resources to your serverThere are other possible issues with your server. The resources available for your website can simply be not enough. If your site is slowing during peak traffic it's a sign it might be worth updating. We recommend our clients to use either Linode or DigitalOcean for hosting websites.The other problem might be the location of your server. If your clients are located in Australia you shouldn't use servers located in Europe, this would dramatically extend initial load times.Use CDN when accessing a global audienceYou should also consider adding a CDN on top of your server. CDN stands for content delivery network. CDN's principle is simple it takes content from your original server and copies it onto edge servers. When someone visits your website the content is served from the closest server on the network, which cuts loading times.We use Cloudflare's CDN to speed up loading websites and images. Most caching plugins for WordPress will help set up the CDN for images too. CDNs are especially important if you're trying to reach a global audience.Updated PHP to latest versionPHP gets faster with every version. At the time of writing the lowest PHP version supported is PHP 7.3, check the currently supported PHP versions. This would mean that 49.89% of PHP websites use outdated versions as of May 2020. Using an unsupported PHP version is a huge security issue and it leaves performance on the table.Updating the PHP version can cause issues with older code when some functions get deprecated along the way. Updating your PHP to the latest versions improves both safety and performance.Unoptimized code and its cost to web performanceThe last and most problematic performance issue is the code itself. It's not uncommon to have bloated JS or CSS that's not minified.This problem is especially visible on WordPress websites using large themes. If your website is based on a huge theme 50% of the code loaded may be actually unnecessary.Even using custom themes the problem can still be present. Your JS/CSS may use old polyfills that are no longer required, or not be minified at all. With WordPress, this issue can be somewhat solved by optimization plugins that can minify code. Unfortunately, it's not uncommon to have issues with styles and interactions after enabling such plugins.The other problem, not always present, lays in the backend code. There might be slow queries somewhere in your codebase, deprecated functions, or other issues that degrade the performance of your website.There are basically 3 solutions to that problem, switching themes if you are using WordPress, hiring someone to check for possible issues, or redoing the website altogether.At Clean Commit we build websites with performance in mind. If you feel like you need to update your website, check our website pricing guide or reach out to schedule a conversation."
  },
  {
    "title": "Speed Up My WordPress Website",
    "plaintext": "If you’ve had the thought “I need to speed up my WordPress website to stop my potential clients from leaving before they can learn what I have to offer”, then you’re on the money.Slow websites lose business. It’s a fact backed by Google’s mobile speed study. This study discovered that the average mobile website takes a yawn-inducing 22 seconds to load. In contrast, most users will only wait 3 seconds before they leave!Everyone expects your website to be fast and frictionless, especially the potential clients you care about. Your website is really the first interaction with your customers. There’s no room for keeping your potential customers waiting.Imagine this problem in a different setting. Your potential customer has agreed to a Zoom call to hear your presentation but you spend 10 minutes trying to get your audio working.How would this make you feel? Personally, I’d be a sweaty mess. There’s no way that client is signing with you. How can you guarantee you’ll get them closer to their goals if you can’t even get the simple stuff sorted?But enough harping on about the problem. You’re here looking for solutions. You already know that your site is slow and you’re probably looking for fixes you can apply immediately.This article will list the fixes you can make yourself immediately before moving onto some of the more technical stuff that you’ll need to line up with your developer or support team.Keep in mind that some of these fixes are more important than others, so you necessarily need to chase after all of them.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitUse this article breakdown if you want to jump ahead to specific suggestions.1. Figure out how fast your website is going2. Immediate fixes you can make without technical support 1.  Great hosting that serves in your country 2.  Upload images that are the target dimension 3.  Compressed images in the right format 4.  Removing unused plugins 5.  Configure your site’s DNS to use Cloudflare 6.  Make use of Google Tag Manager 7.  Updating your WordPress version 8.  Updating your plugins 9.  Load your videos onto Vimeo or YouTube 10. Eliminate render-blocking resources 11. Keep your site secure 12. Delete images in your media library if you don’t use them3. Advanced fixes you need technical support for: 1.  Minify your files 2.  Optimize your HTTP requests 3.  Avoid using redirects 4.  Set up bytecode, object, page, and CDN caching 5.  Update PHP 6.  Remove old plugin database tables and files 7.  Use lazy loading images 8.  Optimize your font requests 9.  Enable preloading of external fonts 10. Reduce the number of post drafts that are saved 11. Use Nginx or LiteSpeed4. Other suggestions: 1. Split up your posts 2. Set up an SSL on your website 3. Ditch WordPress and go with a static site to get to perfect performance1. Figure out how fast your website is goingYou’ve realised your site is slow and causing issues but you need a measurable baseline. The best way to do this is to use a few free tools to get a review of your site.If you’re taking this situation seriously, we’d recommend using a few sites to check your performance. They each have their own quirks and sometimes spit out results that are skewed.The differences don’t matter. Improving your score across the board does.It helps to write the metrics down, so open a new spreadsheet and write down these performance testers: * Google Lighthouse * GTMetrix * Webpagetest.orgHere’s a shortcut. Simply copy this Google Sheet template we created so you can hit the ground running. Once you’ve got the sheet open, you can save your own version by going to File > Make a copy.Let’s get that baseline. Fire up Google Chrome. If you haven’t installed Chrome on your computer for whatever reason, go get it now. It comes packed with super valuable free auditing tools.Once you’ve got Chrome installed, open an incognito tab and head over to your website. You can run this process without opening an incognito tab but you run the risk of browser plugins impacting the audit results.When your site has finally loaded, right-click anywhere on the home page and select Inspect:When the page inspector opens up, you’ll see a bunch of HTML in a new window. You should be able to find a tab called “Lighthouse”. If you can’t see it straight away, it may be collapsed into a menu like this:With Google Lighthouse now open all you need to do is untick Progressive Web App and press Generate report.Save the result of this audit in your spreadsheet as a baseline for Google Lighthouse! Let’s move on to the next auditing platform; GTmetrix.Auditing your site with GTmetrix is much more straightforward than Google Lighthouse. Simply head over to https://gtmetrix.com/ and plug your URL into their search bar.Grab your result and plug it into the spreadsheet.Finally, open webpagetest.org and enter your URL in the search bar. Pick the closest server to where you’re living and run the audit. Record the three web vitals metrics in your spreadsheet.Chances are that at least two of the three tools will spit out very similar results, which is great news. You don’t need to use all three but it’s a good practice to stick to.Check your web page sizeWeb page size and speed are very important metrics. They are closely related and have a great influence on the performance of your site. You can check the page size with the SEO platform Sitechecker. To check the page size, you need to enter the URL of the web page and you will get a detailed report and optimization tips.You now have an accurate baseline so it’s time to move on to making changes to your site.2. Immediate fixes you can make without technical support.These are all changes that you should be able to make with a little Googling without knowing how to code. Start here to see if you can solve your WordPress website speed issues.1.Great hosting that serves in your countryHosting is at the top of the list because it makes the biggest difference. Boosting the processing power and memory of your hosting makes a huge difference to your website speed.The two services we recommend are DigitalOcean and Linode.Both of these services sell self-managed cloud hosting. That means you’re on the hook for managing your own server. DigitalOcean has come a long way recently with one-click WordPress installs and a bunch of other great features that make your job a lot easier.Signing up with Linode or DigitalOcean means you’re not sharing your virtual private server with any other business. This is a big benefit because entire servers can get black-listed. The actions of a few can affect the many.The downside of these services is that you’re on the hook for managing the server if anything goes wrong.If that sounds like more than you want to handle, you should consider Cloudways. They resell DigitalOcean hosting but provide some basic management services on top.It’s worth noting that we are not affiliated with any of the platforms recommended in this article.To be clear, they won’t fix your website’s code or plugins but they will get your server back up and running if it crashes!Migrating your website to a new hosting provider can be a bit of a pain, but there are plugins like All-in-One WP Migration that will get you moving.2. Upload images that are the target dimensionImages that have dimensions significantly bigger than they’re supposed to, end up with file sizes that are too large for the web.This was a problem for a recent client of ours. They were loading raw images directly from a high definition digital SLR camera onto their website. Despite the images first going through a compression algorithm, the files were still HUGE.Start by figuring out how large your images should be. Consider that most full-width laptop screens are about 1920 pixels wide. Unless you want your image to be full-screen sized, they should never be wider than this.If you’re not sure how to save images to certain dimensions, you can use a free web design tool like Figma. You can use Figma straight from your browser!When you’ve signed up, paste or drag your images into Figma. Click on your image and look over in the right-side navigation panel to change the height and width.3. Save your images in the right format and compress themImages uploaded onto a blog should be one of two formats: JPG or PNG.Here’s the simple rule to know which file type to use: If any part of your image is transparent use png. If not, use jpg.PNG file types contain more information, like transparency, so they’re naturally “heavier” than JPG. If you’re ever in doubt and want to keep your files small and light, go with JPG.It's worth mentioning that there are newer image formats, specifically WebP, that are better suited to the web but we're going to leave them alone for this part of the guide.The smaller your image file sizes, the less data the browser has to download when a new visitor arrives on your page. So the aim is to get those files as small as possible.If you’ve followed step 2 and have saved your images to close to their target dimensions, then all that’s left is to compress the images. The easiest way to do this is to open up TinyPNG and drag your images onto the screen. Once they’re downloaded, save them back onto your computer and upload them onto your website.Make sure you do this for every image on your site.If you want to save some time, you can also install TinyPNG’s WordPress plugin to automatically optimize images as they’re uploaded.Although we wouldn’t recommend using this plugin, or any plugin whose job can be achieved without adding additional code to your website. In this case, you can achieve the same results by installing the ImageMagick utility onto your server.4. Removing unused pluginsAs the fellas over at Servebolt have stated; WordPress is not slow. It’s what we add to WordPress that makes it slow.This boils down to the plugins you use on your site. Plugins are really just collections of code. And some plugins need chunky libraries and dependencies to work correctly, which means your site goes slower at their expense.The “plugin problem” isn’t that straightforward though, because it’s not the volume of plugins that cause issues, it’s whether they’ve been developed with performance in mind. A single plugin can cause your site to come to a grinding halt if it’s poorly optimised.Plugins don’t get installed in isolation. They create their own tables in the database, add files to your server and come with their own code. They really are extensions of your website.Some very common plugins like Yoast can have a 3.4-second impact on your website’s backend load time. Now that only translates to a few milliseconds to the end-user, but the point is that even popular plugins can have unintended performance impacts.Luckily there’s an easy solution to this issue; purge any plugin that’s not 100% necessary. Head over to your plugin list in WordPress.Go through each plugin one-by-one and ask these questions of your plugins: 1. Am I actively using this plugin? 2. Is this a “nice-to-have” or an absolute necessity? 3. Can I achieve this functionality any other way - for instance a code snippet, a server-side implementation, or any other way that doesn’t slow my site down?This last point may be tricky to work out if you’re not technical. If you get stuck, you can always post the question onto the WordPress subreddit and one of the helpful souls over there will give you an answer.Unfortunately, this isn’t the end of the plugin issue. Even after plugins are deactivated and removed, they’re still living in a non-active state on your server. Imagine you’re trying to clear bench space in your kitchen and you want to get rid of your toaster, but instead of putting it in the cupboard, it’s simply turned off and unplugged.This analogy is somewhat accurate for a lot of plugins. Even after they are removed, the tables and rows of data they’ve introduced to the database will remain. They will often leave behind files and other artefacts after being uninstalled.From here you need to access your database or server files directly using SSH or FTP. We’ll dive deeper into this in the advanced section.5. Configure your site’s DNS to use CloudflareDNS or Domain Name Server is the phonebook for the internet. We’re familiar with entering website addresses using easy to read URLs like “cleancommit.io”, “google.com”, “facebook.com”, or “reddit.com”. However, web browsers interact with servers across the globe through IP addresses. DNS translates IP addresses into easy to read URLs.When you purchase a domain from a provider like GoDaddy, CrazyDomains or NameCheap, they will have their own DNS servers. This is “good enough” when you’re starting out. But when you’re looking for ways to get the absolute best out of your site, it makes sense to move your DNS over to a service that is configured for speed.Cloudflare comes with other great benefits such as a CDN for caching a copy of your website and DDoS mitigation to stop malicious attacks on your site. You’ll be in good company too, given Cloudflare handles about 10% of all internet traffic.6. Make use of Google Tag ManagerThere are a million 3rd party services that help your website do its job. Software like HelpScout, Google Analytics, VWO, Facebook Ads, the list is virtually endless.Most of these services require some kind of integration with your website, usually by adding a small Javascript code snippet into the <header> of the website.This results in a couple of consequences;Each of these 3rd party services is loading external resources (sending and receiving data) every time a new web page is loaded.Every page on your website will fire the same number of scripts and require all these services to loadGoogle Tag Manager offers a convenient and flexible way to manage this mess of scripts. By adding a single script to the <head> and <body> of your website, you can now load your scripts directly inside Google Tag Manager.Unfortunately, this doesn’t mean your website gets an automatic boost of reducing lots of code down to a little.What it does let you do is have greater control over when particular scripts load. For instance, if you’re running any kind of click tracking or heat map like VWO, Hotjar or Crazy Egg, you turn these scripts on just for particular landing pages.You can also create rules that delay the loading of scripts until a user has scrolled down 20% of the page. This helps reduce the amount of data a user has to load when they first open your website.7. Updating your WordPress versionNew versions of WordPress are released frequently.A lot of these minor updates address security issues and obscure bugs. But they also include performance increases. Just comparing version 4.9 to 5.0 of WordPress, it’s clear that some major improvements were made to the load time of a web page.It pays to keep your version of WordPress updated. It’s typically a pretty simple process. Before you start, make sure you take a backup of your database and your site’s content just in case something goes wrong (it’s not uncommon).A word of warning - if you’ve got a lot of plugins installed then the risk of something going wrong when you update is high. WordPress updates can often bring with them major changes to the underlying technology (like PHP) that essentially pull the rug out from underneath your plugin’s feet.As long as you’ve taken a backup before you run the update, you should at the very least be able to roll back to a previous working version and reach out for help to get the update completed.8. Updating your pluginsIt’s easy to forget about plugins after they’re installed.Plugins are literally extensions to your website’s codebase. As the technology that supports and runs them updates, they also need to be updated.Anytime a major WordPress update is released, you should expect to do a plugin update shortly after or ideally at the same time. This keeps your plugins using the latest technology and hitting their peak performance.If you’ve performed a recent update to your version of WordPress and notice that some of your plugins didn’t require an update, it’s worth investigating if the company that built the plugin is actively making updates. If it’s a simple plugin there may be no reason for an update. But if the plugin boasts a good weight of functionality, it might be time to ditch it and look for something that is actively being serviced.9. Load your videos onto Vimeo or YouTubeYouTube and Vimeo have spent millions of dollars working out how to show their users videos quickly so their users don’t have to wait for them to load....And they give you the option to use their services for free!When you upload your video to YouTube or Vimeo you instantly get a bunch of benefits.Firstly, your videos will be loaded on incredibly fast and high-quality servers. Secondly, your videos will take advantage of high-tech delivery services that can adjust the quality of the stream to match how quick a user’s connection is. Finally, hosting your videos on an external service means WordPress can continue loading other things at the same time.This tip has become a little less important in 2020s since auto-playing videos aren’t really a thing anymore. The popular browsers (Chrome, Firefox, Edge, Safari) came together and decided that no one should endure autoplaying videos with audio.This decision ended an era of videos starting to play as soon as a user loaded a web page.I think we can all agree this was a change for the best.10. Eliminate render-blocking resourcesWhen a visitor arrives on your site, their browser starts reading the website’s code from the top down. If the browser hits a CSS or JS “file”, it stops and downloads the file before continuing to load the rest of the website.The time the browser is stopped, or blocked, while it loads these files can seriously slow the time it takes to load the page.Not every asset your browser has to load is a render-blocking resource. For instance, images aren’t render-blocking files.To figure out if your site is being affected by render-blocking resources you’ll need to do a little digging. The best option is to jump back to the start of the article where we recommended doing an audit using Google Lighthouse.If your site is being impacted by render-blocking resources, Google Lighthouse should make it pretty clear by listing it like this:If you do find a render-blocking issue, they will be listed below the performance breakdown in the “Opportunities” section.There are a couple of approaches to fixing render-blocking resources: 1. Tell the browser to continue loading the resource asynchronous - or let the resource continue downloading at the same time as everything else 2. Tell the browser to defer the download - or circle back once the page is loaded to finish loading the resource.In most cases, a developer can sort these issues out but the point of this section of the article is to recommend fixes you can do immediately. And luckily enough there are a couple of plugins you can use to fix these issues; Autoptimize and Async JavaScript.Autoptimize joins your website’s styling together, shrinks your code down and compresses it all. In a nutshell, it handles your website’s CSS optimisation. While Async JavaScript prevents JavaScript files from blocking the rest of your website from loading.Once you’ve installed Async JavaScript, you’ll need to jump into the settings and turn it on by going to Settings > Async JavaScript and checking the box at the top of the screen.You’ll also have the chance to pick one of four default settings. We recommend starting with “Apply Async”. If you find this causes issues across your website, jump back into the settings and try “Apply Async (jQuery excluded)”. If you’re still having issues, try “Apply Defer (jQuery excluded)”.Next, open the Autoptimize settings by going to Settings > Autoptimize. There are two checkboxes you need to tick to turn the plugin on: 1. Optimize JavaScript code2. Optimize CSS codeYou’ll notice there’s a handful of other settings you can play around with relating to inline JavaScript and CSS. You shouldn’t need to worry about ticking any of these boxes. The default settings should do just fine.11. Minify your CSS and JavaScriptWhen developers write code, they add nice indents and spacing to keep everything looking neat and tidy. This makes it easy to read back over the code and understand what each part does.The problem with this approach is all the indents and spacing get passed along to your browser to interpret. Each space takes such a small fraction of a second it’s barely worth noting. But tens of thousands of spaces collectively add a noticeable delay.This can be fixed by removing all the spaces in preparation for your browser to read the files.Luckily for us, if you followed the steps in 10. Eliminate render-blocking resources then the work has already been done. By turning on the CSS and Javascript minification options in the Autoptimize plugin, the spaces and formatting in your files will be removed.12. Keep your site secureAn array of not-so-nice things can happen to your website if you let the wrong people get access. From installation of cryptocurrency mining software to malicious viruses to installation of various malware.Getting “hacked” sounds like something out of a sci-fi movie, but believe us when we say that it happens all the time.There are some bad eggs out there, and their intention is to use your website to make money. Most of the time this means they’re going to change how your site runs to benefit their cause. It kind of goes without saying this is going to hurt your site’s performance.Once your site is compromised, it can be a difficult problem to un-hack. So it’s best to be proactive to avoid ever running into this situation.In addition to keeping WordPress and your plugins up to date, signing up for Cloudflare’s services, and using a great host, you should ALWAYS use a strong, unique password. This isn’t intended to sound condescending, but weak passwords are very common.A quick fix for this issue is using a password manager like LastPass, 1password, or Bitwarden. These platforms are brilliant because they create strong unique passwords for every online service you use, and help ensure no one but you can get access to the master account.You can even go to the extent of setting up the Google authenticator plugin for anyone logging into your website. Google Authenticator is a small app that runs on your phone and shows a different code every 30 seconds. It works like entering a password - tell WordPress the right code that’s showing on your phone or you won’t be allowed in.There are a number of more advanced techniques that you can put in place to further secure your site, such as installing an SSL certificate, configuring a limit on failed login attempts, lock down your directory permissions, and rename your login URL. But simply preventing the bad guys from logging into your site is a huge step in the right direction.12. Delete images in your media library if you don’t use themOver time your website’s media storage library can get pretty full. Especially if you haven’t been saving your images as jpg or png and compressing them prior to uploading.Also, if you’re like me, sometimes you accidentally upload the wrong version of an image and don’t go back to delete it.These images live in your website’s database, which doesn’t have infinite space. Eventually, it fills up and slows your site’s performance down. Depending on your host, you’ll run into other issues (increased costs) if your volume of files gets too large.The solution to these problems is straightforward, even if it’s time-consuming; go through your media library and delete photos you’re not using.To do this, open Media > LibraryThen click on an image you want to delete and hit the “Delete permanently” link.This is all good and well for duplicates where you can easily spot the image that’s being used, but it becomes a struggle if you don’t know if an image is being used somewhere on your site.Media Cleaner is a plugin that can help you figure out which images aren’t being used and can be deleted. Once you’ve installed and activated Media Cleaner, go to Meow Apps > Cleaner.Hit the “Access Media Cleaner Dashboard” button. On the dashboard, you’ll see a few warnings that are worth paying attention to. In particular, backing up your database and adding the trash folder for your media library.Start by taking a backup of your database. There’s a handy guide here if you’re unsure how to tackle this process. Next, pretty the “Automatically write this line” button to avoid permanently deleting your files, as an extra precaution.When you’re ready, hit the “Start Scan” button. A list of images that aren’t currently being used should return. Go through the list to make sure you’re certain no active images have been accidentally included.Tick the checkboxes of the images you want to delete, or if you’re feeling adventurous, hit the delete all button.With that, you’ve done all the basic changes you can to improve your website’s performance. Go ahead and run a performance test to see what kind of increases you’ve unlocked.The next section will focus on changes you need development help to execute. At this point, if your site is still dragging along and you simply want it to go faster - reach out to us. We’ll get your site back to top performance with a few hours of development work.3. Advanced fixes you need technical support forIf you’re ready to tackle these next steps, you should be comfortable with basic development principals, server management, and have a solid grip on how WordPress works under the hood.With the warnings out of the way, let’s get into the advanced WordPress optimisation tips and tricks.13. Use the Roots.io ecosystemThe entire Roots.io ecosystem (Trellis, Bedrock and Sage) makes some very wise design and technology decisions that can wildly improve the performance, security and useability of your WordPress website.We wouldn’t recommend rebuilding your entire website if you can avoid it. But if you’re serious about achieving elite performance, then the combination of Trellis, Bedrock and Sage is going to get you there.BedrockBedrock really is the way WordPress should have been designed. In a nutshell, it migrates some of the code out of core directories, making it easier to configure network file systems, and generally keeping the development process neat and tidy.Bedrock also implements a more maintainable way to install plugins from official repositories. This brings your workflow closer to Composer or NPM when it comes to installing plugins as you would packages. This ensures that all developers, designers, and test servers are running the same version of the plugin, reducing the possibility of errors or bugs.TrellisTrellis is really where the performance benefits are hiding. It's a shortcut through the usual sysadmin setup of configuring an environment. Trellis achieves a standardised development / staging / production environment by using Vagrant boxes and virtual machines. It also runs a modern LEMP stack, which incorporates Nginx, providing some serious performance benefits over the traditional web server, Apache.15. Optimize your HTTP requestsAnytime your website needs to call an external resource, it’s adding overhead. Establishing a TCP connection, sending the request, waiting for the answer and then sending the response code takes time. Albeit a very small amount of time, but when it’s repeated the number adds up.Having a high number of small data HTTP requests is going to be much slower than a single, larger data HTTP request.The goal in minimising your HTTP requests is to batch similar files. The best example is using a single CSS stylesheet for your website and running all scripts from a single file.Another way to reduce your HTTP requests is to store your resources on a single domain. Every time your browser needs to load a resource hosting on a new domain it needs to perform a DNS lookup.16. Avoid using redirectsGoogle is most often the authority when it comes to “how to do things the best way” and they say ideally you should cut out redirects entirely.If your site is large and growing, this might not be possible, but you should at least focus on reducing the number of unnecessary redirects, especially to static resources.A simple (and free) way to identify your site’s redirects is to download Screaming Frog and run a quick report on your redirects. This will also help you work out which redirects can be ditched and which should stay.Keep a close eye out for any chained redirects - they’re the ones you’ll want to fix first as they’ll usually load the slowest. If you do find any, edit your .htaccess file to point all of your redirected pages to the most recent version of the page.17. Set up bytecode, object, page, and CDN cachingBytecode cachingAmazon explains the importance of bytecode caching elegantly;Each time a PHP script is executed, it gets parsed and compiled. By using a PHP bytecode cache, the output of the PHP compilation is stored in RAM so that the same script doesn’t have to be compiled again and again. This reduces the overhead related to executing PHP scripts, resulting in better performance and lower CPU requirements.Using bytecode caching is as simple as setting up OPcache when you’re configuring your environment.All you need to do is run sudo apt install php7.0-opcache. You may need to change some settings to best suit your server’s configuration.Object cachingObject caching stores database queries so they can be brought up quicker the next time they’re needed. This helps speed up PHP execution time, reduce the load on your database and get the page content loaded quicker.WordPress leans on its database a lot. This is no surprise, given it’s a content management system. Anytime it needs to show blog articles, images or other content to the end-user, there are database queries being made.Without object caching, the request to access these files are repeated for every user that makes a similar request. This is bad news even on a smaller scale - say 100 people trying to view your blog’s archive page which loads 50 articles.The answer to object caching is Redis. Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker.Before we go any deeper on the topic, we should point out that there are benefits to using Redis but it can cause issues for WordPress, and the overall performance benefit your site will receive is minimal unless it’s running at a large scale (at least 1000 queries a minute).Also, keep in mind that Redis requires a LOT of RAM, so you’ll need to bump up your environment’s resources to get it humming.Redis requires a bit of installation and configuration that we’re not going to cover in this article.Page cachingPage caching cuts out a ton of PHP and database queries by storing an entire version of a page’s HTML in memory. This means WordPress doesn’t have to regenerate the page, it can simply serve the stored version.There are plugins that can achieve page caching, but we recommend configuring Nginx’s FastCGI Caching Module to handle page caching. This will require you to first be using Nginx instead of Apache (you should be doing this anyway) and then follow some steps to configure the module.CDN cachingFor the uninitiated, Content Delivery Networks (CDNs) are global networks of servers that deliver files. This network can be leveraged to serve cached files to users when the origin server is geographically far away.A good example of this can be seen with a lot of DigitalOcean’s servers since they have data centres in Singapore and New York. If you live in Australia, as we do, and your website is hosted on DigitalOcean, then the server could have a 400ms initial load time simply due to it being on the other side of the world.CDN caching is the answer to this problem. By loading your site’s files such as images, videos, JavaScript files, and CSS, they can be delivered by servers closer to the user.The practical implementation of CDN caching is setting up Cloudflare. There are other options, but we’re big fans of Cloudflare’s service. For most implementations, it’s free and very easy to configure. There’s a great WordPress plugin that does most of the heavy lifting for you.18. Update PHPThere’s nothing surprising about this suggestion. Each incremental release of PHP brings about an increase in performance.PHP 8.0 shows an increase of around 3% on its baselines when compared with PHP 7.4.4. This becomes a much more obvious issue if your server is running an older version of PHP (anything before PHP 7).The fix can be simple. Jump into your server and update the version of PHP.A word of warning before you do this. PHP 7.2 brought with it some fairly significant changes that may impact other technologies running your website, such as jQuery. Before you pull the trigger, make sure you back everything up and has a quick rollback plan in case the changes go south.Even better, configure a Vagrant or Docker instance to replicate your production environment and run the tests locally before pulling the trigger.19. Remove old plugin database tables and filesWhen you’re testing out new plugins to see which one is going to be the best fit, do you read through extensive articles and reviews and decide ultimately to install only one plugin?Probably not. If you’re anything like me, you’ll install four plugins to work out which one is the best and then move forward with that one. I’ll circle back, deactivate and delete the other plugins when a winner has been crowned.If all plugins were engineered according to the standards set by WordPress then this would be the end of the conversation.For one reason or another, a lot of plugins don’t follow these guidelines.The deletion process removes some of the plugin’s footprint from your server. You will no longer be able to see the plugin on the administrative dashboard, but the database tables and rows and other files that were installed with the plugin often do not get deleted.If you’re testing out a lot of plugins, over time you run the risk of bloating your database and increasing your site’s disk requirements. This impacts your site’s performance and the amount of money you need to pay for hosting.Kinsta has written a killer guide on cleaning up your database after uninstalling a plugin. This guide will give you all the steps to working through phpMyAdmin, identifying and removing the orphaned tables, and finding and removing old files.20. Use Lazy Loading ImagesThe median average size of a WordPress page across the web is 1171kb for desktop and 1207kb. Images account for around 65% of this weight. Images are critical to helping your user understand and engage with the content, so we can’t just get rid of them. And there’s only so far you can compress them before quality becomes an issue.The answer to this problem is lazy loading.Lazy loading is a technique where only the visible content of the page is downloaded. Downloading and rendering of content below the fold is delayed until the user scrolls further down the page.Lazy loading works like this: 1. The page is downloaded and built by the browser. 2. Images are not downloaded initially 3. JavaScript is used to determine which images need to be downloaded, according to which part of the screen the user is viewingAs the user scrolls down the page, images and videos are downloaded as they are viewedIn our experience, poorly optimised images account for the majority of page speed issues. Lazy loading this content doesn’t completely fix this issue, but it certainly alleviates the issue.Even for a page that’s well-optimized, running on a static site (like this one you’re reading) would suffer poor performance without lazy loading, simply due to the sheer volume of content.The quickest way to get lazy loading working on your site is a plugin we mentioned earlier in the article; Autoptimize. Using this plugin for minifying your files and lazy loading saves you from having to install multiple plugins.Head over to Plugins > Installed Plugins. Find Autoptimize and select Settings. On the settings page, pick the images tab then tick the Lazy-load images checkbox.Hit Save Changes and you’re done.21. Optimize your font requestsIf your site is calling external fonts, such as those provided by Google Fonts, you’ll want to combine them into one request.This sounds obvious, but if you make multiple trips to Google Fonts to pick out the fonts required for your website, you can end up with multiple stylesheet requests.The fix to this issue is simple; combine these requests together. By default if you’re using Google Fonts and shopping around for multiple fonts they will be combined into one request string automatically:<link href=\"https://fonts.googleapis.com/css2family=Lato&family=Roboto:wght@100&family=Stick&display=swap/\" rel=\"stylesheet\">There are some other tweaks to your font requests that Google themselves suggest. Firstly, avoid using @import before an external CSS request. Internet Explorer suffers performance issues when one external stylesheet links to another.They also suggest you put your font requests early in the page’s structure. Especially make sure to add these requests before any scripts.Finally, don’t request fonts you’re not using. It sounds obvious, but it’s worth keeping in mind because if you accidentally request an entire font library it will add a significant amount of weight to your page.22. Enable web front preloadingIf you’ve ever endured a really slow internet connection and watched a webpage slowly come to life, you’ll be familiar with the brief loading of fonts that seem to magically change styling after a fraction of a second.This behaviour is caused by browsers completely loading the render tree before requesting the required fonts. In a nutshell, this means that your browser will get all of the content loaded and then request the fonts you want to use.The problem with this approach is that your site’s content may be ready to roll, but your browser is off downloading fonts, holding the entire process up, or causing a brief moment where the font loads and then changes styling.Fixing this issue is fairly simple. All you need to do is add the attribute to your font requests.You do need to be careful that the font you’re preloading is exactly the same one specified in your CSS. If the fonts required in your CSS change for whatever reason, then you could be forcing the visitor to preload a different font than the one that will be used on the page, ultimately making them load two fonts instead of one.23. Reduce the number of saved post draftsEvery time you Save Draft, Update or Publish a WordPress article, a new revision will be created. Even if you’re not making any changes on the page, WordPress will save a new revision every 60 seconds. These revisions act like version history for your post and allow you to roll back to a previous version.This is super helpful in cases where you accidentally make changes to a page that you didn’t mean to, or find that something on the current page is inaccurate and you need to urgently bring up the old version.WordPress provides a simple slider tool that lets you drag forward or backwards to find the correct version of your post to spin up.However, there is no automated process to remove revisions from the database, so over time, they can build up such a volume that they start to slow down the performance of your website.This problem becomes more realistic if you have a lot of pages and posts, since they’ll all receive revisions whenever changes are made, amplifying the problem.As a solution, you could simply turn off WordPress revisions through modifying wp-config.php file or using the Disable Post Revision plugin. Although we wouldn’t suggest doing that. Revisions are a very handy feature and one that we at Clean Commit use a lot.A better option is to clean up your old posts using WP-Sweep. WP-Sweep is free, which is always nice, and it provides an easy interface to play around with, and a simple API if you want to plug straight in.Once you’ve got WP-Sweep installed, head over to Tools > Sweep. This screen breaks down the posts that will be “swept”. Make sure you’re not going to lose anything important before pulling the trigger, then click on the Sweep button.It is possible to log into phpMyAdmin and delete revisions manually through the SQL section by running:DELETE FROM wp_posts WHERE post_type=”revision”;However, this is a broad brush stroke and will delete all of your post revisions. For this reason, we suggest sticking with WP-Sweep. If you’re worried about plugin bloat, then uninstall it once you’re done.A good option once you’ve cleaned up your old revisions is to put a lower cap on how many revisions WordPress stores.Assuming that you’re comfortable making changes to your theme’s files, then jump onto your hosting server’s cPanel, log in via SFTP or SSH in, then open up your site’s wp-config.php file.Add this line to the bottom of your file;define(‘WP_POST_REVISIONS’, 5);We recommend sticking to 5, although you can make this whatever number you want. Most of the time when you need to roll back to a previous change, it’s the latest revision you’ll end up choosing so don’t make this number too big!24. Choose Nginx or LiteSpeed over ApacheUnlike Apache, which runs on a process-driven architecture and creates a new thread for each request, Nginx is an event-driven architecture and can handle multiple requests within one thread.Nginx is the king these days. It’s grown beyond just being a web server. It’s now used as a reverse proxy, load balancer, mail proxy and for HTTP caching.According to the guys over at serverguy.com, Nginx performs at 2.5 the rate of Apache when serving static content. While this benchmark doesn’t translate directly into how quick your visitor’s page will load, it’s a statistic that’s worth taking notice of if your site has a large volume of static content and a lot of visitors.If you want to live even closer to the bleeding edge of web server technology, then LiteSpeed Web Server (LSWS) is even faster than Nginx. The performance difference between LSWS and Nginx is not as big as the gap back to Apache, but it does transfer files quicker, use less CPU and memory.The only big downside of LSWS and why we would recommend sticking to Nginx is that it’s installation and configuration is complicated. It hasn’t been widely adopted across the web yet so the support materials and developer ecosystem are still immature.Given we’re recommending you stick with Nginx, what’s the next step?If you’re using sub-optimal hosting like Bluehost, GoDaddy, or a similar provider that only lets you use cPanel to access the server then you’re probably out of luck. Loading new web server software is out of your hands.However, if you’ve chosen to run your site on DigitalOcean, Linode or Cloudways, then you have the freedom to install Nginx.If you’re spinning up a new site on DigitalOcean, you can choose to install the LEMP (Linux, Nginx, MySQL, and PHP) stack one-click installer and then load WordPress on top.If you’ve made it this far then you probably already have a good grip on installing WordPress on Linux distributions. If you’re new to the process, then it can be a bit of a learning curve. We recommend following the instructions DigitalOcean has written for the process.Other suggestionsIn preparing this guide we did a ton of reading. We went over a lot of other guides and research pieces.Some of the suggestions that came up were interesting and may improve page load times, but weren’t necessarily practical....Or they were practical but wouldn’t improve page load time.Most of the ideas were at least worth discussing, so we’re breaking them down in this section.1. Split up your long postsYes, this will increase your page load time. The less information the browser has to load, the quicker it’s going to go.But this is kind of silly. Blog articles or any kind of content is written to a certain length for a reason. Usually because that’s how long the article needs to be.Imagine if we split this article into five separate posts. The usability would decrease significantly, and you’d still end up loading five different pages, so the sum total of load time would increase.Long posts also generate longer user engagement and target higher volumes of keywords, which is lost when they are split up.So we’re calling this tip a bust. Don’t split your posts up. If you’ve followed the rest of the tips in this article, then even a really long post type will load quickly.2. Secure your website with SSLYou should absolutely do this.Not only does running SSL add a protected layer of security to your site’s data, but it’s also become important in Google’s eyes, so your content will be ranked higher than a site that’s not secured.However, don’t expect a performance increase from adding an SSL certificate to your site. If anything, you should expect a very small drop in performance because there are additional actions being taken by the server to ensure the connection has not been compromised each time it serves a page.To summarise; definitely get your site secured with an SSL certificate, but don’t expect it to do much for your slow page load times.3. Ditch WordPress and go with a static site to get to perfect performanceThis is a legitimate option for some but a fairly impractical tip for most.If you’ve got a WordPress site that’s running slowly, you’re probably not in the market for completely blowing it away, redesigning a new site, installing new technology, and working out how to migrate your old content.That being said, if you are in the position to make the jump to a static site generator like GatsbyJS, the performance benefits are immense.Static sites cut out all the dynamic interactions that happen when a user visits a new page and the backend code running on the server has to figure out what data they should be seeing.GatsbyJS brings about a number of other great optimisation benefits such as serving images in a WebP which is a new generation format that boasts a 26% reduction in lossless file sizes when compared with PNG. Keeping in mind that images make up roughly 65% of average page weight, this can account for a huge efficiency boost.To wrap this point up, yes static sites are awesome. Yes, you should choose this technology. Yes, it’s our preferred web technology.…but no, this is probably not a helpful hint for anyone that’s looking to improve their WordPress website speed.Wrapping it all upWe’re passionate about making websites go faster and achieving ultimate performance. The consequences that come with running a slow website can have a significant impact on your business’s performance.Getting your WordPress website running fast and smooth is going to help your posts rank higher on Google, keep your visitors engaged, and improve your chances for achieving your website’s ultimate goal.This was a bit of a monster guide in terms of length, and we’ll be updating it frequently given how quickly the landscape changes.If you have any suggestions or comments on tips we should add to the guide, please leave a comment below."
  },
  {
    "title": "Use Google Sheets as a database for your website",
    "plaintext": "In some cases, CMS solutions like WordPress don’t really fit your workflow. When managing lots of similar content types using WordPress custom posts, the UI is bothersome. Imagine trying to quickly update tens or hundreds of custom posts. It’s a significant effort even for seasoned editors. In such cases, the content management system’s workflow works against you and your team.When sharing important content on your websites like apartment availability, prices, events dates, and ticket prices they need to be up to date, especially when your sales department is often changing prices or updating images, dates, or other details.On such occasions, we try to find alternative content solutions, that fit one's desired workflows. Some teams use purpose-made software like CRM systems. Most of the small teams we work with prefer the flexibility of spreadsheets.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe benefits of using spreadsheets as a databaseWhile creating posts or pages within spreadsheets isn’t a good idea, working with entries like apartments or events makes much more sense. Services like Google Sheets, Excel Online, or AirTable can supplement your CMS quickly.Better collaboration & quicker changesSpreadsheets work great when collaborating with your team. Cloud-based solutions make it possible for multiple users to access them at the same time. Making changes collaboratively is much quicker than using other CMS solutions like WordPress. Since it's a spreadsheet it's also easier to make changes, like updating images, attached pdfs much faster.Additionally, when using spreadsheets instead of a standard CMS you can edit one data source for multiple websites. While it's possible with other CMSs it would require more effort and could cause issues in the future.Easy data authoring, custom workflows setupSpreadsheets make it extremely easy to update data structures as well. To add a data point, no migrations or clicking around is required, it's as simple as creating a new column.Creating custom workflows is also incredibly effortless. With Google Sheets, you can use existing sheets to work as a data source for other sheets. With Zapier you can integrate the data directly with other services as well.Utilizing integrations and Sheets extensions will enable you to create tools to automate part of tasks for your team and increase productivity.AirTable - spreadsheet on steroidsFor some clients Sheets may not be enough, that's where AirTable comes in. AirTable basically takes the idea of spreadsheets and adds more content options like images, relations, and more. AirTable is basically an SQL database with UI on top.With REST API it's possible to plug some data from internal systems and display them directly on your website. AirTable offers a robust set of templates to kickstart your efforts on the platform. It's possible to power your marketing, sales, product management, and more with AirTable.Implementation examplesUsing AirTable and Google sheets looks great on paper, but let's take a look at some examples of our work where we used that approach to help our clients.Real Estate Listings powered by Google SheetThe best case study for using spreadsheets instead of the standard CMS is managing real estate listings. One of our is a real estate company that develops new locations in Poland. With a lot of apartments and houses available in different locations, it was obvious for us that any CMS out there is simply not the good way to go.We used Google Sheets to handle the management of available units for sale. Our client's team could easily update the floor plans, image pricing, and availability without actually entering the CMS.Real Estate Listings from different investmentsAnother great example of this approach is from another project for the same real estate developer. Once new investments began, we used the same setup with Google Sheets to display the offer on different websites.The next natural step was combining different sheets into a singular solution that allows potential clients to browse all available listings. Google Sheets in this case is also managing filters in the search.Event Calendar powered by Google SheetsThe last interesting example is a Google Sheets powered calendar. While working with Dionysus, they wanted to have an option to list upcoming news. With a statically built website, we wanted to make sure they can provide the most up-to-date details without waiting for the website to rebuild.In this case, the spreadsheet works also as a tool to manage the calendar. Dionysus team can add more details to their calendar, while the website only displays the relevant information.Google Sheets vs AirTableThere are some differences worth considering when choosing which tool is better for your usage. Google Sheet's biggest issue is the need to publish your spreadsheet online, this means it can't contain any confidential information. AirTable on the other hand is an additional tool that may add some costs, its adoption also might be harder since it's a new tool.Google Sheet Advantages: * Included in Google Workspace suite * Most people are comfortable working in spreadsheets * Unlimited callsShortcomings: * Can't upload images or create simple relations * Your sheet has to be publicly available to use as an endpointAirTable Advantages: * Can be used as a robust system to power your business and enhance productivity * Support for additional content types like images and relations * Great REST API * Premade templatesShortcomings: * Additional tool for the team * Might be an overkill for a simple system"
  },
  {
    "title": "6 Ways To Get Funding For Your App Project",
    "plaintext": "Application development is expensive and often costs more than the funds you have laying around in your bank account. If you have a great idea for an app, and you really believe that it’s worth pursuing, then you’ll need to find the capital somehow.Unfortunately, there’s no magic solution to drumming up funding for risky and speculative ventures like new applications. With over 40,000 new apps hitting the market it can be very difficult to convince potential investors (even if they’re friends and family) that your idea will beat out the competition.This article will detail the 6 realistic options for finding the money to finance an application development project.Before we jump into the options, there’s one solution that we never recommend. If you’re serious about making your idea a reality and believe it could be a life-changing product, don’t ever look for a super-cheap developer to squeeze into your budget instead of extending your budget to afford a good developer.We’ve seen a depressing number of truly unique, innovative and game-changing ideas throw away forever through poor implementation. Underqualified developers who are willing to work for peanuts will deliver you nothing but disappointment and frustration. We know, we’ve worked with them plenty of times.Once your idea is out there in the world, it can’t be taken back. If your idea is an exception but your execution is below par, someone else will pick it up and do a good job of it with a properly funded team.Even with a qualified, award-winning team, there are still options to test your idea without applying for a second mortgage.So without any further ado, let’s get into how you find the funds to get your project off the ground.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit1. Government grantsGovernment grants in Australia have become much more of a reality in recent years with the emergence of huge software companies like Atlassian and Canva drawing attention to the Australian technology scene.There is a multitude of innovation awards and grants now available for aspiring entrepreneurs. One of our clients, Selectr Netball, was the recipient of funding from the Canberra Network of Innovation for a grant of $30,000. This funding covered the majority of their minimum viable product development to the point that they’re now taking on paying customers.The federal government even provides a website for you to input your eligibility conditions to see if you qualify for any schemes.These programs can feel a bit restricted and you’re more likely to have success looking at the state level. These are the state websites to keep an eye on for open and upcoming grants.Australian Capital Territory 1. Innovation Connect Grant Program 2. ACT GrantsNew South Wales 1. Support for startups 2. Minimum viable products grantsVictoria 1. Vic incentives, grants and programsPlease note that it's a little difficult to find reliable innovation grant resources at the moment in Victoria because of the COVID-19 lockdown and the impact that's had on the economy.Queensland 1. Innovation grants supportWestern Australia 1. New industries fund innovationSouth Australia 1. Grants and support 2. South Australia Grant AssistNorthern Territory 1. Northern Territory FundingTasmania 1. Tasmanian Government funding - sorry Tasmanians, this site isn't easy to find information. You'll need to hunt around.It’s also worth checking your local council innovation schemes. These can be a bit trickier to find but everyone is in the same boat and if you do manage to find an eligible grant there’s a much greater chance you’ll qualify because there's less competition.Grants typically open for around a month so you need to be keeping a close eye on the various schemes to make sure you don’t miss them.The process of applying for a grant is different for each state, but they follow a similar format. Initially, you’ll need to jump through some red tape in describing your industry, the problem you’re solving, what kind of business venture you’re planning on starting, and a handful of other high-level questions to get past the gatekeeper.From there you’ll need to qualify for the shortlist that will deliver a presentation in front of the board who will decide where the funding should be allocated. Qualifying for this position can require the submission of a business plan that details your idea, why it’s unique and will make a positive change, and how it will be monetized.Once you’re through to the finalist interviews you’re essentially pitching your idea to investors. While it’s not actually their money, they hold the responsibility of deciding whose idea is the most worthy of funding, so you’ll need a slideshow show and verbal presentation that clearly explains why your idea is the logical choice.The grants panel will often require you to get a detailed quote for your project ahead of time so they know how much funding you require.If you're unsure of how much money you'll need and want to get a rough idea without sitting down for a consultation, you can head over here to download our pricing guide.2. Apply for a bank loanThis is the riskiest option of the lot but we’re putting it towards the top because if you’re looking for advice on this topic then you’ve probably explored some of the “easier” options.Why is this a risky option you ask? Well, as Mark Cuban said, “there are so many uncertainties in starting a business but the only certainty you have is paying back your loan”. If your entire business is going to centre around the software you’re planning to take out a loan to build, then you’re gambling on its success. Not only that, you’re gambling on it happening quickly.This isn’t the case for everyone though, and sometimes a loan makes complete sense. In applying for a loan you’ll need to prove to the bank you have the equity to pay back the loan if everything goes South, but small business loans are not uncommon or too complicated to apply for.One thing to consider before you apply for a loan is the quote and pricing model of your software partner. A lot of agencies will quite on a “time and materials” basis. This means that they’ll keep charging you for any time they work on the project, no matter if it’s beyond their original estimate.This is a big red flag since you could end up exhausting your funds and not have anything to show for it. Pick a company that will agree to stick to a “fixed estimate”.You may also want to add an extra 10% - 15% onto your loan amount in case you discover features that you can’t live without along the way and need to add them on. If you’ve agreed to a fixed budget, the agency won’t include anything more than what’s originally written into the contract.3. Friends, family & colleaguesIf you’re so confident in your idea you’d take money off your own mother to get it off the ground… then go for it.Plenty of incredibly successful businesses have started with funding from relatives, friends and family. Chipotle started when Steve Ells asked his old man for an $85,000 loan. Dov Charney borrowed $10,000 from his parents to start a small manufacturing business; American Apparel. Even the guy right at the top of it all, Jeff Bezos, borrowed $100,000 from his parents to found Amazon.Now, we’re not suggesting that you borrow $100,000 to found a business. You should still stay savvy about bootstrapping where possible, but the practice of borrowing money is not uncommon.Before you go talking to your friends and family about an app you want to build, put some effort into the same kind of presentation you’d present to receive a grant or loan. You need to give your investors some surety that you’ve got a plan for turning their money into a business that will, one day, return their money.On that note, if you’re serious about this pursuit then it can help to either offer your investors equity in your company or a return on their investment in the form of interest. The more seriously you take the proposal, the better chance you’ll have of securing funding.4. CrowdfundingKickstarter, Fundable, Fundly, and a hundred other crowdfunding platforms have popped up over the past decade. These websites let you pitch your idea to the masses in return for small portions of funding, which can add up to the number you need to launch your project.The challenge with any of these sites is drumming up enough attention to reach your target. If your app idea focuses on rockets, automated cars, or mapping the bottom of the ocean, then you’ve got a good chance of drawing attention.If your idea isn’t quite as flashy at a glance, then your challenge is to sell it. This takes skill and a bit of luck.There are plenty of articles, courses and even dedicated agencies available that help you have success using crowdfunding platforms.5. Angels investors and venture capitalistsDepending on who you speak to, angel investors and venture capitalists may rank higher on the “hard to make work” scale than crowdfunding.VC’s are notorious for turning down ideas that have even the slightest flaw or haven’t been meticulously planned out. Even if your business plan is watertight, you’ve got a solid plan for bringing your product to market and have a timeline for when you’ll break even based on solid data, there’s a strong chance you’ll get turned down.These investors hold the cheque book for a lot of cash. Writing out $250,000 is a fairly standard affair, so you’ll need to put in the work in bringing your idea to the table.If your idea is so big that it requires this sort of funding, then your best bet is to start with Y Combinator. Y Combinator is the godfather of creating world-changing entrepreneurs. They’ve funded over 3,000 startups, that hold a total valuation of $300 billion. Some of the biggest technology companies started as Y Combinator projects; Stripe, Airbnb, Dropbox, Twitch, Doordash, the list is nearly endless.Y Combinator is much more than a source of funding. They’re a mentoring agency that provides advice and connections to get huge deals off the ground. The preparation for presenting to a Y Combinator panel is extensive, and the competition is tight.6. Find a business partner with capitalSuccessful businesses very rarely get off the ground without some form of partnership. When Elon Musk formed PayPal, it was with five other guys. Apple was created by Steve Jobs, Steve Wozniak and Ronald Wayne. Google was formed by Larry Page and Sergey Brin.Sometimes it helps to find a business partner that can contribute something that you can’t. In some cases that’s capital.If you find someone that’s willing to go into business with you and provide the capital to get your idea off the ground you’ll want to make sure you clearly talk through the responsibilities of each party.Are they going to be a silent partner, or will they be actively involved in the running of the business? How will you compensate yourselves once the business makes a profit? Who owns the intellectual property and assets of the business. There’s a lot to sort through but this can be a worthwhile option to explore.Wrapping upSometimes you need to take a leap of faith and turn a big idea into an application. Securing funding can be difficult, but the challenge is not insurmountable. We’ve covered the most common ways to get funding if you don’t have the money sitting around in your bank account. If you know of any other cool ways to find funding for an application development project, please let us know in the comments section below."
  },
  {
    "title": "How To Tell What Platform A Website Is Built On",
    "plaintext": "Sometimes when you’re browsing the net and come across a nice-looking website that does something really unique or looks completely different you might think “man that’s cool, I wonder who built this website and how they did that”. You might jump to the conclusion that whatever they’re doing is only possible because they’re using some kind of crazy custom technology. Well, luckily for you, finding out what platform a website is built on actually isn’t that hard.No matter if you’re preparing for a website project or simply want to satisfy your curiosity. This article will run you through a few ways of not only finding out what platform a website is built on, but also the other technologies they’re running, such as advertising pixels, web server software, caches, and frontend libraries.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages to knowing what platform a website is built onIt’s normal to be curious about how things are built on the web. We love knowing what our competitors are doing, and you can learn a lot about a business from poking around their setup. But there are also some tangible benefits from having this information if you’re trying to get ahead on the web.Understanding what technology they’re using can give you an immediate advantage. For instance, if you find one of your rivals using Squarespace, Wix, or any other site builder, you know straight away that their digital strategy has a big vulnerability. No-code site builders like these are great as a starting point but they can never be optimised to the lofty standards that Google expects. They also don't tend to look as good as a site that was prepared using web design software and professionally developed.Another strategy that we see used (although we don’t necessarily condone it) is discovering what website platform and advertising channels a website is using as ammunition for pitching them on “better” services. We personally get a lot of cold emails inviting us to use a new and exciting advertising service because “your website isn’t currently taking advantage of this opportunity”.A more plausible direction from knowing this information is modelling your website or business on a competitor that has already proven to be successful. There’s no shame in copying something that is working.What is my website built with?Take a quick click around this website. I promise it will only take 5 seconds. Just click to see how quick it is.This site is built with Gatsby. If you're a WordPress user you may not be familiar with Gatsby and the kind of performance it can achieve. It's a static site generating framework built on React.I know you're probably just interested in figuring out what a website is built with, but you have to expect at least a small plug from the site owner ;).At Clean Commit, we build very fast websites and web applications. If you're trying to analyse a competitor or inspiration website and can't figure out what they're doing (even after reading this article) then drop me a line and we can talk it through.Tell me how to check what a website is built withThe two best approaches on how to find out what platform a website uses are browser extensions and free website services.Browser extensionsWe recommend using a Chrome plugin called Wappalyzer.This tidy little Chrome extension presents a nicely formatted display of the technology running under the hood. Most of the time, all you really care about is the CMS but it’s nice to have the other technologies laid out in an easily digestible format.To get started with Wappalyzer you need to be using Chrome, or a chromium-based browser, such as Brave. Once you’ve fired up your browser, head over to the Chrome store and install Wappazler for free.By default, Wappalyzer won’t be visible in your browser, as Chrome hides all of the installed browser extensions under the little puzzle piece symbol. Click on this symbol, and then the pin icon next to Wappalyzer so it will remain visible in your browser.There are tons of other Chrome extensions you can choose from. A few of the more popular options are:BuiltWithW3Techs.comWhatRunsSimilar Tech ProspectingWe wouldn’t recommend any of them, to be frank. If Wappalyzer was a 10/10, then its closest competition, BuiltWith, would be a 6/10. The interface is clunky and you’re required to sign up for an account before you’re able to use the plugin.One final tip - If you’re investigating a WordPress website and you want to know what theme it runs, you can dig a little deeper using WordPress Theme Detector or Scan WP. These plugins work the same way as Wappalzer, but provide details about the theme and plugins running on a WordPress website.Website toolsIf you don’t use Chrome, or don’t want to install an extension in your browser for whatever reason, there are also a handful of websites that can help you out. Most of the companies that have built browser extensions are a good place to start:WappalzyerBuiltWithSimilar Tech ProspectingThese sites are great alternatives to a browser extension. They’re only slightly less convenient and break down a website’s technology similar to their extension counterparts.The only reason we recommend using a browser extension over a website is that usually when you’re hunting around the web you don’t want to be flicking between browser tabs just to see what technology a website is running.Manually inspecting the website’s source codeThis last option to check the website platform is to dive into its source code. Sometimes this is the only way to figure out what technology is being used on a website, but it’s not a smooth process.To get started you can right-click somewhere on the screen and then choose to inspect.This will display the HTML that the browser reads to generate the web page.Now onto the fun bit, looking through the code to figure out what technology is running. This can be tricky unless you know what you’re looking for. As an example, the Clean Commit website runs a static site generator called GatsbyJS, so I’m looking for any mentions of “Gatsby”:Obviously, this trick is a lot harder if you’re not familiar with all the available website options.Around 1/3 of the web runs on WordPress. Most of the time, if you’re digging into the source code you can expect to find mention of a wp-something, such as wp-config, wp-includes, or wp-custom-css:It’s pretty obvious that digging through the source code is the hardest way to work out what platform a website is running, but sometimes it’s necessary to discover the exact tricks that a site is using. Digging down into the source code can show you the exact scripts, styles and HTML that was used to create a feature.Wrapping upWappalyzer is your best option for quickly discovering the technology running on a website. If you’re one of those people that worries about Chrome eating all of your computer’s RAM, and you don’t want to add another extension, then there are a handful of websites you can jump onto to find the answers."
  },
  {
    "title": "Hybrid Project Management - For Situation When Agile Doesn't Fit",
    "plaintext": "The overwhelming number of software companies claiming to run “agile” projects has become a bit of an inside joke in the industry.Over the past ten years, agile has become synonymous with software development. If you mention your company follows a hybrid project management methodology or heaven forbid a waterfall project management methodology, you’re likely to receive some odd looks.The truth about agile is that it’s not always practical.If you are part of an agency that builds software on behalf of clients that don’t have an unlimited budget but does has tight timeframes, then running a truly agile project is going to land you in hot water.In these situations, the client usually wants to know how long it’s going to take to complete the entire job, and what it’s going to cost upfront. It makes sense to plan out the project scope ahead of time and stick to a definitive schedule, even if it’s just to keep your client happy.However, we’re now describing a waterfall development methodology. Under this approach, we’d gather all the requirements at the start of the project, go through the design, develop the software and then release it for the client to review and test.This approach is also going to cause some headaches for your team. No one knows all the answers at the start of a project, especially if the thing you’re building is innovative and new. By the time the client gets a chance to play with the developed product, they may have a three-page list of things they want to be changed.Keeping in mind waterfall projects are usually fixed price, this is bad news for someone. You’ll either need to tell the client they’re paying for the changes, or pay for the additional effort yourself.What’s the solution, then? If an agile project isn’t going to give an accurate budget or timeframes, and a waterfall project is too rigid, what approach is the best?Well, that would be a hybrid project management methodology.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is a hybrid project management approach?A hybrid project management approach is simply a combination of one or more methodologies.Most of the time it’s a combination of the best parts of waterfall and agile.The biggest advantage achieved by an agile methodology is the feedback loop, where the product is being consistently tested, improved and reviewed. It’s also one of the most common reasons why waterfall projects fail.Borrowing this iterative approach from agile and inserting it into the regular waterfall methodology helps increase ongoing communication between the stakeholders and achieves a more dynamic approach to ensuring the right features are incorporated.This effectively addresses the two biggest disadvantages of the waterfall methodology; lack of deep collaboration with the client, and frequent product reviews.How does it work?A traditional waterfall approach follows this general flow: 1. Discovery & requirements gathering 2. Design 3. Development 4. Internal testing 5. User acceptance testing 6. Production deploymentThis translates nicely into GANTT charts as seen below.Whereas an agile methodology follows this general cycle: 1. Brainstorming and developing user stories 2. Design and prototyping 3. Development 4. Testing 5. Deployment 6. Client review 7. Feedback, features and issues pushed into the backlogWhen we combine the two approaches into one methodology, it ends up looking like this:The project follows a lot of the traditional path of a waterfall project but also gives the stakeholders a chance to give feedback during a series of development iterations.The other big difference that isn’t spoken about quite as much is cutting back the amount of documentation required. Waterfall projects are run to the letter of the law can feature mind-boggling amounts of documentation.That isn’t to say this is a bad thing, but it can seriously slow the project down. Between weekly status reports, project plans, risk registers, issue logs, project charters, contracts, stakeholder registers, and a ton of other documents, the volume of documentation can feel overwhelming.Adopting a hybrid methodology gives the team a chance to revise which documents are completely necessary, and choose as many or few as required to get the job done.Wrapping upAs a small development team always looking to find more efficient ways to manage our projects, we’re open to trying new things. No matter if the approach is Agile, Waterfall, Scrum, Kanban, ShapeUp, or any other countless methodologies, we’re willing to try it if it seems like the right approach for the job.In some cases agile just doesn’t work. Similarly, there are plenty of times when using a waterfall approach is going to cause issues.The solution is to pick the best parts of both and run a hybrid approach. It provides more flexibility while providing all the structures and estimates we’ve come to know and love from a waterfall approach."
  },
  {
    "title": "How To Calculate ROI On Moving To Headless Shopify",
    "plaintext": "Converting your existing Shopify store into a headless setup is a big decision. Unless you’re an experienced developer or have an in-house team that are familiar with static site generators and the JAMstack, chances are you’ll need to work with an agency or contractors to make the change, which means paying for it. Before you make that decision, it’s worth figuring out what return on investment you’ll see.You might not know exactly what a headless Shopify configuration is but you’ve heard that a lot of larger companies are moving in this direction.The Strategic Tech Upgrade 14 Businesses Used To Turn Their Store's Struggles Into Massive GrowthGet a detailed breakdown of 14 businesses that set goals to improve their bottom line, and then used a headless architecture to make it happen.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHere’s a quick overview of how headless Shopify configurations work. It helps to start with how a monolithic Shopify website works:Shopify runs backend code on it’s servers that dynamically generates the content to be displayed on the storefront. Each time a new visitor hits the site, queries run on the server that tell the frontend to display particular products, images, text and other page elements.This is obviously skipping over a lot of other steps like DNS resolutions, handshakes, load balancing, caching, database parsing and a ton of other less relevant actions,In contrast, a headless Shopify website works like this:The front and backend are decoupled and interact through APIs. Rather than the content being dynamically generated on the fly when a user visits the site, all the images, text, products and other content have been “pre-rendered”. This means they can be delivered incredibly fast since there’s no logic that needs to run to figure out what should be served.Working out your return on investmentTo figure out your return, you’ll need to know a few variables: * Current page load time * Monthly website traffic * Average conversion rate * Average cart value * Cost to upgradePage load timeThe two best tools for page load time are GTmetrix.com and Google Page Insights. We’ll stick with Google Page Insights for this example.Open up the site and plug in your URL to record your “time to interactive”.Traffic and conversion ratesIf you’re a conscious shop owner, you probably have these numbers on hand. If you don’t, then head over to your Shopify Analytics dashboard. All the metrics you need are listed on this dashboard.Calculating your increase in revenueThe conversion figures below were gathered in a study of 26,000 eCommerce websites based on their load times.We’re going to use these metrics as a guideline. It’s worth pointing out that these are aggregated figures so some weighting is required.To calculate your increase in revenue, we’re going to assume a sub-1 second load time using a headless setup.Here’s the formula:(Conversion rate x <1s improvement %) x monthly traffic x average cart valueHere’s an example of this formula: * 3 second load time * 1.5% conversion rate * $34.75 average cart * 100,000 monthly visitorsLet’s start by figuring out the monthly revenue baseline:100,000 x 1.5% x $34.75 = $52,1253 second to <1 second load time would be an improvement of 2.93% to 8.11%, which works out to be 176.79% improvement as illustrated below.(8.11% / 2.93%) -1 = 176.79%We multiply the shop’s average conversion rate by this improvement:1.5% x 176.79% = 2.65%Finally, we take the monthly traffic and average cart and multiply it by the new conversion rate to work out the new monthly revenue numbers:100,000 x 2.65 x $34.75 = $92,087.50That’s a $39,962.50 increase in monthly revenue.Cost to upgradeThis metric is, unfortunately, a bit of a finger-in-the-air situation because there are too many variables to accurately predict how much a headless Shopify conversion will cost.The biggest time-consuming activities in converting a Shopify store to headless are rebuilding the theme layer, integrating a CMS, and creating custom functionality previously achieved by plugins.Rebuilding the theme layer typically takes the most effort, and it can help to take a quick audit of how many different types of pages your site is currently running. These are examples of page types: Home, About, Products, Categories, Cart, User Reviews, and Accounts.Then have a look at what plugins and apps your site is running. Most plugins will need to be recreated manually since a headless set-up breaks the native communication between Shopify's frontend and backend.Scoping projects is a tricky art. To give you a bit of a ballpark, a large headless shop will take anywhere between 600 - 1000 hours to complete, with a rough breakdown of tasks like this: * Design: 150 * Frontend interface: 400 * CMS Integration & Logic: 100 * Testing: 40 * Project Management: 40 * Deployment and configuration: 8 * Total: 738 hoursMost agencies will price this work against a standard rate or a rate for each task. Assuming a mixed rate of $100/hour, this project would cost:738 * $125 = $92,250.###Return on investment In our example above, the store has gone from a monthly revenue of $52,125 to $92,087.50. Over the course of a year, that’s a gain of $479,550. The cost of the project was $92,250.The return on investment would be:$479,550 - $92,250 = $387,300Keep in mind that this is simply year one. As time progresses, the return on investment continues to compound.Future proofedThe return on switching to a headless Shopify store would continue to compound beyond year three.Headless configurations are relatively new, so it may sound like a bold claim to work out the return on investment beyond the first year. Things in the web space change quickly so who’s to say there won’t be a better solution coming out in the near future?It’s a legitimate question, but the fact is big companies are making the switch to headless Shopify in droves. Here are some recognisable companies that have made the switch: * JB-HI Fi * Staples * Koala * Deliveroo * InkboxThese companies would have invested tens, if not hundreds of thousands of dollars to switch to a headless configuration. The best indicator of when technology is here to stay is when it’s adopted by the big players.Is Headless Shopify Right For Your BusinessNow that you have some hard metrics around the potential return on investment of moving to a headless setup, you need to weigh up if the move is right for your business.It’s easy to argue that the return on investment alone should sway the decision, but there are other factors to consider. Moving to a headless setup isn’t right for every business. For starters, you need to have the budget to fund the conversion project.Your store may be working perfectly and receiving relatively low levels of traffic.Or it may already be loaded in around 2 seconds.Maybe your site is super reliant on plugins that need to be manually developed under a headless architecture, raising the project cost.There are plenty of reasons why moving to headless may not be the right choice. Before making the jump, talk to a headless Shopify specialist to weigh up the pros and cons."
  },
  {
    "title": "How to measure your website's core web vitals",
    "plaintext": "There’s a lot of buzz around the Google search engine ranking update coming May that promises to focus on “core web vitals” and the overall page experience a website creates.Anytime Google implements a major algorithm change, it creates opportunities and risks for businesses that run significant operations on the web. This update is particularly important for any website competing for highly competitive search terms.This summary from Google’s press release summarises the reason:While page experience is important, Google still seeks to rank pages with the best information overall, even if the page experience is subpar. Great page experience doesn't override having great page content. However, in cases where there are many pages that may be similar in relevance, page experience can be much more important for visibility in Search.What this says to blog owners is - if you’re one of a hundred articles with similar content, but your website presents an excellent experience for your users, we’ll push your content further up the rankings.SEMrush ran a study in April that found almost 84% of websites in the U.S. scored either “Poor” or To Improve” on their core web vitals assessment. There’s no doubt that a decent number of these websites owns the top spot on a number of keywords. This means there’s a huge opportunity for businesses that are prepared to fix their core web vitals.Web Experience OverviewThere’s a lot to unpack with this update. These are the factors Google considers most important for a good website experience:This article is going to focus solely on understanding and measuring your Core Web Vitals. We’ll break down what each metric is and the best tools for investigating your site’s current performance.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitLargest Contentful Paint (LCP)A website’s LCP is measured by how many milliseconds it takes to load the biggest thing on the page, relative to when the page first starts loading. This is often a video, hero section or even a cookie notice.The illustration above shows that the target to pass the largest contentful paint assessment is 2.5 seconds or less.Largest Contentful Paint may not seem like the most obvious metric to gauge website performance. It could be argued that First Meaningful Paint and Speed Index would make more sense. And they probably do, but Google has argued for “keeping it simple” with LCP.Largest Contentful Paint is something we have worked hard on with our own website, as you can see from the image below.First Input Delay (FID)First Input Delay describes how long it takes for a website to respond to the user taking an action like clicking a button or link. Most of the time this happens pretty fast, but there are a lot of factors that can contribute to this speed.There are enough poorly developed websites out there that we’ve all been in the situation of opening a web page, clicking on a link or a button and waiting for what felt like… too long before something happened.This is usually caused by the browser being tied up parsing an unnecessarily large JavaScript file before it could complete the action we requested. This situation is referred to as “blocking time”, or the time when the browser is working on code further up the line before it gets to your request.For your website to pass the First Input Delay assessment, it needs to respond in 100ms or less.Cumulative Layout Shift (CLS)Have you ever found yourself on a less reputable site that is covered in advertisements? You get attacked by popups as the site loads. As you try to close them they jump around the screen and you accidentally end up clicking on one. Now you’re stuck in a loop of trying to close questionable websites that keep opening out of nowhere!The unexpected movement of an element on the page can be super annoying, and that’s exactly what Cumulative Layout Shift is measuring.Unfortunately for developers and website maintainers, it’s often the hardest thing to solve, especially if you’re using plugins that insert their own styles onto your site.Funnily enough, one of the biggest culprits of CLS is advertising… and Google is probably the leading cause since it owns most of the advertising.Regardless, there are steps your website needs to take if it wants to eliminate CLS. One suggestion from the Gatsby team is to preload SVGs onto your site in the areas where your ads will display once they load and render.To understand the CLS target score, we need to understand the measurement definition.Layout shift score is measured by calculating viewport size, how far the element moves on the screen and how much of the screen is impacted by the moving element.The official Google definition is a little more complex, but this is the general gist.Your website should be shooting for a CLS of 0.1 or less.Measurement ToolsThe days of measuring website performance with GTMetrix or Webpage Test are over. Google has a new breed of sanctioned tools for measuring core web vitals.These tools measure two kinds of data; lab data and field data.Lab data is captured in a lab setting. This is sometimes described as synthetic data because it’s run through a performance tool specifically to test performance as a snapshot.Lab data doesn’t take into account a lot of the real-world factors like network connection speed or the users’ location around the globe.Field Data is real aggregated user data is combined from Android devices and Chrome browsers. To make use of this data your website needs to have enough active visitors for Google to make observations.Some of Google’s performance measuring tools only capture lab data, some only report on field data, and others do both.When your site’s performance is being assessed and Google is ranking your content in the search results, they will only consider field data. This is important to keep in mind when you’re investigating your website’s performance. If your computer and network connection are super fast, then your lab data results may be hiding real problems.It’s important to optimize your site for everyone because your visitors will probably be using old phones, intermittent network connections, and even underdeveloped infrastructure.When you’re auditing your site, it’s a good idea to use a handful of Google’s assessment tools. Each has a different strength.PageSpeed InsightsPageSpeed Insights is probably the most well known of Google’s performance assessment suite. It provides a lovely interface and returns performance results in a way that’s quick and easy to understand.It’s not the most in-depth or detailed of all the tools available, but it works really well as a quick snapshot.LighthouseLighthouse is a step up in detail and sophistication from PageSpeed Insights. It is part of the Developer tools available in the Chrome Browser.Since Lighthouse captures lab data there are things you can configure on your computer to artificially improve your websites’ score, such as turning off all browser extensions or using an incognito tab.Lighthouse is a super useful tool for developers because it’s open-source and can be accessed via API. This opens up a lot of cool opportunities like including Lighthouse audits during your website’s build process to keep on top of how your site is performing.Chrome UX ReportChome UX Report is a set of field data that assess aggregated user experience with a website. Google measures the real data from users that have opted in on Android devices or Google Chrome, analyses it and presents it as the Chrome UX Report.Unlike Lighthouse and PageSpeed Insights, Chrome UX Report doesn’t have a graphical user interface to interact with. It can be accessed via BigQuery, Google Data Studio or via API.Some of the Chrome UX Report data is also exposed on the PageSpeed Insights report.The benefit of using Chrome UX Report is that it paints a more accurate picture of your overall user experience because it’s taking data from a large number of different sources, and over a longer period of time.Google Search ConsoleMost website owners that take their traffic and website performance seriously would have used Google Search Console. It offers a broader set of reporting data to show how users are finding and interacting with a website.Google Search Console also has a dedicated Core Web Vitals assessment tab.Search Console is the best 10,000-foot assessment of your website’s performance because it identifies large groups of pages that need attention. Performance is grouped by status, metric type and URL group which makes it useful for figuring out performance issue patterns.Chrome Dev ToolsIn addition to Lighthouse, Chrome offers a much more robust set of developers tools that can dig deep into performance issues. You can access these tools by opening up Chrome, selecting the settings menu, more tools, then developer tools.Once you’re in the dev tools menu, choose the Network tab and refresh your website.The network tab records all the requests the browser makes to load assets onto the page. This detailed waterfall breakdown provides a lot of information into which elements are taking time to load onto the page.The performance panel offers a similar set of tools where you can measure a broader set of events across your site to identify problem areas. There’s also a new experience that can help you assess unexpected cumulative layout shift issues!What’s next for Google?Google announced that the core web vitals updates would be rolling out slowly starting from the end of May.With the publication of these assessments and the suite of performance measuring tools Google has developed, it seems likely that creating a user experience that passes the test will become harder over time.We’re expecting that Google will release more metrics and tweak the way they measure the current metrics.One prediction Jono Alderson from Yoast has made is around a “smoothness” metric that seems to be referenced by Google every so often. This would probably focus on high animation framerates.As the web evolves to be a more inclusive and accessible experience, it’s likely that a website’s accessibility will play a bigger part in its ranking performance.How to fix my core web vitals?There’s an unlimited number of factors that can have adverse effects on your website’s core web vitals. However, there are a handful of techniques you can apply to to get your website 90% of the web to passing your assessment.In our next article, we’ll cover the 7 optimisation steps you should take to get your website ready for the core web vitals update.Check back frequently for tips and tricks on how to keep your website running fast and passing Google’s assessments."
  },
  {
    "title": "7 Optimization Steps To Pass Core Web Vitals Assessment",
    "plaintext": "The idea of auditing your website’s code line by line in an attempt to get it optimized in preparation for Google’s June 2021 algorithm update is incredibly daunting. Before you dive down the rabbit hole, you should tick off these 7 optimization steps that will help you pass your core web vitals assessment... or at least get you 90% of the way there.We should point out that most of these tips are pretty high level. We’ve added a handful of resources at the end of the article if you need to dig deeper.Only about 16% of all the websites in the U.S. are currently passing the core web vitals assessment. This is evidence that it’s not simple to pass without thinking through the metrics and making the right changes to how your site operates.Before we list the steps, you should quickly brush up on how to measure the core web vitals on your website to check how you’re currently performing.Alright, on to the list.1. Use a Content Delivery NetworkDelivering assets through a CDN helps reduce the physical distance between the request and response, reducing the network latency. Reducing network latency improves your sites load speed, particularly for requests that are a long distance apart.Using a CDN can have a direct impact on your site’s Largest Contentful Paint.If the biggest element on your page (i.e. your largest content) like a hero image, is hosted on a server on the other side of the world, the network latency can have a significant impact on how long it takes to load.Uploading your site’s content onto a CDN means that a version of that file should be physically closer to the browser trying to load it.Setting up a content delivery network is fairly straightforward, depending on how your website is set up. For websites built using a static site generator like Gatsby which is our go-to framework, CDN configuration is as simple as deploying to Cloudflare or Amazon S3.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit2. Render A “Shell”Cumulative Layout Shift can be a tricky problem to fix, especially if your website makes heavy use of advertising, embeds or iframes. Sometimes these elements can load onto the page in unexpected ways and cause all of the other elements to do a little dance.To address this problem your website should render a “shell” using CSS to reserve the space where these problematic elements will appear once they’re loaded in.Make sure when you’re reserving the space with placeholder content that you’re using the right dimensions otherwise you’ll end up with CLS.It’s also a good idea to keep your non-sticky ads away from the top of the page and avoid collapsing the space when no object is loaded.3. Use Inline StylesInline styles are generally frowned upon by the development community. And rightfully so. Using inline styles everywhere is just a messy way to organise your code.But loading the “critical” parts (anything above the fold) of your site with inline styles means they don’t have to readjust when the style sheet is downloaded separately. This goes a long way to preventing CLS.This is another benefit we’ve found from using GatsbyJS. Using a plugin like Gatsby-styled-components, it will take the finished components and inline the styles for you!4. Stop Requests From Blocking Page LoadBefore the browser can render the page it needs to parse the HTML markup. Anytime the browser hits a script that needs to be executed, it will prevent the rest of the page from rendering.The name of the game here is to avoid these scripts if possible.But this isn’t realistic advice.If you can’t get rid of it, there are two other options. If it’s small, you can inline the script to avoid excessive network requests. But If the script is too big, this will reduce your initial load time.The second option is to defer the loading of the script to avoid impacting the page’s load time. This only works if the functionality added by the script can be delayed for a couple of seconds.5. Delay third-party scriptsThis step is pretty similar to the last.As Google says on their blog;“Third-party scripts are a predominant cause of performance slowdowns and are often caused by resources outside of your control.”This statement is kind of ironic because it’s often Google Tag Manager, Google Ads, YouTube or some other Google-owned service at the heart of the issue.Regardless, if you identify a third-party script that is necessary on your website but affecting your performance, it’s best to delay its loading or set it to load asynchronously.6. Minimize JavaScript Bundle SizeIf you’re not mindfully optimising your site as it comes to life it’s easy to fall into the trap of including overly heavy libraries and leaving “dead code” in your website. Failing to lighten the initial bundle size can impact both your LCP and FIP.Where possible, hunt out lightweight libraries. For example, if you’re loading React across your project but only using a handful of the modules, you could consider switching to Preact (3Kb) as a lightweight alternative.Removing dead code from your initial payload (and across your entire project) is an obvious optimisation to suggest. It’s not always the easiest to implement, especially if you’re working on an older project.Where possible try to minify your code. Refactoring your JavaScript can be challenging and time-consuming, but it’s all in the name of optimisation!Finally, if you’re using a code bundler like Webpack, you can consider bundle splitting. This approach uses new routes to dynamically fetch modules at the time that they’re required rather than loading them when the site initializes.7. Progressively Load ImagesProgressively or lazy loading images can significantly decrease your website’s initial payload and reduce the amount of data a user needs to consume to interact with your site. This can have a direct impact on your site’s LCP score since big poorly optimised images hiding somewhere on a page are often culprits of high LCP scores.Loading images into the document’s markup at a lower resolution can also help avoid CLS. It also makes for a better experience as a user. It’s hard to articulate exactly why, but waiting for an image to turn from low to high resolution feels intentional whereas waiting for an image to appear out of nowhere feels clunky.Other resourcesThe purpose of this article wasn’t to create a forty thousand word document on fixing your core web vitals. Keeping with the theme of quick load times and optimisation, we’ve tried to keep our recommendations lightweight.However, you might need to dig deeper to fix specific issues. The following articles are great reading to help you push through more specific issues for each metric:https://web.dev/browser-level-image-lazy-loading/https://web.dev/optimize-cls/https://addyosmani.com/blog/performance-budgets/https://developers.google.com/web/fundamentals/performance/why-performance-matters/https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/https://developers.google.com/web/tools/lighthouse/audits/time-to-interactivehttps://www.contentful.com/blog/2017/10/10/put-your-webpack-on-a-diet-part-1/https://www.keycdn.com/support/the-growth-of-web-page-sizeConclusionTime is drawing near to Google’s user experience release. If you’re in the same position as us, you’re probably a little anxious about the impact it will have on the websites you manage, but also looking forward to the results.If you’re worried about the impact it will have on your poorly configured site, now is the time to act."
  },
  {
    "title": "Is Headless Shopify More Expensive?",
    "plaintext": "Are headless Shopify stores more expensive to set up and run than a traditional store? The short answer is yes... but they tend to make more money.A better question is “does it make sense to invest in a headless Shopify store”? Doing a quick review of your monthly operational budget, amount of traffic, and product range will give you a definitive answer.Let’s start at the top though. It’s worth a quick overview of how headless Shopify stores are different from the traditional setup.What is headless Shopify?In a nutshell, making Shopify headless is achieved by separating the backend code that runs on the server from the frontend code that runs in the browser. In a traditional shop, this code is “coupled” together.The backend code and frontend code still communicate in a headless setup. However, it’s done via API. This frees up the frontend to run more efficiently without the weight of the full database.The most important thing to know about headless Shopify setups is that they’re designed to solve specific problems that are inherent in Shopify, and pretty much all of the popular eCommerce platforms.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat problems does going headless solve?Shopify was originally created in 2006 by a couple of guys trying to sell snowboards. They were unhappy with the tools at the time and decided to build a solution that would make eCommerce more accessible for business owners and marketers.Since then, Shopify has grown to host 500,000 active businesses, which collectively turned over $36 billion in revenue last quarter.Shopify has enabled small businesses to quickly get online with all the tools they need to start selling quickly.But this is one of the biggest drawbacks of Shopify. It was created for small business owners and non-technical professionals to create online stores. When these stores reach a point when they’ve outgrown the platform, Shopify’s architecture and tools make life difficult.Shopify stores naturally start to slow down as their product range and inventory grows. And as stores start to slow down, users because less likely to stick around and complete a purchase, which hurts the bottom line.Another significant drawback for creating complex Shopify stores is that the developer experience is… well, kind of garbage. Developers are used to working in a particular way, with version control, CI/CD tooling, working on components, and using modern frameworks. Shopify doesn’t make any of this possible out of the box.This doesn’t mean custom Shopify themes can’t be created, and developers won’t work on Shopify. It just means that developers are forced to use Shopify’s unconventional and inefficient approach.Finally, Shopify’s backend and frontend code are tightly coupled. Changing the interface can often break how the backend code pulls in data. As a consequence, making beautiful and interactive interfaces is very difficult.You could argue that this isn’t the end of the world and some of the default Shopify templates look okay.Keep in mind that eCommerce is a cutthroat landscape. There are hundreds of thousands of stores competing for the same keywords, trying to find the slightest advantage to outmanoeuvre their competitors. Being locked into a mediocre interface creates an average user experience and impacts conversion rates.A lot of these issues can be addressed by moving to a headless Setup. Although, there’s a lot of planning and work involved to unlock the benefits of a headless setup.What are the benefits of headless Shopify?SpeedThe most tangible benefit of moving to a headless setup is how fast it is to interact with. Faster websites create a nicer experience for users and as a result drive higher conversion rates.According to Gatsby’s senior product manager, Jack Sellwood, stores that move to a headless setup see an average of 30% increase in conversion rate.The Gatsby guys also wrote a great piece on Jaxxon.com and the 100% conversion rate increase they achieved by going headless. Incredibly they reduced their bounce rate from 40% to 12%!Increased Search Engine Optimization TrafficGoogle also looks favourably on websites that load faster. This is especially true with the Page Experience algorithm update coming June 1st, 2021. So the faster your site loads, the more optimised its search engine visibility will become and the more traffic will hit your site.Ship features fasterHeadless setups can ship features faster because work can happen on both the front and backend at the same time. But more importantly, teams can adopt agile approaches with proper version control.Create unique and beautiful user interfacesGoing headless means all the amazing modern JavaScript frameworks are unlocked. Headless Shopify stores don’t have to adhere to any templates or follow any trends. Need a highly interactive component to display different product sizes? No problem.Integrate your favourite content management systemShopify is great at a lot of things, but managing content isn’t really one of them. Going headless means you can use Netlify CMS, Contentful, Prismic, or even WordPress for writing blog articles, updating your site’s images or changing specific headlines. At the same time, you get all the advantages of Shopify’s incredible product catalogue, payment processing, and order management tools.Keep customer data Safe & SecurePre-rendering all assets takes any server interaction out of the equation. This significantly reduces a website’s attack surface and makes a hacker’s life a lot harder. Infiltrating a set of APIs to access customer data is a much more challenging task, and improves the website’s security.Progressive web application (PWA) functionalityDepending on which framework you choose to work with, achieving mobile PWA functionality like push notifications, offline mode and adding a bookmark onto the device’s homepage are easily achievable. These features all go a long way to creating a great experience for mobile users.Demo Headless Shopify StoreIf you’re still trying to get a handle on what headless Shopify stores look like, head over here to check out this simple store built with Gatsby.How much more expensive is headless Shopify?Finally, on to the real question. Is going headless more expensive than a traditional Shopify setup?Going headless means you’re going to be using more tools so it’s likely that the ongoing costs are going to be a bit higher. For instance, if you decide to add Contentful ($300) and Segment ($120) into your headless setup, your monthly recurring cost is already higher than it would be if you were just using Shopify.However, it’s possible to use a content management system like Prismic, which is $7 a month, and a free analytics platform like Google Analytics.The real costs are incurred in setting up the store. Developing any kind of high-end Shopify store will require hiring an agency because you’ll need a team with web design and development skills.Agencies are typically more expensive than individuals because they carry overheads. This is reflected in the prices you’ll find by Googling “average custom Shopify theme price”. You’ll see prices anywhere from $500 to $70,000.Employing an agency to create a headless Shopify store will cost roughly the same as creating a custom Shopify theme. This is completely unbacked by research and only based on our professional experience as an agency that designs and develops headless Shopify stores.The biggest factor impacting the price of headless Shopify stores is plugins. A lot of Shopify plugins are designed to add functionality to the front and back end. Moving to a headless setup disconnects this relationship and breaks the plugin. Re-engineering the plugin can be a time-consuming affair.Should I choose a regular store or headless Shopify?Headless Shopify stores are generally a good choice for established businesses but there’s a handful of more specific situations when going headless makes sense.Reduced performance from a high number of productsLike most monolithic platforms, Shopify’s performance tends to suffer as it grows. The performance debt of filling a database with tens of thousands of products, orders, customer details, images, and all the other content bleeds across the site.With performance becoming increasingly important, it may make sense to jump ship to a headless setup. The benefit of taking this approach is there is no data migration required.Adding products to an existing blogIf your website has a well-established blog that you’d like to supplement with products, then headless Shopify is a great option. It’s even possible to set up a headless store with Shopify light to minimise the ongoing costs. Although, be warned that Shopify Lite supplements its low ongoing cost with a higher transaction fee.Complex user interface requirementsSome stores need complex JavaScript components. For instance, all the big sunglass retailers have implemented a virtual try-on feature where the user can see what the sunglasses will look like on their face.Going headless means powerful frontend frameworks like React can be employed to create visually complex and creative user interface components.Keeping up with the technical landscapeIf you’re working at a start-up that has rapidly changing requirements, then locking into a technology stack can be a costly mistake.Going headless means new services can easily be integrated into the stack. This is exactly how Koala runs their setup. They’ve taken it one step further and deconstructed their architecture into microservices that achieve one avenue of functionality.This has made them incredibly responsive to change. As their head of technology, Richard Bremner says\"Most companies would kill for our velocity.\"Wrapping upHeadless Shopify stores are a bit more expensive to run on an ongoing basis, and they do have a high set-up cost… but it’s a growth play.Achieving conversion rates that are 30% higher than traditional stores is nothing to sniff at. Especially when it’s paired with the flexibility that comes with going headless.There’s a ton of benefits of going headless. It makes sense for most established businesses. If you’re tossing up between paying for a custom theme or going headless… go headless!"
  },
  {
    "title": "I Have An Idea For An App",
    "plaintext": "You’ve got an ideaYou’ve had an idea for an app. It’s an exciting time. Everyone knows that there’s a ton of money to be made from creating an app that solves a problem.Even if you’re not focused on the money and just think you know a great solution to a problem, it can really motivate you to take the next step.What’s next?You’re probably thinking you need to find a lawyer to write up a non-disclosure agreement. You don’t want your idea to be ripped off before you get a chance to get it up and running.Whoa there nelly.The first thing to know is that ideas are a dime a dozen.I’m always happy to sign an NDA when potential clients approach Clean Commit… but not before I roll my eyes.The amount of sweat, blood and tears that goes into creating a successful application is immense. As someone that gets paid to help entrepreneurs along this journey, the concept of stealing someone’s idea sounds like unpaid work.This isn’t to say that a great idea isn’t worth keeping close to your chest. There’s no harm in getting the cogs moving early, but the chances of someone stealing your idea and taking it to the bank area very low.So my advice is don’t start with an NDA. There’s plenty of other things to be putting your time towards.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhere to startThe first practical step is to check if your app already exists. Sometimes this can be a bit tricky if the app hasn’t made a big splash. You might need to plug a few different terms into Google, check the Play Store and the Apple App Store.Once you’re certain your idea isn’t already on the market, it’s time to assess if it will make money.There are a few major considerations that will get you to this conclusion: 1. Does the problem have commercial value? 2. Is the idea unique? 3. Can the idea scale?Does the problem have commercial value?If people are willing to pay for a solution to the problem you’re solving, then it’s got commercial intent.One easy way to figure this out is to use Google Keyword Planner.To unlock Keyword Planner you’ll need to sign up for Google Ads. Don’t worry, it’s free and you don’t need to spend any money.Once you’ve signed up for Google Ads, you can find Keyword Planner by going to the Tools and Settings menu, then Keyword Planner.Now you’re in Google ads, you can search for search terms that represent the problem you’re solving.Takes this example:We’ve had an idea for a web-based application that will let users buy pre-made meal kits for baking their own muffins and cupcakes. The app will let them mix and match the kinds of cakes they want and will send them the ingredients to cook at home.To validate the commercial intent of this idea, I’ve searched for “cake home delivery”. This phrase roughly represents the problem I’m solving.Looking at the results, I can see that in Australia to get to the top of the Google results I would have to spend at least $0.98 but could spend as much as $5.17 for a single click.This means other businesses are advertising for these keywords. And if other businesses are spending money on advertising, it means they’re making money from this traffic.Please note that this method isn’t fallible. People often won’t be searching for the solution to a problem until they know it exists.Gabriel Weinberg, the founder of Duck Duck Go talks about how startup founders are often 5 to 10 years ahead of the curve and need to wait for the rest of the market to catch up.There are also situations where getting a large volume of users can open up monetisation doors through advertising and affiliate product sales. As a general rule, if your app is going to be free for users then it needs to be able to achieve viral popularity to be commercially viable.Does it have a unique selling proposition?Your app doesn’t need to be something that no one has ever seen before. Great apps often iterate on existing products to solve unique problems.One of my team’s favourite apps is Figma. It’s revolutionised the way we collaborate on web design projects. Before Figma, we had to pass versions of static Photoshop files back and forth. Only one person could work on the design at any given time, and the feedback cycles were slow.Figma solved this problem by adding a unique spin on an existing set of tools.But at its core, Figma is just a different version of Photoshop. In fact, it’s actually got a lot less functionality than Photoshop.The way Figma is positioned and the tools they’ve made available for web designers on Windows, Mac, and Linux made it the perfect fit for our business.This is Figma’s unique selling proposition. It gives web designers all the tools they need to create beautiful, interactive websites and applications while collaborating in real-time with their online teams.Having a well defined unique selling proposition is critical to the success of any application.If your app doesn’t do something different then it’s not going to stand out.Can the idea scale?If your app relies on manpower, high levels of administration, or enabling local businesses, it may not be able to scale to the masses which is a key ingredient for success.Going back to our cake delivery business, this idea has the potential to scale. While the app was gaining its first few hundred users, the physical preparation could happen locally or even in a home kitchen.As the business grew to thousands of users, a warehouse and commercial kitchen could be brought into the equation to handle the increased volumes.On the other hand, if your idea for an application was to create a framework for offering live training for aspiring home-bound chefs, then there would be a natural ceiling on how large the application could scale. You would eventually be restricted to how many training sessions could be offered each day.There are usually ways to overcome scaling issues.In the training example above, the model could be changed from live to recorded training. This would open up new timezones and eliminate how many sessions a day could be offered.If you’re happy that your idea has going to make money, solves a unique problem, and can scale to the masses, then it’s time to start planning how it gets built.Defining your requirementsWriting down what you want your app to be able to do is incredibly important, and it’s a step few business owners do properly. Forming a thorough set of requirements will: 1. Lower the cost of hiring designers and developers 2. Improve your chances of building a high-quality application 3. Give you more control over the projectThe advice I give to digital entrepreneurs going into a software development project is to think about your project like you would building a house. You don’t need to draw up blueprints or know the specifics of how the plumbing will be installed, but you need to tell the builders what features you’re expecting.Should each room have a walk-in wardrobe? Do you want a double garage? Should there be a workshop somewhere in the house? More specifically, where should the power outlets be in the workshop? Does the door need to be a certain width to get new tools in and out?The mistake we often see from enthusiastic entrepreneurs is that they have the outline of an idea, but haven’t thought through all the ways it could come together. It’s not that they don’t want to be in charge of this process, it’s simply that they’ve skipped over it.How to write your requirements downThere are a number of popular ways to document requirements. The one we recommend is based on an agile methodology and focused on splitting the groups of functionality into “epics” and “user stories”.Epics are large bodies of work that can be broken down into a number of smaller tasks (called stories).Stories, also called “user stories,” are short requirements or requests written from the perspective of an end-user.Here’s an example of how this format looks.EPIC: Payment systemUser story 1: As a user, I want to be able to pay with my credit card so I can purchase and receive my cupcakes.User story 2: As a user I want the app to remember my payment details so I don’t have to type them out each time.Writing requirements this way can be a little overwhelming. It helps to start with the app’s biggest features (epics) and break them down into smaller chunks of functionality.The great thing about this approach to documenting your requirements is that you don’t need to understand how the requirement will be accomplished. In fact, you should avoid mentioning any implementation approach in the requirements.Here’s what we mean by this. The first example is a poorly written use story because it’s prescriptive of how the requirement should be achieved.Poorly written:As a user, I want to be able to submit a form that appears in a pop-up and have my results display as an animation so I know that everything worked.In this situation, a form and a pop-up may not make sense. If that was the case, then achieving this requirement would either force the developers to build a less than perfect solution or not meet the requirement.Writing flawless user stories takes a lot of practice, so don’t worry if you’re not nailing it on your first try. Just get as many of the features down as you can.Figure out your promotion strategyThe next massive hurdle to overcome is working out how to promote your application.Unfortunately, this challenge kills more apps than anything.Gone are the days when you can throw up a new mobile app on the app store and expect people to see it. There are roughly 1,830,000 apps available on the iOS Apple App Store. Each day another 700 become available. These statistics don’t factor in how many new web or Android apps enter the market each day.The sheer volume of apps is barely conceivable. Getting noticed among the volume takes strategy, work, creativity and money.There are plenty of great write-ups about ways to promote a new application or service. Experts like Julian Shapiro have written extensive guide detailing the strategies. Even touching the surface of this topic would be a 5,000-word article of its own.All we’ll say here is that you need to have a well thought out plan and start executing on it as soon as possible.Getting your application noticed is 90% of the battle.Time to buildPick a partnerIt’s time to find someone to help build your app. Your choices here are working with an overseas freelancer, local freelancer, overseas agency or local agency. There’s wild variation in prices and quality. We’ve tried to summarise the experiences below.Overseas FreelancerOverseas freelancers can be found on platforms like Upwork or simply by searching for “app developer” in Google. They’re the cheapest source of labour and often live in India, Central Asia, and Eastern Europe.Pros: * Cheap * Immediately available * Eagle to do a good jobCons: * Poor communication * No formal qualifications, or poorly trained * Oversell their abilities and underperform * Require a huge amount of management * Often ask technical questions that will leave you feeling lostWe’d suggest staying away from overseas contractors unless you already know what you’re doing and want to bring in some hands to make the work go faster. In general, you’ll end up wasting money and wishing you’d worked with someone more experienced from the start.The exception to this rule is if you’re working with an overseas freelancer that lives in a developed country, or has had experience working with a big corporate entity.Local FreelancersLocal freelancers are a mixed bag. Professionals often walk this path when they’re sick of working for “the man” and want flexibility in their schedules. Sometimes you’ll find a local freelancer that is highly qualified, tertiary qualified, and very good at their job.The price range on local freelancers is another variable that has a huge range. Affordable professionals can be uncovered, but you’ll find a few that charge rates only governments or big companies could afford.Pros: * Can speak face to face which helps with communication * Requirements are usually met * They can give you advice and support that extends beyond the projectCons: * They usually work solo and will be good designers or good developers but not both. * Sometimes they’ll overinflate their rates because their time is in demand * Can be slow because they spread across multiple projectsLocal freelancers can be a great choice depending on the complexity of your project, and how quickly you need it done. Do your research before committing to working with someone. Make sure they fully understand what you want to build.Overseas AgenciesOverseas agencies share a lot of the same traits as overseas freelancers, however, they usually have a wider range of skills and their prices are a little higher. The work they produce is typically pretty poor quality and communication can be just as difficult.The biggest disadvantage we’d caution against when working with cheaper overseas agencies is their tenacity in pushing the project down the easiest possible path to maximise profit and reduce effort.Pros: * Usually have designers, developers and project managers so you get a better overall service * Can accomplish more work in less timeCons: * Communication is usually a struggle * They can force the project to deviate from the requirements * Code is typically poor quality and hard to maintainLocal AgenciesIf you can afford to work with a local agency, they’re the best choice. The price you pay to hire a local agency is naturally going to be the highest because they carry overseas that individuals don’t.In saying that, when you work with a reputable local agency, you give your idea the best chance of turning into a worthwhile product.Pros: * Good communication and will help you understand what is required to make the project a success * Usually stick to project management methodologies, increasing the chance of the project finishing on time and achieving all the requirements * Staffed with the specialists required to produce a high-quality productCons: * Carry greater overheads and higher salaries, so the cost of the project will be much higher * Like individuals, agencies are a mixed bag and you still run the risk of ending up with a bad appleDo your research and reach out to several agencies to get quotes and feel out their experience. Most agencies will specialise in one area; websites, web apps, mobile apps, eCommerce, etc. Try to pick one that aligns with your project.Build it yourself?If you’re strapped for cash but have plenty of time on your hands, you could try to build the app yourself. There are countless training courses and suggested learning paths that will guide you down the road to becoming a developer.You’re looking at at least a year of committed study, consistent learning, project planning, designing, coding, and testing before you’ll have any kind of app worth showing off. Even then, the chances of your app being maintainable and scalable are low.That’s not to say that it’s impossible to build a valuable and successful app by yourself if you don’t know how to code. But the stories you’ve heard about guys that built their own platform in three months without knowing how to code are often inaccurate.Writing effective code is hard. Designing a good looking, usable product is tricky. Capturing accurate requirements and planning a project is anything but straightforward. Making it all happen by yourself is very challenging even for experienced professionals.Start with a minimum viable productUnless you’ve got deep pockets or have investors backing your project, your mission will be to monetise your application as soon as possible. This version of your platform is called the “minimum viable product” or MVP for short.The MVP is the core product with no fancy bells and whistles. Just the minimum amount of functionality that you believe is useful to users.It’s very hard to get an application right on the first try. Just about every hugely successful application you’ve ever come across started small and then built up to where they are.The quicker you can build an MVP and start getting feedback from users, the greater your chances of being successful. Letting your app evolve from user feedback is a recipe for success.Iterate with feedbackThe software development lifecycle should be cyclical rather than linear. Launching your app is just the start.Once your app has launched and users are actively using the platform, you need to find a way to capture their feedback.What challenges are they having with your app? Which features are missing? Which features do they find confusing, or do they think are pointless.There are a few ways to do these kinds of surveys, but assuming you collected user’s emails when they signed up for the app, sending them an email is usually the simplest approach. Keep in mind that people usually don’t complete surveys for free. You’ll need to reward them in some way; Amazon gift cards, a free month of your service, or some other tangible remuneration.As you gather the feedback, make sure it’s recorded somewhere. Asana or Trello are fairly user-friendly options. At the very least open a new spreadsheet to keep everything recorded.Triage and buildNot all feedback will be worth acting on. You’ll need to assess the features in your backlog to figure out which ones are going to move the needle the most.It’s also worth keeping in mind how much effort (and cost) will be required to achieve each change. You don’t want to dump a bunch of time, effort and money into a feature that doesn’t make your app more enticing or useful.Wrapping upOur aim in writing this article was to provide some direction after the intoxicating moment of having an idea for an application that could change the world.There’s a lot of deep thought, rigorous planning and careful executing that is required to turn a clever idea into a usable app.If you’re committed to the idea and have the capital to get it off the ground, be sure to get everything written down and do your homework. The more prepared you are the better your chances of succeeding.Good luck!"
  },
  {
    "title": "Going Headless with BigCommerce",
    "plaintext": "In this brief article, we're going to review some of the benefits of switching to headless BigCommerce from a traditional setup, touch on the rough costs of this transition, and talk about the downsides. If you finish reading and still aren't sure if going headless is worthwhile, we'll point you to someone you can ask questions of.Here's a quick breakdown of the article if you want to jump ahead:Advantages of headless BigCommerceInteractive interfaceUnique brandingLose the templatesSplit TestingPlugging in new servicesAdding your favourite CMSChanging to a different eCommerce platformGreat blogImproved performanceIncreased conversion rateKeep all the great tools of BigCommerceOut of the box PWA functionalitySafe and secureDisadvantages of headless BigCommerceCheckout uses BigCommerce domainDeveloper and designer help requiredHigh initial costsMore systems to manageNeed a 3rd party analytics platformPlugins need to be rebuiltBigCommerce boasts a modest 1.32% of the global eCommerce market share. I only found this out after digging up the static, and it’s a bit unexpected. Especially considering that WooCommerce owns over 20% of the market share.We’ve built a bunch of websites using WooCommerce… and it stinks. WordPress is an old blogging platform and modifying it to do eCommerce is a bit like shoving a square peg in a round hole.BigCommerce on the other hand is a great platform with a ton of excellent functionality.It’s so good that every so often, a post flares up on Reddit about whether BigCommerce is a better solution than Shopify.If you're new to the technical scene and not sure if your website is powered by Shopify, BigCommerce or another option you can check out this brief article we wrote on how to tell what platform your website is built on.Whenever this argument comes up, it seems to end up with everyone agreeing that if you want to do anything more advanced with BigCommerce, you’ll need to stitch together half a dozen plugins and hope that your site’s performance doesn’t tank.The biggest complaints usually focus around BigCommerce’s range of great looking templates which are a bit thin. And how building a custom theme can be a time-consuming mission that won’t get you all the way to a perfect solution.As a whole package, BigCommerce is great as a starting point for a small eCommerce business. It will get you up and running, but as your business grows the platform will become restrictive.Adding new functionality either needs to be achieved through plugins, or from timely development that needs to adhere to “BigCommerce” best practice. Making significant interface changes falls into the same category.This is a big headache when you come to run A/B tests on the interface and you go to make some changes and break something in the analytics, or how the products are managed on the backend. There’s no effective way to let data drive the evolution of your site.This sucks because BigCommerce does some stuff really well. The catalogue, order management and payment processing tools are great.That’s why going headless makes sense. Tapping into the mature commerce tools that have taken years of hardening and refinement, while allowing modern frontend technologies to create an interactive interface is like getting the best of both worlds.Decoupling the BigCommerce front and backends and integrating it with a platform like GatsbyJS or NextJs is a practical way to achieve Google-friendly performance. It’s also a great developer experience, which keeps everyone happy!It’s not all sunshine and flowers though. There’s one glaring issue with this configuration and it creates a bit of a weird experience for users.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages of headless BigCommerceHere’s a breakdown of the benefits of turning your BigCommerce website into a headless build:Interactive interfaceGoing headless opens up options for which technology can be used to build the interface. Rather than being locked into BigCommerce’s system, your site can now be powered by a beautiful, interactive ReactJS or VueJS interface.There are countless JavaScript libraries like GSAP and CSS frameworks like Tailwind that the development community swear by that are now at your disposal.Unique brandingFinding a theme or template that perfectly fits your business’s brand is tough. Most of the time you’ll end up wanting to change things around. What you end up with is a Franken-theme that is 90% of the way to what you want.Going headless gives you the tools to take a custom design and efficiently turn it into a new theme. This means you’re not making compromises along the way.Lose the templatesOne of the most common complaints about BigCommerce is the lack of depth in their free templates. Even the range of paid templates on Theme Forest is a bit thin with 89 templates available. As a comparison, there’s 1,200 for Shopify and 1,300 for WooCommerce.Going headless opens new design possibilities for your site. Most of the time you’ll want to build the design from the ground up, so your store won’t be locked into that generic “template” look.Split TestingInterface changes can be incredibly swift with a headless setup. Introducing a technology like builder.io means your site’s content can be modified through a drag and drop builder. Most of the time you won’t even need a developer to help you make significant interface changes.This is huge for split testing (also known as A/B testing). Most eCommerce niches are already cutthroat and hugely crowded. Refining your website through testing is essential for getting ahead.With a traditional BigCommerce setup, making big design changes takes a lot of testing. There’s a chance that tweaking something on the frontend will break analytics, ordering or product management. The process becomes slow and clunky which results in fewer tests being run.BigCommerce stores running a headless setup can run several tests each week, improving their conversion rate and pushing ahead of the competition.Plugging in new servicesUsing Gatsby or NextJS as the frontend framework for your headless BigCommerce setup makes adding new services very easy.Say your team are ready to expand their marketing efforts and want to plug a new Customer Relationship Management platform into the store. With a traditional BigCommerce build, this would take a significant amount of effort to integrate the two platforms.On the other hand, a headless BigCommerce store is already driven by API, so you can quickly determine which events on the website should trigger actions in the CRM.Adding your favourite CMSThere are some really awesome content management systems available these days. Contentful, Prismic, Netlify CMS, Builder.io, Storyblok, Agility CMS and even WordPress are all great options.Plugging in a content management system makes content changes quick and easy. This is a big bonus for writing new blog articles and updating your landing pages as you add new product ranges.Changing to a different eCommerce platformEvery so often an eCommerce platform will do something really outrageous that tips that scales and makes you want to jump ship and look for an alternative.Neto recently made a change along these lines when they started charging a transaction fee to long-standing users who had built their businesses around the zero-fee pricing.Unfortunately for these users, their only options are to wear the new cost or to completely rebuild their stores. Had they built their stores with a headless architecture, they could have swapped eCommerce systems without needing to start from scratch.This doesn’t mean there’s no effort involved in swapping systems. There is some refactoring required, but it’s relatively quick and easy compared to building a new store from scratch.Great blogThe default BigCommerce blog is a bit meh. It seems like the core development team put all their chips in product and order management and slapped the blog on as a bit of an afterthought.As we mentioned above, going headless allows you to leverage just about any CMS you’d like to take advantage of its blogging capabilities.Our website runs on Netlify CMS and the blog is quick and simple. If you’re familiar with markdown you can write a whole article without needing to jump onto the WYSIWYG editor to style the content. Other popular content management systems like Contentful, Strapi, and Sanity offer highly customisable and beautifully styled blogged experiences.Another commonly used third-party blogging solution is DropInBlog which allows you to add a fully functioning blog to the BigCommerce store with just a few lines of code.Since the front end of your website can be designed and implemented however your design team sees fit, you can offer readers a seamless reading experience. Blog article user experience is something that often doesn't get a lot of attention but can make a huge difference to your website's bounce rate.Improved performanceThis is arguably the most important benefit of going headless. A lot of store owners overlook the performance of their site.For any monolithic site, as the range of products and orders grows, the performance of the site tends to slow down. As performance decreases, so does the user’s experience and eventually the conversion rate.Sites like JB Hi-Fi, Superdry Australia, Skullcandy, and Koala spends hundreds of thousands (if not millions) of dollars each year optimising their stores to achieve the best experience for users. And they make this money back in magnitudes of what they invest.With Google’s June 2021 “User Experience” algorithm update rolling out at the moment, performance is only going to become more important to a store’s long term viability.A decoupled headless architecture separates the storefront from where the data and heavy queries live. When a thousand new visitors suddenly appear from a viral Reddit post, your store’s performance isn’t going to tank.Combining your headless setup with Gatsby or NextJS allows the site’s content to be pre-rendered into static assets that are served through a content delivery network rather than interacting with a server. This significantly speeds up the site’s load time.Increased conversion rateThis benefit is a bit anecdotal because the evidence comes second-hand from the Gatsby guys. During a recent webinar where they discussed the benefits of combing Gatsby and Shopify, they mentioned that they’ve seen no less than a 30% increase in conversion from stores moving to a headless architecture.While they don’t dive deeper into how this was achieved, it’s probably safe to assume that it’s a combination of a customised interface and a much faster loading website.Keep all the great tools of BigCommerceThis point can get lost when you’re thinking about adding new technologies and building crazy, interactive interfaces.But going headless doesn’t mean you’re running a watered-down version of BigCommerce. You keep the best parts of product and order management, payment processing and reporting.There are some features that won’t work. Analytics, for example, won't be connected to the right frontend so they won’t tell you much. Luckily, there are a ton of great analytics platforms like Google Analytics or Segment.Out of the box PWA functionalityIf your BigCommerce store is set up with Gatsby or NextJS, then your site has access to progressive web application features out of the box. Adding push notifications, saving your store as a bookmark on the home screen, and working offline are a few great examples.Depending on what you’re selling, you’ll probably see half of your users visiting your store from their mobile device. Providing them with a few really nice PWA features can make a huge difference to the user experience.Safe and secureGoing headless also improves your site’s security. Pre-rendering assets and removing the coupled communication with the database reduces the store’s overall attack surface.The APIs that are used to provide content to a headless BigCommerce site is mostly read-only.BigCommerce is still responsible for payment processing and managing user’s data. This is all locked away behind their enterprise-grade security infrastructure, Payment Card Industry Data Security Standards, and strict account security practices.Disadvantages of headless BigCommerceMy agency, Clean Commit, builds headless eCommerce stores. It’s our speciality and if you didn’t notice, we have a lot of good things to say about it. But it’s not perfect. There’s one fairly inconvenient compromise in the user’s experience.Here’s a summary of the disadvantages of going headless:Checkout uses BigCommerce domainThis is arguably the biggest problem with headless eCommerce at the moment. The shopping experience happens on your shop’s domain but the checkout process happens on the BigCommerce domain.Sending user credentials and authentication across separate domains is a no-no in the internet security world so there’s no easy way to make this happen.This means that every user is adding their details to the order form. No matter if they’re past purchasers, or even if they’re actively logged into your store. They will still need to go through the full checkout process of adding their name, email, address and credit card details.By default, the BigCommerce checkout will prompt you to log in. If you follow this prompt, you’ll be taken off to the default WooCommerce website, which is what we’ve aimed to replace with the headless frontend.This disconnection between the frontend store and the checkout can affect the experience of repeat customers, especially if they’re frequently purchasing from your store.If you want to see what this looks like, you can check out this test store.Developer and designer help requiredHeadless BigCommerce setups aren’t suited to small, experimental, or low budget stores. Realistically, a web designer and developer need to be involved in building the website.If you’re trying to bootstrap your first store but need to pay a designer and developer, and then wait for them to build the store, it’s going to be the brakes on your project.High initial costsThis point follows from needing a designer and developer to help build your store. There are high setup costs involved.There’s a lot of work required in setting up a headless BigCommerce store. For an average site, the design will take around 70 hours, and development will take up to 250 hours. Regardless of what rate your designer and developer are charging, this is going to add up to a fairly sizable invoice.The bottom line here is that going headless is a growth play. It’s a big initial investment that pays healthy dividends over time.More systems to manageGoing headless adds more systems that you need to manage to keep your website running. Rather than simply jumping into BigCommerce to change content, add new products, and check your analytics, you’ll be doing these activities on three separate platforms.This isn’t a huge downside if you’re comfortable with web technologies because you’re already used to using countless platforms in your day to day activities. However, if you’re a fan of keeping things simple and consolidated then you’ll need to get used to jumping between different platforms.Need a 3rd party analytics platformAdding a custom frontend to your store breaks the connection with BigCommerce’s analytics. Running a store without analytics is impractical. There are hundreds of signals you need to keep track of and that helps you make business decisions.To get this functionality working again you’ll need to supplement your store with an analytics platform like Google Analytics or Segment. There will be some further configuration to get these platforms up and running.Plugins need to be rebuiltAny plugin that has code running on both the backend and frontend will need some modification. If the plugin doesn’t provide a mature API then it may not be possible to get it working.Luckily, most of the popular plugins like stamp.io, AfterShip and Yotpo have decent APIs that can be used to leverage their functionality. But there’s still a decent chunk of custom development work required to rebuild the plugins.This adds time and money. Two of the most important factors new business owners struggle to manage.Wrapping upThere’s no silver bullet in the eCommerce world. At some point, your store will need to make a compromise to achieve a different goal.In our opinion, the compromise shouldn’t be performance or conversion rate. These two factors alone can make your store rise above the competition, even if you’re selling exactly the same thing at the same price.This argument isn’t black and white. New stores with low budgets won’t be affected by the performance issues of an unoptimised site like bigger stores will. So it’s okay to bootstrap the technology piece until there’s some money available to upgrade.For established stores that are looking to grow, it’s hard to argue against going headless with BigCommerce. Improving conversion rate, giving Google a reason to send more traffic, and providing users a nicer shopping experience are all very convincing arguments.Of course, there is the glaring problem of repeat purchases being an unintuitive hassle. But even taking this into account, we’d argue that a headless Shopify store will outperform a traditional site 99% of the time.But you didn't answer my question!Moving to a headless setup has a ton of variables, especially if your existing store is well established. It helps to have a chat with a team that has experience building headless eCommerce stores. On that note, you can check out our last headless build here.If you have more questions and want to know things like expected timeframes, detailed pricing, technical limitations, or anything in between, reach out to us using this form and we'll get back to you in 24 hours (or usually much quicker).We're hiringIf you're a frontend developer or have a technical friend that's looking to join a relaxed, fully remote workplace where we encourage part-time hours and a flexible lifestyle, then let them know we're expanding our team!"
  },
  {
    "title": "Gatsby SEO Guide",
    "plaintext": "We've had a number of clients ask about Gatsby SEO and if it does a better job than other website solutions. This brief guide will give you five great tips on how to improve your Gatsby SEO.Optimising websites for SEO is a headache for a lot of people out there. Google's ranking factor consists of many elements. The most important being the number of links to your pages, followed by the quality of content, core web vitals (performance), and user behaviour.With performance being one of the most important ranking factors, Gatsby already gives us a leg up. But the factors above are not the only ones you should care about.Our focus at Clean Commit for the past 6 months has been focused on optimising our client's websites (and our own!) for onsite SEO. After implementing a couple fixes we've managed to move Clean Commit's website's ahrefs score from 77% to 98%.There are countless optimizations you can make to your site's overall performance, but we're going to be focusing on the 5 most important to boost your Gatsby website's SEO potential.Tools to establish the issues with Gatsby SEO.The first thing you should focus on is optimising the website's performance. That will have a huge impact on your website's rankings in the long term. Check the tools we use to measure performance to get an idea of what to improve.For SEO there are 2 main tools I use - Ahrefs and Google's built-in Lighthouse test. When releasing websites we aim to achieve 90+ performance on desktop, 60+ performance on mobile, and 99+ when it comes to SEO scores.Ahrefs provides more detailed analysis regarding potential on-site issues. Here's the list I worked with.Let's start dealing with all the issues!Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitProvide metadata for better CTR with GatsbyAhrefs brought up issues concerning the meta tags on our website. When creating a Gatsby website it's important to use a good, reusable SEO component. This component will make sure all the relevant meta tags contain correct data.We separate the SEO components into two separate components:\\ 1. The default one, which sets up our head params with Henlo (our Gatsby starter theme), and \\ 2. A smaller component that modifies each page.import React from 'react';import { Helmet } from 'react-helmet';import { graphql, useStaticQuery } from 'gatsby';function SEO({ data, children }) {  const meta = useStaticQuery(graphql`    query MetaDataQuery {      site {        siteMetadata {          title          separator          baseTitle          description          keyword          image        }      }    }  `);  console.log(data);  const metadata = meta.site.siteMetadata;  const metaDescription = data.description || metadata.description;  const title = data.title || metadata.title;  const image = data.image    ? `${metadata.siteUrl}${data.image.childImageSharp.fluid.src}`    : metadata.image;  const fullTitle = `${title} ${metadata.separator} ${metadata.baseTitle}`;  return (    <Helmet      title={title}      titleTemplate={`%s ${metadata.separator} ${metadata.baseTitle}`}>      <meta name='description' content={metaDescription} />      <meta property='og:title' content={fullTitle} />      <meta property='og:image' content={image} />      <meta property='og:description' content={metaDescription} />      <meta name='twitter:title' content={fullTitle} />      <meta name='twitter:description' content={metaDescription} />      <meta name='twitter:image' content={image} />      {children}    </Helmet>  );}export default SEO;export const query = graphql`  fragment SEO on MarkdownRemarkFrontmatter {    seo {      title      description      image {        childImageSharp {          fluid(maxWidth: 1200, quality: 100) {            ...GatsbyImageSharpFluid_noBase64          }        }      }    }  }`;The SEO Component comes with a fragment to load all information required without repeating code, making future changes quick and easy. Clean Commit uses Netlify CMS, so we setup SEO as partial using Manual Initialisation to reuse it across all content types.Optimising metadata is important for SEO optimisation. The content of the metadata doesn't really impact your rankings, and Google can generate snippets ignoring the provided content. Saying that, good metadata content will impact your click-through rates (CTR).You can think about metadata as a preview of the content, if you can outline the most important information there's a better chance of visitors clicking your link.Use this tool to make sure your titles and descriptions have correct length and are easily readable.Avoid redundant 301 redirects in GatsbyThe biggest issue that found to be impacting our Gatsby SEO scores were 301 redirects. 301 redirects are the correct way to redirect traffic, and shouldn't affect your search engine optimisation efforts directly. At the same time, 301 redirects add load time and are simply not necessary most of the time. It's important to make sure there are no 301 redirects present in internal links.Out of the box Gatsby sets up paths with trailing slashes. If you want, you can remove trailing slashes from paths using gatsby-plugin-remove-trailing-slashes. Some people remove trailing slashes from paths directly in gatsby-node.js, but I would advise against doing it in.When using Netlify it's better to use paths with trailing slashes. Netlify will match paths to redirect rules regardless of whether or not they contain a trailing slash. Paths without trailing slashes can potentially cause infinite redirect loops and unexpected behaviours.To avoid creating accidental redirects make sure you're using correct paths in Link components.This link can cause a 301 redirect (it will on Netlify)<Link to='/about'>About us</Link>This link won't cause a 301 redirect<Link to='/about/'>About us</Link>Avoid redirect chain in Gatsby on NetlifyNetlify causes a redirect chain out-of-the-box. It redirects http://www.domain.com to https://www.domain.com to https://domain.com.This redirect is a pretty easy fix. All you have to do is add custom redirects to the _redirects file.https://domain.netlify.app/* https://domain.com/:splat 301!http://www.domain.com/* https://domain.com/:splat 301!http://domain.com/* https://domain.com/:splat 301!Generate a sitemap for better indexingThe next thing you should do is generate a sitemap for better indexing. This would be a mundane task but fortunately, we can leverage Gatsby’s plugins to do the heavy lifting.My go-to plugin for sitemaps is gatsby-plugin-advanced-sitemap. If you don't want to modify the contents of the sitemap, all you have to do is add this plugin to the gatsby-config. Once your website is built, the sitemap will be available under https://domain.com/sitemap.xml.To make sure Google fetches the website you can use Google Search Console tool. All you need to do is add the domain, verify it with a TXT record on your DNS.After your domain is verified you can navigate to the Sitemap tab under the Index in the left-side navigation. There you can submit your sitemap's URL to let Google know your website is ready to be indexed.Google's search console is a great tool to keep an eye on your rankings in Google, average CTR, and detect potential problems with pages.Quick summary for optimising Gatsby SEO 1. Focus on performance improvements 2. Provide metadata information for better CTR 3. Avoid unnecessary 301 redirects 4. Avoid redirect chain when working with Netlify 5. Generate sitemap and submit it to Google Search ConsoleTo get up & running with Gatsby quicker, check out our Gatsby starter with support for Netlify CMS & Tailwind"
  },
  {
    "title": "Case Study: Salt Of The Coast",
    "plaintext": "Immy Love and Caroline McGrath had just purchased a cafe together in Narooma, NSW. Their first mission was to distance themselves from the brand that the previous owner had created.As one of the only locally-owned cafes in Narooma, they wanted everyone to know that their vision was to source their products from the surrounding area. Not just because small local businesses need to support each other, but also because the Eurobodalla produces tons of great products, but there’s no central retailer.Ultimately, they planned to expand their operations to source and sell local products online.The girls approached the Clean Commit team for help to get their website up and running quickly to support their new business launch. They wanted the site to be stylish but also very easy for their older customers to navigate.The Salt website also needed to have the capability to extend into eCommerce to support the girl’s plan of selling products online.We met with Caroline and Immy to discuss the “style” they wanted to achieve and find some examples to inspire the design process.The design was then created over a few weeks with frequent reviews to adjust it to fit their vision.When everyone agreed that the design was ready, our development team snapped into action. The site was built out using GatsbyJS and integrated with Prismic as the content management system.The combination of Gatsby and Prismic was the perfect choice for this kind of small brochure website. Breakneck load speeds and improved SEO means the site will be guaranteed to do its job well into the future. And when the time comes to add eCommerce facilities, the Salt website can achieve this with a headless Shopify integration.Pretty neat stuff!Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitChallengesEvery project has its ups and downs. These were the biggest hurdles we had to get over in delivering the Salt website.TimelinesThings need to happen quickly for new businesses and startups because there’s a limited runway to keep the ship float.The Salt girls had a hard deadline for getting the website deployed. This deadline only became important halfway through the project when their acquisition date jumped forward.This change to the project was a challenge for us. Our schedule had suddenly become a few weeks shorter, and we had to compress a lot of development and testing into a much shorter timeframe.It’s not a new challenge. We’re masters at the last minute cram and threw a few extra hands onto the job to get it done.Creating a visionWhen Caroline and Immy first approached us to build a website, they hadn’t thought about what it would look like, what functionality it should include, or how their users would interact with it. They weren’t sure if a shop should be available straight away. They didn’t have any content prepared.To summarise, they didn’t have a clear vision of how the website would come together.Shaping a well-defined vision is always a challenge and one that we deal with daily. It’s rare to work with a business with a crystal clear and well thought out plan for how their website will come together.We worked with the Salt girls to find examples of sites they liked the look of and then talked through the journey their users would follow when visiting the website. We documented these learnings and used them to create a beautiful design.Adopting graphic designer assetsFor folk that don’t work with web technology, the difference between graphic designers and web designs seems trivial. But for our team, it’s usually a headache working with logos and branding guides that graphic designers have created.The fonts aren’t always freely available on the internet, images tend to be too heavy or aren’t accessible, and the colour pallets suit physical products rather than the web.But where there’s a will, there’s a way. This “way” often includes finding different web fonts that look very similar to the brand font, changing colours very slightly, and reformatting images.FeaturesThe Salt website is simple to use and easy on the eyes, but it's also boasting a handful of cool features.Instagram integrationInstagram is incredibly popular and valuable in the hospitality industry. Business owners put countless hours into crafting images and posts to share with their audience. It makes sense that this content should be available on the website too so visitors can see the latest news, and feel a continuous brand experience.The website features an integration with the Salt Instagram account. As new images are added to the account, they automatically appear on the website.Styled mapOne of the most important \"use cases\" of the website was customers finding the location of the cafe. Rather than just writing out the cafe address, we wanted users to be able to use a Google maps widget to be able to zoom in or out and figure out exactly where they need to go.And for a little flare, we added some fun styling to the map!Prismic content managementEvery headline, image or block of text on the website is easily editable from Prismic, which is our preferred content management system. Prismic makes changing content on the website incredibly easy. The simple interface and clean controls take virtually no time to learn, which is exactly what business owners want in a CMS.Core Web Vitals passing gradeGoogle started rolling out their \"User Experience\" algorithm update in June of 2021. This update assesses websites on their ability to pass the Core Web Vitals. If a passing grade is met, the website gets a small boost in traffic. If not, they're penalised.Our last goal before releasing any website to production is to make sure it's nicely optimised and ready for Google to send traffic!"
  },
  {
    "title": "The Pros and Cons Of Using Gatsby",
    "plaintext": "We often steer our clients away from WordPress and towards Gatsby when building new websites. This is usually met with some friction. While most clients don't love WordPress, they're uncertain what Gatsby is and why it's being recommended. This article aims to detail some of the unbiased pros and cons of Gatsby.What is Gatsby?GatsbyJS is a React.js-based, GraphQL powered static site generator. It is a relatively new technology perfectly positioned to suit medium to large businesses looking to host unique, fast and future-proof websites.Unlike traditional frameworks like WordPress, Gatsby generates static HTML, CSS and JavaScript files which facilitates incredibly fast page load times, amongst a host of other benefits.Gatsby works seamlessly with the most popular frontend CMSs such as Contentful, Prismic, Strapi, Tina, and even WordPress.The final selling point is Gatsby’s ever-growing list of clients: PayPal, Nike, Airbnb, and Braun, just to name a handful that appears on the official website. There is a reason more significant companies are making the jump.Pros of GatsbyIncredible performanceWe won’t get too deep into the technical weeds here, but Gatsby works differently from WordPress. Rather than running code on a server that tells a user’s browser what to generate, Gatsby builds the site in preparation for the user arriving, which is called pre-rendering static assets.Since there’s no time wasted waiting on server responses, page load times can be incredibly fast.A million articles on Google have already outlined why this is a good thing. It boils down to not keeping your already impatient visitors waiting and making the Google algorithm happy.Once Gatsby has built the static assets, they are uploaded onto a global content distribution network (CDN). The CDN delivers the site content from the physically closest server. Serving content from the nearest location is a perfect solution for any business that receives traffic from multiple countries.Search Engine OptimizationSEO is a largely misunderstood field. Every guru has their opinion on how Google’s algorithm works. No one knows exactly how it works, but Google has announced a few variables they consider when deciding which website gets to be on the first page.These considerations are; Core Web Vitals, the correct use of page metadata, the quality of content, structured data, and the number of backlinks pointing to a website.The development team behind Gatsby have put a lot of effort into making the framework pass Google’s Core Web Vitals assessment out of the box. There are plugins to provide structured data, and adding metadata is standard functionality.To summarise, Gatsby ticks all the SEO boxes out of the box and will outperform almost any other website technology with proper configuration.Waterproof securityMost website security incidents happen when server credentials are exposed. The bad guys out on the web are constantly probing, looking for a way to access the hosting service, which allows them to control the website and its content.Gatsby is a serverless technology, so there’s a significantly reduced attack surface.Executing any kind of meaningful website compromise would be incredibly difficult. Gatsby is a technology that professionals typically implement, resulting in less of the common security mistakes. Hackers don’t typically target Gatsby sites because they’re not low hanging fruit.Boom in popularityGatsbyJS and its sister technology, NextJS are going through a boom in popularity. The increase in popularity isn’t directly a benefit, but as more adopters come on board, the platform becomes more mature and offers more valuable features.The notable companies using GatsbyJS are; PayPal, IBM, Spotify, Braun, Figma, Meetup, Snapchat, Giphy, National Geographic, KFC Global, and thousands more.When companies with multi-million dollar technology budgets move their entire website stack to GatsbyJS, it means they’ve done the research and made a decision that will impact their bottom line.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPlugins and integrationsGatsby doesn’t handle plugins the same way WordPress does. Unlike installing plugins through the graphic user interface, Gatsby provides a file where new Gatsby plugins are listed like this;//In your gatsby-config.jsplugins: [{resolve: \"gatsby-plugin-google-tagmanager\",options: {id: \"YOUR_GOOGLE_TAGMANAGER_ID\",This code snippet may seem convoluted, but it’s an effortless way to add new functionality to a website.The Gatsby plugin library is becoming very extensive. There are plugins for really niche use cases, like using the Google Translate API to automatically translate website content when a user visits from a different country.A big plugin and integration library saves custom development time because developers can add many new features with a few simple lines of code.ExtensibilityGatsby is a popular framework for web applications because it can consume different APIs and data sources.Taking data from different sources makes it an excellent candidate for businesses that may want to integrate other applications within their business with their website. For instance, if a business used a system that measured their performance and outcomes and wanted to display this information for their clients to view publicly, this could be facilitated through the website.Integrates with Content Management SystemsGatsby doesn’t have a graphical user interface like WordPress. It’s a framework for writing code. But it does integrate with virtually every content management system on the market.Content Management System functionality is really what people think about when discussing WordPress. This functionality includes writing new posts, managing images, and inviting new users.WordPress is an excellent solution for blogs and smaller websites. That was its original purpose. However, its rigid architecture makes it tricky to modify for all purposes (not that people haven't tried).This issue has catalysed a new age in content management systems. There are hundreds of new CMSs that have hit the market in the last few years.These new CMSs aim to solve different problems, and some of them are perfectly suited to most small to medium business use cases.The three CMSs we recommend are; 1. PrismicUsed by Google as their CMS to train their new staff members, Prismic provides a clean and straightforward interface that feels familiar for most users.Prismic allows each headline, image, or text block on a website to be created as a “slice”. Administrators and marketers can change slices without needing help from the technical team. Developers are no longer required to have control over changing any content on the website.Prismic is a relatively inexpensive platform. They provide a generous free tier but charge $7 per individual user.We recommend Prismic to most of our clients. 1. ContentfulContentful is probably the biggest name in the CMS space at the moment. Larger companies are turning to Contentful because it offers an incredible range of customisations.Contentful pushes the angle of being API-first and claims that businesses using their platform can deliver data to any device (phone, computer, smartwatch, fridges, etc).Contentful allows for custom editorial experiences, which is handy for teams where different staff need to create and publish multiple types of content (blog, legal articles, videos).Admittedly, Contentful is better suited to enterprise projects and web applications that need to deliver content to multiple websites or applications. It can be a little over-engineered for most simple websites.Contentful offers a reasonably generous free plan. Support from the Contentful team is only offered on paid plans, which start at $489USD, which can be hard to justify for projects that don’t require all the features Contentful offers. 1. StrapiUnlikely Prismic and Contentful, Strapi is open source. Being open-source means that it needs to be hosted on a server by the Clean Commit team, but there’s no pricing pressure on adding more users. It also means a staging environment can be set up to preview and test changes before being made to the live website.Strapi’s user interface is easy to navigate and focuses on setting up reusable document types. These document collections could be blog articles, new pages, team members, new portfolio pieces, etc. Collections are organised in the side menu for quick and easy access.The most significant point of difference for Strapi is that its code can be changed by your development team if necessary. This is a double-edged sword. One on hand, if there’s a critical bug, your developers could be able to fix it. On the other hand, issues can't be reported to the product development team with any expectation that they'll be solved.Strapi is a great option to include on this list, but probably still behind Prismic and Contentful.Edge renderingEdge rendering is a technique where custom JavaScript logic is added to the website to tell the browser what values to return based on the location of the requesting server. In other words, if someone accesses your website from New Zealand, they will see different content than someone viewing the same page in Australia.There’s a more detailed breakdown of edge rendering here.This feature is currently in early release status and one that’s getting the development community excited.Given how new this feature is, we’re unable to attest to its reliability. However, Netlify is a well-known and respected organisation in the technical space so when they come out with new features, they're likely to work well.Edge rendering is only available to frameworks like Gatsby and NextJS. It is not a feature that is available for WordPress.Based on ReactJSGatsby is a “framework”, which is essentially a template of a working program that developers selectively modify by adding code. Most big companies build their websites and web applications with frameworks because they make building websites and applications quicker and easier.Gatsby is built on top of another framework called React. React was created by Facebook, and it’s currently the most downloaded project on Github.Having a large developer community is a benefit because countless resources support its growth and maintenance. It’s not a niche product that is likely to disappear in a few years.Standardised developer experienceThere are a million ways to build a WordPress site. Designers can use themes like Elementor and Divi to create sites without ever touching a line of code. Similarly, other themes can be used as a starting point and then modified. Then there are approaches like the roots.io ecosystem where coding features from other frameworks like Laravel are inserted into the process.The point here is that handing a WordPress website from one developer to another can be a difficult task. The way it was built is unlikely to be consistent with how the next developer works.Gatsby can also be implemented in different ways, but the variation in approach is much smaller. The framework forces development to happen in a reasonably repeatable fashion.If a new development team needs to work on the site, they can maintain or extend it without a long learning curve.Reduced maintenanceMaintaining a GatsbyJS project is a matter of keeping the underlying technologies up to date. Sometimes this will cause minor issues across the site, but it’s usually not a big deal to clean up.This kind of maintenance doesn’t need to be performed regularly. It’s only necessary when new major versions of Gatsby are released.WordPress, however, needs constant maintenance and attention. Plugins need to be tended to every month to keep security tight. WordPress plugins always pose a risk that new, poorly reviewed features have been added to their codebase that causes a fatal error to your site.It sounds like hyperbole, but we’ve heard countless stories of WordPress owners whose sites have fallen over from updating a single plugin.Progressive Web Application (PWA) capabilitiesGatsby comes with the option to act as a PWA straight out of the box. PWA architecture makes a website feel like a native application so it can do cool stuff like being saved as a shortcut on a mobile device homepage, send push notifications, and work offline.AccessibilityThe Gatsby development team have put a significant amount of effort into creating easy tools for achieving accessibility. These tools are a bit technical, but they’re available out of the box and can be switched on during development without significant effort.More detail about Gatsby’s accessibility capabilities can be found here.Multi-lingual optionsThe Gatsby team have created three different “internationalisation” plugins. All the plugins translate text and formats dates according to the user’s location. Two of them use Google’s translation API, while the third has its own translation service.Adding multi-lingual support to a Gatsby site is incredibly easy and quick. It does require a little testing to ensure the changing content length doesn’t disrupt the design, but overall the process is simple and reliable.DisadvantagesBuild timesWhen administrative users save a change in the content management system, they expect to see the difference instantly reflected on the website. Due to the way Gatsby pre-renders assets, there is typically a 1 to 3-minute delay.This delay can cause some frustration for new users, but there are solutions to ease the transition. Prismic offers a feature that previews the content changes on the website while the editor is working on the document.No plug-and-play functionalityGatsby doesn’t offer a graphical user interface. It’s a framework for writing code and building websites that integrates with other platforms like content management systems.A non-technical user can’t simply install Gatsby and get started. There needs to be a period of planning, designing and developing before the website can be used.A properly planned and executed project isn’t technically a disadvantage for most companies. Still, it can be an issue for small businesses that just want to spin up a couple of web pages.No WordPress-style pluginsPlugins for Gatsby function differently from WordPress. They typically let Gatsby access an API or some kind of data source. The development team is then required to build an interface for the user to interact with the data.Plugins for WordPress usually come built with both “sides” of code. They have frontend code that tells the browser how to display the data and backend code that pulls it somewhere.The disadvantage for Gatsby is that end-users can’t simply jump into a plugin store and pick new features to add to the website. They need to be discussed with the development team and built into the code of the website.Need to modify scripts and Google Tag ManagerGatsby operates as a single page application. This architecture means that Google Analytics can no longer recognise new page views.In Gatsby, events trigger when a user moves from one page to another, but they need to be set up correctly in Google Tag Manager and Google Analytics before these platforms will acknowledge them.Learning a new CMSThe most significant disadvantage for most companies moving from WordPress to Gatsby is learning a new system. It’s hard to dress this one up. Learning new processes and technologies is part of remaining flexible as an organisation.The content management systems we’ve suggested will feel familiar for most users but will likely slow productivity down for a short period of time.ConclusionWe've tried to paint an unbiased account of the pros and cons of using Gatsby. It's not a silver bullet and isn't always the right choice. But it's gained a lot of popularity over the past few years because it's a great solution for a lot of companies.If you want your website to be fast and have access to developer support, or know how to code yourself, then Gatsby is an excellent choice!"
  },
  {
    "title": "The Power Of Video Status Updates",
    "plaintext": "As someone who has written hundreds, if not thousands of project status reports, I feel compelled to share my success in adding videos to the process. The power of video status updates is something I wish I understood when I first started Clean Commit.The humble status report is familiar to every project manager. It’s a valuable tool, but as the initial project honeymoon period, wanes so does the quality and enthusiasm that goes into status reports.This trend is a problem for two reasons; 1. Detailed and thorough communication is often the only thing that can solve complex issues before impacting a project. 2. Boring status reports lead to the clients not spending the time reading them thoroughly.I realised a while back this is an important job that I could be doing better, so I started trying different approaches.My first test was to add a lot of detail, graphs, burndown charts, summaries of tasks completed, and status summaries to the regular status report.My clients received this well for a little while, but it’s laborious. I’m often managing five, six, seven (and heaven forbid) eight projects simultaneously. Some operate on small budgets. Spending an hour each week banging out a status report is a poor use of time and doesn’t benefit anyone.The next test was going in the other direction and simply summarising how far through the milestone we were and when the client’s next obligation was coming due.This approach worked alright, but when issues arose and needed client collaboration, the foundation of teamwork simply hadn’t been established. They weren’t expecting the problems because I hadn’t been keeping them looped in.My most successful but least structured status reporting approach before I unlocked the power of video status updates was to send sporadic emails anytime our design or development team achieved a minor milestone.I still stand by this process. It’s essential to keep everyone up to date when big things happen. But status reports are equally as important when big things aren’t happening. During these periods, clients can feel they’re not seeing progress and may start to wonder what’s going on with the project.The goal of the video status reportThe goal of using video in my status reports was to make a more personal connection when delivering essential and sometimes tricky news to our clients. Delivering important information is easier when the receiving end can understand the emotional cues you would convey if we had the conversation in person.Consider this example: Your team has been working on a project for a few months. You feel like the end is in sight. Suddenly, one of the 3rd party tools that is integral to the project’s architecture declares bankruptcy and announces it will cease existing immediately.You need to deliver this news to your client. It could cost the project a lot of time and money to get on track.It would be hard to express the disappointment of this update through text. Absolving your team of the blame can be a tricky task and one that needs to be navigated carefully.To help your clients understand the full extent of this status update, you need to communicate in the most professional way possible, clearly communicate the situation, and let your client know that you’re taking action to remedy the situation.We can achieve all of these requirements with a well-constructed video status update.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitVideo status report ingredientsHere are the main ingredients to my video status reports that make them work well. 1. Excellent camera & microphone 2. Green screen 3. Task management system review 4. Visual review of progressExcellent Camera & microphoneBefore I committed to this approach, I purchased a Panasonic Lumix G7. This mirrorless DSLR can shoot 4K quality video that looks incredibly crisp. It outshines any all-in-one webcam available on the market.I’ve paired my camera with a Rode Podcaster microphone. Microphone specifications are less clear-cut than cameras, but as a dynamic microphone, it tends only to pick up vocals from a short distance away unless other condenser microphones.To ensure that I’m not recording the other background noises in my office, I run Nvidia Broadcast on my computer, which uses machine learning to remove any frequencies other than my voice while recording. It’s a free application but requires a high-end graphics card — very cool stuff.This setup cost around $1,500 AUD after I purchased all the stands, connectors, and accessories.$1,500 may seem like an excessive investment, but this entire experiment is aimed at undertaking a vital process in the best possible way.Green screenGreen screens add a level of polish to any video where the screen is the main focus. Having your friendly face on the screen to convey emotion is essential to the status reporting process.The theory here is that face-to-face interactions are always the best for communicating. The next best thing is a video where we can express the same emotional cues.You could argue that a green screen isn’t necessary to achieve this goal, but check out how much cleaner the green screen version of the below images looks:Green screens are relatively inexpensive. I ended up picking up an Envato green screen off eBay for around $150 AUD. There are plenty of cheaper options, but this one works a treat for me.Task management system reviewIn my experience, showing clients through your task management system is a great way to build confidence that you’re tackling the project in a structured and consistent way.I  wouldn’t ever give my clients access to look through Jira, which is what we use for task management. There are too many complexities, and the information isn’t organised to be easy for them to understand.Chauffeuring them through the platform and showing the overall progress, on the other hand, is a great approach. I can tell a story using this approach. I’ll point out which tasks are underway, how much effort is required to complete the project and any issues we are struggling with.You can take this one step further by setting up a GANTT chart, burndown chart, or other easily consumable visual representation of the project’s status. I find that clients are more interested in generally knowing how things are progressing and whether the agreed timeline will be achieved.Visual review of progressThis suggestion only works for front-end projects. If you’re building an API, database, backend integration or anything else that doesn’t have a graphical interface, then disregard this step.We rarely build anything that doesn’t have a front-end, whether it be a website or progressive web application.Touring clients around the progress, you’ve made each week helps establish a lot of confidence that the project is moving in the right direction. Even if you’re constantly releasing features to a staging environment, it helps to show the result of your work.Delivering the status reportClients are used to watching YouTube or Vimeo videos. We typically upload our videos as unlisted or private videos on YouTube and send them to clients.I don’t have empirical evidence to back this claim, but adding content to YouTube with backlinks to your website can act as a sign to Google that your website is staying active. Whether this has any tangible impact on traffic, I’m unsure. But we need a solution for delivering videos, so it can’t hurt to combine it with another possible win.The exception to this rule is if there’s anything potentially confidential featured in the video. In this situation, I’ll typically optimise the video and upload it to Google Drive or Dropbox and invite the client to view the file.Wrapping upBesides all the benefits I’ve mentioned in sending video status reports, they are quick to put together. Most successful agency owners, freelancers, or project managers are short on time but want to do the best job possible.It’s feasible to send out half a dozen detailed status reports in the space of an hour. This kind of efficiency requires some practice and a strict template.I can promise you that adding video status reports to your regular project management approach will see a sharp rise in client satisfaction. This leads to better communication, quicker decision making, and hopefully a greater chance of your project succeeding!"
  },
  {
    "title": "WordPress vs Gatsby",
    "plaintext": "This article will cover the benefits of using WordPress compared to using a static site generator like Gatsby or NextJS. The Gatsby vs WordPress argument isn’t new. There’s a lot of theoretical points for both sides.We’ve built dozens of WordPress and Gatsby sites. The opinions we’re about to share are based on how well each technology does the job of creating a simple, maintainable website for our clients.I want to preface this article by saying we are big fans of static site generators. I’ve even written a handful of articles about how great Gatsby is. But you can probably tell by now that we’re favouring WordPress in this writeup.WordPress gets a bad wrap from a variety of critics. Developers don’t appreciate the clunky processes required to build new themes. Non-technical folks get frustrated with WordPress’s cluttered interface. Larger companies stay clear because of performance and security concerns.Despite its well-documented flaws, WordPress is an excellent solution for most websites. It even outshines static site generators in some areas.Here’s a summary if you want to skip ahead to the good stuff: 1. Easily configurable staging environments 2. Split testing 3. Client autonomy 4. Familiarity 5. Established pluginsEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitEasily configurable staging environmentsIf you’re a WordPress developer or have a good WordPress developer on your team, they may have come across the roots.io ecosystem. Roots.io provide an excellent server provisioning toolset called Trellis that makes spinning up a testing environment a breeze.Pair this with a plugin like WP DB Migrate Pro, and you can quickly spin up an exact testing environment.I know this seems like a silly benefit because staging environments are also a breeze to set up on Gatsby or NextJS with providers like Netlify or Gatsby Cloud. The point of difference is these platforms need to be integrated with a third party content management system to let non-technical clients or staff make content changes.Often these content management systems have poor support for staging environments. The best example of limited staging features is Prismic. These guys are not a small company. They boast some huge clients *cough* Google *cough*. Yet their staging sites only unlock for subscribers on their $500/month plan.You could argue that other content management systems have better staging site options. This point is valid, but a thousand new headless CMSs have hit the market over the past couple of years. Going through them one by one to see which has the best testing environment is a huge time sink.These challenges are why WordPress gets the tick of approval for easy test environment configuration.Split TestingThe benefit of using a platform like Gatsby or NextJS is pre-rendering your assets and achieving lightning-fast performance. Ultra-performance unlocks many trickle-down benefits are, but the page load speed, user experience and general code optimisation are at the centre.Arguments for Gatsby typically centre around performance. They often fail to take into consideration when the marketing-focused end-user expects from their site.They want clicks, conversions, contact form submissions. They want to influence their visitors in some way. Businesses willing to pay an agency like Clean Commit to redesign and develop their website probably expects to see a return on the other side.The best way to determine how well website content and design is achieving its goals is to set up conversion goals, create a series of hypotheses about what changes would improve the results, then test the changes. This process is colloquially called split testing or A/B testing.Split testing with WordPress is pretty straightforward. Duplicate the page you want to test and change one variable. Sign up for Google Optimize, Optimizely, VWO or any other testing platform. Route half the traffic to page 1 and half the traffic to page 2.Just about every A/B testing platform on the market is designed specifically to work with WordPress. The process is usually as easy as pasting a code snippet into the head of your document or installing a plugin. There are tons of resources on avoiding the performance issues and screen flickering that typically plague split testing.Split testing with Gatsby or static site generators is more complicated.I should point out that if you’re a developer working on your own website, split testing isn’t harder with Gatsby because you can quickly duplicate pages and configure the testing software.As a non-technical marketing person, there’s no easy way to duplicate posts or pages in most common content management systems. Platforms like Prismic and Netlify CMS don’t provide this option, so this is the first hurdle.There are workarounds to create the duplicated pages for testing. However, there are fewer options for optimising the code that triggers the split test compared with WordPress.Funnily enough, Gatsby and NextJS both boast easy split testing as one of their advantages. Teams with dedicated developers would probably agree. For the rest of the market, it’s simply not true.Client autonomyBusinesses that hire an agency or freelancer to build their website are often worried that they’ll need to get their developer in to help any time they need to make a small change.Content management systems like Prismic, Contentful, and Sanity let non-developers make content changes easily without help. However, these changes are limited to wording, images, and adding new sections to an existing page.This range of changes is enough for some businesses. For a lot of active teams, it’s a frustrating restriction. Users expect to make simple updates, like editing menus, adding new pages, and installing plugins. Whether or not untrained users should be making these changes is a different argument, but they expect to be able to.WordPress provides a higher level of autonomy. Not needing to help with every little change on the site is also beneficial for the agency or contractor. It may seem like that would be an excellent money-making opportunity because there is a constant trickle of work. In practice, it becomes an annoying disruption and kills efficiency.FamiliarityWhen a new client comes to us asking for a new website, one of my first questions is about their feelings for WordPress.There’s usually not much love for the platform. Answers range from “yes, we use it and don’t love it” to “I’m indifferent and willing to try a different option”.We’ve used this opportunity to push clients towards Gatsby and Prismic. It’s a new, sexy stack and solves some of the issues that frustrate WordPress users.More often than not, the move away from WordPress has been a mistake. The solution is adequate, but the learning curve causes issues and users are so used to the WordPress way of doing things that they struggle to adapt.Moving to a static site generator also creates headaches when client’s search engine optimisation specialists come in expecting to work with a WordPress site and are greeted by an alien platform that they don’t understand.Established pluginsWordPress has a crazy number of established plugins. There’s a plugin for just about every need. Functionality that would take hundreds (even thousands) of hours of development can be installed and configured in a matter of minutes.Just about every established marketing or email automation platform provides its own WordPress plugin. Even Google has built WordPress plugins to allow integration of its web suite.The enormous ecosystem of plugins has taken 18 years to build and can’t be rivalled by any other website platform. A lot of high-quality websites SEO and marketing services function exclusively as WordPress plugins.Official WordPress integrations are also very common in digital marketing platforms.Gatsby does a decent job providing its own library of plugins, but it’s nowhere near as comprehensive as WordPress.Final thoughtsWell, what’s better? WordPress or Gatsby?This is an incomplete question because it doesn’t consider what the website will need to do.WordPress is an excellent solution for brochure sites or blogs where content is regularly updated. But it’s a less ideal solution for a multinational company that needs to show different content to different countries.Gatsby is an excellent solution for teams that rarely make content changes and don’t bother with plugins or core version updates. It’s a less ideal solution for teams already embedded in the WordPress way of life that want to split test their content and have autonomy over their site.We’re advocates for picking the best technology for the situation. Usually, that’s WordPress for our clients, but it’s not a hard and fast rule!"
  },
  {
    "title": "Case Study: Complyant",
    "plaintext": "Project overviewThe Complyant team were scouting for a design and development partner to help redesign their application. Like many early-stage SaaS companies, the Complyant platform had been built as an MVP to address a problem. Their product helps small to medium businesses stay on top of their tax obligations and avoid fines.The solution was received well by the business community. Keeping on top of tax obligations in the U.S. is tricky, especially with so many different rules for different states.However, a few years down the road, the Complyant team realised the platform had usability issues that only a full redesign could completely solve.The Complyant team weren’t only looking for a new coat of paint. They wanted the app to be easier to use and a more consistent experience for users. Some features needed to be extended, while some had become redundant.While the team grasped the issues affecting the app, they didn’t have the requirements written out of what they wanted to achieve.To add more complexity to the project, they wanted to tie the application’s redesign into a new website to ensure a consistent experience for customers.Issues to solveThe first issue was that we had a vague description of a handful of new features that the application should contain but no detailed brief. Similarly, the only source of requirements for the application redesign was the old application.The first step in solving this problem was a deep dive into the old application’s design and talking through the biggest usability issues with the Complyant team.The next big issue was timelines and delivery. Due to the lack of visibility into the project’s scope, we had underestimated the amount of time required to redesign the application by about half. This left the project behind the 8-ball, which would catch up to us a little later.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitUsability improvementsThe most important part of the Complyant application is the calendar that shows upcoming tax obligations. The old design had accommodated this feature as a regular calendar where the user was forced to click on each upcoming event on a wall-calendar style interface. The app would then display the event data in a different view.The user experience was poor, and getting a quick overview was difficult. This was our first big UX challenge.We ended up creating a small monthly calendar that lets the user quickly scroll through the year. As a new month is displayed, the associated tax obligations are listed with their most important information.This was considered a big win and one of the biggest changes we ended up making.Website designWith the application design wrapped up, we focused our attention solely on designing and developing the website. Preparing the application design first sped up this process a little because we had already nailed down the colours, styles and components.The biggest challenge was gathering a comprehensive list of the pages and screens for design. With the project scope jumping around, a few points of contact, and missing content, the project delays continued to accumulate at this point.Development commenced on some of the approved screens to avoid bottlenecks while we aimed to complete the outstanding design tasks.Ultimately the design process wrapped up without too many issues. The fresh look was received well by the Complyant team.Webdesign developmentAt the beginning of the project, we had presented two website technology options; WordPress or GatsbyJS paired with Prismic for content management. The existing website was built on WordPress, but the marketing team had experienced several issues with getting the site to perform adequately.We suggested adopting Gatsby with Prismic because of its promise to achieve outstanding performance and how easy it is to use Prismic to manage content.Prismic issuesWhile we stand by our technology choices, we encountered an unexpected issue halfway through the website development process.The Complyant team were attending a conference and needed the new site to be available roughly two weeks from the start of the site’s development. To hit these deadlines, we selected the most important pages and made them live as quickly as possible.While there were a couple of days of bug fixing, we managed to get the site up in time for the conference. However, this is where Prismic introduced the issues.We were now left with no staging environment to let the client test the remainder of the website’s development. Prismic does offer a staging environment, but it only becomes available on the $500/month plan.Introducing new pages and features now became a much more difficult task. We had to be sure each change was production-ready before releasing it for review since the change would deploy directly into production.Adding to the complication, the Complyant team had delivered the outstanding content for a couple of the more complex landing pages, so the project’s scope increased.Finishing upThe project ran over schedule as we scrambled to squash the remaining bugs, build a tax-calculating landing page and finish all the outstanding support tasks.Despite the disorganised approach to getting over the line, the website looks and works great. The application redesign fixed a number of problems, and the project achieved the goals it set out to accomplish."
  },
  {
    "title": "Case Study: FreshOnline",
    "plaintext": "Jeremy approached the Clean Commit team looking for help launching a new eCommerce business that aimed to deliver bulk meat and seafood to the Northern parts of Sydney. He had some unique requirements like limiting delivery to particular suburbs, weight-based restrictions, a rewards program, and a complex interface.Deciding on headless ShopifySome of the requirements for FreshOnline played really well into the benefits of headless Shopify. The client wanted a custom interface with a high level of interactivity, a set of bespoke filters and a highly team-friendly blog to become the centrepiece of their content marketing activities.We had already pencilled Shopify in as the solution. It’s our go-to eCommerce recommendation for most clients. There are exceptions to this rule, but Shopify has a number of small intangible features and qualities that really set it apart from WooCommerce and BigCommerce.We weren’t confident on making Shopify do everything that the FreshOnline team needed. As versatile as Shopify is, it’s still a proprietary platform and there are some things it doesn’t do particularly well. For instance, creating a really nice blogging management experience for a whole team can be tricky. Similarly, when there are a large number of apps required to hit all the project’s requirements, the store can wear the risk of performance issues.The solution to these issues was decoupling Shopify’s mature and robust backend from its front end, allowing us to plug in other products to fill the gaps.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitImplementationWe’d settled on Shopify as the eCommerce engine, but only the backend. For the store’s front-end we planned to use Gatsby integrated with Prismic to facilitate content management.While this seems like a lot of moving pieces compared to a monolithic setup, it addresses some technical constraints typically experienced in Shopify stores; performance issues, easily blogging, pulling in external APIs, and creating complex interactive interfaces.Even though Prismic and Shopify both have plugins to integrate with Gatsby, this setup ended up being a difficult setup process. The front-end development of the site took roughly 250 hours to complete.Challenges of headless ShopifyThere’s a lot of work required to pull the correct data from Shopify into Gatsby and then allow it to be managed with Prismic. However, the biggest challenge of headless eCommerce is making the apps and extensions work correctly.A lot of plugins have code that runs on both the back and front end of Shopify. Given headless stores use a different front end, this part of the plugin needs to be rebuilt. This is typically only achievable if the plugin provides an API to pull in data.This proved challenging for the FreshOnline setup since we needed to use a handful of plugins to facilitate delivery and product distribution. Rather than just installing an app from the Shopify library, we needed to hunt down various services with exposed APIs and then build a custom interface.Difficulties integrating a CMSIntegrating content management systems to manage content and Shopify products is a really cool idea in theory, but it ended up being a difficult challenge to build.There really aren’t any headless content management systems that are mature, fully-featured and ideal for smaller businesses to use. Contentful is widely regarded as the best solution, but a lot of it’s features are locked behind a $450/month paywall.We pushed forward with Prismic, which charges $7/month/user. However, it suffers from bugs and issues that make implementation tricky. The most notable issue was Prismic’s immediate impact on performance.Running Gatsby and Shopify together was yielding great performance results. As soon as we added Prismic, our PageSpeed Insights scores would drop below 80. There was virtually no other code on the site. It took an incredibly deep dive to discover this issue where we essentially dismantled the entire site.One of the biggest selling points of headless Shopify is the performance benefits. If a store is only achieving 70’s or 80’s on Google’s audits, then it’s a much less appealing solution.This wasn’t a solution we could solve, unfortunately. Luckily we had direct access to a Prismic account manager and talked through some workarounds with their development team.Was headless the right choice?This is a difficult question to answer objectively because we didn’t build a monolithic Shopify store to compare the differences.I would argue that we picked the right choice, but only because of the requirements around content marketing and requiring a flexible blogging platform.The additional effort, cost and complexities of rebuilding plugins and integrating Prismic into the solution probably didn’t solve as many issues as they introduced. Perhaps a more elegant solution would have been to host Prismic on a separate domain, allowing Shopify to remain as a monolithic system.Final ThoughtsThe FreshOnline team were stoked with the result of their project. You can check out the staged site over here.This was our first big headless Shopify project and we learned a lot of lessons. We anticipate headless eCommerce will become much more popular in the next 5 years as bigger companies combined microservices to achieve a more flexible solution."
  },
  {
    "title": "Why we use Tailwind CSS as our primary framework",
    "plaintext": "Selecting the right CSS framework is key to scaling the team's capabilities and experience over time. When working with many technologies internally, it's crucial to streamline as many processes as possible to avoid inefficiency. Time is money!Over the past few years at Clean Commit, we’ve built a vast spread of applications and websites. Since 2020 we have been investing in growing our JAM Stack capabilities, focusing on top-performing e-commerce projects using Shopify, BigCommerce and other headless-enabled systems.At the same time, we're still actively developing new projects based on WordPress and WooCommerce when it makes sense. Not to mention that our team is actively developing custom applications with different stacks.If you spot any of our products in the wild, you will see the use of different technologies and frameworks like React, Vue and templating languages like Laravel Blade on the front end. These technologies are significantly different, so we’ve had to find a way to standardise their implementations as much as possible.Before we explain our thoughts on Tailwind, please hear out our short pitch. Are you trying to figure out the best technology stack for your upcoming website or application project? Drop our team a line to see if we can help. The worst that can happen is you get experience-backed advice!Problem - lack of standardisationWe work with many different technologies. Using multiple front-end frameworks and backend technologies complicates work when our devs switch from project to project. Additionally, some of our projects used different styling approaches. Jumping between styling approaches made it almost impossible to reuse visual components between projects.With Tailwind, we've been able to standardise CSS across all of our projects. Sticking to a consistent approach makes it easier to code at a constant pace, grow our front-end team's know-how and achieve visual bug-free outcomes quickly and reliably. It's also significantly easier to reuse components across different projects, even when using different front-end frameworks.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe way we worked before TailwindBack in 2015, our team was in love with Bootstrap. Bundled UI components made it easy to create handsome apps and sites, so we did just that. Efficient! Right..? Well, no, not really.As we grew and our designs became more complicated, we started using custom styles added on top of Bootstrap. In the long run, this approach added unnecessary bloat to our projects and complicated the codebase.The latter was solved by introducing BEM, and we tried to resolve the former by adding utility classes. After all, why should we repeat our code when we can simply reuse classes. Brilliant! Well, not really. This approach made us ask the question - do we even need Bootstrap? We modified it heavily already, cut out components we don't need, added a bunch of utility classes on top and then added a lot of custom code on top for each project.Maybe if we can remove Bootstrap and create a custom base for our projects, that would speed up the work? So we went happily on our way to do just that. We scrapped Bootstrap, set up Sass mixins, generated a bunch utility classes, and it was a mess!Our designers used slightly different layouts for their projects which forced us to adjust utilities every time or add a lot of custom classes to each project. We could easily fix this problem by adding an extremely large collection of utilities with unused classes being purged and one config file to adjust them. See where I'm going with this train of thought?At that point, our team decided it was time to go back to the drawing board. The first step was to research available solutions.I've heard about Tailwind before, but only after some personal experimentation was I convinced it was a viable solution to issues we've been experiencing. As a company, we reached a point where the best path we could take was reinventing Tailwind. Utilities? Check. Purge? Check. Easy configuration? Check check check.Rediscovering Tailwind after our internal trial and error process was a real blessing. We knew what we wanted, now the easy part, right? Right?Getting the team on boardWe found our solution and just needed to implement it. What could go wrong?Making people change their way of doing things is challenging. Some of the team heavily preferred other frameworks like Bootstrap or Bulma. Others on the team were heavily invested in React and wanted to use styled components. Understandably, everyone defaults to the framework and stack they know the best.Along with the preference issue, we didn't have any standards in place to support Tailwind development.Switching to Tailwind is unintuitive at first. The biggest question is when to use Tailwind, and when should I use custom classes? After some experimentation, we decided to componentise as much as we could and use Tailwind classes except for couple of edge cases.At first, using Tailwind “correctly” was tricky for most of our team. Some of our guys still used custom classes using Tailwind's @apply. This approach was fortunately eliminated after couple of projects and code reviews sessions.The best method to encourage devs to use Tailwind classes was debugging fully tailwind written code bases. Despite more complex markup, it's much easier and faster to debug styling issues when only Tailwind classes are used.Armed with the knowledge that debugging existing projects will be easier, the team became much more receptive to the idea of fully committing to Tailwind.Benefits of Tailwind CSSOne framework to rule them allOur team focuses on delivering quality code. Our definition of “quality code” means little to no bugs, simply maintainable and easy scalability. We're curious and often want to try the \"next big thing\". That's why we experiment when it makes sense. It's a challenge to manage multiple stacks (duh), so it's nice to have one common denominator.Our approach to styling is always built on top of Tailwind. This standardised procedure makes it a tad easier to experiment and move components across stacks (should something goes wrong). Thanks to our adoption of Tailwind CSS, we're more agile in our everyday work.Designing with Tailwind CSSAfter successful adoption by our technical staff, it made sense to move Tailwind over to our design department. There’s no point in having half the team commit to a framework.Since April of 2021, our design team have used Tailwind CSS as the guidelines for every new project. Implementing Tailwind during the design process means we don't have to deviate from default configuration too much. All we do now is change colours, fonts and adjust box shadows. The naming convention for different styles and colours is the same across the design which helps with collaboration and catching issues with styling early.Utility first CSS frameworkOne of Tailwind's main selling points is its utility classes. Utility classes are classes that are general-purpose and can be used for a variety of different types of styling. This makes them perfect for use in a variety of contexts, as they can be easily reused and don't require any specific knowledge about Tailwind to use them.Faster stylingFully adopting Tailwind has had a positive impact on our team's efficiency. We don't spend as much time writing custom CSS classes, and we're able to move faster thanks to the utility classes (once we started using them properly). In addition, debugging styling issues is now easier than ever before thanks to the standardised approach that Tailwind encourages.ResponsivenessBuilding complex responsive layouts is easy. You can use utility classes freely across any number of breakpoints to make your design come alive conditionally - no need for Global Styles.Highly customizableTailwind CSS offers flexible customization. It comes with its own built-in default configuration, but you can easily override it by making changes in the config file. The key here being easy access to everything through one location (including colors schemes and stylesheets) while still keeping things organized so they don't get out of hand during fast-paced development.Better compositionTailwind CSS makes it easy to break down your styles into small reusable components. By doing this, you can avoid repetition and keep things organized by creating CSS classes for every feature or section on the website instead of hogging all page space with one big style sheet that applies globally.ConsistencyTailwind has a lot of pre-built classes for sizing and colors that will reduce or completely remove the need to implement your own design system. Or, even better, adopt Tailwind's specifications into your own design system.Letting Tailwind take the lead has significantly streamlined the handoff between our design and development team, because our frontend developers already know what's in Figma will match Tailwind's output.UI KitsThere's a handful of nice UI kits on the market that can speed things up. Tailwind UI and Tailwind UI Kit are the two that we've investigated.We have an in-house designer (hi Patryk!), but even still, these libraries save a ton of time.We'll often bump into a feature that needs to be built which is really challenging. Calendars seem to have come up a lot in the applications we've been developing. Being able to quickly pull down a tricky component and make some tweaks is a blessing.The bad & ugly of TailwindTailwind CSS isn't perfect. And while our small team of frontend developers have adopted it with great success, we're aware that it does some things... not super well.Ugly markupSometimes it's simply, well, ugly. The markup at first can be overwhelming.Just take a look at this Banner markup, and you'll know what I mean.<div class=\"bg-indigo-600\">  <div class=\"max-w-7xl mx-auto py-3 px-3 sm:px-6 lg:px-8\">    <div class=\"flex items-center justify-between flex-wrap\">      <div class=\"w-0 flex-1 flex items-center\">        <span class=\"flex p-2 rounded-lg bg-indigo-800\">          <svg ... />        </span>        <p class=\"ml-3 font-medium text-white truncate\">          <span class=\"md:hidden\"> We announced a new product! </span>          <span class=\"hidden md:inline\">            Big news! We're excited to announce a brand new product.          </span>        </p>      </div>      <div        class=\"order-3 mt-2 flex-shrink-0 w-full sm:order-2 sm:mt-0 sm:w-auto\"      >        <a          href=\"#\"          class=\"flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-600 bg-white hover:bg-indigo-50\"        >          Learn more        </a>      </div>    </div>  </div></div>Learning curveThe other issue with Tailwind implementation is the initial drop in productivity we've noticed. For the first 2-3 projects, our devs had problems with using Tailwind instinctively. It takes time to learn Tailwind to the point that you can easily create markups without looking at the docs.The decrease in productivity reverses over time, and we saw a 6-10% productivity jump across our teams using Tailwind after a couple of months.Animation difficultiesTailwind is great for making simple animations, but if you want to create more complex ones with movements and actions it can be tough.Even though there are some built-in options that allow for this kind of thing, they're not always enough--especially since these libraries don't provide all the necessary tools needed in order achieve what we need (think about how many class names would have been required).When we've been met with this situation recently we've opted to use vanilla CSS in combination with an animation library like GSAP.If you're looking for a new framework, try Tailwind!Tailwind helped us to streamline our workflows and standardise our toolkit. It's not a panacea for all styling problems, but it turned out to be a perfect fit for Clean Commit.When working on new projects, we have one less decision to make. Moving components between projects has never been easier. Our devs can easily switch between different codebases without learning (or relearning) styling practices unique to this project.Tailwind has saved a lot of time and our sanity! If you liked this article, check out Clean Commit blog for moreF﻿requently Asked QuestionsW﻿henever we explain to new clients that we use Tailwind, they usually throw a handful of questions back at us. Here are the questions we get asked most frequently.I﻿s Tailwind CSS better than Bootstrap?W﻿e may be biased because we've pushed Tailwind as standard practice, but we would strongly argue that Tailwind CSS is better than Bootstrap.B﻿ootstrap is now an \"old\" technology. It was made by Twitter in mid-2010. Just because something is old doesn't mean it's not great, but Bootstrap, in our opinion, is a heavily overused framework and feels a bit clunky.  Tailwind, on the other hand, offers a way to build customised designs with a standardised approach, meaning your new shiny application doesn't look the same as everything that's on the market.Despite the markup looking a bit busy, Tailwind is a nicer and more efficient CSS framework than Bootstrap. Unlike Bootstrap, Tailwind offers a set of utility classes that let you work with what you need.I﻿s Tailwind CSS a framework?I﻿t sure is. The official Tailwind CSS website even describes it as a \"utility-first CSS framework\".What is Tailwind CSS used for?T﻿ailwind is used to style user interfaces quickly and more efficiently than traditional CSS. It provides utility classes for controlling the variables that define the look and feel of a user interface, like padding, margin, colour, shadows and font."
  },
  {
    "title": "10 Concrete Benefits Of Headless eCommerce",
    "plaintext": "Headless eCommerce is becoming a viable option for merchants who aren’t getting what they need from a traditional monolithic setup. While it’s not a silver bullet, there are a lot of headless eCommerce benefits that are powering this movement.Clients have recently approached us with eCommerce businesses that started as simple Shopify, WooCommerce and BigCommerce stores. After several years of business, they’ve added a lot of plugins, modified their themes, and adopted 3rd party systems to try and customise their stores to their needs.There are a few problems that usually surface with this approach. Firstly, plugins stop working or break parts of the site. Secondly, page load times start getting slow. Finally, the store becomes harder to manage and takes more time to perform simple jobs.Pretty much every eCommerce store owner that’s worth their salt is on a million to squeeze more customisation, flexibility and performance from their store.The Strategic Tech Upgrade 14 Businesses Used To Turn Their Store's Struggles Into Massive GrowthGet a detailed breakdown of 14 businesses that set goals to improve their bottom line, and then used a headless architecture to make it happen.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHeadless eCommerce is a better solution to achieve these requirements. We’ll save you from the technical explanation of how it works, but in general, decoupling the eCommerce backend and store frontend cuts out interaction with the server and speeds the user experience up significantly. It also allows different, more dynamic technologies to create the customer-facing storefront without being permanently locked into one solution.There’s a fair bit to unpack here. We’re going to break the benefits of headless eCommerce down into 11 bite-sized points:Benefits of headless eCommerce1. SpeedFast websites keep users happy and browsing for longer. It’s a simple argument, but there’s so much evidence that it’s true. Users don’t want to wait around for things to load.A super-fast, snappy website also unlocks some valuable SEO benefits. Since Google researched their User Experience algorithm update in July 2021, website owners with highly optimised sites have seen increases in traffic and ranking of their pages.The problem with traditional monolithic eCommerce platforms is that as the catalogue grows, order history expands, and site functionality extends, performance issues start appearing. The database takes longer to return queries, heavy unnecessary javascript libraries weigh down the frontend payload, and the experience for users gets slower.This issue compounds when the site receives large volumes of page views and orders. When the site has to handle thousands of queries in a short period of time, it can become sluggish.There are plenty of reasons for eCommerce sites becoming slow over time. Going headless alleviate most of the issues. Building a custom frontend with a platform like Gatsby pre-renders pages as static HTML, CSS and JavaScript. There’s no interaction with a server, cutting out the middleman.Explaining the speed of a headless site is a bit academic, but here are a couple of examples to play around with:FreshOnline - Gatsby + Shopify + Prismic CMSSaleor Demo - Next.js + SaleoNext.js Commerce Demo - BigCommerce + Next.jsWe built the FreshOnline store, by the way. The other two storefronts are demo shops but handy for getting a feel for the lightning-quick load times of headless eCommerce stores.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit2. Multi-LanguageMulti-language support is arguably one of the biggest benefits of headless eCommerce implementations. There are ways around this issue for monolithic solutions, but they’re difficult to manage and kind of clumsy.If you’re a European eCommerce company, chances are you’ve struggled with multi-language issues in your store.eCommerce platforms like Shopify provide some features for multi-language and multi-currency support, but as a company that serves a U.S. market primarily, it’s not a problem they’ve given enough attention.Going headless allows your store to serve language-specific versions of your products and content based on the user’s country of origin. Companies like Netlify are getting ahead of this problem with new features like Netlify Edge.Over the past few years, many excellent headless content management systems have hit the market. These platforms make managing multi-language content an organised task for shop owners.3. Content Management SystemsGoing headless with your eCommerce setup means you can manage your store’s content with a 3rd party CMS instead of Shopify, BigCommerce, or whichever eCommerce engine you’re using.Having the option to plug in a powerful CMS like Contentful, or something familiar like WordPress can significantly improve your team’s ability to produce new blog articles and keep on top of content changes.Calling back to the last point, having a more flexible and tailored solution for writing articles in different languages is a feature plenty of store owners need if they’re targeting customers across an entire continent.4. You’re not locked inA few months back we were approached by an eCommerce business owner complaining that his eCommerce company had just tripled their prices.He was happy with his site’s design, its performance, and its configuration. He had spent years installing plugins, making tweaks and getting everything perfect, only to have the rug pulled out from underneath his feet.Adopting a headless eCommerce architecture would have prevented this problem. If the eCommerce platform becomes unsuitable, you can connect new technology in its place without having to change the design or the customer experience.Swapping eCommerce engines would require significant effort, but it’s completely achievable. In a way, replacing your website’s microservices is a kind of insurance policy against picking a technology that doesn’t fit perfectly.5. Maintenance & ScalingThis benefit only applies to larger stores with large data sets and a decent amount of customisation. If this sounds like your store, you’re probably running a decent list of expenses to keep everything afloat.Monolithic platforms tend to require a lot of maintenance to keep everything running smoothly. Bug fixing can be tricky because changes to the website’s front end are deeply connected to the back end.Interacting with the eCommerce backend through an API reduces the number of moving pieces and ends up requiring a fraction of the maintenance.A decoupled approach also means that the static files that make up the website’s frontend can be getting hammered by traffic without bringing down the backend. Headless eCommerce stores are ideally suited to large volumes of traffic and sales.6. Flexibility & customisableOur team was recently working on a bespoke monolithic Shopify theme and ran into a problem. The client wanted to use a plugin to handle her rewards. The plugin had its own limited templates that wouldn’t accept a whole lot of custom styling.This scenario was a headache since we had already created a custom design for this part of the website before first investigating this plugin.A headless implementation would have allowed us to build a flexible design and then call the rewards system data and functions through the rewards platform’s API.The flexibility offered from headless stores is unrivalled in this regard. There’s no need to stick to templates or predefined layouts. The store’s design can be completely tailored to create the ultimate shopping experience.7. Improved securityAdopting a frontend framework like Gatsby to power your store means users interact with “static” files. There’s no communication with the server when a user arrives at the store. All the HTML, CSS and Javascript files were created at build time.This architecture makes it incredibly difficult for hackers or people with malicious intent to attack your site.Since all communication with the eCommerce backend is happening via an API, any kind of data interception or unauthenticated backend access is much more difficult to execute than for a traditional monolithic setup.8. Better developer experienceeCommerce platforms like Shopify and BigCommerce are proprietary software, meaning they’re owned by a company that won’t just release all the code to be modified. Understandably, they don’t want their code to be stolen and the platform replicated without permission.As a result, they create a structure where the development community can create themes and templates. This “structure” is usually a pain to work with for developers that are used to doing things their own way.Typically, there are restrictions around what can be modified and particular approaches to follow when coding a new theme. It’s these quirks that make for a frustrating developer experience.On the other hand, developers can use popular frontend languages and frameworks to develop headless eCommerce stores. Frameworks like Gatsby and Next.js have huge ecosystems of extensions, libraries, plugins and tools that help build features that would be otherwise unachievable.An excellent example of this argument is that Shopify only recently implemented support for git in its platform. Before this feature, multiple developers couldn’t be working on the same store simultaneously without the risk that they’d break the other person’s code and have to manually figure out which part of the code should take priority.9. Progressive Web Application out of the boxGoing headless with a framework like Gatsby or Next.js means your store can leverage Progressive Web Application features.In a nutshell, PWAs are applications that run in the browser but can be installed. The biggest use case for a PWA is wanting to provide a native mobile app experience without having to build separate mobile and desktop applications.PWA features are handy for eCommerce stores because they provide a mobile-first experience for users that lets them feel like they’re using a native mobile app. The apps are lightning quick and perform cool functions like sending push notifications.10. One eCommerce backend but many storefrontsThe decoupled nature of a headless eCommerce store means that it's no longer one backend to one frontend relationship. You've unlocked the flexibility to manage multiple collections of products in a single eCommerce engine, but spin up separate frontends (on different domains) and pipe your products in.While this can be get a bit messy, it almost means you can test different product lines out with new stores without having to spin up and pay for additional stores.Disadvantages of headless eCommerceTalking solely about the benefits of headless eCommerce wouldn’t be a balanced review. There are some issues to overcome with this architecture, and it’s not the right choice for every business.1. A lot of eCommerce plugins breakMost plugins contain integrated code that runs on the front and backend. Going headless with your eCommerce store breaks that connection. The frontend code isn’t running on the correct domain and won’t work. This disconnection typically breaks the correct operation of the entire plugin.There’s usually a way around the issue. It requires finding a different service that provides an API. A custom frontend interface is developed and connected to the API, effectively re-engineering a headless version of the plugin.The downside of this approach is it takes more effort and disqualifies your store from simply installing plugins.2. More moving piecesGoing headless requires multiple services working together. Editing content is performed in a different platform to manage products and orders. Analytics needs to be reinstalled, and this is usually handled through another 3rd party platform. It’s a similar story for marketing and automations.The result is a collection of systems that need to be managed. A lot of store owners aren’t troubled by this idea since they’re already running a dozen different services. However, for store owners that are just starting out, the idea of having everything in one place is more appealing.3. Time to marketCreating a new Shopify store can take 15 minutes. It’s a simple as signing up, picking a pre-built theme and adding some content.By contrast, headless stores need to go through a design process, then require a custom interface to be developed and APIs connected to pull in data from various sources. Even though the results tend to be better, the time required to get to market is much greater.If you’re in a pinch to get your store up and running, a headless approach is probably not the correct choice.4. High Initial costHeadless stores our team have created have taken around 60 to 80 hours to design and 300 to 450 hours to develop. Regardless of what hourly rate a developer or designer is charging, that’s a decent price tag to swallow.Developing headless stores is an advanced skill that requires a combination of effort from talented designers and developers. As a result, most agencies charge a minimum of $50,000.Wrapping upHeadless eCommerce is an excellent solution for businesses searching for a faster, more flexible, and better fitting solution.It’s not the right choice for every business, and monolithic stores are still the overwhelming choice for most eCommerce businesses. However, there’s an undeniable trend of companies going headless.Customers expect fast, seamless, mobile-friendly experiences, and if they can afford the investment, going headless is providing worthwhile returns.We wrote a short article that provides a relatively accurate way to estimate your return on investment from going headless. Give it a read if you’re still on the fence!We're hiringIf you're a frontend developer or have a technical friend that's looking to join a relaxed, fully remote workplace where we encourage part-time hours and a flexible lifestyle, then let them know we're expanding our team!"
  },
  {
    "title": "What is headless eCommerce?",
    "plaintext": "What is headless eCommerce?There’s plenty of hype around going headless with Shopify, BigCommerce, Shopware and Magento. Unless you’re familiar with programming concepts and architectures, the idea of a headless website is probably not clear. This article will aim to answer the question “what is headless eCommerce” as succinctly as possible.The simplest way to break the headless concept down is to start by thinking about a “regular” website or eCommerce store.Monolithic eCommerce StoresThese types of sites have code that lives on a server. When a user arrives at the site’s URL, a request is sent to the server which runs a series of commands and returns the code which is interpreted by the browser.This traditional, all-in-one approach is called monolithic architecture. Within the codebase, any number of features can run. Reporting, ordering management, tools to write content, plugins that facilitate delivery and tracking, reviews, and thousands of other features.To use a car analogy, all the features are powered by the same engine and living under the same hood.The website’s “head” and “body” are connected. The head in this situation refers to the database (memories) and code that connects memories together to draw logical conclusions (backend functionality).The body is everything that the user can see and interact with. This boils down to HTML, CSS and JavaScript.Understanding this all-in-one, integrated architecture will provide some clarity to a headless setup.The Strategic Tech Upgrade 14 Businesses Used To Turn Their Store's Struggles Into Massive GrowthGet a detailed breakdown of 14 businesses that set goals to improve their bottom line, and then used a headless architecture to make it happen.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHeadless eCommerce StoresHeadless eCommerce stores are built from “microservices” and connected by API. Unlike monolithic setups, the frontend code that is delivered to the user isn’t integrated with the backend code that runs queries on the database and performs complex logic.We’ll quickly break down the “headless” expression a little more in case it’s not clear. A headless website has a frontend (body) that users can interact with but there’s no database or backend code (head).The head is living in the cloud and the body communicates via API over HTTP when bits of data or particular functions need to be run.In the diagram above, the same features that were packed into the monolithic system now operate as their own platforms. This might be Contentful for content, Shopify for eCommerce functionality, Segment for Analytics and Routific for distribution planning.For the sake of explaining the architecture, we’ll just talk about the headless application pulling data in from the microservices APIs.The eCommerce store may need to display a blog article that features a handful of products. To do this, it sends a request to Contentful API to provide the blog content and another request to the Shopify API for the product details.When the data arrives, it is modified and turned into code that is readable by the browser. This is typically handled by a frontend framework like Gatsby, Next.js, Nuxt, or Vue Storefront.What’s the point of headless eCommerceWhat’s the point of moving away from an all-in-one system and going headless with your eCommerce store? The answer boils down to store owners chasing faster load times, more flexibility and a solution that is tailored specifically to their business needs.There’s actually a ton of benefits to headless eCommerce but the one that most store owners are drawn to is the blazing page load times.Using a static site generator to build the stores’ frontend means the site’s code can be delivered from the closest CDN node, and the time to download and display the site is very quick.Here are a couple of great, really fast headless eCommerce store examples:FreshOnline - this is a headless Shopify store we built a little while backNext.js Commerce Demo - this is a demo site combining BigCommerce and Next.jsWrapping upJumping straight into understanding a complex software architecture concept is difficult if you don’t already have the prerequisite understanding of how the internet works. We’ve aimed to break down the concept as clearly as possible without diving too deep into the technical weeds.Hopefully, this breakdown clears up some of the confusion!"
  },
  {
    "title": "Headless Shopify vs Headless BigCommerce",
    "plaintext": "Is Shopify or BigCommerce better for a headless store? Both platforms have roughly the same features. They’ve both invested development resources into supporting headless setups. Shopify has a much bigger user base and boasts many huge multinational eCommerce brands on its list. BigCommerce, on the other hand, has specifically implemented the option to move headless without needing to subscribe to a plan priced for larger companies.The short answer is they’re both great platforms and make excellent headless solutions. If you want to check out a couple of examples of each platform in action, you can see them below:FreshOnline. This is a store we created using Shopify, Prismic CMS and Gatsby.ACME Storefront. This is Storyblok’s BigCommerce and Next.js demo.Before we get too deep, if you’re investigating headless eCommerce options, but you’re still not 100% sure how it works, we’ve written a short, simple explanation that breaks down what headless eCommerce is in simple terms.Let’s dig a little deeper into how each platform suits the headless eCommerce architecture.The Strategic Tech Upgrade 14 Businesses Used To Turn Their Store's Struggles Into Massive GrowthGet a detailed breakdown of 14 businesses that set goals to improve their bottom line, and then used a headless architecture to make it happen.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHeadless ShopifyShopify lends itself nicely to a headless setup. The Shopify storefront API is mature, well documented and accessible from a single endpoint which simplifies development. There are plenty of “starter” projects available on Github for integrating Shopify’s API with websites, eCommerce stores and even games.On Shopify Lite, Shopify Basic, Shopify or Shopify Advanced plans, your store gets access to most of the storefront API. In most cases, the default access to Shopify’s API will be enough for an excellent solution.The restricted parts of the API are gift cards, staff accounts, and “multipass”. These features can all be unlocked by upgrading to Shopify Plus.Most stores can get away without access to gift cards or their staff accounts through the API. The multistore is more of a problem. This feature allows user account information (i.e. purchases, settings, account details) to be shared across domains. Since regular Shopify plans force checkout to happen on Shopify’s domain, and headless stores use their own domain, there’s no way for your headless store to know the user’s purchase was made successfully. Similarly, there’s no way for Shopify to pre-fill the user’s details if they’ve already created an account on the site.This limitation boils down to users not seeing their past purchases and filling in their full details every time they make a purchase.You can overcome these problems by upgrading to Shopify Plus.Having to upgrade to solve these problems brings us to the first and only defining downside of using Shopify as the eCommerce engine in a headless store - paying $2,000 a month for a subscription. This price tag doesn’t phase retailers pulling in over $2 million a year, and they’re the businesses Shopify is targeting.Unlocking Shopify Plus also means your store can sell products in different currencies. This feature is desirable for plenty of larger companies pushing an international market, but it’s arguably more important for small to medium retailers in Europe.We’ve recently been consulting with a couple of European brands that aren’t quite ready to pay $2,000 a month but need to sell their products in different currencies because they’re surrounded by other countries that make up their target market.Along the same lines of multicurrency, Shopify integrates with a wide range of payment providers. It also has its own payment gateway, Shopify Payments, which Stripe powers. Depending on which plan you’ve subscribed to, Shopify charges around 1.75% per transaction for domestic cards and 2.90% for international cards. However, if you want to use a different payment provider, they add on an extra 2% on top, which can eat into your profit margins.Ignoring the Shopify Plus issue for the moment, and assuming this isn’t a deal-breaking problem for your store, there are unique benefits of using Shopify for a headless setup. The big one is that Shopify is a well-established platform, and there’s a significant development community supporting their transition into headless eCommerce.One of the most popular frontend frameworks for headless eCommerce, Gatsby, has its own gatsby-source-shopify plugin that pulls in all products information, collections, and other store data at build time. This plugin takes a ton of the development labour out of building a new headless store.Popular headless content management solutions like Contentful have released Shopify plugins to allow products to be inserted directly into blog content. Similarly, headless analytics platforms like Segment have developed integrations to track Shopify data through their API.Headless BigCommerceIf you’re not already familiar with BigCommerce, it’s very similar to Shopify. It doesn’t command the same market share, but it’s a direct competitor and has a very similar set of features.In our humble opinion, it’s not quite as nice in a few intangible ways. The partner portal is a little harder to work with. The administrative interface isn’t quite as polished, and in general, the platform doesn’t have the same level of UX polish that Shopify does. However, it’s still a great solution and a completely viable headless solution.Over the past couple of years, BigCommerce has been pushing its API first approach and providing resources to support the development community in adopting it as a headless eCommerce engine.The most significant difference between headless BigCommerce and headless Shopify is that BigCommerce doesn’t restrict parts of it’s API based on your subscription level. By default, they provide a storefront API that allows a customised cart experience built on a different domain.The only big difference between BigCommerce’s lower level plans and their enterprise plan is the ceiling on the number of API calls that BigCommerce will process in an hour. The limit for Trial Stores, Standard, and Plus plans is pretty generous at 20,000 calls per hour, with the enterprise plan allowing 60,000 per hour. They also advertise that customers who upgrade to the enterprise plan will get support from the BigCommerce development team to fix any problems with the API.Another essential difference between BigCommerce and Shopify is their attitude towards payment processors. Unlike Shopify, BigCommerce doesn’t own a payment process, so they don’t have any incentive to charge additional transaction fees for 3rd party payment gateways. BigCommerce integrates with around 50 payment gateways, providing plenty of options to find a suitable fit for your store.BigCommerce has also been active in developing headless extensions for their platform, including a WordPress plugin, next.js app, Gatsby starter site, and a handful of other helpful guides, integrations, and resources.Which platform is better?The answer to this question is a bit subjective. Both platforms provide the tools to create a flexible and highly optimised headless eCommerce store.It’s hard to look past the fact that Shopify pushes users to upgrade to Shopify Plus. If your store is already using Shopify Plus, then this argument is moot, and you’re in the perfect position to get started with a headless setup.However, if your store isn’t on either platform and you’re not ready to shell out $2,000/month, then BigCommerce is probably the winner. Until your store hits the 20,000 weekly API limit, there are no limitations to building a perfectly tailored headless BigCommerce powered store.If you’re interested in talking about what’s involved in turning your store headless, you’ve still got questions, or you’d just like a quote, please drop our team a line on our contact us page!"
  },
  {
    "title": "Benefits of Progressive Web Applications (PWA)",
    "plaintext": "Progressive web applications (PWA) have been the hot thing for a few years now. With headless eCommerce gaining popularity (check out our articles about the benefits of going headless, pros and cons of headless commerce, headless Shopify and going headless with BigCommerce), almost every frontend framework throws around the fact that they’re a PWA, assuming that you know why that’s a good thing. PWA are great, but the reasons why are a bit more involved, and we want to unpack them.In a nutshell, progressive web applications are regular applications that use service workers, manifests and progressive elements to create a native app-like experience.Service workers are arguably the magic behind PWAs. They are designed to pass information between the application, browser and network (when available). They’re responsible for caching data and operate on a different thread from the main JavaScript that powers your application, which means they don’t block other operations. They also allow access to push notifications and background sync APIs. In a nutshell, they’re responsible for most of the features that define PWAs.If you get the idea but don’t understand why it’s a significant or valuable architecture, then read on.Benefits of Progressive Web ApplicationsOne Codebase That Works On All DevicesThese days, every device has a browser. The browser developers have done the heavy lifting to get their product working on every type of phone, laptop, desktop, tablet, and all the various operating systems that power these devices.PWAs take advantage of these efforts by running code directly through the browser like a regular web application.Throw in the features that make PWAs feel like native apps (blazing fast speed, working offline, and push notifications) and your application does most of the things a native application would have.For many businesses, PWAs do enough that they don’t have to develop a whole new codebase for Android, iOS and web. Supporting three platforms carries at least three times the overhead of one codebase.We find that entrepreneurs who engage us to help them build applications always ask for a web app and mobile app. When given the option to pay for the development of one application compared to three, they always choose the PWA path.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPWAs Works OfflineThe service workers we mentioned earlier take the form of JavaScript files and carry logic that allows them to interact with the network or cache, depending on whether they can connect to the network.The ability to continue working when the network is down is another big selling point of PWAs. In our experience, the benefit is kind of limited. You’ll rarely be using a device offline in the first place, and if you have to, the chances are that you’ll want information from the network. Even though PWAs can work offline, they can retrieve external information when not connected to the internet.Native App Feel (and installable!)Because PWAs and their service workers build such a comprehensive cache, the application can run extremely fast. Fast response times make your PWA feel a bit more like a native application. Additionally, PWAs can hide the browser controls; the application can be “installed” with an icon on the homepage, and push notifications can be delivered to the user.Native applications are desirable for users because they live directly on their devices rather than “on the internet”. It means one less step they have to take to start interacting with the application.Similarly, only good things come from fast load and response times. Users tend to interact more extensively with the content because they don’t get the opportunity to get bored and distracted.PWAs don’t need to be distributed through the app storeThis benefit is a bit of a double-edged sword. On the one hand, advertising your app through Google and Apple’s app stores means additional visibility. On the other hand, it means paying a juicy commission. In the case of Apple, that’s 20% of all sales.It’s worth mentioning that even if you wanted to, you couldn’t submit your PWA to the Apple app store. They’re yet to allow PWA on their platform. However, PWAs can be sold through Google’s Play Store.Building a PWA means that you can prompt users to “install” the application directly from your website, completely cutting out the app market middleman. This ultimately means more money in your pocket!No Need To Install UpdatesNative apps require updates to be pushed out to users. Since the files are installed locally on their device, they need to be reinstalled when the codebase changes.PWAs, on the other hand, live in the cloud and are served through the browser. Anytime the codebase is changed, a new version of the application will become available to the user whenever they next interact with the application without any reinstallation process.Not forcing users to accept app updates isn’t a huge deal, but it is nice to think you’re not pestering your user base with update notifications.Push NotificationsWe’ve intentionally left push notifications as the last benefit.PWAs can send push notifications. There are plenty of implementation issues with push notifications on iOS devices, and getting them to work correctly is a pain.If you can overcome the technical challenges, your application can send push notifications like a native app. Many applications have use cases for push notifications (reminders, awards, notifications), and it’s an effective way to draw users back into interacting with your app.Wrapping upIf you’ve read any other articles on PWAs, you’ve probably noticed some benefits we’ve left off this list. The biggest one is conversion rate increases and sales performance benefits.This omission is intentional because we haven’t run any firsthand experiments to verify that PWAs alone can significantly impact purchasing behaviour. Typically when a business commits to convert their stack to a PWA, they go through a rebranding and make many other significant modifications.There’s a ton of anecdotal evidence on the internet that PWAs influence positive change in conversion rates, but we’re not sure it’s concrete enough to list as a benefit of adopting this architecture.Whether or not PWAs significantly impact conversion rates and sales, there are enough other tangible benefits to make it an attractive approach.If you’d like to check out a PWA in action, drop us a line. We actively manage a handful of PWAs that we’ve built over the past few years, and we’re always happy to do tours! Or, if you’d like to get a quote on building your own PWA, simply send our team a message through the website contact form."
  },
  {
    "title": "Headless eCommerce Frontend Frameworks",
    "plaintext": "Headless eCommerce isn’t mainstream yet, but it’s gaining a lot of traction. In this article, we’re going to do a quick breakdown of the most popular frontend frameworks powering headless eCommerce.If you’re unfamiliar with frontend frameworks, they’re essentially bundles of JavaScript that help provide a structure for building websites and applications. The concept is similar to the framework of a house which provides instructions for installing windows, doors and specific rooms.In the case of frontend frameworks, they’re providing instructions for structuring HTML, CSS and JavaScript. This structure makes applications more straightforward and quicker to develop. That’s a big part of the reason why companies like Google (Angular.js) and Facebook (React.js) invested the resources to create their own frontend frameworks.Not every frontend framework makes for a perfect fit with headless eCommerce. However, frameworks like Next.js, Gatsby and Vue Storefront have pushed a ton of great features and integrations that help developers launch eCommerce stores easily over the last few years.This article aims to touch on the most popular frontend frameworks for building headless eCommerce platforms and dig into the pros and cons of each. For the sake of this article, we’re going to classify static site generators as frontend frameworks.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitFrontend FrameworksThere are hundreds (maybe thousands) of frontend frameworks. It would be impractical to try and review every single one, so we’re going to stick to the major players. We’re also going to keep this review focused on the resources and tools available for each framework to facilitate headless eCommerce development.Here’s a list in case you want to jump forward:ReactVueAngularNext.jsGatsbyVue StorefrontNuxtReactReact is arguably the most popular frontend framework for building headless eCommerce stores. Given Gatsby and Next.js are built on top of React, they collectively power a decent percentage of headless stores, and the big eCommerce engines are taking notice.Both Shopify and BigCommerce have official documentation explaining how to add React components using Node Package Manager (NPM).Shopify has even launched its own React-based framework for building headless eCommerce stores!Holding over 40% of the frontend framework market share, React deserves to sit at number 1 on this list.VueVue has been gaining a lot of popularity over the past few years. Created by Evan You after working at Google, the framework aimed to take the best parts of Angular and package them together into a new framework.This approach caught a lot of attention in the development community and Vue’s adoption has skyrocketed since its inception.While Vue doesn’t command the same market share as React, it’s recognised by the Shopify development team in this tutorial on prototyping web applications using Vue and Shopify.Vue.js has also been mutated into several different frameworks that have taken headless eCommerce into their design, such as Vue Storefront, Nuxt, and Vuepress.AngularAngular.js is spoken in the same breath as React when discussing frontend frameworks. Developed by Google, Angular has a reputation for being the framework of choice for larger, complex enterprise-grade applications. It also owns over 20% of the frontend framework market share.Angular can achieve the same outcomes as Vue and React; however, the support for eCommerce integrations is nowhere near as popular.Shopify and BigCommerce don’t provide resources for Angular development, and it’s pretty clear that they favour React. There are enough articles scattered across the developer forums asking how to implement React-based tutorials for Angular to indicate which direction headless eCommerce is heading.API focused platforms like Shopware and Saleor have tried to stay a little more neutral and provide support to Angular developers, but they’re lacking compared to the React resources.Despite the lack of support, Angular still gets the nod as one of the primary headless eCommerce frameworks simply because of its popularity and potential for creating fully-featured applications.Next.jsNext.js is arguably the most popular framework for headless eCommerce. To give some context to this claim, a few notable companies using Next.js are McDonald’s, Apple, Walmart and Nike.Next provides deep and incredibly useful tooling for setting up headless eCommerce stores. Most notably, Next.js Commerce is a starter kit for quickly spinning up a store using Next.js and whatever headless-friendly eCommerce platform you would like to integrate.All the major eCommerce platforms provide extensive resources, integration guides and plugins for connecting Next.js. Some resources are listed below: * BigCommerce + Storyblok + Next.js demo store * BigCommerce + Next.js official demo store * Saleor’s webinar tutorial on integrating Next.js * Node Package Manager tooling for connecting Next.js and ShopifyYou can see from the examples above that BigCommerce makes a great eCommerce engine for combining with Next.js. We recently compared headless Shopify to headless BigCommerce. It’s worth a read before you commit to either solution.Next.js is a static site generator with dynamic content generation potential. Being able to render content at build time means it can create incredibly performant eCommerce stores. While having the potential to dynamically generate content answers some of the edge cases that cause static site generators issues.GatsbyGatsby is another React-based static site generating framework. Gatsby has gained popularity and attention by achieving incredible website performance and scalability out of the box.Unlike Next.js, Gatsby has a library of plugins that developers can use to integrate 3rd party applications or quickly extend web applications. The Gatsby community maintains plugins to connect to the most popular eCommerce engines such as Shopify, BigCommerce, Shopware, Magento, etc.Gatsby’s resources for helping the development community build headless eCommerce platforms rivals Next.js: * Demo store built with Gatsby + Shopify * Demo store built with Gatsby + BigCommerce * Gatsby official guide to working with Shopify * Node Package Manager tooling for connecting Gatsby and ShopwareEarlier this year, we spent the best part of 300 development hours building a headless Shopify store that Gatsby powers. We even wrote up a case study to document the experience.Vue StorefrontVue Storefront is a Y-Combinator backed open-source frontend framework intended to power headless eCommerce. Unlike the frameworks we’ve mentioned so far, Vue Storefront is the first framework dedicated to headless eCommerce.Built on top of Vue.js, Vue Storefront operates as a Progressive Web Application (PWA) out of the box, bringing with it a bunch of great features that can enhance the eCommerce customer experience.Claiming to power more than 800 active sites, Vue Storefront is an attractive offer for businesses that need to leverage headless eCommerce functionality. Browsing through their live case studies, it’s clear that European businesses are flocking to Vue Storefront. This trend is probably because headless eCommerce is the solution to multicurrency and multilingual support.The guys that created Vue Storefront, Auerate Labs, have put a ton of resources into developing integrations with popular eCommerce engines like Shopify and BigCommerce.They’re also the exclusive frontend framework partner of Shopware. Under this partnership, Auerate Labs and Shopware have created an open-source PWA store that’s powered by Vue Storefront and Shopware. Both platforms are open-source, which opens up another world of customisation and flexibility.NuxtNuxt is essentially the Vue.js version of Next.js. It’s a frontend framework that can generate site statically but is also capable of server-side rendering to create dynamic content.Surprisingly, Nuxt was released around the same time as Next.js but hasn’t seen anywhere near the same amount of attention, probably because Vue is less popular than React.Regardless of its small following, Nuxt has a dedicated developer following that has released handy tools and integrations to help build eCommerce sites: * Nuxt + Shopify integration repository * BigCommerce + Nuxt starter * Nuxt + Strapi CMS + SnipcartIf you’re looking for a frontend framework and have already adopted Vue but want to leverage the performance benefits of static site generation, then Nuxt is an excellent choice.Other solutionsThere are heaps of other frameworks you could pick up to power your headless eCommerce store. A few notable mentions are Jekyll, Hugo and Vuepress. However, we wanted to stick to the most popular options.If you’re interested in browsing through a more comprehensive list of static site generating frontend frameworks, the guys at Jamstack.org have you covered. They’ve compiled a list of over 300 static site generators.What’s the best frontend framework for headless eCommerce?This answer is entirely unscientific and mainly based on our experience and anecdotal evidence, so please take it with a grain of salt.We would award the best framework to Next.js, closely followed by Gatsby and then Vue Storefront. Next.js is drawing the most attention from global eCommerce brands. It pairs so nicely with BigCommerce, and the results speak for themselves.In saying this, we’ve worked extensively with Gatsby and successfully used it to build highly optimised and robust stores. It’s an excellent platform and growing rapidly.Vue Storefront deserves to be mentioned closely behind these two frameworks. While a single agency controls its development, it’s open-source and dedicated to headless eCommerce, which is a claim that Next.js and Gatsby can’t make.Choosing any of these options in your headless eCommerce store’s architecture is a wise move and will help you deliver an unparalleled user experience!Get in contactIf you’re shopping around to figure out the best frontend framework for your project but need development help or guidance to get it off the ground, then go ahead and drop us a quick line. We’re always happy to jump on a call and provide advice."
  },
  {
    "title": "Website Redesign Strategy - Tips From A Design Agency",
    "plaintext": "Redesigning a website can be expensive and time-consuming, so it’s critical to map out how you will go about the process. This article will detail how to plan and execute your website redesign strategy to achieve all your business goals.The web moves fast. If your site hasn’t had much attention over the past five years, then chances are it’s going to look dated, even if it was designed by a professional.A more likely situation is that you designed your site, and your business has grown to the point where the lack of digital professionalism is impacting your brand. If that’s the case, it’s time to impress potential clients, customers and partners with a website redesign.Unless you work in web design or development, the following steps you should take may not be clear, so that we will shed some light on the situation.Planning and executing a website redesign is a reasonably linear process (unlike application development). If you follow these steps, you’ll dramatically increase the chances of your project finishing on time and within budget.These steps assume that you’re busy doing your job and don’t have time to design and develop the website yourself; however, they’re still relevant even if that’s the case.Feel free to skip ahead by using the navigation links below: * Figure out your sitemap * Prepare your content * Gather your images and video * Research your style * Define any special features * Communicate milestones and deadlinesEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFigure out your sitemapIf you’re redesigning your site, are you also planning to extend the resources or content you offer to visitors? Maybe you want to add a set of landing pages tailored for Google ads. Or your business may be offering a new service? Or, more simply, everything is already perfect, and you don’t need to change anything.Plotting your sitemap is the first thing to figure out because it will broadly define the budget and schedule of the project. Turning a 10-page website into a 30-page website requires more thought than simply “reskinning” the same website without changing the internal structure too much.A well-organised sitemap is vital for SEO and Google’s page rankings. To use a metaphor, it’s kind of like organising the arrangement of a lengthy essay. For the paper to be easy to read, it needs to have well-organised chapters that don’t repeat too much and take the reader on a structured journey.There are a handful of friendly tools that can make this process easier. We use FlowMapp at the start of every new redesign project. You can upload your site’s XML sitemap into FlowMapp, and it will generate a visual flowchart of the pages. From here, you can add, remove and restructure your sitemap.FlowMapp is free if you’re only using it for one project. It also brings the benefit of listing any of those orphaned pages that you may have forgotten!Prepare your contentIf you’re planning to rewrite the content on your website, get this done first. I can’t stress this enough. Content should always precede web design.There may be some discussion between the content writer and web designer to ensure the way the content flows will fit nicely into the intended structure. This conversation is a million times easier to have when the site hasn’t already been designed. It’s surprisingly hard to write copy that fits nicely into an established design.On average, about half our clients don’t have their content prepared before the project starts. We usually work around it by adding lorem ipsum (placeholder text). This placeholder text can be a pain to clean up later in the projects for larger sites.Great content takes a long time to write, so get it done early.We find the best way to write content for a new website is to create a wireframe in Figma and add blocks of text roughly in the places you think they should go. The trick here is to ignore the “design” of what you’re building. It should be rough to avoid prescribing the design approach.The image above is a good example but could even be a few degrees rougher and still be incredibly useful.Gather your images, video and assetsWe wrote an article a while back that details the 11 things to prepare for a website project. To save you clicking the link, these are the things we mention: 1.  Images and video to be used on the site 2.  Website content 3.  Privacy policy 4.  Terms of use 5.  Social media links 6.  Google Tag Manager installation snippet 7.  CRM or email service provider forms 8.  Stripe and PayPal permissions 9.  Logo 10. Branding guidelines 11. Domain credentialsWe’ve already covered the importance of website content, but the rest of these assets are critical to the project. Get them ready ahead of time to make your website redesign smoother.We strongly recommend you read that article if you don't understand how to prepare any of the assets mentioned above. We've provided a great breakdown of what each asset is and how it can be quickly prepared.Research your styleResearching your new style is the fun part of the process!Assuming that you’re working with a web designer, they’ll want to draw inspiration from other great websites. You want a unique design, but it’s important to remember that there are 1.7 billion websites. Users mentally categorise the kinds of websites they come across. While your site should be unique and well presented, it should also roughly follow the best practice trends of other successful businesses.Researching the web is an art form, and we couldn’t even begin to scratch the surface of approaching this task. Regardless, here are a few ways to find cool example sites: * Google “my industry” + “web design examples” * Search on Reddit for “my industry” + “website examples” * Browse the Awwwards sites. Although, these sites are often over-designed and perform poorly. * Use keyword tools like Ahrefs or SEMrush to analyse your site’s competitors and check out their web design * Browse web design projects on Dribbble or BehanceAnother great way to find design inspiration is to browse big brands like IKEA, Microsoft, Github, Stripe, and pretty much any successful software as a service company. These businesses have strong incentives to optimise their web design and online presence. They often employ the world’s best web designers and spend millions of dollars streamlining their websites. Take advantage of their efforts.Define any special featuresIf your website developer is worth their salt, they’ll set your site up with a content management system (CMS). The CMS lets you create, edit and delete content. If it’s a monolithic system like WordPress, it will often allow you to add plugins to achieve additional functionality.Adding plugins to a website is fraught with danger. Plugins are essentially packages of code that extend your website’s codebase. They can cause performance issues, expose your site’s security and damage the user experience.Rather than randomly adding plugins, a better approach is to write down all the functions you would like the website to perform. For example, if you want the site to pull pictures off Instagram to display on the home page, your developer can build this functionality directly into the codebase. There’s no need for a clunky plugin that could break or cause performance issues.You may want some features that need to be coded from scratch. Jotting these features down will ensure your developer creates the website you want.Communicate milestones and deadlinesThis tip sounds obvious, but communicating when you need things done is essential to keep the project on track. Your developer can only achieve a deadline if they’re aware of its existence.The websites we build usually take about two to three weeks to design and around four to six weeks to develop, depending on their size. If our clients have hard deadlines they need to hit, we can shuffle the project around to build the website in stages.Communicating deadlines doesn’t mean that the development team will complete the entire project quicker than estimated. However, it means that you can keep in a level of control over the project’s progress, which can be difficult if you’re not working directly with the team working on your website.One of the first steps we take when working with clients is understanding their deadlines and milestones and mapping them out onto a simple GANTT chart. This approach is overkill for a simple project, but it’s better to be clear and expressive than miss a deadline that negatively impacts our client’s business in some way.Wrapping upIf you’ve followed these steps to the tee, then you’re ready to kick off your web redesign project and chances are it will be a huge success.The only thing left is finding the right web design and development partner to do your brand justice. Reach out to us today to see if we’re the right fit for your project. Feel free to check out our recent work and approach to web design and development before contacting us.And if you're hungry for more design bites, visit Clean Commit's blog."
  },
  {
    "title": "Effective Communication For Remote Work - 5 Big Lessons",
    "plaintext": "Communicating effectively is arguably the most challenging part of working remotely. As the global pandemic forced the world to work from home, one of the biggest complaints managers had was struggling to communicate with the team.Suddenly, there was no option to simply pop over to a colleague’s workstation and have a face-to-face discussion. Managers who had built their communication style around this approach were forced to schedule Zoom or Team appointments.Effective communication for remote work is a topic I love writing about because our company has been fully remote since its inception, well before the pandemic. It’s a constant challenge we strive to overcome. Our agency is far from perfect. There’s still a considerable amount of improvement on the table. But we’ve come a long way and I want to share the lessons that have shaped our journey.The “before” storyBefore we put any effort into improving our communication channels, my business partner, WK and I would exclusively discuss the business in Slack. Neither of us wanted to be on camera. We work in software development, after all, which isn’t the most outgoing industry.We were used to typing, and it got the job done. As we worked with contractors, we would bring them into Slack, too, keeping everything nice and central.Where possible, I would communicate with potential clients by email and avoid getting on the phone or organising Zoom meetings.We organised our tasks in simple Asana projects, which just functioned as a shared list.Anytime we needed to share a document or record something for a project, we would put together a Google doc from our non-work accounts (because we weren’t subscribed to Gsuite) and send it to whoever needed to see it.Honestly, our processes weren’t too bad. In hindsight, we were inefficient and lacked a structure to discuss everything we needed to quickly.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitHow we improved1. Weekly Team MeetingsThe most meaningful change we made early on was organising a non-negotiable team meeting on Monday. There are no excuses for missing this meeting. The rule for this meeting is simple - be there.At my previous place of employment, we had adopted a goal framework called the Four Disciplines of Execution (4DX). We decided to bring this framework into our meetings to give them a structure.Even though we were still a little opposed to holding a meeting when we could use Slack, this face to face communication allowed us to communicate freely right at the start of the week. In my opinion, this is the most critical part of the week to get right.This meeting rarely goes over half an hour. By the end of the call, everyone knows their rough schedule for the week and what milestones they need to achieve.For the first couple of years of operation, we held these meetings on Zoom. This approach was fine, but there’s little value in seeing each other’s faces when someone is sharing their screen most of the time.Since then, we’ve moved our meetings to Slack Huddle. Our huddles are voice-only, with one person sharing their screen. Slack provides a fun and helpful marker tool for drawing up the screen. The drawing tool has provided hours of juvenile fun, but it’s also handy for quickly annotating changes.2. Dedicated kickoff meetings & debriefsI’ve already discussed the fact that meetings weren’t a priority for our team. We had to force our introverted selves to hold meetings when they were necessary.Having a laser focus for these meetings was important.We noticed that our projects were kicking off, and even though we had all the details, there were holes in our understanding. Questions that we should have hashed out at the start of the project were unanswered for weeks.As a solution, we agreed that a kickoff meeting would happen as soon as we signed a new contract. These calls followed a simple agenda: 1. Review high-level details of the project; who the client is, what the deadlines are, who is doing what 2. Talk through the scope in detail 3. Discuss an implementation planAny actions that come out of the call go straight into our task management system, so they don’t get lost.The other meeting we’ve implemented, albeit not consistently, is the debrief. We’ve found a wealth of lessons from this call. It’s incredible how many small inefficiencies our team picks up on that we don’t vocalise along the way.Providing an open no-consequences forum for the debrief has led to some of our most effective changes as a company.Reviewing our project performance is an area we’re planning to work on in 2022. We’ve only just scratched the surface of this form of communication.3. Dialling in our Slack channelsSlack is our central communication centre. We’ve used it for many years now and have documented our favourite Slack tips and tricks.At first, we would spin up channels for vague purposes. As a small team, we would chat privately, and these channels would go unused because we’d forget they existed.Private conversations in Slack are fantastic, but discussions are most effective when laid out in public.Early on, we had also offered a handful of clients access to our Slack account to reach us directly. I don’t regret this decision because I prefer Slack over email, but it made organising our Slack account a little tricky.We decided to consolidate our channels like this: 1.  Projects (every project we work on gets it’s own channel) 2.  Blog 3.  Website 4.  Management 5.  Designers 6.  Developers 7.  Team 8.  Growth Ideas 9.  Marketing 10. Hiring 11. General (default channel)There’s probably room to improve here, but we wanted to split our channels up into individual projects (Projects), website channels (Website, Blog), team channels (Management, Designers, Developers, Team) and growth channels (growth Ideas, Marketing, Hiring).The only other thing required to make this work is being vigilant about writing in the correct channel and correcting anyone that starts writing in the wrong spot.Upgrading your Slack account isn’t necessary to make the best use of the tool. We were on the free plan for almost three years before upgrading. In saying that, being able to search our entire Slack history and use Slack’s Huddles has been a significant boost in communication effectiveness.4. Replacing Asana with JiraAsana and Jira both have great commenting systems. It’s easy to communicate with the team about the scope of an issue or feature. The big difference between the two is Jira’s customisable workflows.Building a workflow where our team have to move their tasks into a “QA” state before they can be considered complete has made an incredible difference to our communication.Every single task that is assigned to anyone on our team is now reviewed by someone else. The workflows are configured, so each project has a nominated manager responsible for reviewing tasks moved into the QA status.Whenever an issue is spotted or a task isn’t completed per the requirements, we simply comment on the task requiring changes or seek clarification and move the job back into the “In Progress” status. If the original team member needs to discuss it further, they can add questions or comments in Jira.It’s simple and effective. The only problem is that Jira’s notification system is a bit hidden. It’s possible to send emails every time a task changes status, but it becomes white noise really quickly.We’ve found the best solution here is the Jira to Slack plugin. Anytime someone on the team assigns me a task, I get a notification in Slack. Since I live in Slack, I see these as soon as they happen. Even though I receive roughly 30 a day, and most of them are just notifications of status changes, it’s an incredibly effective way to communicate the status of each task.5. Adopting ConfluenceThe best way to communicate is to predict the question and provide an answer. Confluence has helped us build answers to common questions. If you’re not familiar with Confluence, another Atlassian product (like Jira and Trello), it’s a kind of knowledge base wiki.Every time a new project kicks off, we add a Confluence page documenting the details to support the kickoff meeting, essential information about the project, and any lessons that might be important to keep in mind.Jira and Confluence integrate seamlessly, and the Confluence pages are accessible right from the Jira project.Admittedly, this is an area we will need to improve in 2022. A fully functioning and well-maintained knowledge base can cut down on unnecessary conversations and lead to a great deal of team productivity.Wrapping upI hope you’ve enjoyed reading about our team’s journey to achieving effective communication for remote work. I’m the first to admit that we have a long way to go before we could be considered a well-oiled machine.Your journey may be completely different to ours. If you have any tips on how you achieved better communication in a remote workplace, I’d love to hear from you!"
  },
  {
    "title": "Case Study: Bitmax",
    "plaintext": "The Bitmax team reached out to us for help redesigning and developing their website. After bouncing a few emails back and forth, we jumped on a call to review where their current site was at:Home pagePodcast pageServices pageAfter a quick review, we became extremely excited about the project. The site already boasted a good amount of content and showcased some interesting images that we could leverage. This site had great bones but needed a bit of polish.Picking a styleThe primary goal of rebuilding the Bitmax website was to create a new fresh look. The first step in nailing this goal was to draw inspiration from some other really well-designed websites.Speaking with the Bitmax team, they pointed to frame.io as a site that had a lot of what they were looking for. Unlike frame.io, the Bitmax team didn’t have high-quality images or footage of their SaaS platform.The lack of these assets meant we needed to bridge the gap and design custom illustrations that looked like their screenshots but stayed in line with the website’s general theme. We dug around a ton of sites looking for inspiration and landed on palantir.io. They incorporate tidy, lightly animated illustrations that complement the clean theme.There were a number of other sites we looked at. These are the ones that made the shortlist: * https://www.evernote.design/categories/icons/ * https://www.uistore.design/categories/illustrations/ * https://icons8.com/illustrations/ * https://undesign.learn.uno/illustrations/We ended up going in a fairly unique direction. The style is inspired by going to the cinema. As the user scrolls down the page they’ve shown a parallax style multi-layer image that aims to look like the grainy lights in the movie theatre.We’ve also incorporated a scrolling image carousel that gives the impression of walking along the hallway decorated with posters on the way to the theatre room.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPicking the technologyFor the last few years, we’ve leaned more towards Jamstack (Javascript, APIs and Markup) websites for brochure sites like this. We would typically integrate them with Netlify CMS or Prismic.However, while we love the performance of Gatsby and the developer experience of working with a React-based framework, we’ve found that there are some shortcomings. Setting up staging environments and making use of popular, affordable split testing platforms are the two most notable.Early in the project, we had floated the idea of using Gatsby with the Bitmax team. After giving it a bit more thought we decided that WordPress was going to be a better fit. The Bitmax team were already used to WordPress so they wouldn’t have to learn a new CMS. Plus, we’ve got our WordPress development process nicely dialled.Since we’ve developed dozens of websites with both website frameworks, we’ve got some strong opinions on when they’re the right fit. We’ve written an article comparing WordPress with Gatsby if you’re trying to figure this comparison out for your own project.Content authoringOne of the biggest questions we deal with when creating new sites is how much involvement we’ll need to continue having once the site is deployed. Our goal is to avoid our clients needing to call us for help when they want to make any kind of content changes or create new pages. We achieve this by building sites using modular sortable blocks that contain dynamic fields so content and images can be updated.The challenge in creating these reusable blocks is to avoid adding so many that it’s difficult to manage while also providing enough flexibility to create new landing pages. This balance is only achievable if the design follows a consistent pattern.We usually aim to create as few blocks as possible. It’s easy to get creative and unstructured with the design which ends up in dozens of content blocks being developed. The only way to do this efficiently is to review the design frequently as a team and identify sections that could be streamlined.Ultimately for the Bitmax website, we ended up with just over 20 blocks.ChallengesBesides coming up with a super unique and creative design concept, we wanted to add some animation. Identifying where to add animation is kind of tricky. Adding too many moving elements can end up distracting the user.We ended up building in three primary animated components. The first is a staggered, slow scrolling carousel that showcases Bitmax’s portfolio. The second is a slightly more complex globe animation with curved lines that jump from country to country. And finally is a variation on the first scrolling slider.Check it outAt the time of writing, the Bitmax project is receiving a few content tweaks before being published. You can check it out here!"
  },
  {
    "title": "Research and Development Tax Incentive - Australia",
    "plaintext": "The Australian government introduced a research and development tax incentive scheme in 2017. The purpose of the scheme is pretty clear. The government wants to encourage companies to innovate.If you’re working in a company that’s staring down the barrel of a big tax bill then this scheme could be the perfect opportunity to invest in an innovative application that helps add weight to the bottom line.Under this scheme, companies making less than $20 million in annual revenue can claim a tax break of 43.5% on investments over $20,000. If the offset exceeds the company’s annual tax liability, the difference is paid out in cash.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitOf course, there are criteria to meet before your innovation qualifies for the scheme: * R&D activities must be registered with the Department of Industry, Innovation and Science before the tax offset is claimed * The Department of Industry Innovation and Science have the last say on whether the money your company has invested in the project qualifies for the tax offset. * Your company is an Australian and legally incorporated or is foreign but registered to pay tax in Australia * R&D activities happen in Australia * The outcome of the R&D activities is aimed at generating new knowledge, products, processes or services and is generally based on scientific methodsThere are plenty of fields where the research and development scheme could be leveraged, but since we’re a software development company, that’s the context we’re writing in. To that point, there are a few activities that don’t count as R&D: * Developing software for internal company use * Money paid by a development agency to their staff to build products * Money paid by a company to an affiliated development agency where they get a kickbackThese rules are pretty vague, but there’s a bit more detail to dig through on the business.gov.au site.This is the kind of scheme where talking to an accountant upfront is going to help guide you through the entire process.As a domestic software agency, we can help you build your innovation. We’ve indirectly worked with the Canberra Innovation Network to help bring the Selectr project to life.If you’d like to have a chat about your application and what the development process looks like, please drop us a line!"
  },
  {
    "title": "Case Study: Fixing Salt's Broken SEO",
    "plaintext": "Salt is the hottest cafe in Narooma. In the face of lockdowns, regulations and periods of mandated inactivity, their customer base has skyrocketed over the past few months. Their location right on the marina, they serve some of the best and most scientifically made coffee in the Eurabodolla.Despite this rise to fame, customers often ask why they can’t see their menu online and raise concerns that their website isn’t live.This was news to the owners, Caroline and Immy, who had gone through an extensive branding and website development process to create a site that looks stunning and is informative.As their technology partner and original creator of the website, we did a quick analysis of their site to see what issues we could find.The image above is an extract from Ahrefs, which is the platform we use to analyse technical search engine optimisation issues. Despite the site scoring 92/100, the problem is immediately obvious. The site has no backlinks.Backlinks are simply a hyperlink from another site. For instance, if we were to link to saltofthecoast.com.au in this article, Google would identity this as one backlink. If 100 other sites around Eurabodolla were also linking to the Salt website, Google would realise that it’s a site that people are looking for. This is one of many signals Google uses to escalate content on its search results page.There could be other issues hiding in the Ahrefs report, so we decided to dig a little deeper.The only major issue is a couple of duplicate pages that don’t have canonical links to tell Google which is the original. These issues should be solved at some point, but they’re not as important as the lack of backlinks.Technical SEO is one part of the bigger equation. Arguably more important is the content of the website. Google can only figure out when to show a website if it can read the site’s content and interpret the reason it was created.Here’s the general rule of writing SEO friendly content - it needs to have logical keywords included so Google can figure out when to show the website.Salt is the “cafe in Narooma” and it’s located by the “Narooma marina”. The quoted keywords would be our rough guess on what customers would be searching for. There could be tons of other great keywords. Unfortunately, the website isn’t using the right words so Google can’t figure out when to show the site.Doing some quick research, it’s obvious that customers are searching for Salt. “Wharf cafe Narooma” is another way of describing the marina. These keywords desperately need to be included in the top fold of the Salt website. Their combined search volume will result in hundreds of monthly clicks to the website.The final issue we noticed was the markup that was used to connect the online menu hasn’t been rendered as a link. Arguably, the biggest reason for visitors to come to a cafe website is to view the menu.How to fix these SEO issuesThe plan for fixing the SEO issues is relatively simple. 1. Build backlinks 2. Write keyword-rich website copy 3. Turn the menu into a link that opens in a new tabEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBuild backlinksThe quickest way to build a good backlink profile for a local business is to find other local websites that will allow articles or profiles to be created that link back to the target website. There are plenty of these services around, but the most notable ones are: * Local business directories * The yellow pages * Yelp * Trip advisor * Partners and suppliersThen there are a host of other online services that allow content to be written and hosted on their services. Most of these businesses will serve links as “nofollow” which essentially tells Google to deprioritize their value as a backlink. There’s a lot of debate on this topic, but the bottom line is that including these links is still valuable.Services that fall into this category: * Medium * YouTube * Facebook * Instagram * Github * Netlify.app * dev.toAnother creative approach to this problem is to reach out to the cafe’s partners with a quick email providing them with the simple steps of creating a backlink. Salt is in a unique position to make use of this approach because they’re dedicated to creating food using produce from around the Eurobodalla.Executing the planBacklinks from directoriesWe knew building a solid backlink profile was going to take the most effort, so we decided to start here first. The goal was to acquire as many dofollow OR nofollow links as quickly as possible. The site can’t afford any penalties from Google, so we avoided any sites with spam scores over 2%.Trip AdvisorSalt has a profile on Trip Advisor but it doesn’t have a picture or any reviews. It’s also one of three duplicates competing for the same physical address! Both of the duplicates are higher up the list.Luckily for the Salt team, Tripadvisor deals with this situation all the time. Salt purchased Coral at the Marina, which was previously Marina Coffee. To remove the old business listings, the new owners just need to verify that their business is located at the same address.This process was fairly simple. Log into TripAdvisor using the Salt credentials, create a support ticket explaining the situation and provide the details to verify the business’ location and ownership status.Destination NSWI wanted to see which other sites were responsible for distributing traffic based of the “Best food in Narooma” keyword. Trip Advisor easily held the top spot, but Destination NSW was not too far behind.After a quick poke around their site, I saw that they accept business listings. Before chasing any unknown site, it’s important to quickly review their domain rating and spam scores. Allowing a spammy site to point a link to your domain will result in Google handing out a penalty.With a domain rating of 67, and a spam score of 1%, Destination NSW is the perfect site to help boost the Salt backlink profile.The process for creating a profile on Destination NSW is simple. The guidelines can be found here. For the sake of SEO, it’s important to keep the keywords in the cafe’s description consistent. We had already identified “cafe Narooma”, “wharf cafe Narooma” and “best food in Narooma” as three of the most important, so we worked these into the description.GoodFoodAnother website pushing the “best food in Narooma” keyword is GoodFood.These kinds of blogs typically charge a fee to feature a backlink and writeup. In this case, it seems like they’re happy to receive new submissions by a simple Wufoo form.It doesn’t look like this will result in a backlink, but it’s possibly worth the referral traffic. Another signal Google looks out for is the number of users interacting with a website, so any means of pumping up that statistic will help.Australian Good Food Guide (AFGF)AFGF is the kind of low hanging SEO fruit that new businesses can make use of when they first spin up their website. They have a decent domain rating, a low spam score, and creating a listing is free (or seems to be).After creating an account, all we have to do is run through a simple profile setup wizard and our new listing will be spun up in a day or two.Backlinks from suppliers and partnersThe next step was to write to Salt’s suppliers and partners. Most of these businesses have websites and theoretically should be willing to provide a link, especially if we write a simple blog post for them that advertises their products.We didn’t want to spend too much time on this part of the mission because the majority of the suppliers and partners’ websites have a low domain authority and won’t bring a huge boost in SEO.We drafted up an email that could be tweaked a little and sent out to all the suppliers:Dear [supplier],Hope you’re doing well! Our customers are really loving [your product].We’re reaching out to ask if you would mind publishing a short article about the fact that you’re supplying Salt? We’ve written the article for you, so all you need to do is publish it on your site.Our website needs a bit of a push, and having our suppliers write articles about us will really help.We’ve already written an article that features you guys over here!Thanks :)The girls from SaltThere are a few things to note about the way this website was written. Firstly, we don’t want to get too wrapped up in the reason we’re asking them to publish the article. Most small business owners don’t know that much about SEO, so trying to explain the concept of backlinks would be a waste of time.Secondly, any good backlink builder knows you never, ever EVER ask for something without offering something else in return. In this case, we’re offering them a mention in an article  we wrote ahead of time that features all of Salt’s suppliers. The links were added as “nofollow” to avoid Google applying any penalty for link-swapping. We also offer to write the content for them. Anything we can do to reduce the friction to them saying “yes” will improve the chances of getting that backlink.The article we ended up sending out was only a few paragraphs long and featured images of the product, along with a short description of Salt’s cafe. We were careful to change the wording in each article to avoid any kind of plagiarism penalties.Backlinks to avoidAvoiding spammy backlinks is something I learned the hard way with my own website at the start of 2021. Google is very quick to penalise websites that receive a lot of spammy backlinks. You can see in the image below the impact it had on our traffic:The two red arrows mark the points when I went out and signed up for a number of local business directories without properly researching them first.Keeping this lesson in mind, I found a few websites we could have listed the Salt site on but choose to pass up.Bestrestaurants.comBestrestaurants.com was a bit of a 50-50 choice. While it showcased a couple of reputable restaurants from Narooma, it also had a spam score of 7%. This isn’t a high score, but it’s better to be safe than sorry and avoid any possibility of feeling Google’s wrath.Localsearch.com.auLocalsearch.com.au is nicely styled and looks legit but also throws up a few red flags. Firstly, none of the businesses they advertise has a profile picture. Secondly, their list of Narooma restaurants is limited to three entries. The most likely outcome is that these entries were generated automatically by the platform rather than created by the owners.These kinds of aggregation sites often take content that’s not theirs in order to get traffic, which they monetize in any way they can. This practice often results in spammy traffic scores.Write keyword-rich website copyGoogle prioritises the wording of any website’s homepage above any other page. Getting the content right on the Salt homepage will go a long way to fixing their SEO issues.Before we started writing, the first couple of paragraphs on the website read:A locally sourced and supported cafe that evolves with the seasons, and the community.We want to promote and showcase the region’s produce and people through our food and events with a strong focus on simplicity, sustainability and salt of the earth hospitality.While this write-up explains the cafe’s mission, it doesn’t answer the question that visitors (and Google) want to know when they first arrive on the website: who are you and what do you do?The revised description should feature these answers in the first two paragraphs. Ideally, the headline should explain this in plain terms and be backed up by the next paragraph.We ended up changing the wording to read:Salt is a cafe in Narooma that sources ingredients from the Eurobodalla.Located at the Narooma Marina, our food and events showcase the local region’s food and people. We pride ourselves on sustainability, hospitality and simplicity.We didn’t want to take away any of the personality that the original copy had invested, but we needed to add some keywords to give Google a better chance at figuring out what the site was promoting.The next section of content on the website read:order onlineDuring the covid lockdown, we have sadly closed the deck for dining in-house. Our entire menu is still available for take away, and you can come in or order online for pick up!(click here for the full menu)[https://saltofthecoast.square.site/]We changed this section to read:Salt Narooma MenuClick the link below to view our menu. Our fresh ingredients are largely sourced from the Eurobodalla. This means our menu changes with the seasons. Make sure to check back regularly!Besides adding the “Salt Narooma Menu” keyword, this section wasn’t written to improve the site’s SEO as much as it was to better inform customers why they should view the menu.The website started with only two available sections to rewrite. This was a problem because there were still valuable keywords left on the table such as “wharf cafe Narooma” and “south coast cafe”.When we built the website we made sure that the Salt team could add new content sections easily. The site’s content is managed by Prismic and is set up so new sections can be easily added to any page.All I had to do to push more content onto the homepage was log into Prismic, open the homepage, add a “slice” and write an additional paragraph of text:We serve a variety of local produce and seasonable dishes, including gluten-free and vegan options. We do not accept bookings since the water-side seating space is limited. Come down to the Naroom marina (sometimes called the Marina wharf) and enjoy a coffee while relaxing next to the water!The aim of this passage was to answer some of the more common questions that customers have around bookings while mixing in a couple of natural keywords.There’s still quite a lot of room for improvement in the content. The next step is to write a weekly blog post updating customers on the general ongoings of the cafe. For an online business, we would target particular keywords, but Salt is a brick and mortar operation so keywords should come naturally as the topics will rotate around local partners and events.Turn the menu into a link that opens in a new tabIt’s safe to assume that a decent number of customers are arriving on the website with the hope of checking out the menu. Salt changes their dishes regularly to stay up to date with seasonal fruits and vegetables so the menu is more dynamic than a regular cafe.We simply needed to reconfigure the website to render the markdown so it would return a link that would open in a new tab. The idea here was to allow users to view the menu but keep the Salt website open to improve our page view time metrics, which influences Google’s opinion of the site.We tossed up the idea of using a third party menu hosting service but decided against it. There’s no real “king” in this department, and we would effectively be lending out the website’s traffic.ResultsYou’ll have to wait for the results! I’m sorry, I know it sucks, but the changes are currently being implemented and we’re expecting them to take a couple of weeks to have any kind of traction. “Couldn’t you have waited to post the article?” you ask. Well, yes, I could have, but I wanted to share both parts of the process. Chances are that when the results come through there will be more changes to make. SEO is anything but a linear process. It’s a process of small trial-and-error changes.Salt’s struggles may resonate with your website, but every site is different. Some sites we’ve worked on have had a great backlink profile but have shown incredibly poor technical optimization. This is a problem business owners really struggle to clean up, but usually isn’t an issue for our team since that’s the kind of work we do all day, every day.Feel free to comment with your own SEO problems or questions and we’ll provide advice if we can!"
  },
  {
    "title": "50 Headless eCommerce Examples",
    "plaintext": "Headless eCommerce has become popular amongst businesses looking for a more flexible architecture. Stitching microservices together to leverage the best part of different platforms is a great way to eliminate the problems that affect “all in one” monolithic systems.As an agency that builds headless eCommerce stores, we actively keep an eye on the market to find examples of companies that have gone headless. In this article, we’ve outlined 50 headless eCommerce examples to give you some inspiration for your own setup.Each example is accompanied by a breakdown of the technologies used to create the store.You’ll notice around example 30 that the sites switch to using Vue Storefront. We picked these examples from Vue Storefront’s official list of live projects.Before we get into the examples, if you’re trying to figure out if headless stores are better overall, what their benefits are, or it’s the right architecture for your website, drop us a line. We love giving this kind of advice and will happily point you in the right direction or help design and developer your store.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitAlright, without any further ado, onto the examples!https://www.clare.com/Clare is a next-generation paint brand based in NYC, U.S. The company completely reinventing the paint shopping experience with its premium, zero VOC paint, curated colours, peel & stick paint samples and painting supplies. * Ecommerce: Shopify * JavaScript frameworks: Vue.jshttps://koala.com/en-auKoala sells mattresses and furniture online. They're based in Sydney, Australia. * CMS: Contentful * JavaScript frameworks: React * Web frameworks: Next.js * Programming languages: Node.jshttps://inkbox.com/InkBox is a company based in Toronto, Canada. They use semi-permanent tattoo technology, so they look authentic and last long. It’s a kit (box) to create and apply tattoos at home. * CMS: Contentful * JavaScript frameworks: Vue.js, Alpine.js * Web frameworks: Laravel, Livewire * Programming languages: PHPhttps://thentwrk.com/NTWRK is a mobile-first video shopping platform that seamlessly blends entertainment and commerce. They are based in LA, California. * JavaScript frameworks: React, Styled-components * Web frameworks: Next.js * Programming languages: Node.jshttps://impossiblefoods.com/An eco-friendly plant-based ‘chicken nugget’ company. They produce this product for restaurants and to buy online. * CMS: Contentful * JavaScript frameworks: styled-components 5.3.0, React, GSAP * Web frameworks: Next.js * Programming languages: Node.jshttps://www.kinsleyarmelle.com/Druzy stone jewellery. Elegant designs for bohemian culture, they are based in Texas, U.S. * CMS: Contentful * JavaScript frameworks: Vue.js, Nuxt.js * Web frameworks: Nuxt.js * Programming languages: Node.jshttps://grassrootscoop.com/They specialise in healthy, organic meat without GMO. They sell beef, pork and poultry grown in the U.S and support small-scale family farms. * E-commerce: Shopify, Klarna Checkout * Javascript frameworks: Emotion, React, handlebars, backbone.jshttps://www.verishop.com/An e-commerce site that’s based in Santa Monica, CA, that sells a curated selection of women's and men's fashion, home goods, and beauty products. It’s like an online shopping site that combines the convenience of Amazon with better product curation. * JavaScript frameworks: React * Web frameworks: Next.js * Programming languages: Node.jshttps://www.oliverbonas.com/It is an independent British online department store for Fashion, Dresses, Jewellery, Homeware, Furniture and Gift Shopping. * Web frameworks: Express * Programming languages: Node.js * CDN: Google Cloud, Cloudflarehttps://herschel.ca/Herschel is a design-driven manufacturer of the finest quality backpacks, bags, travel goods and accessories. The company is based in Canada. * CMS: Adobe Experience Manager * JavaScript frameworks: React, styled-components 4.4.1, Backbone.js 1.3.3, AngularJS 1.6.9 * Programming languages: Javahttps://www.bang-olufsen.com/A Danish high-end consumer electronics company that designs and manufactures audio products, television sets, and telephones. * CMS: Contentful * JavaScript frameworks: React * Web frameworks: Next.js * Programming languages: Node.jshttps://molekule.comMolekule is a science and technology company headquartered in San Francisco. It designs and manufactures air purifiers that use photoelectrochemical oxidation (PECO), a technology that the company claims may be useful against chemicals, microbes, allergens, and other forms of air pollution. * JavaScript frameworks: Vue.js, Nuxt.js * Web frameworks: Nuxt.js * Programming languages: Node.jshttps://www.breville.com/us/en/home/index.htmlBreville is the kitchen appliance brand that delivers innovation based on consumer insights. The company is based in the States and sells appliances from espresso machines to countertop ovens. * CMS: Adobe Experience Manager * JavaScript frameworks: Handlebars * Programming languages: Java * UI frameworks: Bootstraphttps://www.gibson.com/en-US/Guitars/SGGibson Brands, Inc. (formerly Gibson Guitar Corporation) is an American manufacturer of guitars, other musical instruments, and professional audio equipment. The company is based in Nashville, Tennessee U.S. * CMS: Contentful * JavaScript frameworks: GSAP 2.1.3, Vue.js 2.6.10 * UI frameworks: Bootstraphttps://www.hartsofstur.com/Hartsofstur is one of the UKs' largest in store and online retailers of Cookware, Kitchenware and Kitchen Electrics. * Ecommerce: Magento * JavaScript frameworks: RequireJS * Programming languages: PHPhttps://www.biggreenegg.co.uk/The Big Green Egg is a kamado style ceramic BBQ capable of all types of cooking from grilling a burger, through to baking bread and roasting a whole Sunday Roast Dinner. The company that is based in the UK, also stocks BGE accessories. * CMS: DatoCMS * JavaScript frameworks: Vue.js, Nuxt.js * Programming languages: Node.jshttps://www.parachutehome.com/Parachute Home Inc. provides home decoration products from pillows, beds, bedding sets, covers, rugs, mats, towels to shower curtains. The company is based in California but serves customers worldwide. * JavaScript frameworks: Emotion, React * Web frameworks: Next.js * Programming languages: Node.jshttps://www.staples.ca/Staples Canada is a privately-held company based in Richmond Hill, Ontario, with a network of over 300 stores across Canada. A shop for business essentials, printers, ink, computers, office furniture, printing services and promotional products. * Widgets: Facebook * Ecommerce: Shopify * JavaScript frameworks: React, GSAPhttps://www.jbhifi.com.au/JBHIFI are Australia's leading electronic distributor. They operate hundreds of stores spread across Australia and run a mature eCommerce operation. They sell everything from iPhones, to computers, TVs, games, consoles, drones, and everything inbetween. * CMS: Contentful * Ecommerce: Shopify * JavaScript frameworks: Reacthttps://rachio.com/The Rachio Smart Controller enables the control of an outdoor sprinkler system. The mobile app gives you access to your sprinkler system from anywhere. The company is based in Colorado, U.S. * CMS: Sanity * JavaScript frameworks: styled-components 5.3.3, React, Gatsby 4.0.1https://www.yogagirl.com/An online yoga platform, a school that hosts retreats, podcasts and an online shop. The owner Rachel teaches yoga in-person and online from her studio in Aruba. * JavaScript frameworks: Vue.js, Nuxt.js * Web frameworks: Nuxt.js, Express * Programming languages: Node.jshttps://www.seedlipdrinks.com/Seedlip is a British company that makes plant-based liquor substitutes for use in non-alcoholic mixed drinks. Seedlip describes its products as \"the world's first distilled non-alcoholic spirits\" * JavaScript frameworks: React * Web frameworks: Next.js * Programming languages: Node.jshttps://www.chillys.com/ukChillys is a British company that sells reusable water bottles that keep drinks ice cold for up to 24 hours. * CMS: DatoCMS * JavaScript frameworks: Vue.js, GSAP, Nuxt.js * Web frameworks: Nuxt.js * Programming languages: Node.jshttps://www.victoriabeckhambeauty.com/Skincare, perfume and wellness luxury beauty brand founded by Victoria Beckham. * JavaScript frameworks: Vue.js * Static site generators: Gridsomehttps://www.adorebeauty.com.au/Adore Beauty is Australia's number one pure-play online beauty retailer, and an official stockist of over 260 leading beauty brands. * CMS: Contentful * JavaScript frameworks: Vue.js, Nuxt.js * Web frameworks: Nuxt.js * Programming languages: Node.jshttps://www.babylist.com/BabyList is the online universal baby registry that lets couples request unconventional items – like diaper service subscriptions, for example – in addition to gifts from around the web. The company is located in Oakland, CA, United States. * Ecommerce: Klarna Checkout * JavaScript frameworks: React 16.12.0https://www.wearfigs.com/FIGS is an American healthcare apparel brand based in Santa Monica, California. The company sells scrubs that come in a variety of colours and styles, as well as a number of other products for healthcare professionals. * CMS: Contentful * Ecommerce: Shopify * JavaScript frameworks: styled-components 5.2.1, React * Web frameworks: Next.js * Programming languages: Node.jshttps://puredailycare.com/Pure Daily Care promotes natural beauty by combining the most modern technologies into easy-to-use, at-home products. The company is based in LA, US. * Ecommerce: Shopify * JavaScript frameworks: styled-components 4.4.1, Reacthttps://www.lovecrafts.com/en-gb/LoveCrafts are a family of makers, passionate knitters, stitchers, sewists, and crocheters. LoveCrafts is based in London, but its main market is now the US. * Ecommerce: Magento * JavaScript frameworks: Vue.js, Nuxt.js * Web frameworks: Nuxt.js * Programming languages: Node.js, PHPhttps://zadig-et-voltaire.com/pt/en/Zadig & Voltaire is a French brand in the accessible luxury ready-to-wear market. The company designs and manufactures apparels. Zadig & Voltaire retails a wide range of shirts, pants, jackets, dresses, sweaters, and accessories. * CMS: Prismic * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://www.tally-weijl.com/TALLY WEiJL is a brand for young self-confident women and one of the bold players of today's international fast fashion market. It is a fashion label based in Basel, Switzerland. The company is represented worldwide in 37 countries * Ecommerce: Vue Storefront 1 * JavaScript frameworks: GSAP, Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://www.lights.ie/Lights.ie is an Irish branch of Europe's leading web-shop for lamps and lights. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue Storefront 1, Vue.js * Web frameworks: Express * Programming languages: Node.jshttps://www.gastro-hero.de/An online German catering supplies from specialist retailers at top prices. 1. JavaScript frameworks: Vue.jshttps://www.dickiesworkgear.com/Dickies Work gear is an online store that supplies tool storage kits. They specialise in work bags and tool totes that are made of durable and rip-resistant cotton-based canvas. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js Vue Storefront 1https://dewaltshelving.com/DEWALT industrial storage racks and accessories for garage, home or professional workspace storage. Customizable and adjustable to help store anything you need, DEWALT shelving includes a range of heavy-duty storage racks and accessories. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1https://www.vendella.co.nz/Vendella is a primary supplier to the Aged Care, Healthcare, Laundry and Accommodation sectors. The company is based in New Zealand. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://www.meevo.de/Meevo Healthcare GmbH provides various types of Healthcare services to their clients. The company is based in Germany. * CMS: Prismic * JavaScript frameworks: Vue.jshttps://www.garten-und-freizeit.de/Garten und Freizeit is an expert for high-quality, exclusive garden and leisure furniture. The company is based in Germany. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1https://kubotastore.pl/Kubota is a cult Polish brand that has been producing flip-flops that have been loved by millions of Poles for 25 years. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Web servers: Express * Programming languages: Node.jshttps://shop.toprank.com/Top Rank Gear & Apparel, from gloves, shirts, hats to boxing gloves. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1https://rootedcompany.co/An online Granola & Muesli shop. The company is based in California, CA. * CMS: Sanity * JavaScript frameworks: styled-components 5.2.3, React, GSAP, Vue.js * Web frameworks: Next.js * Programming languages: Node.jshttps://www.edblad.com/en_uk/Edblad is a Swedish design of stainless steel, rose gold and gold jewellery. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://www.cucinabarilla.it/it-ITBarilla and Whirlpool have joined forces to create a new way of cooking in the home. The result is CucinaBarilla, a system composed of a technologically advanced oven made by Whirlpool and a range of kits developed and produced by Barilla. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1https://lanature.ru/An online designer jewellery shop. A company is based in Moscow, Russia. * JavaScript frameworks: Vue.js * Web frameworks: Express * Programming languages: Node.jshttps://www.klebefieber.de/A company based in Germany that creates modern wall designs with wall tattoos and murals, creative children's room ideas & kitchen splashbacks * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1https://www.butcherofblue.com/A sustainable clothing brand. The company is based in the Netherlands. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: GSAP 2.1.3, Vue.js, Vue Storefront 1https://lakritsroten.se/A stylish specialist shop that has all kinds of licorice from around the world. The company is located in Sweden. * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://streetsupply.pl/ * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Web frameworks: Express * Programming languages: Node.jshttps://www.goldenscent.com/en/ * Ecommerce: Magento, Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1 * Programming languages: PHP, Node.jshttps://www.rakdistribution.net/ * Ecommerce: Vue Storefront 1 * JavaScript frameworks: Vue.js, Vue Storefront 1"
  },
  {
    "title": "Case Study: Humanforce",
    "plaintext": "Humanforce is a leading Australian roster and shift management SaaS provider.They approached us after a frustrating experience working with a different development agency. Things that seemed like they should be simple were taking a mountain of effort and time to complete, there was no flexibility in changing content, and serious interface issues had been pushed to production.The Humanforce team reached out asking if we could pick up the pieces and get the project back on track. We’re not a team that shies away from a challenge, so we accepted!There were some notable issues to overcome from the start of the project. Picking up a half-designed and developed website is the most difficult way to build a site. Inheriting another developer's code and retroactively fixing poor code while building within someone else’s standards is tricky!Before we dived in, we needed to figure out what we were dealing with.Reviewing the project’s healthThe way the previous developers had constructed the website was a fairly standard approach using Advanced Custom Fields to allow Humanforce to change some of the content.The problem was that the fields were fixed in the interface. There was no way to move “blocks” of content around on the page. Even though the images and content could be changed, no page could be lengthened or shortened, and there was no easy way to create new landing pages. Half of Humanforce’s site is essentially landing pages, so this just wasn’t a good solution.The interface had been created using a strange variation of Bootstrap and there was a ton of unused code cluttering up the site’s performance.After finishing the code review, we requested access to the Figma file that was acting as the blueprint for the site’s redevelopment. This part was being handled by a different agency again.The trail of homepage variations in Figma indicated there had been a lot of communication with the client (a good thing!) but the target width of the homepage was 1280px (a bad thing ). This width is too slim and would mean a ton of unused space would exist on larger devices.The last thing to check was the site’s current SEO scores. We ran a quick SEO audit in Ahrefs to see if there were any critical issues. The site scored 80/100, which isn’t too bad. There were some things to reconfigure but it wasn’t the most pressing problem.With the review wrapped up, we had a list of the most critical issues: 1. Poor WordPress construction 2. Target design dimensions too thin 3. Redundant code causing performance issuesWith the Humanforce team anxious to see some quick progress, we got to work.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFixing WordPressThe most challenging part of the project was building on top of the existing site rather than starting from scratch. Since we build so many WordPress projects and use a very opinionated set of technologies, we couldn’t just pick up the project as it was. We needed to implement our own file structure, plugins, templates and frameworks.We rely on Tailwind CSS to style the websites and applications we work on. Sticking to a consistent framework means no matter what underlying technology we’re using we have a familiar way of styling the interface. The problem with implementing this approach on an existing website is that we either needed to convert the existing stylesheet to Tailwind or run two stylesheets.Rewriting the styles of pages that were about to be redesigned would have been a waste of time, so we went about implementing a system for running two stylesheets. Using a clever bit of logic, we created a method of implementing the appropriate stylesheet based on the template the page was constructed with; the old system, or our new dynamic page builder.Implementing a more dynamic page-builder (pictured above) approach was another large improvement. Under this approach, the user can drag pre-styled sections up and down the page. Each section allows new images and content, and some design variations like swapping images from left to right or vice versa.Increasing target design dimensionsThe original Figma design had been set up with a width of 1280px. A typical laptop screen is 1444px wide, most desktop screens are at least 1920px wide, and larger monitors are up to 2560px wide.By the time we had a chance to review the design, the homepage had already been implemented. Rather than try to go back to the start we made the decision to increase the design resolution to 1920px wide and work on the outstanding pages.Removing redundant codeThe previous developers had left their mark on the project. In addition to an unused jQuery library, there were a number of redundant packages and dependencies cluttering up the website.We removed the most obvious redundancies and saw a fairly immediate boost in performance.Humanforce weren’t ready for all of their existing pages to be rebuilt, leaving some of the old inefficient code living on the site.The ResultsWork hasn’t completely wrapped up on the Humanforce site, however it’s getting close! You can check the site out here.In addition to rebuilding the Humanforce site, we moved their hosting to Linode. Since they created a data centre in Sydney, Linode has been our virtual private server provider of choice. The performance for domestic visitors is unrivaled as you can see below:Overall, the project has been a huge success. We managed to get the project back on track and the website is infinitely easier for the Humanforce team to manage."
  },
  {
    "title": "Case Study: Blondery",
    "plaintext": "Blondery is a New York based eCommerce bakery that approached Clean Commit for help revamping their Shopify store. As an innovative company, that deals with large companies in the U.S. the Blondery store needed to do a better job communicating the luxury of their product. Their existing design had a number of weird display issues and simply didn’t showcase their products properly.The existing site was running on Shopify. After weighing up the pros and cons of adopting a headless Shopify architecture, we advised that sticking with a regular, monolithic setup was the correct choice. The biggest driver in this decision was how many plugins the store was running, and the amount of functionality they wanted to achieve.Headless setups are arguably more flexible, but they’re much more expensive to set up because functionality needs to be coded manually or called in from external sources. Monolithic setups on the other hand can simply install plugins to instantly access a huge range of functionality.There are tradeoffs of each architecture, but we were confident that a regular Shopify store was going to be the right choice.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitChallengesUnique designs for standard eCommerce componentsCreating unique designs is really fun in Figma, and the possibilities are endless. However, working within the framework established by Shopify means that some things aren’t possible. Our challenge was to strike a balance between a design that got the nod of approval and a site implementation that was easy for customers to navigate.eCommerce sites need to have components like a cart, checkout page, account page, filters, and search bars. We wanted to achieve a familiar look with these components while keeping with the site’s luxurious branding.Dark themeBlondery was always destined to have a dark theme. Their packaging is black-on-black, and the website needed to stay on-brand.Designing a regular website with a dark theme is usually no issue. Regular Shopify stores are a little different because they typically rely so heavily on plugins that can’t always be fully styled.The challenge here was adding white-themed plugin components to a dark-themed website. We worked around this challenge by manipulating the plugin’s CSS where possible.Plugin pricesThe Blondery team had a decently long list of functionality they wanted to achieve. Upsells, exit pops, gift notes, shipping integrations, royalty rewards, amongst others. For the most part, these requirements could be met through plugins.Shopify’s ecosystem of plugins is massive and can achieve most requirements for free. The problem is that “free” only lasts for a very limited period of time or number of customers. After the threshold has been breached things can get expensive really quick.Our challenge was to build as many of these features without having to rely on plugins as possible. The exit pop was no problem since it could be cr anted in Mailchimp without coding and inserted as a simple script. The upsell was a much trickier challenge, as we needed to write logic to present a product before the checkout.TimeframesThe Blondery team wanted to ship the new site quickly. From the point that we had agreed on the contract and created the design, only four weeks remained before their deadline.Creating complex Shopify themes takes longer than a normal site. There’s more functionality to build, a larger number of pages, and we’re forced to use Shopify’s liquid templates which aren’t the most friendly framework for programming.Four weeks was not enough to achieve all of the project’s requirements, but we were intent on getting the site up. We backlogged everything that wasn’t necessary for making the site appear visually and functionally complete to visitors and pushed ahead with hitting the deadline.Wrap upDesigning and developing the Blondery site was definitely one of our more challenging projects but we’re very happy with the results. The site design has received a lot of attention from our Dribbble following, and it shows off some really impressive functionality. You can check the site out here!"
  },
  {
    "title": "How To Design A Good Search Engine",
    "plaintext": "Building a good search engine, or search feature makes life a lot easier for visitors. Putting yourself in your customer’s shoes, they’re often going to have an idea of what they want to find. With site search, rather than going through filters and categories, it’s a ton easier to add search queries and see the relevant results.Google has the entire internet-using population trained with Google search, so it only makes sense that eCommerce stores (or regular websites) would put effort into getting the search engine feature right.A website’s search functionality is essentially like a conversation. The visitor can ask specific questions and get a relatively specific answer. The better fitting the answer, the greater the chance that the visitor will continue their mission, and ultimately make a purchase.The problem is that we rarely think to build our navigation or primary interface around the search engine. The lack of early consideration can lead to squeezing a search bar into a cluttered interface in a way that makes it difficult to use.As a design and development agency that builds a lot of headless and monolithic eCommerce sites, we're always on the lookout for good advice on upping our design game. Surprisingly, there's very little content available around best practices for designing search components or search engines. So how to create your own search engine? We wanted to bridge this gap with a short article describing a handful of things to think through when designing the search functionality of your website.We’ll cover the following tips and tricks that we consider crucial to designing a user-friendly search engine:1. Where to add the search feature2. Keep it recognisable3. Auto-suggestions4. No results pageWhere to put the search?The search bar should be in a central, visible part of the page. This place is usually the header but hero sections work well too. The goal in deciding on placement is for the user to find the search bar immediately. They’ll probably be looking for it, so don’t make it hard for them to spot.There are exceptions to this rule. For example, clothing eCommerce stores usually push users towards filters before searching. Most people won’t know the terminology that relates to particular items of clothing, because their often unique, so filters are an easier approach.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitKeep it recognisableIs it worth to personalize your search engine? Keep your search recognizable to users. Going overboard with too much creativity can make it difficult for users to find and use the features of search engine. The goal in designing your search component is for users to be able to know it as soon as they see it and understand how it works.Jakob's law says that users prefer websites similar to those they visit and know. This is why most of the eCommerce goliaths like eBay, Amazon, Walmart, and Aliexpress have very similar, somewhat basic designs.To achieve a familiar look on your site, start with a text field, add and a button with a magnifying glass icon and you’re done. Seriously, it’s that simple. Don’t make it hard.Here’s a few examples of search components to reinforce this point:Auto-suggestionsIn-store searches are great if they’re returning relevant search results. The experience becomes frustrating for users when they enter a keyword that doesn’t bring any results.There isn’t a way to solve this problem completely. However, providing auto-suggestions while the user types is a really effective way of helping them figure out where their query is going wrong.A lot of the time, users will know the general category that their product falls under so they’ll start typing that keyword and drill down to be more specific.The Adidas website showcases an excellent auto-suggestion implementation. They use a clever combination of filters and product thumbnails to provide additional cues to help the user narrow their search query.No resultsThe last big thing to think through when designing your website’s search engine is what happens if there are no relevant results. This happens pretty frequently and you don’t want to drive your users into a dead end.The easiest option is to provide a handful of popular products for the user to check out. Although, if a user is hunting for something specific, this may not suffice and you’ll need to give them a new direction to continue hunting.The other direction is to display the product filters and categories. This approach allows your users to keep digging in order to find what they’re looking for.SummaryJust about every eCommerce site has an internal search engine and it’s used extensively by visitors. It goes without saying that nailing the design of this component is essential to creating an effective experience for users.In our search across the web, we’ve found very little advice on how to design search engines or search components. The goal of this article was to provide a handful of tips that we’ve discovered during our time designing and developing Shopify, WooCommerce and BigCommerce websites.The tips we’ve provided should hopefully set you in the right state of mind to design a search engine for your site that helps users rather than leaving them frustrated!"
  },
  {
    "title": "WordPress Emergency Support",
    "plaintext": "WordPress can be affected by an almost infinite number of problems. These problems can create critical situations that stop visitors from using your site. If you’re running WooCommerce or some kind of eCommerce extension, this means you’re losing money. This situation calls for emergency support to get you out of a pickle.We’ve helped clients get out of this situation plenty of times. Unless you’re familiar with servers, databases or coding, it’s not always something you can fix. There are a handful of things you can try. We wanted to put together a quick list you can try if you’re stuck.1. Send us a messageIf you want to be certain your problem will get fixed send us a message. Our team is spread across multiple time zones (Europe, Americas, Australia) and we’ll usually get back to you immediately or at the latest, after a few hours.We’ve fixed a lot of WordPress sites. We’re familiar with most hosting providers; DigitalOcean, Amazon S3, Linode, Bluehost, Cloudways, WP Engine. We’ve built plenty of sites from scratch and understand the inner workings of how WordPress is constructed. All of this puts us in a great position to identify and resolve issues quickly.This item is at the top of the list because it’s the most urgent approach. You can reach out to us and start testing different fixes in the meantime.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit2. Log onto your hosting provider and check for notificationsIf nothing on your website has changed recently, then there’s a good chance the problem is originating at the server level. Hosting companies will often send out notifications as the problem strikes.Sometimes these issues are as simple as failed credit card payments and all you’ll need to do to get your site running again is pay an overdue bill. Other times an issue may have arisen in the operation of your server and some kind of action needs to be taken.The quickest way to check is to log into your hosting provider account and check for notifications like you would on a social media platform. Just about every hosting provider has a little bell icon with a number or exclamation mark overlaid.You won’t always be able to solve the problems that are being reported, but this is a quick way to uncover a clue about your issue.We’ve added a handful of screenshots from popular hosting providers and where you can find the indicator icons.AWSDigitalOceanLinodeCloudways3. Check your domain providerOne of the most common issues that our clients bump into is a “not secure” message. If you’re seeing this message then the problem relates to your secure socket layer certificate (SSL cert) which is issued by your domain provider.Your domain is the human-readable name that users type into their browser to access your website. It acts as an easy way for visitors to find your site, rather than having to type in the IP address servers use to provide website access “under the hood”.SSL certificates are a common safety measure to prevent messages leaving your website from being read by people with bad intentions. For example, without an SSL, a “hacker” could see user names and passwords as visitors enter them into your website. This is a big no-no because a lot of people use the same password for multiple services, leaving them vulnerable to attack.SSL certificates expire after a period of time, so if your website is throwing a “not secure” message, it probably means your certificate has expired and there’s something wrong with its installation.Some domain providers will install these certificates on your behalf and your best course of action is to reach out to them. Otherwise, you’ll need help from a developer to sort out the issue.Another common domain-level problem is forgetting to renew your domain. This will take your site offline and show a message that says the DNS is not reachable.4. Check your database capacityWordPress websites run a database that stores images, videos, text content, user names, posts, pages and a bunch of other data. Over time the database fills up, especially if your site features a lot of images.Hosting plans typically come with a set volume of data, and sometimes they won’t automatically upgrade your database volume without your explicit consent. The result of an overfull database is similar to what happens to your personal computer when you’ve got no more space on your C:\\ drive. Your site will start moving extremely slowly and often it won’t load at all.Plugins can also have a severe impact on your site’s database, so even if you’re not loading a lot of times or video you can run into problems.There are plugins that can help you fix this issue like Advanced Database Cleaner. Before you pull the trigger on any kind of database-cleaning plugin, it’s worth backing up your site’s content and reading through a tutorial on how to use the tool. You don’t want to accidentally delete half of your posts!The other option is increasing your database capacity. This is relatively simple for providers like Linode and Digital Ocean where you can upsize your VPS and redeploy the site. If this sounds more complicated than you’ve bargained for, we would advise jumping back to step 1.5. Check the WordPress dashboardWordPress will sometimes report critical issues like PHP version conflicts, plugin problems, or updates that need to be executed.Chances are you’ve probably already completed this step if you’re already looking for help. If not, then enter this address in your browser: https://your-websites-address.com/admin but make sure to replace “your-website-address” with your actual domain name. When the admin screen opens, enter your credentials and log into WordPress.If you don’t see anything glaringly obvious, move on to the next step.6. Uninstall any plugins you recently addedPlugins are essentially a set of code that you’re adding to (or plugging into) your website. If the plugin is less reputable, poorly written, or poorly maintained, it will conflict with WordPress or other plugin code.There’s really no way to know if this is going to happen ahead of time. One way to quickly check is against Kinsta’s list of plugins to avoid. Even if your plugins aren’t on that list, they could still be causing issues.Start by deactivating your recent plugins. If the problem goes away, then you can completely remove the plugin and look for a different solution.7. Restart your serverThis step is a little more advanced, but it really boils down to “have you tried turning it off and on again”. Servers, like personal computers, run a series of processes when they first boot up. Restarting your server can sometimes eliminate problems caused by other processes getting stuck.Restarting a server isn’t always possible, especially if you’re using a service like Bluehost or WPEngine. These services operate on a single server that is shared with multiple businesses, so they don’t allow you the option of rebooting.Services like Linode, AWS and DigitalOcean operate virtual private servers (VPS). These instances can be rebooted because they belong exclusively to you.You should be careful about jumping straight into a reboot of a VPS. This process usually requires a redeployment of the WordPress files onto the server to get everything working again. It’s best to speak to a developer before pulling the trigger here.Wrapping upThis list is by no means comprehensive. There are tens of thousands of potential issues that can impact your website.If you’ve already tried the things you are comfortable with, then drop our team a line and we’ll help you out. We bill at an hourly rate and can usually start work the same day."
  },
  {
    "title": "7 Best Jamstack eCommerce Solutions in 2023",
    "plaintext": "Jamstack eCommerce can solve many problems that trouble online retailers as they grow. In a nutshell, it’s like evolving an eCommerce platform into an eCommerce application.Before we jump into the deep stuff, if you’re unfamiliar with the terminology or just starting your research journey, Jamstack is the abbreviated term for Javascript, APIs and Markdown. Jamstack is synonymous with Next.JS and Gatsby. Other frameworks fall under the Jamstack umbrella, but these two are arguably the most important, and we’ll focus on them across this article.Before we list the eCommerce solutions that pair nicely with Gatsby and Next.js, it’s worth noting that Jamstack eCommerce can unlock some powerful benefits, but it also comes with tradeoffs. It’s easy to slip into the trap of thinking Jamstack websites are “the best” because they’re faster (which is kind of true). It’s a significant change to your site’s architecture, and some things don’t work like they used to.If you're unsure what technology your site (or a competitor) is running, you can check out our article on how to tell what platform a website is built on.Below is a quick rundown of the pros and cons of Jamstack eCommerce setups. We’ve kept each of these points short and sharp. If you’re interested in reading a less abbreviated version, check out our article about 10 benefits of headless eCommerce.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitPros of Jamstack eCommerceHere are a handful of the most significant benefits to Jamstack eCommerce.Page load speedGatbsby and Next are static site generators, meaning they prepare the website content before the user needs it and then serve it statically. Taking the need to communicate with a server out of the equation creates unparalleled page load times.Blazing fast load times are probably the most significant benefit of Jamstack eCommerce. A catalogue of 10,000 products can drain a site’s performance and ruin the user experience. Since the entire catalogue is pre-rendered, there’s no accumulative delay in jumping between products, making the experience fast and seamless.Flexible functionalityIf you’ve come across a “product design” or “try-it-on” feature on an eCommerce website, chances are it’s built with a JavaScript framework. A great example is the Nike Shoe Customiser.Since Jamstack eCommerce sites are built with the same technology, these features become a realistic (although challenging) goal to add to your site.Speed of developmentModern development teams have become very good at dividing projects into subsets of features and simultaneously working on many concurrent features. The improved rate of development is mainly due to the modern tools these teams have adopted.Unlike traditional monolithic platforms, Jamstack eCommerce unlocks all of the cutting edge tools that help teams design, develop and test new features quickly and efficiently.Customisable content workflowThere’s a particular way content has to be written in Shopify and BigCommerce. Sticking to this workflow isn’t a big issue for smaller teams, but it can be restrictive for larger teams that create tailored articles and want to modify how content is created, reviewed and published.Jamstack eCommerce sites assume your site will use a third party content management platform like WordPress, Contentful, Strapi or Prismic. These platforms are highly customisable and allow workflows to be built that match business processes.Blogging for content teamsSimilar to the previous point, larger content teams can struggle to find efficiency when creating content using traditional eCommerce platforms. Platforms like Contentful specifically considered this problem when introducing their tooling.Multi-languageTraditional monolithic eCommerce platforms have limited multi-language support. Providing content in a single language is less of an issue for U.S. based companies, but for our friends in Europe, it’s a real hassle.Gatsby and Next both offer multi-language support out of the box.Freedom to change eCommerce providereCommerce platforms change their terms of service and pricing all the time. Features come and go, the interface changes. Sometimes competitors appear that offer even better solutions.There’s no easy way to migrate from Shopify to BigCommerce, Shopware, or any other eCommerce engine. If your site features a decent amount of custom development, chances are you won’t go anywhere even if the platform starts to act up.Jamstack eCommerce platforms solve this problem by pulling products in from any compatible eCommerce engine via API. If the eCommerce platform has issues, you can use another one in its place.This swap isn’t necessarily straightforward, but it doesn’t require rebuilding the entire frontend on a different platform.ScalingJamstack eCommerce platforms use a decoupled architecture where the frontend and backend codes communicate via API. Separating the two code bases allows the frontend to get slammed by traffic without dragging the performance of the backend, where all the complex logic and calculations happen.Since the frontend assets have been statically rendered and are delivered incredibly fast, there’s little drag on the site’s performance which all adds up to incredibly scaling.Watertight securityServing static files creates a reduced attack surface for hackers to exploit. Even in situations where Next.js is being used to generate assets on a server, most of the communication between the frontend and backend occurs through APIs, making malicious attacks harder to execute.Progressive web application featuresProgressive web application features like push notifications, working offline and being “downloadable” are all desirable for online retailers. Gatsby and Next.js support a progressive web application architecture out of the box.Many different storefrontsIn a Jamstack eCommerce setup, there’s one primary eCommerce backend like Shopify or Bigcommerce, but there can be multiple storefronts. This attribute is handy if you want to manage different catalogues of products in your eCommerce platform but sell them in various stores with unique branding.Cons of Jamstack eCommerceNothing is perfect, not even Jamstack eCommerce sites. There are some unique disadvantages and challenges in using Gatsby or Next in your eCommerce site’s architecture.Plugins need rebuildingMost plugins have code that runs on the hosting server and in the user’s browser. Converting to Jamstack eCommerce essentially breaks the connection between the two codebases and breaks a lot of plugins.There’s always a way around these issues, but it typically involves finding a new third-party service that does the same job as the plugin and building a custom solution to incorporate it into your site.We list this downside at the top because many established eCommerce brands have come to rely heavily on their suite of plugins.Build timeGatsby and Next.js pre-render all the website assets (HTML, CSS, JavaScript) to be served statically. There’s no server involved, but this means that a new build must occur anytime a change is made to the site’s content or product catalogue.If your site runs thousands of constantly changing products, the build time can be an issue. Luckily, solutions have hit the market to these problems and they’re only getting better as time goes on.Incremental builds ensure that only the part of the modified site is rebuilt, cutting the build time significantly. However, there’s still a delay between publishing changes are seeing the output.More moving piecesOperating more moving pieces means more things that can go wrong and more systems to master.Jamstack eCommerce platforms will typically use an eCommerce backend, a content management system and a handful of third party systems to achieve specific requirements like analytics.High implementation costsJamstack eCommerce platforms aren’t cheap to build. They require expert JavaScript knowledge and complex integrations.On average, you can expect upwards of 400 development hours to create a medium-sized Jamstack eCommerce site. Considering the average agency rate in North America, Australia, and Western Europe is over $100 an hour, you can figure out the total expense.Split testingStatic site generators like Gatsby and Next.js operation is incompatible with popular split testing platforms like Google Optimize and VWO. Next.js does provide some workarounds to generate content on the server, but it comes at the cost of speed and performance.Netlify has recently launched a split testing feature for Jamstack websites that seems promising, but it’s still early days.Jamstack eCommerce SolutionsNow that you’ve got a handle on the pros and cons let’s take a look at the eCommerce solutions that play nicely with the Jamstack.This list is ranked based on the available features, community support, and product maturity.As a spoiler, the top two platforms are BigCommerce and Shopify. If you’re interested in seeing how they compare, we wrote an article comparing Headless Shopify with Headless BigCommerce that is worth reading. 1. BigCommerceBigCommerce has done a lot of work to make their service integrate seamlessly with the Jamstack. While we would probably rate Shopify a little higher in terms of user experience, especially around the partner portal and administrative user interface, it’s hard to deny that BigCommerce is a better headless platform.The BigCommerce API is well documented and complete. There are no payment gates that prevent certain features from being used. This stands in direct comparison with Shopify.BigCommerce has also been actively developing headless extensions for their platform, including a WordPress plugin, next.js app, Gatsby starter site, and a handful of other helpful guides, integrations, and resources.If you were planning to use WordPress in your Jamstack eCommerce ecosystem, then BigCommerce is an excellent choice. They’ve done a bunch of the integration work for you.BigCommerce’s market share is the eCommerce business is relatively small, at around 1%. However, don’t let this scare you. It supports a thriving community that is growing, especially with their recent focus on API driven development.2. Shopify (Plus)Shopify needs no introduction. Holding around 11% of the global eCommerce market share, Shopify has been hailed as one of the easiest platforms to launch an online retail brand.Shopify also boasts a mature, well-documented, comprehensive Storefront API to support Jamstack eCommerce.BigCommerce and Shopify share most of the same features for developing Jamstack eCommerce platforms. The most notable difference is Shopify’s restriction around exposing some features to regular Shopify plans.The restricted parts of the API are gift cards, staff accounts, and “multipass”. You can unlock these features by upgrading to Shopify Plus ($2,000 / month).Most stores can get away without API access to gift cards or staff accounts. The multistore is more of a problem. This feature allows user account information (i.e. purchases, settings, account details) to be shared across domains.Since regular Shopify plans force checkout to happen on Shopify’s domain, and headless stores use their own domain, there’s no way for your headless store to know the user made their purchase successfully. Similarly, there’s no way for Shopify to pre-fill the user’s details if they’ve already created an account on the site.If your store is already running Shopify Plus or this is the direction you’re planning to go, then Shopify is arguably the best choice on this list.3. ShopwareShopware is a newer platform that advertises itself as an API focused eCommerce engine. It provides access to two distinct APIs; one for customer-facing integrations and another for backend integrations.Shopware is a perfect choice if you plan to work Vue Storefront into your Jamstack ecosystem since they are official partner technologies and have come together to build an open-source PWA.Shopware’s pricing is more flexible than BigCommerce or Shopify. They offer a generous free plan, a €199.00 per month plan and a €2,495.00 enterprise plan. Interestingly, they also provide the option of self-hosting and buying the software forever.If you haven’t already committed to an eCommerce platform, Shopware is an excellent option and integrates perfectly with many Jamstack frameworks.4. SaleorSaleor makes a strong case as a Jamstack eCommerce platform. As an open-source platform, they’ve focused on developer experience and integrating with the most popular frameworks and languages that fall under the Jamstack blanket.Saleor pushes their platform as multi-channel, multi-currency, multi-lingual and multi-warehouse friendly.Unlike its competitors, Saleor allows customisation over everything. Don’t like part of the dashboard? No problem! As long as you’re technically fluent, you can modify the entire platform to suit your business better.Since its open-source, Saleor is free except for paying for hosting. This fact alone could make it a viable option.5. SnipcartSnipcart is a lightweight solution to adding eCommerce to your Jamstack site. Unlike some of the more robust solutions that we’ve discussed above, Snipcart’s claim to fame is simply adding a cart to any website with a few lines of code.There are specific use cases where Snipcart is the perfect solution, mainly adding eCommerce functionality to an existing application or website. Since Snipcart is installed with a simple JavaScript snippet, it’s platform agnostic and compatible with any website platform.While it’s simple to install, Snipcart comes packed with a ton of great features like simple customer dashboards, shipping integrations, abandon cart campaigns, merchant dashboards, invoicing, and just about everything else you would expect from an eCommerce engine.One tradeoff of Snipcart is the cost. While there’s no fixed price (unless your revenue is less than $629 CAD), they charge a 2% transaction fee. Compared with the 1.4% of Shopify’s pro plan, the fees add up quickly.6. Commerce LayerCommerce Layer follows a similar mission statement to Snipcart, except they’re API focused and position themselves as a service for adding eCommerce to any web, mobile or IoT app.Commerce Layer is another forward-thinking company that has noticed the trend towards Jamstack technology. They’ve even written a whitepaper on the topic of Jamstack eCommerce.Commerce Layer is highly customisable and plays nicely with most headless CMSs like Contentful, Sanity, Forestry and Prismic. It’s supported with an official Gatsby plugin.Pricing for Commerce Layer is a little unique, with a $0.90 charge placed on every order.You can see Commerce Layer in action on the Chilly’s website.7. CrystallizeCrystallize is a unique take on headless eCommerce. The platform shows similarities to Contentful in its tooling for content and product authoring.Crystallize differentiates itself with its innovative Project Information Modelling (PIM), which allows custom attributes to be assigned to physical or digital products. They’ve also introduced an idea called “Shapes” which enables custom combinations of rich data into a single component. For example, a product summary, specifications, image grid, reviews, and related products would combine to make a single shape.Crystallize differs from the other platforms we’ve listed in its tools for creating customisable rich media like blog posts and pages. This content is all hosted on the Crystallize CDN and can be queried via GraphQL which is super handy for Gatsby and Next.js. Plus, not having to pay for another CDN to host content saves some cash!Honourable mentionsFoxy IOWe left Foxy IO off the list because it’s targeted more to drag-and-drop page builders like LeadPages and ClickFunnels. It doesn’t nominate Gatsby or Next.js as official integration platforms.Foxy IO is installable through a small code snippet, similar to Snipcart, so you can technically plug it into any platform. However, the interface leaves a bit to be desired, and there are better solutions for Jamstack eCommerce.RecommendationsNow that you’ve seen the list, you probably want to know which platform is the best or best for your situation.Our recommendation depends on your current situation. If you’re already using one of the platforms we’ve mentioned, such as Shopify or BigCommerce, then stick with that platform and build a Jamstack ecosystem around it. Not migrating your customer and order data to another platform is a strong motivator.However, if you’re using a platform like Wix, WooCommerce or SquareSpace and want to professionalise your setup, then Saleor or Shopware would be a great fit. BigCommerce and Shopify would also be excellent choices.If you’re looking to introduce eCommerce functionality to your web application, then Snipcart or Commerce Layer would both be excellent choices.Finally, if you’re selling a unique product that needs to be displayed in a very particular way, then Crystallize would probably be your best bet.These rules aren’t hard and fast. There are a decent number of variables to consider before picking your Jamstack eCommerce solution. If you’re uncertain and want some advice, reach out to our team, and we’ll book you in for a quick half-hour call to discuss your best option.F﻿requently asked questionsT﻿here are so many questions to ask when making the jump to headless eCommerce. We've been approached by a number of angel investors, clients and software companies looking for insights into the JAMstack eCommerce space to understand what it's all about. Here are some of the most common questions we're asked;S﻿hould we switch to JAMstack eCommerce?A﻿s a rule of thumb, I would probably say that companies receiving less than 20,000 page views a month shouldn't consider jumping to a headless eCommerce build because the chances of recovering the investment quickly are low.T﻿ake this with a grain of salt though, because even a site that receives low traffic can be making a ton of revenue. However, the real benefits of JAMstack eCommerce are felt through increases to traffic and the user's experience while shopping. There's a compounding benefit of these experiences that is really only unlocked with high traffic volumes.I﻿s JAMstack the future for eCommerce?F﻿or some businesses, yes, but it's unlikely to ever reach the levels of popularity of monolithic platforms like Shopify or WooCommerce. Until a parent company figures out how to simplify headless eCommerce to the point where non-technical store owners can build a site in less than an hour, JAMstack eCommerce will only grow in popularity for larger, established companies.I﻿s Gatsby good for eCommerce?Y﻿es, Gatsby is great for eCommerce. The development team have built it specifically for creating fast and user-friendly websites. This is good news for eCommerce, because potential customers are the hardest to satisfy. However, we believe that Next.js is an even better frontend framework for building eCommerce websites."
  },
  {
    "title": "WordPress Case Studies",
    "plaintext": "OverviewWe wanted to showcase a handful of the WordPress projects our team has worked on across the last couple of years. These projects range from full redesigns to sites where we’ve implemented more streamlined and lightweight processes for managing content and building new landing pages.Before we show off our portfolio, we wanted to explain quickly why a lot of WordPress sites suck, and what our approach is for fixing them.Why do lots of WordPress sites suck?WordPress is still the king over the internet. Everyone uses it, there are millions of plugins, and most of its common pain points have solutions.If you think your website is built with WordPress but you're not 100% sure, you can check out our article on how to tell what platform a website is built on.Since its inception 19 years ago, WordPress has been used in every conceivable way to create applications, different forms of websites, membership sites, subscription centres, and things it was never intended to do. Even when it’s being used to create a standard website, there are hundreds of different themes and approaches to configuring WordPress.A lot of these approaches aim to simplify the content management process for users, leaning on drag and drop elements, all-in-one plugins, and changes to WordPress’ native functionality. Simplicity usually comes at a cost, and this is the beginning of why a lot of WordPress sites suck.Only 22% of WordPress sites are passing Google’s Core Web Vitals (CWV) assessment. That’s staggeringly low given that sites passing this assessment get a boost in search engine results ranking.You’ll notice in the picture that WordPress, Squarespace and Wix all seem to have similar rates of passing CWV. Squarespace and Wix both leverage drag-and-drop builders and are known to carry bloat in their payloads which increases the amount of data a browser needs to load before the site is interactive.A blank WordPress site will pass the Core Web Vitals assessment with flying colours by default. However, when a clunky theme and many plugins are added to the site, those numbers go out the window.Installing poorly optimised themes and mixing in too many plugins is the biggest reason many WordPress sites suck. The site performance slows down, and the combination of different plugin codebases creates design inconsistency, and the whole experience becomes Frankenstein-like.We could go way deeper into these issues, but the point of this article is to focus on solutions rather than problems!What does a great WordPress site look like?Our team have built dozens of WordPress sites and made tons of mistakes a long the way. That experience has helped us figure out what a great WordPress site looks like to visitors and administrators.For visitorsTo visitors, the design needs to tick a handful of boxes; * Clean design * Consistent spacing * Strong and easily recognisable branding * Easily understandable directivesA clean design avoids clutter and makes for an easy reading experience. Consistent spacing is kind of like looking at a neatly organised house, there is no chaos and the experience feels “right”. Strong and recognisable branding lets the visitor know they’re in the right place, battling that consistent sense of scepticism most internet users have developed. And finally, easily understandable directives help the user interact with the site and get what they need.On top of all of this, the design should be creative and look good, but that goes without saying.For administratorsFrom the administrative perspective, the ideal situation would be a drag and drop builder that doesn’t have a million configuration options.Even when administrators create new landing pages, they rarely think through every design possibility. They want the freedom to rearrange sections up and down the page, change content and add new images. They don’t want to pick fonts, font sizes, image spacing, or branding colours every time they create a new page.This situation is where a block-based page builder comes in handy.The blocks in this library (black dropdown on the right) have been pre-styled. They use brand colours, fonts and sizes. The code that generates the sections is lightweight and optimised. Most importantly, the administrator can change the content, images, link destinations and some basic styling options within each section.This approach brings a lot of freedom for administrators. They can re-order parts of the page, create new landing pages, make content updates and remove unnecessary or outdated sections of any page. Best of all, they don’t need a developer to help out.Now that we’ve reviewed our approach to creating WordPress websites, let’s check out a few case studies.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWordPress Case Study #1 - A Rich LifeA Rich Life is a financial and lifestyle news site that was due for a serious facelift and re-architecture. Previously running on a custom set of technology, managing content was difficult and required developer intervention for even the smallest change.As a membership site, all payment and permission granting activities were being run manually.It’s kind of bonkers to think that a site that had achieved decent success was such a manual mission.Our mission was to reframe the huge content pool in a way that let non-paying members access just enough fresh content to wet their whistle, while also giving them a way to upgrade to a paying member. On the member side, we needed to ensure that members could easily log in, change their details, and access the wealth of gated content on the member side.We ended up implementing Memberpress to bridge this gap. While it does the trick, we’ve become a bit frustrated with the quirks that come with running this plugin.The next mission will be to help the A Rich Life team migrate to a new member plugin or platform that offers more flexibility and less clunkiness.One thing we’re proud of with the A Rich Life site is its performance. They publish several articles a week and boast a massive library of content, thousands of hits a month and huge volumes of in-article images. Despite all of this, the site passes the core web vitals assessment on both desktop and mobile.WordPress Case Study #2 - BitmaxBitmax knew their website was due for an update. Their old site design didn’t do their incredible brand justice. They had also struggled with being able to easily create new landing pages, changing the content of their existing pages, and with general responsiveness.We set their new site up with the block-based page builder architecture. Bitmax took to this approach quickly, since their team have a decent amount of experience using WordPress.Typically, we’ll need to hand-hold our clients as they rewrite content, swap images, and modify pages to fit their needs. However, the Bitmax team were way ahead of us and had everything sorted in the first couple of days of playing around with the test website.We’re particularly proud of the small animations that were built into the Bitmax design to bring their content to life. Combining animations and a re-orderable block-based system can be tricky, but we managed to isolate the animations in this case.The last stop before releasing Bitmax publicly was to tune up the site’s performance. The site easily passes Google’s CWV assessment, scoring a 95 on desktop and 90 on mobile.WordPress Case Study #3 - National Aboriginal Community Controlled Health Organisations (NACCHO)NACCHO are a unique client because they were happy with their design but they wanted to fix some of the annoying layout issues that plagued their site. They were also struggling to implement new functionality and found that their site was costing a lot of money to maintain.These problems boiled down to running the site on Hubspot. While it’s an excellent marketing platform, Hubspot is a poor framework for website development. It’s not open source and carries a lot of bloat.Check out these Google Pagespeed Insight numbers of the NACCHO site before we rebuilt it using WordPress:31 from 100 is a poor score for any website. It’s especially troublesome for a government website that receives thousands of views each month and serves an essential purpose.Before we jumped into rebuilding the NACCHO site, we needed to analyse the existing website. We started this process using FlowMapp, an excellent tool for visualising the sitemap of a website and creating a checklist of which pages need to be rebuilt.Once we had a complete list of the pages to be redesigned, we needed to figure out how to standardise the design into a block-based library. This exercise aims to use as few blocks as possible to engineer their entire site design.A big part of this process was making all the H1s, H2s, H3s, H4s and paragraph text blocks the same font type and size. Additionally, any element that is used across the site (cards, buttons, call to action sections) needed to be tweaked to be exactly the same.There was a surprisingly large amount of variation across the site in these global components.The final step was rebuilding the site and connecting an RSS feed with Hubspot to send out frequent emails summarising content updates.At the time of writing, the new site is not live. We’ll report back with a Pagespeed Insights update when the new site is up and running to highlight the difference between a poorly optimised Hubspot site and a performance-focused WordPress site.ConclusionThere are plenty of other WordPress sites we could showcase, such as Kynd, Angelsteach, Humanforce, and Julie Josephine. But we’re not in the game of repeating ourselves, and most of these projects follow similar courses.We wanted to give you a quick showcase of some great case studies built with WordPress and talk about our approach for designing and developing these sites.If you’ve still got questions or want to know if we’ve created a site that matches up with an idea you have, please add a comment below this article or write to us on our contact page."
  },
  {
    "title": "Clutch Recognizes Clean Commit As a 2022 Top Web Development Company in Australia",
    "plaintext": "Last year we proved that it doesn’t take a large team to build the right solutions for any specific problem. All that’s needed is dedication, creativity, and perseverance from a group that will do everything to get the job done.We were named as a top development company for our efforts in 2021, and as the new year rolls around we have successfully repeated that achievement. We are proud to share that Clean Commit has just been recognized as a top web development company in Australia for the second time in a row.For those unfamiliar with their work, Clutch is a review platform that primarily caters to the B2B industry. They stand out from the rest of the field due to their unique verification system. This allows them to ensure that the published reviews on their website come from legitimate sources.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBased on our prior experience, a company can only be included in the Clutch awards is if they are able to earn several high-quality reviews from their clients, like this one:The fact that we are included in the 2022 leader list can only mean that our clients have not wavered in their support of our team. Once again, we want to emphasize that if wasn’t for their effort in taking the time out of their day to write and share their thoughts about our work, this award would not have been possible.We want to take this opportunity to sincerely thank them for continuing to patronize our company and promise that we will do our utmost to keep earning their trust in the coming months.“We're excited to be recognised as a leader in the software space for a second year running.” - Tim Davidson, Co-Founder of Clean Commit.We encourage everyone to learn more about our team and the work that we do through our website. You may also feel free to contact us at your convenience. Our team is always ready and excited to build something special."
  },
  {
    "title": "The Ultimate Website Redesign Process Guide 2022",
    "plaintext": "Redesigning your website is simply part of running a business with a successful online presence. As you learn more about your customers, your business should adapt accordingly, including adjusting your digital branding.If you’ve ever spent any time on social media or checking out websites of multinational brands like Nike, Coke, Apple, or Microsoft, you’ve probably noticed that their websites are always fresh. The fact these huge companies keep their websites up to date isn’t accidental, and it’s not just because they want to be hip and trendy.There are real, tangible monetary benefits of keeping your website design updated. While the evidence is anecdotal, we probably don’t need to convince you that it needs to be done, given you’re already researching the process.You don’t have the same budget for redesigning your site as Nike or Coke do, but that doesn’t mean you can’t see significant results from a redesign. The catch is that you need to do it properly and follow a simple, logical website redesign process.The process for redesigning your website boils down to the following steps (feel free to jump ahead to any of these sections):TABLE OF CONTENTS 1. Set your goals 2. Plan and prepare 3. Find your inspiration 4. Create the design 5. Build the site 6. Assess the outcomesThese steps might sound a bit generic, but we’ll provide insights from actual projects along the way to help paint a frame of reference.Enough introduction; let’s talk about the steps.1. Set your goalsThere’s nothing wrong with redesigning your website simply because it looks outdated and paints a poor picture of your brand. However, we would argue that you won’t know if the redesign has solved this problem without a more scientific framework. We need to have a hypothesis or goal in mind first and then make changes to achieve that outcome.The rules for creating a goal are ensuring it’s “SMART”; specific, measurable, achievable, realistic, and time-bound. Keeping this in mind, let’s use the example above of redesigning a site because the old design has become outdated.We’re preparing to redesign our website sometime in 2022 and have started going through this exercise. Here’s where we’re at.Goal: Improve our brand perception and increase our rate of inbound leads.The point of redesigning our website isn’t just to increase the conversion of visitors to qualified leads. It’s also to communicate with potential customers that we’re not just “web developers” but a team of specialists who create positive ROI through digital products.The challenge is making this goal a bit more scientific to judge if we’ve achieved it after the redesign process. Improving our brand perception is the most critical part of the goal, but it’s tough to measure accurately. Instead, we’ll focus on form submissions and allow potential clients to nominate their interest in the higher-end services we’re showcasing.Since we already know our submission form conversion rate, we can assess if the redesign has pushed the needle in the right direction!So our new goal is:See an increase in our monthly contact form submissions by 50% for headless eCommerce and web app development within three months of the redesign.S - This goal is specific because it focuses on one action (contact form submissions)M - It’s measurable since we can easily measure the number of monthly form responsesA - It’s achievable. Enough said.R - Definitely realistic, even though it’s a lofty goal.T - We’ve given ourselves three months to see the change eventuate.Other kinds of goalsIf you’re struggling at this step, don’t stress. Here are some examples of goals you may want to consider: * Improve your conversion rate * Increase the rate of repeat website visits * Increase awareness of your new services or products * Improve your website’s usability * Improve your site’s accessibility and inclusiveness for the vision-impaired community * Help users reduce the time spent looking for what they need from your site * Bring your website’s brand in line with your business to increase recognitionMost website redesign goals will be driven from a commercial standpoint; increasing conversion rates, landing more prominent and better clients, increasing cart values. This isn’t a black and white rule. Plenty of non-profits redesign their sites frequently to keep usability and accessibility in line with modern standards and help their users find what they need.The National Aboriginal Health Community Controlled Health Organisation (NACCHO) is an excellent example of this lesson. Our team recently finished migrating their site from Hubspot to WordPress. The process included a decent amount of website redesign, and the goal was to better help users find what they need.The NACCHO website sees thousands of views every week and receives tons of community questions. The goal of rebuilding their site was to do a better job for their audience. And the best way to measure this is if the number of help requests decreases.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKit2. Plan and PrepareWith your goals figured out, it’s time to collect all the bits and pieces to start the redesign. Here’s our shortlist:Brand guideYour business may not have a brand guide which isn’t a problem. You’ll need to figure this out as the first step during your redesign. At a minimum, you should list which colours and fonts you want to be used.If you have a brand guide, make sure you have it ready to send over to your design partner.Logo & faviconGet a copy of your logo and favicon in .png or .svg format. SVG is the ideal format since it’s vector-based and can scale up or down without losing quality.ContentContent is usually the sticking point on website designs. Most of the time, if your website design and branding is due for an update, the site’s content is too. We’re not going to walk you through the steps to write new content because it’s way too big a topic to unpack in a guide about site redesign.Our advice would be to spend time on this step before contacting a web designer.SitemapYou’ll want to create a list of all the pages that need to be redesigned. It’s easy to forget some of the pages like 404’s, privacy policies and thank-you pages. As an alternative, you can use FlowMapp and XML-sitemaps to generate your sitemap automatically. Both tools are free if you’re spinning up one project.3. Find Your InspirationIt’s time to get inspired by other websites!You want your site to be unique and creative, but it helps to get an idea of what other businesses are doing.There are some great resources for website design inspiration. Dribbble is probably the best place to start. It’s a hub for designers to showcase their portfolios. Adobe has its own designer showcase called Behance that is also worth a look at.If you run a software as a service company, the guys over at Cruip created an aggregator site called SaaS Landing Page Examples that does just what you would expect; showcasing excellent SaaS landing pages.If you want to get really creative and out of the box, you can take a look at Awwwards. However, take these designs with a grain of salt because they’re often poorly optimised for conversion and SEO.Finally, you can browse your competitor’s sites. You’ll want your design to do more than theirs, so as you’re researching their websites, make sure to consider the areas you would consider weaknesses.Tips for recording your inspirationThe most straightforward way to record your inspiration is by creating a Google Doc and jotting down the URLs. If you want to get a bit more involved, you can take screenshots and record the parts of each website that appealed to you.Another approach that we usually turn to is creating a mood board in Figma. If you’re unfamiliar with Figma, it’s a free cloud-based collaborative design tool. To create a mood board, you just need to spin up a new project and start copying and pasting screenshots of your favourite websites.4. Create the designIt’s time to create the design, and Figma is the right tool for this job.You should find out what kind of device the majority of your traffic comes from; mobile, tablet or desktop, because that will affect your design’s target resolution. If most of your traffic is coming from mobile, start your design from mobile and scale it up to desktop.WireframingDepending on how much functionality your site has, you may want to consider starting with wireframing to figure out the general arrangement of elements. We would argue this is overkill for most websites, but it can be helpful if you’re planning on building something more complex.Start with the homepageYour site’s homepage is its crown jewel. It’s the page most of your visitors will see and explains what you do. It should be the first thing that gets redesigned to set the tone for the rest of the site.During this step, you will create a good deal of the global elements: navigation, footer, buttons, call to action, content arrangement, and some inputs. Once you’ve figured these parts out, the rest of the site will be a breeze.Design systemA design system is a user interface library of the elements and components that make up your design. It isn’t necessary, but it’s a massive time-saver if you’re planning on extending your site in the future.We usually work on building a design system as the site's design progresses. Every time a new part of the website comes together, we copy the individual components to the Design System page in Figma. The process takes a little time, but if there are any extensions required in the future, it’s all made back.Nominate your animationsAnimations are super hot in 2022. Almost every big tech company has incorporated some kind of animation in their design. There’s no reason you shouldn’t do the same. Animations add polish to your brand and help distinguish your site.If you’re planning to incorporate animations into your design, make sure you figure out where in the Figma design they’ll live.After EffectsOnce you’ve figured out where your animations will go, you’ll need to create them in After Effects or a similar application. Figma can show basic transitional effects, but After Effects is usually better.The purpose of creating these animated videos is to provide the websites developers with a blueprint. Developing animated content is tricky at the best of times. Make life for your developers as simple as possible.5. Build the siteInvolve your developers With all of your pages designed, animations created, and assets prepared, it’s time to move forward to development.While it’s not specifically part of the “redesign” process, the ultimate goal is to get your design onto the web. The design and development process should be tightly intertwined.It’s easy to design elements that look great but are challenging to develop. These issues typically boil down to responsiveness, and a few simple design changes can prevent them altogether.Several years ago, we had this problem when working with a third-party graphic design company. They were new to web design and didn’t check in with us during the process. The result looked gorgeous, but we couldn’t make it look exactly like the design.The client had gone through extensive review and approval of the design. When we presented the developed website, she was unhappy that it didn’t match the design perfectly. Countless coding tweaks later, the project was way over budget and time.The lesson here is to involve your developer as you work through the design. Use Figma, align the majority of your elements to a 12-column grid, and you’ll be on the right track for a smooth developer handoff.Pick the right technologyBefore development starts, you should figure out what technology you’ll use. WordPress is the king over the internet. It’s a quirky platform to work with as a developer, but it does most things well. Alternatively, Gatsby and Next.js are new static site generators that promise incredible performance and an enjoyable developer experience. There are pros and cons to each.On the more layman-friendly end of the scale are Webflow, Wix and Squarespace. These page building platforms are much harder to optimise to pass Google’s performance audits, and eventually, the technical debt will catch up with your business. We’d suggest avoiding these platforms unless you’re on a shoestring budget.Testing forms, snippets, taggingThe final step of any website redesign process is to ensure everything is working. It’s easy to forget, but most of the time, the primary purpose of your redesign is to improve the conversion rate of visitors to customers. You can’t do that without some form of analytics and a working contact form.Make sure you jump into Google Analytics and check that your traffic numbers are ticking over in real-time. Similarly, submit your contact form and check it’s coming into your marketing system.6. Assess the outcomesFiguring out if your redesign has been successful can be a stressful process. The last thing you want to find out is that you’ve spent a bunch of money and haven’t seen the results you were expecting.Even worse is not knowing and being left to scratch your head about why your conversion rate or opt-in rate hasn’t improved.The trick here is to build enough data points to measure your redesign's effectiveness accurately. At the very least, you should have Google Analytics goals attached to the buttons that users press to trigger actions like signing up for your newsletter or purchasing a product.Average time on site, average bounce rates and user journeys through your site are also great things to investigate before and after your redesign.Wrapping upYou’ve learned the most important steps to execute a successful website redesign. Now that you understand that there should be a central goal driving everything and the steps that need to happen, you’re in the driver's seat for executing your own design.We’re excited to see what kind of results you manage to create. If you’ve made it through a redesign process and would like us to check out how it looks and even offer our thoughts, then drop our team a line in the comments section below."
  },
  {
    "title": "Website Personalisation",
    "plaintext": "As business owners and marketers, we’re always on the hunt to squeeze more value from the traffic reaching our site. This is where website personalisation becomes an exciting experiment.Article overview: 1. What is website personalisation 2. What are the benefits of website personalisation 3. How to implement personalisation 4. Website personalisation toolsWhat is website personalisationWebsite personalisation is a method of modifying the content users interact with based on their preferences or past behaviour.An excellent example of website personalisation is the checkout experience of Butternutbox. They put the user through a nicely styled quiz that asks questions about their dog to provide a tailored product recommendation.The other way of adopting website personalisation is how Amazon use their customer’s past purchases to make product recommendations.Website personalisation boils down to finding out something about your visitors and showing them relevant content.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat are the benefits of website personalisationVisitors are looking for something when they arrive on your website. Once the site loads, the timer starts counting down until they give up and leave. Every time they scroll down the page, read a sentence or click a button, they go through this decision process:The benefit of personalised content is that it takes users down the green path and helps them get their answers quicker.The trickle-down effect of helping visitors find what they’re looking for brings a host of benefits;Increased conversion rateConvincing visitors to purchase something is all about meeting them where they are in their purchasing journey. Sometimes, they know exactly what they want and they’re ready to go. Most of the time, they’re researching or browsing without an exact product in mind.Website personalisation can help customers at both of these stages of their journey.For customers that are just browsing but don’t quite know what they’re looking for, pitching them with marketing banners and product advertisements based on their past purchases can ignite their curiosity and push them into an impulse purchase.Similarly, if users already know the kind of product they want, taking them through a product personalising questionnaire that makes recommendations can do the research for them, show them the exact product model they need, and get them to purchase.Longer and more meaningful engagement with contentHave you ever travelled down a YouTube rabbit hole? You pick a random video and suddenly you’ve lost two hours browsing videos that are all vaguely connected.The reason you’re compelled to watch the next video is that it joins nicely with what you were just watching.This kind of effect can be achieved with website personalisation too. By recording the articles that your visitors read, you can generate relevant recommendations. Or more simply, you could put them through a short quiz to gauge what they’re interested in and then present your best articles in their areas of interest.If you can match your content to what your visitors are looking to read, they’ll be more likely to stick around, keep reading and take whatever the next step is you have in mind for them.Increased upsell uptake rates & cart valueWebsite personalisation is a great way to boost your cart value and get users to take upsells that they may not have otherwise considered.Here’s the situation - a visitor arrives at your shop to buy a pair of shoes. While they’re browsing, you prompt them with a short questionnaire about the kind of shoes they want. Your site makes a handful of recommendations based on their answers and they choose to purchase a pair.After they’re purchased you can now make recommendations on related products like socks, citing the answers they’ve already shared.Modifying your website’s “pitch” based on customer personalisation can be a powerful ally.How to implement website personalisationI’ve already mentioned a few common ways to implement website personalisation but these are the three best approaches; 1. Survey your customers and make recommendations 2. Capture user behaviour and adjust content 3. Use a paid tool to do the heavy liftingSurvey your customers and make recommendationsSurveying your audience to gain insights is easy. There are a ton of tools out there that can help you do this, or if you’re technically savvy you can write your own little product wizard app.The underlying idea is to capture user preferences, build triggers into the potential options and show different pages or products based on those triggers.Typeform is a great platform you can use to build this kind of personalisation survey. Typeform lets you ask questions of your visitors and route them to different pages based on their responses.All you need to do is find out what your customer’s biggest decision is, and then ask them questions to gain insights into which recommendation will be their best choice. Bake this into a quiz that points respondents to a product or landing page and you’ll see great results!Capture user behaviour and adjust contentRecording user behaviour is an advanced approach and one you need to take care with (make sure you’re GDPR compliant). It’s also very powerful and flexible since you can control exactly which triggers are recorded and what actions are launched.Using actions can be captured in cookies, which are little files that live in the user’s browser. When the visitor moves from one page to the next, your website can check their cookie to see if it contains any triggers. If a trigger is present, then personalised content is displayed.Writing cookies is reserved for your website developer. If you don’t have a reliable developer or you’re not sure this is the right approach for you then you might be better off using a paid tool.Use a paid tool to do the heavy liftingThere are hundreds of personalisation tools, so we’re just going to list our favourite two to get you started.SegmentSegment is an omnichannel analytics and customisation platform. It’s become huge over the past couple of years and is used by every second SaaS company.One of the reasons for Segment’s popularity is the results they help businesses achieve through email, app and website personalisation. Segment can capture data from a range of different sources, and use these insights to make finely tuned recommendations.Segment does a free plan, but it’s limited. Otherwise, you’re looking at $120/month which can be hard to swallow if you have a small marketing budget.Google OptimizeAt it’s core, Google Optimize is an A/B testing platform. This doesn’t mean it can’t be used for website personalisation.Google Optimize is packed with a ton of great functionality that gives you the ability to send customers to different pages based on the actions they take. It comes with a fairly intuitive engine for declaring rules, allowing a decent amount of flexibility.Best of all, it’s free.Be careful of overusing Google Optimize. It has a tendency to cause performance issues like screen flickering and slow page load times.Wrapping upThere are tons of ways to personalise your website and the potential is huge. If you’re curious and want to see if it will move the needle, I recommend starting with a short quiz. Our team are actively working on a lead capture quiz at the moment and the next article we publish will explain the thought process that went into its creation.Deep website or application personalisation can be a tricky and technical affair. If you’re uncertain if you can make it work for your site and would like to know what’s involved in doing it properly, then drop us a line. At the least, you’ll get some good advice on what your next step should be."
  },
  {
    "title": "Headless Shopify Example",
    "plaintext": "Headless Shopify ExampleThere are a bunch of great benefits to upgrading your Shopify store that can move the bottom line and set you apart from competitors. But it’s a big decision and will be a disruption to how you do business.If you’ve stumbled across this article in the hope that you’ll get a peek behind the curtains at a real headless Shopify example, then you’re in luck.A while back we were commissioned to build a headless Shopify store for a Sydney-based produce business. Unfortunately, the pandemic changed their mission and they abandoned the project. However, they gave us permission to showcase the project.The store is set up with a Gatsby frontend, Shopify backend and Prismic as the content management system. In the below video, I’ll take you on a quick tour around the customer experience, and administrative experience, pointing out the major differences you’ll see in day to day use.The Strategic Tech Upgrade 14 Businesses Used To Turn Their Store's Struggles Into Massive GrowthGet a detailed breakdown of 14 businesses that set goals to improve their bottom line, and then used a headless architecture to make it happen.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat’s next?You’re probably aware of the payoffs that come with moving to a headless architecture. Suddenly you have control to completely customise the shopping experience and pinpoint conversion leakages. You can find tools to get betting analytics and insights into what your customers are doing and add content writing tools that streamline your content team’s efforts.In a nutshell, the sky is the limit.However, making the jump involves a large amount of risk. Besides the disruption to your team, it’s an expensive and complex task. Since you’re not bound by any technology there are unlimited options for how you can configure your store.So the question is how to move forward.Well, you could simply approach reputable agencies presenting your project. You might find one that lines up with your expectations and that presents a tidy proposal.But jumping into bed with an agency doesn’t mitigate any of the risks of a big software development project.There’s one step missing here that bridges the gap between your excitement and ambition, and careful execution of exactly what you need and that’s a Product Roadmap. Product Roadmapping is a structured process of talking through the results you want to see from your store upgrade and all the features that should make up the new store.Roadmapping sessions usually take between 4 hours to a full day, and by the end of the process, you have a complete blueprint that will guide your upgrade. It contains flows showing how information travels through your system, descriptions and technical breakdown of features, and a plan for how you see a positive return on your investment.Undertaking a Roadmapping session is a low cost, quick and effective approach to reducing the risk of a big software development project. Best of all, you get a chance to work with our team to see if we’re going to be a good fit without dumping tens of thousands of dollars into the project!We make time for four Roadmapping sessions a month and they book up quickly. We only work with clients we’re sure will see a positive return from their investment. If you’d like to see if you qualify, please shoot through a message and we’ll send you the qualifying forms to complete!"
  },
  {
    "title": "SaaS Design: A Mobile-First Approach",
    "plaintext": "The software-as-a-service (SaaS) model has become increasingly popular in the last couple of years and not without reason.Many companies, including some of the best web design companies, love the SaaS model because they don't have to spend time installing an app when it's already configured and ready to be used.The cost is also lower since SaaS typically resides in a shared environment, where the hardware and software license costs are lower.If you, however, want to be competitive, you need to keep up with the newest trends and a mobile-first approach is one of them.What's a mobile-first approach?A mobile-first approach, in general, refers to the concept in which the designers first build a mobile version of a website or software, instead of starting with the desktop version. It includes both apps and mobile-responsive sites, but we will focus on apps in this article since having a mobile-responsive website is pretty much standard practice nowadays.Using the mobile-first approach, designers will first build the test version for their mobile devices, which includes basic features and functions. After that, they will move on to creating a version for tablets and computers.Why should I go with it?According to Bank by cell, 83,89% of the world owns a smartphone. The number is growing exponentially every year, which only adds up to the importance of proper design for mobile phones.This was first recognized in 2010 by Eric Schmidt, then-CEO of Google. And here is what he announced at a conference: \"What's really important right now is to get the mobile architecture right. Mobile will ultimately be the way you provision most of your services. The way I like to put it is, the answer should always be mobile-first. You should always put your best team and your best app on your mobile app.\"There is an obvious reason as to why you should choose this approach instead of starting with a PC version: the real estate on the smaller screen is limited.If you start with the PC version, you'll most likely end up with way too many details on a smartphone, which will only confuse the user and make the app user-unfriendly.It's way easier to add advanced features to the PC version than to remove them since basic and supplementary elements merge and become harder to distinguish and separate.Also, since you'll be limited by a small screen in the design process, you'll be forced to pay more attention to the content you create.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitShould I launch a mobile app?If you look into the latest trends in SaaS, you'll notice them stating that the future of mobile SaaS is app-driven and that's true. But does that mean that every SaaS needs a mobile app? Not really.Maybe your business is doing just fine even without a mobile app and so investing in one could be a waste of time and resources that could be directed in the website development process.Before deciding what's best, we advise you to conduct research or a survey and analyze the results. Then, if you notice the users are yearning for a mobile experience, go for it.A success story and a not-so-successful one.When you decide to launch an app, you need to know your users' pain points. If you miss them, users will most likely abandon the app pretty quickly.Duolingo owners recognized this back when they first launched their app. They continually invested in A/B testing, which allowed them to adapt to their users' needs.Unlike Duolingo, HotJar failed to verify its data before developing an app. Instead of providing enhancing the user experience, they've achieved the opposite by removing the key features from their web offering. It backfired, and users were not satisfied.Conclusion: look before you leap. Don't rely on a hunch but on hard-hitting data.Where do I start?If you're ready to go mobile-first, here are the steps we advise you to take:1. Create a content inventory and develop a wireframe.A content inventory is a list of all elements you want to include, such as different categories. This will help you prioritize and leave out the elements that are not needed.After finishing up, we suggest you create a wireframe. The wireframe is an illustration of an app's interface that is focused on determining the position of the visual elements, their hierarchy, and functionalities that you plan on developing.Think about the color of the visual element color, contrast, proximity, texture, and style.Remember, a wireframe is just a skeleton, so you don't have to go into too much detail. You can draw it on a piece of paper or use an online tool for that.2. Keep it simple.Remember – a mobile phone screen is pretty small compared to a PC. Using too many visual elements will make it difficult to use the app and will most likely confuse the user. To avoid that from happening, we have some tips for you: * Avoid putting too many links in your navigation menu * Reduce the number of pages * Stick to two columns of content at most * Pay attention to typography – it should to big enough to improve readability * Leave enough white space3. Enlarge touch elements.Small touch areas aren't going to cut it because a finger has a much larger surface than a mouse cursor. It's important to leave enough space around the buttons instead of having them all cluttered.Users tend to get frustrated if they keep missing the button.In the Android Material Design Guidelines, it's recommended that the touch targets should be at least 48 x 48 dpi, which amounts to 9 mm regardless of the screen size. Our best advice, however, is to use your finger as a guide – if you can tap it, most likely other people can too.4. Use visual hierarchy in terms of content.Since mobile devices have limited space, it's vital that you pay attention to the visual hierarchy.Instead of cluttering the screen with too much text, put the vital message in focus and remove all unnecessary content to provide clarity.Once you start working on a desktop version, you can add more content because you'll have much more space.When determining which content should be highlighted, we advise you to put yourself in the user's shoes. For instance, spreadsheets are typically opened and read on a PC, so it makes no sense to put them in the app. Save it for the desktop instead.5. Remove unnecessary pop-ups.Pop-ups are one of the most frequent reasons users decide to uninstall the app. They disrupt the use of the app and frustrate the users.If you, however, insist on keeping them, don't let the pop-up cover up the entire screen. It prevents the user from using the app and covers up the rest of the content, which is annoying.But, if it is a full-screen pop-up, make sure it appears after the user has seen shown an interest in the app.6. Simplify sign-up.Filling out form fields can be a very boring task, especially if there are too many of them. Instead of asking for too much information, prioritize.Ask yourself if you really need the users' addresses and phone numbers. If not, remove those form fields and only ask for what you really need. Most of the time, an email address and a password are the only information you need for them to type in.Another great idea is to allow users to sign in using their Google or Facebook accounts, for instance. You'll most likely get all information that you need without annoying your users.7. Design for one-handed use.When designing an app, you should keep in mind that mobile devices are most often used with one hand.Back when smartphone screens were under 5 inches, there was little room for mistakes. Smartphones nowadays are becoming larger and larger, which is something designers should acknowledge.To overcome this problem, you could use a flyout menu instead of a full menu. Gestures are also a great option since they don't take up any additional space.You could also allow users to customize their tab bars with the most often used functionalities.8. Avoid large graphics.Large images and videos spread across the entire screen just don't have the same effect on a mobile phone. They're often used to deliver a brand message and communicate important information. The problem with these is that they can take too much time to load.You could either compress them if you feel like they're still valuable for your branding, or you could not use them at all; it's up to you. Don't forget that you can always add them to a desktop version.9. Test your app.The best way to find out if your app is user-friendly is to test it. Once you finish developing it, try using it for an hour or two. You can also let your friends use it and then ask them for their opinion.Is it easy to navigate? Were you having trouble reaching a call-to-action? Are the buttons easily clicked on, or are they too small?If you notice there's room for improvement, tweak the app a bit and then try using it again to see if you've accomplished your desired goal.Author bioRick Seidl is a digital marketing specialist with a bachelor’s degree in Digital Media and Communications, based in Portland, Oregon. He carries a burning passion for digital marketing, social media, small business development, and establishing its presence in a digital world, and is currently quenching his thirst through writing about digital marketing and business strategies for Find Digital Agency."
  },
  {
    "title": "Make (formerly Integromat) vs. Zapier: A Comprehensive Comparison",
    "plaintext": "Make (formerly Integromat) and Zapier are two of the most popular integrative tools on the web. Both boast a large user base and integrations with a huge range of applications. But which one is better suited for you?As a development agency, our team we love no-code tools like Zapier, Make, ITTT. They're great for prototyping new ideas and improving our efficiency. There's only so much time in a day, so anything that helps us get more done gets a tick in our book.It's worth noting that we use the names Make and Integromat interchangeably throughout this article.I need something more customBefore we look at the key features and give our recommendations, it's important to note that you can't do everything with either of these tools. If you're trying to hook a custom application up to an online service, or you're working with a less-known tool and want to connect it to something else, you may have to build a bespoke integration.These integrations usually require code to be involved and can sometimes grow to become powerful, valuable applications. It's hard to know how much value you can unlock from connecting your services together. Imagine if you saved your team a whole day of effort a week?If you're interested in getting some advice on your custom setup, drop our team a line and we'll set you up with a free half an hour meeting. The worst that could happen is you get some free advice that helps you in the long run!The calls are always relaxed and informative :)Why workflow automation is amazing for online workOnline work is great in most ways. A lot of the time, you get to work from home. Your own food is in the fridge. You can play your own music and feel completely at home.But there are plenty of distractions and it's easier than ever to procrastinate.It's also really easy to start work early and finish late and feel like your entire life has turned into one big workday.These are a couple of reasons why automation tools are literally made for people who work on the internet. If you can get creative enough, there's usually a way to automate part of your work.Workflow automation can help you get your work done faster and more efficiently. It can also help you avoid errors and save time by automating repetitive tasks. Workflow automation can help you manage your day to day activities and make sure that all your tasks are completed on time. it can even help improve communication within your team by providing a clear overview of all the tasks that need to be completed.This is all theoretical, so here's a handful of examples of ways to make your life easier using workflow automation: * Automate a daily summary of the tasks you completed and share it in Slack so everyone on your team has visibility * Trigger an email sequence when a new employee joins, setting up their accounts and providing them training materials * Generate a new weekly status report template ready for you to work onEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat do these automation platforms do?Zapier and Integromat are both tools that allow users to integrate applications and automate workflows. Zapier is one of the best known integrative services and offers a wide range of integrations with popular applications. Zapier offers a lovely, clean interface and simple user experience that requires just a few clicks to get started. Integromat, on the other hand, claims to offer more functionality better suited to complex workflows and advanced scenarios.Both tools help automate repetitive tasks. For example, you could use Zapier or Integromat to: * Automatically add new contacts from a spreadsheet into your CRM * Post new blog articles on social media * Send out automated emails when a new customer is added to your database * Trigger onboarding sequences when new employees join your team---Please note that some of the links included in this article are sponsored by the products we're reviewing and we earn a small commission (no additional cost to you!) if you end up buying the service. We've aimed to keep this review, fair, unbiased and thorough.---What's the difference between Integromat and Zapier?The main difference between Integomate and Zapier is in the level of complexity each tool is able to handle. Zapier has a simple, click-based interface that makes it quick and easy to get started with integrations. It's mostly focused on small businesses and individuals who want to automate simple workflows.Integromat, on the other hand, offers more complex functionality for users who need to do more than just the basics. It has a steeper learning curve but once you get over that hump it's an incredibly powerful tool. That said, it still retains a user-friendly interface that makes integrations quick and easy - even if they are more complex than what Zapier offers.Feature ComparisonBoth platforms offer a range of features, but there are some key differences between the two platforms.Integromat markets itself as a more advanced platform that offers HTTP calls and JSON parsing, in addition to advanced error management and visual routing.Zapier on the other hand offers a simpler range of functionality that is targeted more at marketing-focused business owners who don't need to get quite so deep into complex integrations.Below is a more detailed breakdown comparing the two feature sets:Zapier featuresTriggersZapier Triggers are the events that start your Zap. For example, you could set up a Trigger to watch for new contacts in your CRM, or new orders in your eCommerce platform. When a new contact or order is added, Zapier can automatically add them to your mailing list, or create a task for follow-up. You can also use Triggers to watch for changes to existing data: maybe you want to know when someone edits their address information, or when an order status changes from \"pending\" to \"shipped\". With Zapier's Trigger-Action model, you can automate just about any task imaginable!Triggers are the first step in setting up a Zap—without a Trigger, there's no action to take. So when you're setting up your Zap, the first question you need to answer is: what event do I want to watch for? Once you've selected a Trigger, Zapier will ask you for any additional information it needs (like which CRM or eCommerce platform to use), and then you can choose your Action. It's that easy!Zapier is an excellent platform, but it can't do everything. Some integrations require custom coding. If you're working with a bespoke application, writing code to communicate directly with the API may be the only way to achieve your goals.Save yourself some time crawling the web and drop our team a line to check if we can help you connect your applications together.ActionsZapier actions are the next step in the workflow. Once Zapier has recognised the trigger event, it will perform some kind of automated action. For example, you could use Zapier to automatically create a new task in Asana (Action) whenever someone schedules a meeting with you in Calendly (Trigger).Multi-step ZapsWe are big fans of Zapier's multi-step Zaps. They allow you to chain together multiple integrations to create more complex workflows. For example, you could use a Zap to automatically create a new task in Asana whenever someone schedules a meeting with you in Calendly.This is really where the magic happens. Chaining different apps together to create complex flows of information is where Zapier's value shines.Is that it?Triggers, Actions and Multi-step Zaps seems like a short list of features of a platform as well known and powerful as Zapier.The truth is that there are tons of other features baked into Triggers and Searches, but Zapier really has a tight focus. It helps users build workflows and automate tasks.The only other \"feature\" we could point to is the huge list of integrations. This is Zapier's selling point. They make it easy for application developers to submit a new integration (we've done it ourselves!).Integromat featuresIntegromat offers Triggers, Actions and multi-step integrations like Zapier. But it goes well beyond these basic features. It's almost positioned like a no-code API and logic tool. Here are the most notable features.Data manipulationIntegromat offers a range of data manipulation features that allow you to do things like format dates, extract numbers from strings and more.This is the exact kind of advanced feature you need if you're looking to perform calculations on the data you're automating. There is a bit of a learning curve in figuring out how to set up the functions. However, you'll pick it up quickly If you've spent any amount of time writing formulas in Excel.Visual routingVisual routing is a feature that allows you to see the flow of data between your integrations visually. This feature would be familiar to anyone who has used an email integration tool like ActiveCampaign or ConvertKit.Within the Visual routing, Make provides routing options to branch the steps in the integration, asynchronous delays and data storage to save the outcome of the integration for future manipulation.Detailed information about each executionEach execution step in Make's automation offers a JSON-like breakdown of the associated properties.IteratorsMake's Iterators are another concept borrowed from the world of coding. They're essentially a basic loop where an action is repeated until a condition is achieved. The example the Make team list is storing attachments from emails - the email is \"iterated\" multiple times until each attachment has been processed.HTTPHTTP is the protocol that runs the web. What does this mean for you though? Well, the fact that Make offer HTTP integrations means you can download files from a URL, make a HTTP request and process the response and even make an OAuth2.0 request.These are the kind of requests executed by backend applications. It's pretty advanced stuff, and very cool to be able to execute without having to write and test your own code.Data storageData storage is a really neat feature that lets you run delayed, aggregated calculations. For example, you could survey your audience and hold the responses in data storage for a week to allow users the opportunity to complete the survey. Then once all the responses are in, they could be run through a function to find the average answer which could be forwarded to your Slack channel.Data parsingIntegromat data parsing is a feature that allows you to extract data from a variety of sources, including web pages, JSON files, and XML files. The data can then be stored in a variety of formats, including CSV files and SQL databases.There's plenty moreThere are tons of other really cool features packed into Make. Head over to their features page to see the full range.Comparing the Learning CurveAt the core of their mission, these tools both do the same thing. One of the biggest differences between them is the learning curve to getting started.Zapier is incredibly simple to use. You can get started with a few clicks. They've streamlined the interface to create as few distractions as possible and handhold you through the process.Make, on the other hand, offers more features and functionality than Zapier. As such, it takes a bit more time to understand and implement correctly. However, Make offers extensive documentation and tutorials to help you get started.Comparing Error HandlingFor me, reliability is the most important consideration when deciding to go with Zapier vs Integromat.Having used Zapier extensively, I know that Zaps fail pretty frequently and it can be super annoying. Finding the broken Zap and filling in the gaps can be a massive task, especially if your automation involves a lot of data.Zapier offers some flexibility when it comes to handling errors. You can choose to have Zapier automatically retry failed tasks, send you an email notification when an error occurs, or both.I've found this to be limiting in the past and want more reliability or a better way of knowing when something is broken.Comparing Available integrationsBoth Zapier and integromat offer a wide range of integrations. Zapier offers over 4000 integrations while integromat offers over 1000.If you're looking for a specific integration, it's likely that either Zapier or integromat will have it. However, if you're looking for the most comprehensive list of integrations, Zapier is the clear winner.Comparing PricingBoth Zapier and Integromat offer a Free plan with limited features, as well as paid plans with more features and support.Zapier's pricing is tiered: * Starter plan $20/month for 500 tasks * Professional plan $50/month for 2,000 tasks * Team plan $250/month for 10,000 tasks.In comparison, Integromat's pricing is based on the number of 'operations' performed each month: * Basic plan $9/month for 30,000 operations * Business plan $29/month allows for 100,000 operations * Enterprise plan $79/month allows for 300,000 operationsZapier pricing detailsIntegromat pricing detailsComparing Customer Support and DocumentationBoth Zapier and Integromat offer excellent customer support. Zapier offers 24/seven email support and Integromat offers email and live chat support.Both services also offer extensive documentation to help you get started with their product.Who should buy Integromat?Integromat is the right choice for you if: 1. You're comfortable writing formula in Excel or Google Sheets 2. You've already tried Zapier and find it limiting 3. Have technical staff on your team who can do the heavy lifting 4. Have complex integration requirements you need handled quickly 5. Want to prototype a no-code application and need a backend engineThe ceiling on what you can do with Integromat is very high. It's closer to coding than any other automation tool on the market.The tradeoff of this flexibility is that it takes time to learn and can be difficult to master. It's not the best option if you want to execute a two-step integration to get your data from Facebook ads into a Google sheet.Since Integromat offers a generous free plan, you can give it a try and make up your own mind.Who should buy Zapier?Zapier is better for folk who want to stick to a linear workflow with simple automations. If you're sick of doing simple manual tasks, Zapier will be a quicker option, assuming it can do what you need.Zapier is the right choice for you if: * You can easily explain your integration requirements (usually a good sign they're simple!) * You're not super technical but can figure most software platforms out given the opportunity * You want to move quickly * Your integration is listed in Zapier's massive library and isn't handled by IntegromatZapier also offers a free plan and a simple onboarding wizard to help you get set up.The verdict: Zapier vs Integromat (Make)Okay, so if we had to recommend one platform which would it be?You've probably already guessed, but Make is our recommendation. Even though there is a considerable learning curve, we found that we could do everything we wanted to with Make where as Zapier was limiting in some integrations.Obviously, this recommendation won't apply to everyone and it shouldn't take anything away from Zapier.The use case we've recommended Zapier for in the past is no-code prototyping. We've completely changed our opinion. Of the two apps, Make is clearly the best suited.They're both free until you dial up your usage, so we suggest you sign up for both and see which one feels like the right fit!"
  },
  {
    "title": "What's the Difference Between a Web Developer, Website Programmer and Web Designer",
    "plaintext": "Do you know the difference between a web developer, web programmer and web designer? Most people use those words interchangeably, but they actually have different meanings.Web development is largely accepted to be the umbrella term that incorporates all the other specialities. It's the activities involved in developing a website.Programming or coding is writing logic-based code to execute actions and automate tasks, which is the magic that makes websites interactive.Web design is focused on the visual appearance of a website and makes sure it looks good. Design usually happens using web design software, separately from development and programming and doesn't involve any coding.Web Developers vs Web Programmers vs Web DesignersLet's break it down: * Developers are people who can build a website from start to finish. * Programmers focus on code and can write custom scripts or applications for the web. * Designers create the look, layout, and feel of a website.The three roles are often combined—most designers know at least some basic code (even if it's just simple HTML and CSS), and most developers have an eye for design.But in general, designing requires less coding knowledge than programming, and programming requires less design knowledge than developing.💡Here's a quick plug!Why not join our community and receive a monthly newsletter? We'll send you summaries of technology news and insights. It's a quick and easy way to keep up to date with what's happening in the software development world.Hey! Join our community and get the latest tech insights.Once a month, we compile and distribute a \"too long, didn't read\" summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat's the difference between development and programming?Web development is a broad term that can refer to coding, but also includes other activities such as planning, managing projects, quality assurance, etc. It's the process of building something from start to finish.In contrast, programming specifically refers to writing code.This is the confusing part. If a programmer can write the code that runs a website, doesn't that mean they are also a developer?The short answer is no, because there are different kinds of code that combine to run a website. The two areas of code are referred to as front end development and back end development.Front end development vs backend developmentFront end code is processed by your browser and displays the content you're looking at right now. Back end code runs on the server, talks to the database and performs dynamic logic.Coming back to our point - a programmer can focus on writing back end code. They may not have the skills (or usually the desire) to become a front end developer. Or, they may know how to write the frontend code but don't have a clue how to create logic to retrieve information from the database.My company specialise in building applications and our team is made up of guys who are very experienced at writing code. Half of them love programming back end logic, and the others enjoy the visual frontend code.What does a web developer do?Write a paragraph about what web developers do including the keywords software programs, web applications, computer science and web technologiesWeb developers are responsible for the coding, design and layout of a website. They can also be involved in the maintenance and improvement of an existing site.When creating a new website or application, web developers will work with graphic designers and content writers to create a user-friendly site that looks good and is easy to navigate.In order to do this they need to have a strong understanding of computer science and web technologies.Web developers use various programming languages (such as PHP, ASP or SQL) to create software programs known as web applications. These applications allow users to perform specific tasks on a website, such as search for products or login to their account.What is a full stack web developer?There's a special breed of developer referred to as full stack. They're comfortable doing everything. They can write code for the server, create database queries, build user interfaces and make sure everything works well together.Full stack web developer are typically more experienced because they've spent the time learning front end and back end development.The advantage to working with a full stack web developer is that they can take on any project and see it through from start to finish.The disadvantage is that they may not be as expert in any one area as a specialist.What does a web designer do?Web design happens in Figma, Sketch, Adobe XD, or even Photoshop (if you're stuck in 2006). Design involved creating static images and shapes to show what the web page will look like.You can think of it as creating the blueprint for a house. You can see what the house will look like and can start making decision about where doors will go, and how the furniture will be arranged.But the blueprint isn't functional. It doesn't do anything until the builders put everything together.Developing is actually building the house.When you're designing, you're not thinking about how all the pieces will come together and work as one. That's what developers do - they take all the parts (database, frontend code, backend code) and make them work together to create a functioning website or application.Designers don't need to know how to code (although it certainly helps), but developers need to have at least some design sense.What’s the difference between web design company and web development agency?A web design company focuses on the visual aspects of a website, such as the layout, colors, and fonts. A web development agency focuses on creating the functionality of a website.Both types of companies can create websites from scratch or work on improving an existing website.It is not uncommon for a web design company to have a team of developers or for a web development agency to have a team of designers.The key difference is that a web design company will focus more on the aesthetics of the site while a web development agency will focus more on the functionality of the site.Should I work with a web design company or web development agency?The answer to this question depends on your needs.If you need a website that is primarily visual in nature, then you will want to work with a web design company.We've noticed that most web design companies use low-code page building tools like Wix, Squarespace or Webflow.These platforms get the job done quickly, but they're typically bloated and end up preventing your website from reaching the same heights as a framework like WordPress or Gatsby.If you need a website that is highly functional and interactive, then you will want to work with a web development agency. It's simply not possible to build complex functionality with the tools I mentioned above. The backend code isn't made available to customers, since the code is the intellectual property of the company.In some cases, you may want to work with both types of companies in order to get the best of both worlds. Working with a web design agency will get you a great looking site, and then you can tag in a development company to do the heavy technical development.Did you like this article? Visit Clean Commit's blog for more!We're hiringIf you're a frontend developer or have a technical friend that's looking to join a relaxed, fully remote workplace where we encourage part-time hours and a flexible lifestyle, then let them know we're expanding our team!"
  },
  {
    "title": "Cross Platform App Development: Developing an Application for Maximum Exposure",
    "plaintext": "There was a time when developing an app for mobile users meant that you had to develop different applications for iOS and Android. If you wanted your app to be available on the web, you were out of luck. This traditional problem has been solved by cross-platform app development frameworks. These frameworks allow a single codebase to create apps that work on different devices, including iOS, Android and the web. In this blog post, we will discuss the benefits of using cross-platform app development frameworks and show you how to get started!What is cross platform app development?Cross-platform app development is just the process of writing code that works across multiple devices like iPhones, laptops and Android tablets.The hardware and operating systems that run each of these devices expect software code to be written to a particular standard. And these standards are all different.This might sound like an easy problem to fix, but before the development community turned their attention to building cross-platform frameworks, the code used to write an iOS app was pretty much useless if the app also needed to run on the web.Big software companies like Google and Facebook saw this problem impacting their team's efficiency (and their bottom line!) so funded the development of frameworks and approaches like Flutter and React Native.Problems with targeting a single deviceThe main issue with developing native apps is that each device (iOS, Android, web) requires its own codebase.This can quickly become a maintenance nightmare for businesses, as they are effectively tripling the amount of work required to keep their app up-to-date. Cross-platform app development frameworks solve this problem by allowing a single codebase to be used for all devices.Think about the effort to fix bugs that are happening on iOS but not Android. Or introducing new features that are easy and quick on the web, but tricky on mobile. Or keeping three versions of support documentation up to date. Or even the communication required to keep the development team in sync across slightly different versions of the application.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitYou can save money a ton of money RoadmappingA lot of our clients turn up preaching about React Native, Flutter, or developing an app for Android and iOS. This makes sense because your first port of call when you decide to create an app is to look at what Twitter, Facebook, and Instagram are doing.The problem with focusing on huge, recognisable brands, is that most small businesses (even medium businesses) don't have the budget to invest in developing three separate codebases. And even if you do, coming to the table with preconceived ideas about what will best fit your business is probably going to negatively impact your development partner's ability to make an unbiased recommendation on the best-fitting technology for your situation.Luckily, there's a clean solution for solving this problem: building a Product Roadmap.A Product Roadmap lists all the things that will go into building your application. It's a bridge between developers and a business that explains the goals of the product (creating a new product for your company, looking more professional to clients, increasing revenue, etc), and all the features that need to go into the app to make it a success.The problem that Product Roadmapping solves is no development agency will know how much your app will cost to build until they're deep in the work. They need to think through all your problems and work out solutions.You can bypass this process and get a complete blueprint for how your project will play out, estimates for each feature, timeframes for implementation and enough technical detail that any development company could pick up the Roadmap and immediately understand what needs to be done.It's a low-cost way to shave off months and tens of thousands of dollars of development time.It's also an answer to \"which framework is the best?\". The Roadmap will make recommendations and list options for the technology stack to build your application.It's a service offered by very few development agencies because you're getting the chance to sit down with an experienced team without having to pay a huge sum of money like you are when a full development project kicks off.If you're starting a new application soon, you need a Product Roadmap. It will save you tons of money and cut down your development timeframes by thinking through the hard questions and cutting all the unnecessary features up front.Click here to read more and check when our next available Product Roadmapping session opens up.Benefits of cross-platform app developmentThere are a ton of reasons you should consider committing to a cross-platform app development framework instead of going with a native framework: 1. The ability to reach a wider audienceIt's possible for your app to become a success if it's only released on one platform like Apple's App Store. However, with tens of thousands of apps released each day, your chances of getting noticed are slim.If you release your app on the web, the App Store and Google's Play Store, you not only reach a wider audience but give yourself a mechanism to write content (through your website) and promote your app.2. Reduced development costs and faster time to marketDeveloping individually for iOS, Android and web means writing the code three times. There are some efficiencies, but it's essentially three times the work. This slows you down, and if you've got a new exciting idea, you probably want to get it to market as quickly as possible.3. A consistent user experience across all devicesThis benefit is dependent on which framework you choose, but overall the user experience will be more consistent because the code is written from a single codebase with the intention of looking and acting the same.4. Easier maintenance and debuggingA single codebase requires less debugging than multiple codebases. Kind of goes without saying, but once you find and fix a bug, that's the end of the story. If a bug spans across different codebases, the fix for one might not work on the other.5. Less overhead for developers to stay up-to-date with the latest changesApps are developed with dependencies - libraries and other technologies that are leveraged. These need to stay up to date to ensure everything keeps humming along nicely. It's a lot easier to do this when you're only managing one codebase.5. Improved communication between development teamThis really only applies if you've got a larger development team, but if apps are being developed for two different platforms natively, the development will probably be done by different devs. Keeping everyone in sync, especially when rolling new features out is a huge challenge.Software development is already complex. Any measure you can implement to make it simpler is a clever choice.Cross-platform app development frameworksThere's a ton of great frameworks to create mobile apps that can be delivered to iOS, Android and even the web. This list covers the best frameworks for cross platform development:FlutterFlutter is a cross-platform app development framework created by Google. Flutter is the most popular framework for creating mobile apps using the keyword native app development. This is because it provides a consistent user experience across all devices, and it is easier to maintain and debug.Flutter doesn't require any platform specific UI components to render it's UI. This means there's no need for a property mapping layer to map every animation into a platform specific widget.From a developer perspective, this is a huge win and it simplifies the process of building new apps, which is really what we're shooting for, right?Node JSNode JS has become a hugely popular choice for businesses. Since it's a javascript-based framework, there's a gentle learning curve for newcomers who are already experienced in JS. Node JS also provides a consistent user experience across all devices, making it easier for customers to use your app.Keep in mind that NodeJS is a backend framework that communicates with the server. So if you're expecting to build a lovely looking user interface with NodeJS, then you're out of luck.While we don't use NodeJS a lot (we prefer Laravel), it's an excellent choice if you're building a Progressive Web Application to run on iOS, Android and the web.React NativeReact Native was the second most popular cross platform mobile app development framework in 2021. Originally created by Facebook, it allows developers to build native apps for iOS and Android using a single JavaScript codebase.The magic behind React Native is that it compiles to native Java and Swift code, which are the two languages accepted by Android and iOS.Since there are millions of bootcamps and training courses targeted at teaching React the pool of developers will the baseline skill to use React Native is huge. This is one of the big reasons it's grown to such heights of popularity amount the technical community.However, this is selling React Native a little short. While it doesn't come with its own rendering engine like Flutter, it arguably provides a less confusing developer experience (depending on who you talk to), comes packed with great 3rd party plugins, and has a thriving community.NativeScriptNativeScript provides developers with a low-level, native code framework that can be used to build cross-platform mobile applications.Unlike other platforms such as Cordova or Ionic Native which transcode one programming language into another and use WebViews for rendering an app UI respectively; this product has its own engine providing better performance than what's offered by either DOM JavaScript plugins (e) plus allows you produce aesthetically pleasing user experiences without dealing directly with complex web technologies like HTML5 canvas element!Corona SDKCorona SDK is a framework primarily used for creating cross-platform mobile games. Unlike some of the more popular frameworks, it's based on a development language called Lua which was made famous as the language behind Roblox.XamarinXamarin is a powerful and feature-packed app development framework. Its technology stack consists of C#, which allows developers to code for both Android & iOS in one language, and .NET which helps reductiveness between platforms while also saving time by eliminating separate coding languages.Xamarin comes with an excellent set of tools for debugging, testing & deploying your app. It allows you to use the same API to build iOS, Android and Windows applications. Finally, it compiles into super high-performing code, which is nice for those of us that watch performance closely.Unlike React Native, which doesn't have a clear \"best practice\" architecture, Xamarin follows the Model-View-Controller design pattern which is familiar to most programmers that have played around with backend applications.Other frameworksThere are a ton of other frameworks that are worth noting, but we haven't had much experience with: * Ionic * Appcelerator Titanium * PhoneGap (no longer supported) * Sencha Touch (no longer supported)Progressive Web ApplicationsWhen we're helping a new client build a roadmap for their product, we'll often steer them towards a Progressive Web Application instead of a cross platform mobile app.Our team's focus has shifted to building Progressive Web Applications and we're no longer a mobile app development company.The technology behind Progressive Web Applications has made them incredibly flexible for meeting user needs across iOS, Android and Web. The development time is reduced because most of the heavy lifting is done by the browser. Plus, we get to use Laravel and VueJS, which is our preferred stack!Progressive Web Applications (PWAs) are web applications that run in the browser, so they work seamlessly across different devices. They're built using HTML, CSS and JavaScript, and run on smartphones, tablets and desktop computers.PWAs have several advantages over traditional web applications. For example, they can be used offline or in low-connectivity areas, and they can be installed on devices like smartphones and tablets for quick and easy access. In addition, PWAs are often more responsive and user-friendly than traditional web apps, making them a good choice for businesses that want to provide a great user experience for their customers.PWAs rely on advanced caching to pull all the required information down as the user interacts with the application. Holding the cached data allows for a native-like experience with the application being incredibly quick to interact with.Popular PWAsPWAs are no longer new technology. They've been widely adopted by large companies looking for an answer to the \"cross platform framework\" problem. The following list is a handful of the most well-known PWAs on the market.It's important to note that companies like Spotify, Uber and Tinder are running their PWA in parallel with their mobile apps. This gives users the flexibility to access the app through the browser instead of having to download the app. * Starbucks * Pinterest * BMW * Trivago * Forbes * The Washington Post * Lancome * Uber * Twitter Lite * Spotify * Tinder * Alibaba * MakeMyTrip * Jumia * FlipkartCross platform apps examplesNow that we've talked about the different types of cross platform app development frameworks, let's take a look at some examples of apps that have been built using these frameworks.PayPal (Node JS)Netflix (Node JS)Linkedin (Node JS)UPS Mobile (Xamarin)Wikipedia (Adobe Phonegap)eBay (Flutter)Discord (React Native)Facebook (React Native)Skype (React Native)Pinterest (React Native)How to decide which framework to use?There's no clear answer to which framework is best or which one you should use when it comes to cross platform mobile development. It depends on a variety of factors, such as the type of app you're building, your budget, and the amount of time you have for development.If you're certain that building a mobile app is the right choice and PWA wouldn't be a better choice, then React Native or Flutter are probably the safest choice.If you're building a simple app that doesn't require much functionality, then a framework like PhoneGap or Ionic may be a good choice. These frameworks are relatively easy to use and don't require a lot of coding experience.If you're building a more complex app that requires a lot of functionality, then a framework like React Native or Xamarin may be a better choice.Still unsure?Choosing the right cross platform app development framework can be difficult, but it's important to select the one that will best meet your needs. We've looked at a few examples of apps that have been built using different frameworks, and we've also talked about some of the factors you should consider when making your decision. If you're still unsure which framework to use, check out our blog or reach out to us and we can help you decide.Happy coding!"
  },
  {
    "title": "How To Improve UX Using Micro-Interactions",
    "plaintext": "Micro-interactions are a great way to improve the user experience (UX) of your website or app. They can help guide users through a task, provide feedback, and even add a bit of fun and personality.When used effectively, these small and functional animations can make your UX more intuitive, efficient, and enjoyable.In this article, we will explain what these are, give you some examples, and of course, show you how you can use them to improve your website.What Are Micro-InteractionsWhat are microinteractions? Micro-interactions are small, focused interactions that help users accomplish a specific task. They typically take place within a larger app or website and involve some kind of feedback from the system in response to the user's action.They can be used for a variety of purposes, such as providing confirmation that an action has been carried out, guiding the user through a complex task, or helping the user troubleshoot an issue.While they may seem like small details, they can play a big role in making an app or website more user-friendly and enjoyable to use. Micro-interactions are great examples of micro experiences. When done well, they can make a positive impact on the overall user experience.Here are some examples: * A confirmation message that appears after a successful transaction * Animated icons that provide a visual feedback when an action is carried out * A progress bar that shows the status of a task in real-time * A tooltip that appears when the user hovers over an elementThese delightful engagement creating events can be found all around us, and they are becoming increasingly important as we move towards a more digital world. With so much of our lives taking place online, it's important to make sure that the websites and apps we use are as user-friendly as possible.Real-World And Popular Examples of Micro-InteractionsMicro-interactions are everywhere in the digital world, from the \"like\" button on Facebook to the progress bar that shows how much of a video you've watched. Micro-Interactions as examples of micro experience are a crucial part of the user experience and can make or break a product.1. The \"Like\" Button on FacebookThe \"like\" button on Facebook is perhaps the most famous micro-interaction in the world. It's a simple button that allows users to show their approval (or disapproval) of a post with a single click.This micro-interaction is so successful because it is simple and easy to use. It doesn't require any explanation, and it is instantly gratifying. When you see that someone has liked your post, you feel good, and when you like someone else's post, you make them feel good.The Facebook \"like\" button is a perfect example of how a micro-interaction can improve the user experience by making it more enjoyable and satisfying.2. The Progress Bar on YouTubeAnother great example of a micro-interaction is the progress bar on YouTube. This simple feature shows you how much of a video you've watched and how much time is left.This micro-interaction is useful because it allows users to keep track of their progress and see how much time they have left. It also serves as a motivation tool, urging users to keep watching.The progress bar on YouTube is a perfect example of how a micro-interaction can improve the user experience by providing valuable information and encouraging users to take action.3. The \"Add to Cart\" Button on AmazonThe \"add to cart\" button on Amazon is another great example of a micro-interaction. This button allows users to add items to their shopping cart with a single click.This micro-interaction is so successful because it is simple and easy to use. It doesn't require any explanation, and it is instantly gratifying. When you see that an item has been added to your cart, you feel good, and when you add an item to someone else's cart, you make them feel good.The \"add to cart\" button on Amazon is a perfect example of how a micro-interaction can improve the customer experience by making it more enjoyable and satisfying.Micro-interactions are a crucial part of the user experience and can make or break a product. In this article, we've seen some examples, and how they can be used to improve the user experience.So next time you're designing a product or a website, make sure to include some of these small and focused interactions.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitSome Concrete Steps You Can TakeBy now, you might already have some ideas on how you can implement micro-interactions and just why top user experience design firms use and recommend them. But enough theory. Let's dive into some concrete steps you can take in order to improve your UX.Use micro-interactions to guide users through a taskMicro-interactions can be used to help users complete a task by providing clear instructions and visual feedback.For example, when a user is filling out a form, you can use them to highlight the required fields and show an error message if a field is not filled out correctly.It can essentially help guide them through the process by providing feedback on what information is required and how it should be formatted. It might contain tooltips that provide additional information about a particular element on a pageMicro-interactions can also be used to provide visual cues that help users understand what actions they need to take.For example, a button may change color or animation when it is hovered over to indicate that it is clickable.They can help make complex tasks easier to complete by breaking them down into smaller, more manageable steps. A progress bar that shows the user how far they have progressed through a task is a good example.By respecting the rules of micro-interactions, you can help guide users through a task and improve their overall experience.Add personalityIf you are a UX designer, micro-interactions are a great way for you to add personality and life to your design. By carefully crafting these small moments, you can create an emotional and personal connection with your users that goes beyond the functional.There are a few key things to keep in mind when designing or implementing them: * Make them unobtrusive and relevant to the task at hand. * Use animation and sound sparingly, and only when they enhance the experience. * Pay attention to the details! Small things can make a big difference. * Test, test, test! Try out different versions to see what works best.Use Micro-Interactions To Improve UsabilityMicro-interactions can also be used to improve the usability of your UX.For example, if you have a complex form, you can use them to break it up into smaller, more manageable parts. This makes it much easier for users to complete the form and reduces the risk of them becoming frustrated and abandoning it altogether.We will illustrate this usability feature through an example - creating a form.When designing micro-interactions for forms, or in general, before you want to implement them, there are a few things to keep in mind: * Make sure the interaction is relevant to the user's task. It should add value and not be superfluous. * Keep the interaction simple and easy to understand. Users should be able to figure out what it does without having to think too hard about it. * Ensure that the interaction works consistently across different browsers and devices. Test it thoroughly before deploying it live. * Make sure the micro-interaction doesn't interfere with the overall form experience. It should complement the form, not distract from it.With these guidelines in mind, let's look at a few great examples of micro-interactions that can improve forms. Note that some, if not all of these, can be used in other aspects of your website1. Animated progress indicatorsProgress indicators implemented in a browser are a great way to show users how far they've come in a form and how much more there is to do. They can be animated to add a bit of visual interest and keep user engagement on a high level..2. Form field validationValidation is an important part of any form, but it can be easy for users to miss errors if they're not pointed out clearly. Micro-interactions can be used to highlight errors in real-time, making it easier for users to correct them.3. Dynamic form fieldsDynamic form fields are a great way to improve the usability of long or complex forms. By only displaying the fields that are relevant to the user's input, you can reduce clutter and make it easier for users to find the information they need.4. Confirmation messagesIt's always nice to get confirmation that your input has been received and is being processed. A simple micro-interaction can be used to display a message after a form has been submitted, letting users know that their data is safe.5. Auto-saving progressNo one likes losing their progress in a form, especially if it's a long one. A micro-interaction can be used to save the user's progress automatically, so they can pick up where they left off even if they need to leave the form for a while.These are just a few examples of how micro-interactions can be used to improve forms. By thinking creatively about how users interact with forms, you can come up with all kinds of ways to make the experience better.1. Use Micro-Interactions to Test and Refine Your UXMicro-interactions can also be used to test and refine your UX. For example, you can use them to A/B test different design elements or user flows. This allows you to see what works well and what needs improvement.There are many different ways to use them in your UX testing. One way is to use them as part of a usability test. This involves testing how easy it is for users to complete a task using your interface.For example, you might ask users to try and find a specific piece of information on your website. If they can't find it easily, then you know that you need to improve your website's navigation.Another way to use them is to A/B test different designs. This involves showing two different versions of your interface to two different groups of users. You can then see which version performs better. This is a great way to fine-tune your design and make sure that it's as user-friendly as possible.Things To Avoid When Improving Your UX Through Micro-InteractionsMicro-interactions are a vital part of any digital product, and when done well, they can enhance the user experience and make your product more engaging. However, there are a few common mistakes that can occur when designing them, which can ultimately lead to a poor user experience.Here are four mistakes to avoid when designing micro-interactions:1. Not Defining the Purpose of the Micro-interactionOne of the most common mistakes when designing micro-interactions is not clearly defining the purpose of the interaction. What are you trying to achieve with this micro-interaction? What goal does it help the user accomplish?Without a clear purpose, they can quickly become confusing and frustrating for users.2. Making the Micro-interaction Too ComplexAnother common mistake is overcomplexity. Micro-interactions should be designed to be simple and easy to understand. Making them needlessly complex can quickly become overwhelming and confusing for users.3. Not Testing the Micro-interactionBefore launching a micro-interaction, it's important to test it with actual users. This will help ensure that the interaction is clear and easy to use. It's also a good idea to test different versions of the micro-interaction to see which one works best for users.4. Not Iterating on the Micro-interactionOnce a micro-interaction is launched, it's important to continue to iterate on it based on user feedback. This will help ensure that the interaction remains effective and useful for users.ConclusionMicro-interactions are a powerful tool that can be used to improve the UX of your website or app. When used effectively, they can make your UX more intuitive, efficient, and enjoyable.Did you find this article interesting? Check out our blog for more!"
  },
  {
    "title": "Product Roadmaps: Slashing Costs, Smashing Deadlines",
    "plaintext": "Building custom software without a Product Roadmap is like trying to build a house without a blueprint. You'll end up with something in the end but it won't be what you wanted.Unlike a house blueprint, a Product Roadmap needs to take into consideration more than instructions on how to build the end product. Its role is to make it clear to everyone involved why the project is happening and what needs to be built.One of the most challenging parts of building a new application is figuring out what to build. Every feature can be designed and developed an infinite number of ways. There needs to be a way to effectively communicate the product owner's strategic vision so the finished product ticks all the boxes.At Clean Commit, we always work with new clients to build a Product Roadmap before any website or application project. They make the project move quicker, reduce costs and result in better applications.We've spent a lot of time building Roadmaps and worked out our own step-by-step process (illustrated above) for creating a watertight roadmap. This comprehensive guide will unpack everything you need to know about Product Roadmaps.What is a Product RoadmapA Product Roadmap is a clear plan to get you from idea to v1.0 of your new product. It's a clear set of expectations about what the initial version of your product should contain and what comes next.The Clean Commit version of a Product Roadmap also defines what the minimum features required for the first release of your new product. This is important because it's easy to try and build too much straight off the bat, wasting thousands of dollars and weeks (or months) of development time.Every Product Management Roadmap is a little different, but they typically contain this structure: * Answering the big questions about why the product is being built * User workflows and processes * list of intended features * Features organised into development phases or sprints * An overview of the technology that will be used to build the product * Product roadmap estimation & timelinesWe'll usually hold a series of 2-hour meetings with our clients to extract all the information we need for creating road maps. Learning a business well enough to understand how to fix their problems through software is tricky.The only thing that can make Roadmapping more difficult is when the business isn't bought in. If we're ever working with a business where it seems one of the executives isn't invested in the process, we're quick to point out the reason we've mandated Product Roadmaps.Don't take our word for it. Get a finished Roadmap.Get a copy of the actual roadmap (anonymised) that drove the development of a new platform for one of our clients.DownloadWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat happens without a Product RoadmapThis is a precautionary tale of what a software development project looks like without a Product Roadmap.James, the owner of a fast-growing online training company has accumulated too much technical debt and hit a ceiling with his software. He's been using Thinkific and it's done a decent job getting him to this point. However, without migrating to a custom service he'll never grow beyond where he is.He's validated that his customers want the new platform he has in mind and he's ready to get started!His first move is to write a request for proposal and shop around for developers. Honestly, it’s a nerve-wracking process for James but he finds someone to work with.They seem clued on and provide a quote. It seems reasonable but he's not 100% sure if it’s accurate or even how they got to their number.Despite this, James is so excited about moving the project forward that he decides to roll the dice to avoid wasting any more time.A few months pass, and the project doesn’t seem to be moving as quickly as he hoped. The developer is falling behind and tells James they’ll need more money to finish.By the time the project wraps up its way over budget, the timelines have blown out and he's not even that happy with the product.It's a made-up story, but one we hear all the time.So how do you avoid ending up in this situation? You need a product roadmap.What's the point of creating a Product Roadmap?Before we pivoted our business to an agile roadmap focus, we struggled to guess exactly what the client wanted in particular circumstances. The obvious way to fix this is to ask questions, but this gets tedious when there are unknowns popping up every day.Since we were charging a fixed price for the project, our team would make assumptions to avoid wasting time, which effectively reduces the project's profitability.This approach would always come back to bite us. Project timelines blew out, the product's UI and UX was confused and our clients lost confidence in our ability to deliver what they wanted.These problems immediately disappeared when we committed to Product Roadmapping. The process isn't just something to do for the sake of creating a planning document. It proactively solves a lot of the problems that come up during software development projects.Here are the main benefits of creating project road maps.Clarifying the business goalsAt the start of a project, I usually have very little understanding of how my client's business operates. When they approach me asking for help to build a new application, what they're really asking is help fixing a business problem.For example, a manufacturing client approached us a while back asking to build a clone of another application with a few different features.On the surface, this sounds okay, but as I started digging into their business objectives, I realised that 90% of the features in the target app wouldn't be used. The 10% of features they wanted to clone didn't fully fix the communication and quality assurance problems their warehouse team was struggling with.Clarifying the business's goals saved tens of thousands of dollars and ended up pushing us in a strategic direction that permanently solved the core problem the business was wrestling with.Reading between the lines and understanding what will make the project a wild success is one of the biggest benefits of building a Product Roadmap. This information helps the engineering team make better technical decisions.Defined success metricsA Product Roadmap needs to answer the question \"what will make this project wildly successful?\".Software development can be a phenomenal investment if the right metrics are kept in mind as the product takes shape. A Product Roadmap should address what kind of measurable goals the project will attempt to achieve.Most of the time these goals are financially related - saving money or increasing revenue.It might sound a little obvious from where you're sitting, but put yourself in the position of the product team three months down the track. The MVP is coming together but the budget is halfway spent. The backlog of remaining features is still huge, and it's clear they won't all be built. It's time to make difficult decisions about what gets built and what's left out.These kinds of decisions need to be guided by the success metrics - which features will move the needle?Getting the development team & business on the same pageEvery business is unique. Some of the little quirks about how a business runs translate directly into the way a new product should be created.A good example of this is a chiropractic clinic Clean Commit has worked with over the past 18 months.We were rebuilding their legacy patient management system and had started working on the SMS reminder system. We discovered that they treat a number of patients that work the night shift and who prefer to have reminders sent to their partners.The value of a Product Roadmap in this situation is getting the development team and business on the same page.In the example above, the chiropractic clinic is a small operation and has deep, long-lasting relationships with its customers. They don't need a solution that will scale to tens of thousands of customers. They want tools to customise how each patient is treated.The client would never think to include their detail in any kind of Request For Proposal (RFP) document they used to get quotes from local software agencies. It's only uncovered during the deep dive of a Product Roadmapping session.Talking through the featuresJust about every client that's approached us with an idea starts by listing all the features they want to include in their new application.There's nothing wrong with this approach, but it's a chaotic way to figure out what the first version of a product should look like.Think about it from the point of a commercial builder speaking to a client about erecting a new office. If the client started listing things they wanted like \"elevators\", \"motion activated fountains\" and \"a helipad\", the builder's mind would be racing about where to start and all the dependencies of these requests.Elevators mean more than one story, fountains require special plumbing, and helipads need clearance and unobstructed access.However, the client may not have thought everything through. For starters, they might not have legal permission to build more than a single-story building.Product Roadmapping allows a forum to discuss what outcomes the client is trying to achieve with their new or improved functionality. Sometimes they're on the money and describe the best solution. However, most of the time we can recommend better ways of achieving their goals once we understand why they want a particular feature.The only way to provide an accurate quoteProduct Roadmapping is only one way to provide an accurate estimate for building a complex application.Let that sink in for a second.If you've ever been in the position of requesting quotes from developers or agencies based on a set of requirements you've written, then the quotes provided have been purely based on guesswork.Those guesses aren't grounded in the goals of your business either. They're inflated to make sure that the project team can build the most expensive version of the product while still making a profit.The Clean Commit version of Product Roadmapping builds accurate estimates by starting with the main workflows users will be performing with the application. We then break down the process flows to identify the tools and features they'll need. Finally, we create user stories to describe what the user expects the system to do.This library of user stories is called the product backlog. Our team get together and agree on the level of effort required to create each feature, taking into consideration the design, frontend and backend effort.Finally, the effort estimates are translated to per-feature prices.From the client's perspective, they now have a comprehensive list of everything the new system should do and how much each feature will cost to build.Squeezing the project into a budgetRoadmap can help with pricing. Once the Product Roadmap has listed all the features and how much they'll cost, they can be arranged to fit a particular budget.This doesn't mean that the full application can be built at a discount. What it does mean is when the client has a limited budget they can pick and choose the most valuable features to include in their application that also fit within their budget.Reduces costs and timelinesThe planning process behind a good Project Roadmap focuses on the most direct path to creating a v1.0 of your platform.Often this means saying \"no\" to features and ideas brought up by the business.Getting the minimum viable product, or initial version of the application live should be the priority, and any features that are not critical to the product's success, or that can't be done manually for a short period of time, should be excluded.The benefit of limiting product features of the v1.0 is significantly reduced costs and timelines. For many applications, being live means making money that can fuel the rest of the product's development.Creating a timeline roadmap for major releasesThe last big benefit to creating a Product Roadmap is creating a release timeline roadmap that shows when each big chunk of features will be delivered.Timelines are always being adjusted as new features are added to the product backlog (there's no way to capture every single feature up front). Having a rough visual product roadmap without dates helps keep customers informed, external stakeholders looped in and the product team focused as the project moves from the honeymoon phase to repetitive iterations of development.Keeping the Roadmapping process separatedProduct Roadmapping should be separated from the main body of work. In our case, it's a service we charge a flat fee for.There's an important reason for this - it removes the incentive to rush the process and overquote the project.Agencies or developers that handle the Roadmapping process once the engagement has begun want to get it out of the way as quickly as possible. Since they're not getting paid for it, the effort is a sunk cost. So they ask enough questions to get started but miss tons of important details.By taking the time to understand what the business wants and present all the options, a lot of the \"gotchas\" are bypassed.How to create a Product RoadmapHere's the roadmap planning process our internal teams follow when creating a Product Roadmap for a new client 1. Define the business goals 2. Identify the major challenges 3. Capture the primary user workflows 4. Break the workflows into flowcharts 5. Split the flowcharts into user stories 6. List our best implementation suggestions 7. Plan the V1.0 features 8. Prepare the estimates & costsDefine the business goalsThe first step is to understand why the business wants to invest money in a new project.We like to do this through a survey to capture a range of insights into how the business is currently performing, and what role the new product will play.Our questions focus on three areas: * Business * Questions * FinancialThe ideal number of questions is somewhere between 15 - 25. Any less than and the first meeting can drag. Any more and it becomes a chore for the client to get through.These are the kind of questions we ask:What problem are you trying to solve?What does a win look like in this situation?Where do you want your business to be in 6 months, 1 year, 5 years?How long do you expect this project to run before you see profitability?What kind of business or revenue will this product generate?Why do your customers choose you over your competitors?What kind of feedback do you get from customers? What do they like about your business? What doesn't they like?What is the average lifetime value of a customer in dollars?What's the value of a new lead in dollars?What are your average customer retention and churn rates?It's helpful to have a roadmap template prepared beforehand. We maintain a list of about 100 different questions and put together a custom list depending on the kind of application the client wants to build. If it's an internal tool to help efficiency then we scrap all the questions about customer value.Once we've got the answers to these questions, we'll arrange the first 2-hour Product Roadmapping meeting. We find this length of time is enough to explore the product manager's answers and dive deeper into their answers.By the end of this session, we should understand clearly how the business makes money, what problems they've been experiencing and how a new product will move the needle.Identify the major challengesTalking through potential blockers and challenges to the project early on is super valuable because it can impact the order everything has to happen.A great example of this is a situation we found ourselves in about 6 months ago. An existing client approached us asking for help creating a lightweight version of Xero (accounting platform) that fits their processes better.One of the first things we identified during the Roadmapping process was the limited access to banking information. For their idea to get off the ground they needed a two-way sync with their bank account.This posed a major challenge for the project because bank APIs are heavily legislated. Getting a license to call and post data takes a huge amount of red tape and auditing, not to mention money.While this wasn't exactly a happy ending for our client, it saved them tens of thousands of dollars and months of wasted effort.The best way to think through the challenges is to discuss the big features and what will be required to build them. It's not an exact science but helps identify parts of the process that will cause headaches.Capture the main user workflowsWriting out user workflows is, in my opinion, the most valuable exercise any business can do when preparing a Product Roadmap. It's the best way to communicate what the application should do.A user workflow is a set of actions taken to achieve an objective.Using Facebook as an example, a workflow would be updating a profile picture. This goal requires a series of actions: 1. Signing in 2. Navigating to the user's profile page 3. Choosing to edit their existing profile picture 4. Searching through their library for a photo or uploading a new photo 5. Modifying the photo's alignment 6. ConfirmingRecording all the goals a user wants to achieve with the application gives the design and engineering team a ton of insights into what the features are supposed to be doing.The best way to gather these workflows is to get all the project stakeholders on a call and start brainstorming. You can prime the meeting participants by asking them to put themselves in the position of a particular user type (i.e. administrator, student, logged in user, logged out user) and ask what they want to use the app for.We like using Figjam to make this process collaborative (you can explore their roadmap templates which can be helpful in preparing a board for client meeting). Everyone has the chance to throw sticky notes onto a virtual whiteboard. It's difficult to think of all the possible things a user might want to do with a complex application which is why having three or four people on the call usually works the best.Break the workflows into flowchartsThe next step is to break the workflows down into flowchartsThis process is essentially what I did with the Facebook profile picture example above. It's listing all the steps needed to accomplish the end goal.We've found the best way to do this is through process flow diagrams. Visualising the flow makes it easier to understand the thought process a user goes through.Don't skip this step. It's essential for wireframing.When we start putting the wireframes together, we marry the wireframe screens up against each of the process flows to make sure the user can do all the things they need to by jumping from one screen to the next.Split the flowcharts into user storiesWriting user stories is the most time-consuming part of the Roadmapping process, but it's the foundation for the product backlog, time estimates, and an accurate quote.Each flowchart has a number of specific features required to make it possible.My approach for extracting user stories from a flowchart or workflow is to write all the features that are required to make it possible and then split those features into user stories.Using our example of a Facebook user changing profile picture, these are the features I would list out (note: I'm going to exclude login and authentication): * Image upload and storage - there needs to be somewhere for the images to live once the user has uploaded them * Media gallery - the user wants to look through pictures they've already uploaded * Compression and scaling - no one wants to resize or compress an image. * Image adjustments and editing - if the image isn't centre aligned it might need to be cropped and movedEach of these features might do several things for the user. For instance, these are the stories I'd list for the Media gallery: 1. Media sort order    As an authenticated user    When I'm adding a new profile picture    And I look through my existing pictures    Then they're arranged from newest to oldest    So I can find what I'm looking for easily 2. Enlarge images    As an authenticated user    When I'm adding a new profile picture    And I look through my existing pictures    And I select a picture    Then I want to see an enlarged version    So I can make sure it's the correct image 3. Image categorisation    As an authenticated user    When I'm adding a new profile picture    And I look through my existing pictures    Then I want my photos to be arranged into \"uploaded\" and \"tagged\" s    So I can find what I'm looking for quicklyThe challenge with user stories is being thorough and complete. They're the instructions for building the application. Getting them wrong confuses the development team, and leaving them incomplete causes quality issues and delays.List our best implementation suggestionsThere are plenty of ways to cook an egg and even more ways to build an application.No one technology is \"the best\". There are arguments for using every language and framework under the sun, and there are literally thousands of them.At this point of the Roadmapping process, we understand the goal of the project and the required features well enough to suggest the best combination of technology and architecture. Usually, this boils down to a single implementation, but we'll often list a handful of options for our client to make their own call on.This is a step where you need help from an experienced developer. Picking the right technology can speed the project up and keep everything running smoothly for years to come.Plan the V1.0 features in a release roadmapIt's finally time to put together the visual roadmap that most people would think of as the main deliverable of this process. There's two main ways you can handle the roadmap presentation at this point;Kanban boardGANTT chartWe prefer Kanban because they line up with how we manage the project in Jira.Every feature that the business wants to include in the first version of the product should be challenged. Keep in mind that the goal is to get the product developed as quickly as possible.If there's a way to manual handle a feature, then it can be backlogged. If any feature doesn't fall into the product's core value, then it can be backlogged. If there's a way to use a pre-built service instead of writing the code from scratch, then the feature can be backlogged.When you think you've got all the features sorted, take a step back and figure out if a customer would be willing to pay for what you're planning to build.In the case of rebuilding an existing application to extend its feature set, the first version of the product can be quite big and might contain most of the features. That's fine too, there are no black-and-white rules beyond getting an acceptable V1.0 of the app working as quickly as possible.Prepare the estimates & costsThe last thing we do during the Product Roadmapping process is to play a game of Planning Poker to work out accurate estimates.Planning Poker requires the project team to read through every user story and talk through the level of effort required to build the feature. There needs to be a consensus on the effort, so it's important to have a few different specialists on the call. We hold these sessions with a frontend dev, backend dev, web designer and test analyst.Everyone suggests the effort in terms of t-shirt sizes; * XXS * XS * S * M * L * XL * XXLIf any feature is judged to be bigger than XXL, we find a way to break it down into smaller pieces.Each shirt size relates roughly to an amount of effort. XXS is about 1 hour of effort when the overheads are added like testing and project management. M is 12 hours, L is 20 hours and XXL is 40 hours.When we've reviewed all the features and agreed on estimates, I'll translate the t-shirt sizes into dollar values and present them to the client.Since each feature has its own estimate, our clients can pick and choose which set of features they want to combine into their product to meet their budget. They can also see an accurate breakdown of the effort and costs involved in each part of their vision.Show me an agile Product Roadmap exampleWe're working on anonymising an agile Product Roadmap so you can download it and see how it all works.It's not available right now, but will be in less than a week so set a reminder to come back and grab it when it's ready.The example Product Roadmap is a special case because it's part website and part application. We run a different kind of process to capture the information architecture and ideal layout of a website which will be reflected in the Roadmap.Wrapping upA Product Roadmap plays an important role in defining the product vision, aligning the interests of internal stakeholders and the development team, and acting as a communication tool.The Roadmap creation process is time-consuming but incredibly valuable for setting the project on the right course. Once it's fully written, it becomes a pretty easy ongoing process to keep it up to date.As an agile team, we're clearly big fans of Product Roadmaps and are always happy to provide advice on how we've made it work for our clients. Check out our services, and if you've still got specific questions about how to make your own internal roadmap work then leave a comment below and we'll get back to you!"
  },
  {
    "title": "How Long Does It Take To Make An App?",
    "plaintext": "The good news is that there is a scientific process to figure out how long your application will take to build! The less good news is that it requires several specialists to have an intimate understanding of your business model and to analyse each feature your app will include.But before I unpack how this process works and how you can prepare, you're probably thinking, \"that's great, Tim, but I just want a ballpark at this stage\".When new clients asks \"how long does it take to make an app\"? they're usually not happy when I tell them \"I don't know until we do a deep dive\", but it's the quickest, most truthful answer.When they push for a rough estimate, this is the generic breakdown I give them: * Product Roadmapping - 2 to 4 weeks * Wireframing - 2 weeks * Clickable prototyping - 2 - 4 weeks * Design system & high fidelity design - 3 weeks * Technical planning and project setup - 1 week * Developing API and backend logic - 6 weeks * Building frontend - 12 weeks * Testing & QA - ongoing * Client review & user testing - 6 weeksSome of these activities will overlap. For example, developing the API will happen in parallel with building the frontend. Client review & user testing usually happens while development is still ongoing, and parts of the design system will continually being constructed.Over the past few years, we've found that small apps will take three months to build with a month of planning at the start. If you skip over the planning stage, then it's likely to be closer to six months.Wait a second... these timelines don't seem rightThe timelines above suck, and they're a poor measuring stick. That's why I try to avoid giving them unless the client pushes.The first reason they're not that useful is just about every meaningful app development project is run under some kind of agile methodology these days. Unless you're planning to build an ultra simple app with basic features, any technical partner you work with should suggest an agile approach (if they don't, run for the hills!).Our team runs projects under an agile methology where we design, develop and test a set of features every two weeks. Our clients are constantly providing feedback, changing the scope of what has to be built, and adding or removing features.In this situation, our clients still want to know when the app will be finished, but that answer is always changing. For instance, if they decide the app needs to integrate with Zapier or Integromat, that will shift our dates by a couple of weeks.The second big reason the timeframes above aren't useful is they don't take your business idea or feature set into consideration.There's only one way to accurately answer the question \"how long does it take to make an app?\" and that's Product Roadmapping.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitProduct Roadmapping is \"the way\"A Product Roadmap is a clear plan to get you from idea to minimum viable product (MVP). It’s a blueprint for your project that bridges the gap between your team and ours.This is the most scientific approach for calculating your project's development timelines.Product Roadmapping takes a few weeks and is critical to figuring out how long an app will take to build. Because it's the first step in figuring out all the answers, I will use this section to outline how it works.The biggest problem with trying to estimate project timelines is that the development company you're working with doesn't deeply understand your business or the project's goals. This results in things being built that don't line up with your team's expectations.Product Roadmapping eliminates this problem and provides a framework for building detailed estimates. Here's how it works.Business goalsThe first step is to do a deep dive into why you're building an app.Sometimes the businesses we're working with will brush these questions off with explanations that they're simply trying to improve on current products that do a poor job.This doesn't help us. We need insights into their business and what stopping them from ruling the world.Our team have built a ton of applications over the past few years. We've solved problems in some really creative ways. Often, the solution fits the problem much better than our clients expected. If they had just come to us asking for a solution without first unpacking the problem, they would have ended up with a poor-quality app.To understand a new client's goals, we use a combination of surveys and meetings to ask as many questions as necessary.We've unpacked this process in much more detail in our extensive guide to Product Roadmapping.FlowsThe next step is capturing the major user workflows. These are the things users want to be able to do with the application.Using Instagram as an example, a workflow might adding a new image, changing profile picture, or sending a message to another user.Thinking through the kinds of actions your users want to be able to do with the app is (in my opinion) the best way to capture all features that need to be built.Features & user storiesOnce the major workflows have been recorded, they need to be broken down into smaller bite-sized pieces. Sticking with our Instagram example, changing a profile picture would require these steps: 1. Open app 2. Select profile 3. Select profile picture 4. Browse gallery for new picture OR add new image from device storage 5. Edit picture 6. ConfirmFrom these workflow steps, we can determine a handful of features like an image gallery, a way for the app to store images, and editing tools.Each of these features needs to be broken down even further into the way users will expect them to work.Defining every feature in your app this way means it's had thought put into the way it should work. This is the secret sauce to coming up with an accurate timeline.Delays in a project are always caused by implementing features that were poorly thought out.Planning poker for estimatesOnce all of the stories have been prepared, it's time for the development team to sit down and provide effort estimates.Our team handle this through a process called planning poker. During this game, we read through each user story and each provide an estimate on how much effort is required. We'll debate our answers until everyone comes to a consensus.By the end of the process, we've estimated the entire feature set and can put the number of man-hours down that will be required to build the app!Planning your minimum viable product featuresThe final step is figuring out what features will go in the first version of the application.Getting the v1.0 up as quickly as possible should be the goal here. Sometimes this requires saying \"no\" to cool features and keeping the feature set simple. Other times, it means doing things manually for a while until the paying customers arrive and inject cash into the business.Either way, figuring out what features will go into the minimum viable product greatly impacts the timelines. It's one of the main reasons predicting how long the app will take to build is impossible until this process has been hashed out.Give me a rough timelineKeeping in mind that you're probably only interested in knowing how long your app will take to build, we'll briefly explain each step in the application development process and how long it can take for different kinds of applications.You should be able to think through your concept, compare it to our examples and determine a very rough estimate of how long it takes to create an app.This is how we'll define the size of projects:Small project * Simple website * Chatbot * Scraping scriptMedium project * Flight and travel websites * Headless eCommerce websites * Budget planning applicationLarge project * Dating website * Online medical consultation application * Any app requiring machine learning or artificial intelligenceStage 1: Product Roadmapping aka Discovery Stage (1 month) * Small project (2 weeks) * Medium project (2 - 6 weeks) * Large project (2 - 3 months)Every project should start with a Product Roadmap or a period where the requirements are collected.When our team undertake this process, we usually schedule at least 2 two-hour meetings to hash out all the details. Then it's a case of building out the process flow diagrams and writing hundreds of user stories :).The reason this process can take so long is: * Everyone is busy * The best way to collect details is in-person meetings * There's a lot of undocumented information in key stakeholder's heads that needs to be extracted and recordedStage 2: Development Sprints (2 weeks, repeating) * Small project (2 - 3 months) * Medium project (~3 - 6 months) * Large project (6 - 12 months)Development sprints should focus on building a defined set of features every two weeks. During that time, the features will be designed, prototyped, developed and passed back for review.Building the app piece by piece and sending it back for client review is a cycle. As bugs or new features are identified, they're added to the pile (aka backlog) to be built in the future.Stage 3: Deployment * Small project (1 day) * Medium project (1 - 3 days) * Large project (1 week)Once all the features have been designed, developed and reviewed by the business, it's time to deploy the application to production.This process usually involves some server management, which takes a few hours. The longer process is getting the right accounts up and running, domain credentials configured, smoke testing, and ironing out any last kinks.A developer told me there are more than three stages!Some development companies will do things differently.There's no problem with jumping straight into a full app prototype in Figma so the concept can be visualised. We take this approach sometimes when it's called for.Similarly, there are times with complex apps when the tech stack and level of sophisticated integrations require most of the application to be built in one big sprint.Keep in mind with the breakdown above that good apps continue to grow and evolve. Unless you're building an internal tool for a very specific purpose, you'll need to add features, change how things work, fix bugs, and let the app evolve.So the initial finish line continually gets pushed back once the \"first draft\" is out the door.The big variablesHere are the variables that have the greatest impact on your app's development timeline:Your app ideaI spoke to a potential client a little while ago who was pushing me to provide an estimate for her app.Her idea was: * a new social media app that featured machine learning * would make recommendations based on a wealth of user input * needed to integrate with the blockchain * support cryptocurrencies for paying users * be available as a hybrid app and a web app * address a range of issues TikTok and Instagram hadn't yet figured outWhen asked how long it would take to build, I told her maybe 5 years if we're lucky!This is an extreme example, but the point I'm making is that the complexity if your idea is the biggest variable to the timeline.Every feature you want to build takes time. The more complex the feature, the more thought it requires and the longer it takes to design and develop.Technology stackAs a rule of thumb, mobile apps take longer to build than web apps.There's no point in building a mobile app if it's not going to work on both Apple and Android devices. And phone chargers aren't the only thing that's unique to mobile devices. Each operating system has unique requirements for the kind of code it will run.Frameworks like React Native and Flutter have solved some of these problems by allowing one codebase to be written that will run on different devices. Even so, there's quirky behaviour that pops up on different devices.Getting an android app approved on the Google Play Store can be a bit of a process... but it's nowhere near as bad as getting an iOS app approved on the Apple App Store. There are layers of unclear instruction, heavy restrictions and many hurdles, all of which take time to navigate.On the other hand, web apps run in the browser. The browser companies have already put the effort into getting their product (Chrome, Firefox, Safari, etc) to work seamlessly across all devices.Are you building a prototype?Prototyping is a process of creating static images and then connecting them through a tool like Figma so they feel interactive even though they're just pictures.App prototyping is excellent for idea validation where it's hard to visualise how different screens and features will interact.Even if you're following the rapid prototyping methodology borrowed from the physical engineering industry, the process takes time.Medium applications take a week or two to prototype, but they're not usually the apps that receive prototyping. Larger, more complex apps can take weeks to prototype fully.Mid project changesChanging things halfway through a project is the natural enemy to project management. It can cause development timelines to be thrown out the window.Unfortunately, they're a normal (and necessary!) part of app development.There's no way to anticipate the magnitude of mid-project changes, which is why we run projects under a scrum methodology, where we anticipate constant change.Wrapping upPutting an exact timeline on the app development process isn't impossible, but it's incredibly difficult without knowing all the project variables. The best way to capture these details and figure out a timeline is Product Roadmapping.Going through the Product Roadmapping process isn't for everyone, and chances are you're probably just trying to work out how long your app idea will take to get off the ground. You can use the rough timelines we've laid out across the article to build an educated guess.A successful app takes a decent amount of time to build. Getting your product strategy dialled and really thinking through how your app will come together is going to save you a mountain of time and frustration down the line.Let me know your thoughts in the comments section below. I want to answer your questions in a way that makes sense and don't know if I'm doing a good job unless you tell me!"
  },
  {
    "title": "Is Gatsby a CMS?",
    "plaintext": "No, Gatsby is not a CMS. It’s a JavaScript framework for building websites and user interfaces. A Gatsby website needs to be paired with a CMS otherwise any content changes will need to be made through code.Most of our clients have experience with WordPress so they equate building a new website to having a system that allows them to edit content, add images and create new posts. This isn’t really how a plain website works, though.Websites are a collection of code your browser interprets and displays nice fonts, images, links and interactive functionality. Maintaining these assets is time-consuming without a good “system” for managing all the content (thus the name “content management system”).Gatsby cuts out the middle-man and removes the CMS. To simplify its purpose, it’s a way of writing structured code for building websites. Instead of writing HTML, CSS and JavaScript in their raw forms, Gatsby provides a kind of template for speeding up the code writing process.To clarify, Gatsby doesn’t have a graphical user interface. There’s no way to log into it. Unless you're a developer, you’re probably not going to interact with Gatsby.Integrating Gatsby with a CMSThe Gatsby development team and their partners have put a mountain of effort into building plugins for connecting with various content management systems. Remember that Gatbsy doesn’t have a graphical UI, so plugins are configured within Gatsby’s codebase. However, they’re just a couple of lines of code and do most of the heavy lifting in connecting to a new CMS.Over the past five years, a swarm of new headless content management systems have arrived on the market. Here are the most popular names on the market: * Contentful * Ghost * Sanity * Strapi * Tina * Prismic * Netlify CMS * Forestry * Headless WordPressBrowsing through this list, you might be wondering what “headless” means. I won’t go into detail because I’ve gone into depth on this topic in my article, covering everything you need to know about headless eCommerce.To get your headless content management system connected with Gatsby, you’ll first need to sign up for an account and potentially a paid membership. Most modern CMS’s have a free-tier for small businesses but can get quite expensive to unlock all their features (especially Contentful).Once you’ve signed up, you or your developer needs to configure Gatsby with the CMS plugin. Depending on the content across your site you want to be able to modify, there can be a fair bit of development work required at this point.The Clean Commit team has built dozens of Gatsby websites over the past few years. On average, a new 15 - 20 page website will take around 100 to 150 hours of development effort to build and integrate with a CMS.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitDo I need a CMS for Gatsby?If you’re a developer and don’t mind writing posts in markdown, then you don’t need a CMS for Gatsby. However, having a CMS for Gatsby will make life easier in most cases.I find writing posts in a nice content management system a lot easier for a couple of reasons. Firstly, grabbing images from your local device storage without having to write a path to the file is quicker and easier. Secondly, it’s nice to see how the content will look when laid out on the page instead of being contained in an integrated development environment.Developers may argue this point. If you’re used to writing code all day, then you probably love the opportunity to write posts in markdown. For the other 99.9999% of the population, this way of managing a website is tedious.Not to mention, if changes are required to any page across the site, they’ll need to be made directly in the codebase. For instance, changing an image on your site’s homepage requires changing the image path, rebuilding and redeploying your site.How do I use Gatsby on WordPress?To use Gatsby on WordPress, the two systems need to be integrated with three plugins. For WordPress; WPGatsby, WPGraphQL and for Gatsby, the WordPress plugin. However, Gatsby is not a plugin or theme to be installed into WordPress.The best way to think about the relationship between Gatsby and WordPress is that Gatsby contains all the rules for how the user interface will display, while WordPress provides the tools for making easy content changes.Traditionally, WordPress would do both of these things. The way visitors see the website is controlled by a theme that drives the HTML, CSS and JavaScript.When you introduce Gatsby, WordPress forfeits control over how the user interface looks. The customer-facing part of the WordPress theme is replaced by Gatsby.Unlike WordPress, with Gatsby there’s no way to use a drag-and-drop builder (i.e. Divi or Elementor) to build new pages. All visual changes on the site now need to be made through code.This is an important consideration if you’re thinking about adding Gatsby into your existing website. This kind of change needs to involve a technical team to guide you through the process. More often than not, it makes sense to completely rebuild the look and feel of a website when introducing Gatsby into the architecture. We go into more detail in our article all about WordPress vs Gatsby.What is the Gatsby Theme?Gatsby is not a WordPress theme, it’s a coding framework for building websites. WordPress and Gatsby can work together, but it requires custom development.Gatsby does have themes. They’re a quick way of packaging up the configuration and features of an existing Gatsby project to share. They’re also called “starters” because they lay some of the groundwork for a new website but require additional customisation before the site can be considered complete.Our team has created a tidy Gatsby starter called Henlo. It’s open source and completely free. If you’re a developer, feel free to grab a copy.Did you like this article? Find out more on our blogHave other Gatsby questions?This concludes the article on common Gatsby questions. Since our team builds a lot of frontends with Gatsby, we wanted to address some of the tricky questions our clients put to us. For more information, you can read our article on The Pros and Cons of Using Gatsby.Understanding what Gatsby is and how it differs from WordPress is tricky to anyone who hasn’t already got a firm grip of computer science and internet technologies. We’re trying to break down these barriers and simplify the concepts so you can make better business decisions for your website architecture.If you have another Gatsby question, add it in the comments section below, and we’ll get back to you in a day or so."
  },
  {
    "title": "Digital Prototyping - The Ultimate Guide",
    "plaintext": "Digital prototypes can be an enormous time saver during the software development process. Digital prototyping offers a rapid approach to collecting feedback. In our case, the \"customer\" is usually a client that we're building an app for. Instead of spending time on a high-fidelity UI, or coding time-consuming features, we can spin up a prototype in a week and get answers quickly!Our team have become big fans of digital prototyping over the past few years, and it's saved our butts more than once. Sometimes when we think we understand what our client wants, we're way off the mark.This article will lay out all the insights we've picked up on the topic of digital prototyping. Please leave a comment at the bottom of the article if you get any value from our guide!What is digital prototyping?Digital prototyping is the process of using low-fidelity wireframing or rough illustrations to quickly build a representation of a product or idea. The key ingredient to prototyping is interactivity. A digital prototype only becomes useful when it can be used like an actual product.\"Interactivity\" in digital prototypes is really just letting users click on links, buttons and features to show them roughly what will happen in a real product.How to create a digital prototypeWhen our team creates a digital prototype, we'll start with a Product Roadmapping Session to collect all the details about what needs to be built, the goals of the project, and what will make the project a wild success. I won't go into this in any more detail because I've written an extensive guide to Product Roadmapping that you can check out.Once we've got the details of what the client is looking to build, we'll map out a handful of super rough user journeys. Users want to achieve particular goals when they use any application, and this usually involves navigating between several pages.For example, a user journey for Facebook might be changing a profile picture. The steps for this journey would be: 1. Log in 2. Navigate to profile 3. Open media library 4. Pick a photo or upload a new image from device storage 5. Edit photo 6. Confirm 7. Navigate back to feed to check implementationThis journey would require the following screens: * Login screen * Password reset screen (in case they can't log in) * User profile * Media gallery * Image editing screen * Confirmation modal * FeedOnce we've got all the screens laid out with arrows showing how they connect, it's time to move on to the low-fidelity design.Since we've been doing this for a few years now, we've got a couple of Figma wireframing libraries with all the components we need to quickly build indicative user interfaces. If you're new to digital prototyping, it can be easier to do this part manually by drawing boxes.The goal of building the low-fidelity design is to show where all the major components will sit in relation to each other. Don't worry about graphic design during this step. The colour, size and styling of your rough components don't matter. But if a component needs a button, dropdown, filter, input or field, it's critical to reflect this in the final product.Keep in mind that prototyping is supposed to be fast. It's okay if what you produce isn't perfect, as long as it aids the conversation.The final step of prototyping is animating fields and controls, and linking the screens together. Users should be able to click on anything they normally would on a website and see it respond in a logical way. i.e. Clicking on a dropdown field should show the list within. Similarly, users should be able to jump around from screen to screen to emulate how a user would actually navigate around the product.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat's the benefit of creating digital prototypes?Prototyping saves time and money, assists hard conversions, and results in better products. There's almost too many benefits of creating digital prototypes, but we've done our best to summarise the things we thought were most important:Acts as a visual aid for detailed feedbackHave you ever tried to articulate a visual concept? It's difficult, and sometimes you'll just end up grabbing a pen and paper to draw what you're trying to explain. This is how digital prototyping works. It helps by allowing feedback to be represented visually.Helps support early user testingLarge applications can take months to get to the point where users have a chance to provide feedback. Prototyping short circuits that process and allows users an early opportunity to test the product.Virtually explore difficult conceptsSome concepts are hard to understand and even harder to design. Since prototyping doesn't focus on the detail, but instead goes for the 10,000 ft view, it allows some of these concepts to be explored without getting stuck on the minute details.Verify user needsThe biggest risk to any new product is that it's not going to fully serve the user's needs. This usually happens because the app creator thinks they have a great idea that people will want without first checking if users actually want it. Prototyping provides a rudimentary way for product creators to check with their users and verify that their tool is going to make life easier.Highly collaborativeCollaboration is a key to any successful project. When our team works with clients, we meet once a week and run through everything we've been working on. Introducing prototyping into this situation lets our clients work with us to troubleshoot problems that require their industry knowledge and our technical expertise.Verify business goalsSometimes businesses don't understand their own goals, beyond making money and reducing costs. Prototyping forces them to see a solution in action and consider whether it's going to solve their problem.Speed up the product's developmentBuilding applications can be quite quick if all the details are laid out in full and the amount of re-work is kept to a minimum. Spending time on prototyping helps catch some of the problems that would have otherwise popped up during development, causing much longer delays to the product's release.Quickly test and validate new ideasPrototypes are quick to build and quick to change. That means they're a good way to validate new ideas that that product team might have thought of at the 12th hour (or even during a meeting).Shared understandingA problem that is difficult to avoid in software development is assuming everyone understands an idea the same way you do. For technicians, we recognise limitations of particular technologies and concepts, but this isn't true for all entrepreneurs. Similarly, developers often misinterpret industry-specific features because they don't have all the information on how things work. Prototyping allows both parties to come to a shared understanding because the details are visually hashed out.Source of truth for designers and developersOnce a project gets moving, there are often a dozen different places information is gathered from; the Product Roadmap, user stories, acceptance criteria, emails, client meetings, project managers, etc. Consolidating these details into a prototype allows both designers and developers one source of truth to check as they start building the product.Digital prototyping software & toolsWe're going to list a couple of the prototyping tools we've used at Clean Commit. This isn't going to be a comprehensive list of 100 different tools. To be honest, you only need one tool, and it's far and away the best, and it's free.FigmaFigma is hands down the best digital prototyping tool on the market. While it takes a little while to learn, it's significantly simpler than something like Photoshop, which takes training to use.Figma is great for prototyping for a few reasons. Firstly, it's a cloud-based app where each user's changes are being reflected in real time. You can see other users' cursors flying around the screen, and as they make changes to the prototype, everyone gets to watch. This makes collaborative sessions super productive.Secondly, it offers all the tools you need to build prototypes quickly and connect them together. Animating dropdowns, clicking checkboxes and linking between screens is quick and easy.Thirdly, Figma has a paired prototyping product called Figjam that is kind of like a digital whiteboard. It provides quicker, more block-like tools for building prototypes and simple user interfaces.Finally, Figma has been so well received by the design and development community that it now boasts a massive library of templates. Want a wireframing template to speed things up? No problem, there are a dozen to choose from.Adobe XDAdobe XD is another excellent tool that has many of the traits of Figma. Adobe XD is the choice of professionals who are already deep into the Adobe world. Since Adobe charges a membership fee for access to their tools, it's a premium tool that may already be at your disposal.To be frank, we've used Adobe XD for a handful of projects and pretty much always convert the project to Figma.Digital prototyping examplesRather than share a finished prototype and risk upsetting one of our clients, I've recorded a video showcasing prototyping samples we've recently finished. Check it out below.Digital prototyping costsIf you're building your own prototype, then all it will cost is time and effort. However, if you're working with an agency, expect to pay somewhere between $5,000 and $20,000, depending on the project you're building and how many team members need to be involved.Before you start to panic, companies that charge the high of the estimate often discount the application development project by some portion of that cost. That's how our team operates, however we don't charge nearly that much!Digital prototyping alternativesCreating a digital prototype isn't the only way to approach idea validation. For some projects it would be wasted effort, because the parties have a template to follow.We're working on a project right now that fits this description. It's a custom, lightweight version of an existing tool. Since we can see how that tool looks and how it operates, there's no need to create a prototype.The alternative in this situation is to build a series of proof of concepts and a high-fidelity design. A proof of concept is a technical experiment to prove that something can be done. Usually with a challenging app, that means building a slimmed down version of the most difficult features.A high fidelity design is a static version of the finished product. It's detailed and should look exactly like the finished design.ConclusionThat's it for this article on prototypes (more from our team can be found here). We've covered a few of the questions we get asked frequently by our clients. If you have more questions, want to see more examples, or need clarification on your own project please add a comment below and we'll respond in a day or so!"
  },
  {
    "title": "Digital Product Design Process",
    "plaintext": "Digital products have the unique ability to scale to global proportions with relatively few fixed costs. This means that successful products can make serious bank, which is no secret given how much money Facebook, Google, Apple, Netflix, Amazon and the other tech goliaths are reporting.These companies' success and the low barriers to entry have resulted in millions upon millions of new digital products hitting the market over the past decade. It's reached that point that that digital product design is synonymous with designing software.Of the countless apps that hit the market every day, most (almost all of them) are poorly designed and are unlikely to end up with any users. Some of these apps are probably really cool and helpful. But poor design doesn't just mean looking sloppy. It's a general assessment of how good a product is at helping users do things.A quick note about Clean Commit and how we help our clients build great products. Designing useful and impressive products is super difficult without help. If your business has an idea you're committed to getting off the ground, we'll help you through the product development process, by thoroughly planning for success and figuring out the quickest and most cost-effective path to get your product up and running. Reach out to speak with Tim, our co-founder and project manager, about feedback on your idea.Before You Start - A Cautionary TaleYou've noticed a gap in the market and have an idea for a product that will do a great job where other businesses have failed. You're excited by this idea and desperate to move forward before someone else steals your idea.You start researching approaches to designing digital products. Maybe you put some wireframes together or even work on the high-fidelity designs.Not wanting to waste any more time, you find someone to turn your designs into a minimum viable product.Eventually, after a lot of questions, delays and some misunderstandings, your product is built! It's go time. You start spamming the forums; quora, reddit, Facebook groups, Linkedin, TikTok, any audience you can find.Your first five users sign up! Then they disappear. Another five users join and leave just as quickly.Stress takes over. You've spent tens of thousands of your own dollars getting the app built and it's almost like users don't want to use it. You don't know what to do. Redesign? Add more features? Pay for more ads to get more users?You think back to the start of the project and wonder what went wrong. The product has a great design, it's usable, there are great features, but something is horribly wrong.You missed the important step of market research; checking with your users if they want what you're offering.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitCheck users will pay for your ideaWhile it's not really part of the digital product design process, user testing and user analysis to see if people will pay for your product is arguably the most important part of building any new product.My company, Clean Commit, learned this lesson the hard way with a build-your-own quiz platform we built. It's so easy to assume that users want a product you believe is awesome.There's a bunch of ways to go about user and market research. We're not going to go into too much depth since we're focusing on the design process. Here's the approach we recommend taking. 1. Build a prototype OR no-code MVPNo-code tools have come a long way. Services like Figma make it easy to create something that looks exactly like an application but is just a series of static images joined together.Depending on your idea, building a no-code MVP might be a better idea. You can set up the customer-facing website with Webflow, add forms with Typescript, collect and manipulate data with Google sheets, and connect everything with Make (formerly Integromat).Creating a rough version of your app does wonders for helping potential users express their thoughts. 1. Gather user feedbackThere's no easy way to do this. You need to identify your target audience and reach out to them asking for feedback.I get dozens of emails every day from people I don't know, asking for things. 99% of them go straight to trash. The only emails I take the time to read are the ones that offer to give me something in exchange.Offering something doesn't mean \"I'll let you test my app\". There's nothing in that for the customer. It needs to be something legitimate.A great technique that I've tried a few times (but takes a lot of effort) is to bring customers onto your podcast and secretly ask questions about your product idea. If you don't have a podcast (who does, honestly?) then start one.If this sounds like too much effort, there are paid services that bring users in to validate your ideas. The problem we've found with these services is it's more difficult to find customers who are actually part of your target market, so the feedback is too general. 1. Market researchThere's no point building something that already exists. Yes, your idea might be \"better\", but it's easy to forget that most well known products are backed by investment, run established teams, and have a huge head start.Finding a competitor that's already claimed your idea can be incredibly disappointing, but it's a signal you need to pay attention to.Where to start the design process?There's a generic answer here about \"defining visions\", \"ideation\" and \"strategising\", and then there's the way product design agencies actually handle this process.My team have worked with dozens of clients and have a watertight process for building a blueprint before any product design starts. The process is called Product Roadmapping and it's a huge money and time saver for any business that's about to invest in building a new product. My guide to Product Roadmapping is quite detailed, so I won't rehash too much of the content, but here's the summary of the steps.Define the goalsBuilding a wildly successful digital product is almost impossible if you can't put your finger on what will make it successful. For some businesses, this is saving their team 50 hours of manual effort each week. For others, it's building a new service and reaching 1,000 paid users.Different goals will influence the kind of design and development decisions during the project. For example, if the tool is being built to improve staff efficiency and is intended for a team's internal use, there's no point adding tool-tips or dumbing down the interface for the general public.Our advice is to avoid over complicating this step. The best way to define success criteria is to answer these questions: 1. What problem are you trying to solve? 2. What happens after you solve this problem? 3. If you could wave a magic wand and create a new solution, what are the three qualities you’d most want it to have? 4. What does a win look like in this situation? 5. Where do you want your business to be in 6 months? 1 year? 5 years? 6. When do you expect this project to turn a profit?When we walk clients through the Product Roadmapping process, we ask take them through a list of 25 - 30 questions of this vein that dig deeply into their goals. Almost everyone we've worked with has admitted they didn't think through this part before starting, and have gained some serious insights into what they're trying to do.Capture the flowsRecording user flows accurately is the secret to creating great software. User flows are the series of steps a user takes to achieve an outcome. A great example is changing your Facebook profile picture. The steps to achieve this outcome are: 1. Log in 2. Open your profile 3. Select to edit your profile picture 4. Browse your media gallery for a new picture or upload a picture from your device storage 5. Edit the photo if it needs cropping or filters 6. Confirm 7. Go back to your feed to double-check it's implementedDigital product design needs to accommodate these user flows, or user journey mapping in ways that make sense. It's a similar concept to sidewalks which need to be paved logically for pedestrians to get to their destination quickly.If you can't answer the question, \"what do my users want to do with my app\" then you need to take a step back and figure that out.Record the featuresOnce all the primary user flows are laid out, it's time to break them apart into features so you have a full list of everything that needs to be designed.Our team have adopted a modified approach to writing user stories, which is a clean way of describing what a feature should do. Using our Facebook profile picture example again, one of the features would be photo editing.The user stories for this feature would look like this:Resizing & croppingAs an authenticated userWhen I've picked an image to editAnd the image is displaying at it's default aspect ratioThen I can resize the display area to make it bigger or smallerAnd I can crop the edges of the photo to make it a different shapeSo the photo will display at my ideal ratio and sizeFiltersAs an authenticated userWhen I've picked an image to editAnd the image is displaying in the editorThen I can apply any available filterAnd the filter will visually apply to the imageSo I can see how the filter will change the imageThere's no shortcut through user stories. If you're planning to move your digital product through a development phase, the stories will form the foundation of your requirements.Time to design - start with a prototypeNow that you've got your blueprint, it's time to move on to the design phase. The best advice I can give you is to frequently consult your customers during this phase. And the easiest way to do that is to build a digital prototype.We've written a detailed guide on everything you need to know about digital prototyping, so we'll just summarise the bits you need to know. * Prototyping is best done with wireframes instead of high-fidelity designs. * You should be changing it rapidly and frequently, and that's quicker if you're not creating a detailed, colourful design. * User your user flows as the foundation for your screens. Each user journey should be able to complete simply and directly. * Every button, field, input or functionality element of your product should be reflected interactively. * The final result should be a clickable prototype that feels like a product but is just a series of static images connected together. * Figma is our pick of tools for prototypingWhen we build prototypes for our clients, we'll walk them through each of the major user workflows within the prototype and get their feedback along the way. They might point out steps that are redundant or things that don't make sense.This feedback is reflected as quickly as possible in a new prototype and we go through the motions again.The closer we can get during the prototyping stage, the less time-consuming revisions we need to take care of during the design or development process.High fidelity designWhen your prototype is working well, it's time to lay a nice coat of paint on top. Turning your wireframes into a high fidelity design is fairly straightforward, but there are a few problems you can run into that make the next steps really difficult.The best advice I can give is to duplicate an exact copy of your wireframes and replace each element with its high-fi replacement. Using this approach, you avoid missing elements that have already been discussed and proven to be useful.Capture all the statesOne of the things new product designers miss while designing their new products is to think through the different states of the functional components. This means showing what dropdowns look like, creating confirmation notices, showing validation messages, and being able to answer the question \"what happens when I click this?\".When it comes time for your product development team to take over, they'll be asking these questions. Nothing slows the project down more than having to make assumptions about how the product should work. It's demotivating for developers and creates frustrations.Build your design systemThis is an optional step, but having a collection of components can speed up bigger agile design projects.Having an atomic design system can also be a huge time saver if you're making constant changes to your design. Imagine having 50 screens that all use the same navigation and then needing the modify the navigation. This isn't a problem if every piece of your design is built from a single design system. You just need to change the navigation elements in one spot!Key TakeawaysDesigning a digital product is 90% planning and 10% execution. Even sloppy designs can make customers happy if they're built to help users achieve the results they want quickly. We recommend starting with a prototype, turning that into a high-fidelity design and capturing all the individual elements in a neat design system.If we've missed anything or you have questions, leave them in the comments section below and our team will respond in a day or so!"
  },
  {
    "title": "Next.js Pros and Cons",
    "plaintext": "Developing fast, SEO-friendly web applications can often be complicated and inefficient. Next.js is a simple yet powerful way to bring a vision to life. Are you looking for an answer what Next.js actually is? In this post, we’ll go over everything you need to know about this framework, including its pros and cons and whether you should use it for your project.Next.js has become the framework of choice for the Clean Commit team. Over the past couple of years, we’ve tried dozens of different technologies and Next.js is the one that’s stood out. Reach out if you need help from folks that have completely jumped on the Next.js bandwagon and know the platform inside and out!What is Next.js?Next.js a framework for writing the code that runs on a browser. Browsers can only read particular types of code (HTML, CSS, JavaScript). Writing websites or applications in these raw forms of code is completely fine, but it’s slow and inefficient. There’s a ton of repetition, which is a programmer’s natural enemy. Next.js offers a set of tools for speeding this process up.However, this is selling it a bit short. It can also build sites to generate statically (without needing a server), or render content from a server (dynamically). Essentially, it provides the building blocks for creating web applications that load quickly and perform smoothly.What is Next.js used for?As arguably the hottest frontend web development framework of 2022, Next.js can be used for some really cool projects. Given its ability to handle static site generation (SSG) or server side rendering (SSR), it’s quickly become the go-to for larger companies website development. However, it also makes an excellent frontend for decoupled applications where data is being fetched from an API.The role of a dedicated frontend framework has been dominated by React, Angular and Vue in the past. Next.js is pushing its case for being mentioned in the same conversation.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAre Next.js and React the same thing?Next.js works on top of React (check out our article about Next.js vs React), which is a JavaScript library created by Facebook in 2013. The range of UI components that are included in React makes creating user interfaces a more easy and efficient process for developers. However, at the end of the day, it’s just a library and doesn’t offer opinions on how applications should be built.Next.js and React aren’t exactly the same thing, but any developer who is familiar with React should be able to understand what’s happening with Next.js (JavaScript) code (assuming it’s well written!).These two popular frameworks can seem quite similar, as they both operate on reusable components that are relatively simple to develop and integrate into your web applications. Next.js was actually created to fill in some of the gaps left by React. The main difference is the way content is loaded onto the page.React displays content through client-side rendering, which means the end-user loads all the page’s elements. This can be bad for performance, as it takes a while for the browser to read through all the code. By using Next.js, you’re able to do things like server-side rendering, which means the server reads through code and tells the browser what to display on the page. Server-side rendering creates faster, more versatile web applications.Next.js is a fairly rigid toolkit, so there’s “limited” flexibility when it comes to how apps are structured. All pages are routed through a system of files and folders. React provides a lot of freedom for how you want to structure your application, as it’s simply a library of frontend components - not a framework.The “limited” flexibility we’ve mentioned above isn’t an issue for 99% of applications. Our experience with Next.js development is that it can do everything we need and we’ve had great success using it optimise website performance and enhance user experience.Next.js FeaturesThere are a number of core React features that Next.js significantly improves. It also adds some completely new functions. Let’s take a look at some of these features.Data Fetching & Pre-renderingOne of the most important functions of any web application is retrieving information from the server to display the right content to users. This is referred to as data fetching, and it can have a massive impact on how your app performs and behaves.Next.js provides heaps of flexibility when it comes to data fetching, giving you the ability to render content in different ways depending on the situation. * Server-Side Rendering - converts code into a fully rendered page entirely at the server’s end. Browsers request information from the server and instantly receive a fully rendered page in response. * Client-Side Fetching - A full “stale” version of the website is delivered instantly, while the new data is fetched. This is more awesome than it sounds. It allows for pages to be loaded incredibly quickly, but also dynamically! * Static Site Generation - Generating as much of the dynamic content ahead of time and storing it on a content distribution network, so no interaction with the server is required at all. SSG is the fastest way to serve websites - just click around the Clean Commit website and you’ll see this in action.The power of Next is being able to implement these different data fetching models in any combination that suits your website or application.eCommerce sites, for example, need to be super fast because that’s one of the signals Google looks at when determining how to rank a site on the search results page. This is a perfect use case for SSG. However, product pages also need to stay up to date so they show how many products are available for purchase to avoid overselling something with no stock. This situation better suits SSR or CSF.TypeScriptTypeScript is a superset of JavaScript developed by Microsoft, designed to make the life of JavaScript developers a little easier by eliminating some of the headaches that come with JS code. One of the big benefits of TypeScript is it can report errors when different types of data (strings and numbers) are combined incorrectly. This is actually a pretty big deal for complex applications and removes some of the complexity from the frontend development process.Next.js comes with TypeScript already integrated, meaning everything is set up and ready to go by default. With TypeScript, we’ve been able to create web applications more efficiently by leveraging its powerful debugging capabilities. In turn, this also results in apps that work better and run smoother.Image OptimisationNext.js can help with web vitals as it does a fantastic job at optimising images to achieve snappy performance and enable your site to pass Google’s core web vitals. The Next.js docs list the optimizations built into their image functionality:Improved Performance: Always serve correctly sized image for each device, using modern image formatsVisual Stability: Prevent Cumulative Layout Shift automaticallyFaster Page Loads: Images are only loaded when they enter the viewport, with optional blur-up placeholdersAsset Flexibility: On-demand image resizing, even for images stored on remote serversThe next/image API comes with image optimization out of the box, the images are set to automatically lazy load, can be configured to use modern formats like WebP, and easily serve any future format that proves to be better.Automatic code splittingCode splitting is a neat feature that allows the code required to run a single page to be organised and “split” within the directory of each page.The benefit of this feature reduces the amount of code an end user needs to download to just what’s required for the page they’re viewing. As a result, the page can load incredibly quickly.The Edge“The Edge” is a concept that describes a series of servers connected in a network. The Edge is kind of like a Content Distribution Network, that is a network of machines that distribute static content like images. However, Edge servers can run some code too.The big takeaway here is that caching and code execution can be done on a server closest to the user. Physical proximity makes a massive difference to load times. No matter where you live across the globe, if you’re accessing a Next.js website or application that’s on the Edge, it will be blazing fast.Which big companies are using Next.js?Next.js has become popular with larger companies for it’s performance, extensibility and easy configuration. With the exception of Gatsby (another React-based framework), there’s no framework that can achieve the same search engine optimisation results, while also providing the tools to execute complex development.The Next.js site boasts a massive list of companies that have made the jump to the framework. Here’s the shortlist: * TikTok * Netflix * Nike * PlayStation * DoorDash * PorscheA more comprehensive list of companies is available on the Next showcase page.When the big companies are throwing their weight behind a technology, it’s worth following suit.Pros of Next.jsTechnical ProsData SecurityData security is possibly the single most important thing for modern websites to get right. Static websites have no direct connection to the database since they’re just a set of files living on a CDN.Saying something is “hacker proof” is inaccurate, because every website has vulnerabilities and ways to be exploited. However, most sites run code on a server and that connection is the weak spot where hackers focus. Next.js provides a way to reduce your business’s risk of being compromised by a malicious attack.Time To MarketTime to market is a term for how long it takes to turn an idea into a fully released web application. The range of pre-made components makes building a minimum viable product (MVP) relatively quick and simple.More complex projects can also be completed faster due to the clever syntax and structure. The error handling and debugging principles used in React and Next mean developers can test changes and make improvements quickly and efficiently.Search Engine Optimisation ProsPage Load TimeNext.js can achieve unrivaled page load times. It’s out-of-the-box image optimisation, static site generation, code splitting architecture and ability to run on the Edge all combine for elite performance.Search engine optimization is an important factor to consider. How quickly a site loads is becoming a significant factor in Google’s ranking algorithms. Over the past couple of years, Google has released several major updates to their algorithm focused on penalising websites that don’t pass Core Web Vitals.The features and components of Next.js give us all the tools we need to create web applications that keep users engaged. This improves other strong signals Google is watching for, like low bounce rate and extended session duration.Indexability and CrawlibilityTo rank higher in search engines, it's generally best to have a well-structured, easy-to-navigate site structure. This helps Google’s bots crawl your site and gain a true understanding of who your content is relevant to and for what queries it should show your site in search results.By default, Next.js uses a simple but effective system of pages and folders that direct Google on how to crawl your site. Components are also set up in a way that lets search engines utilise them a bit more when ranking a site.Having a site that’s easily indexible and crawlable doesn’t unlock huge SEO benefits. However, getting it even slightly wrong (which is easy to do with WordPress sites) can have significant traffic penalties. That’s how Next.js can help with SEOBusiness ProsConversion RateWeb applications that are built using Next or React often have high conversion rates. This is a bit anecdotal because we don’t have empirical data to back it up. But the tools that Nextjs provides allow for more complex, faster and engaging frontends, helping customers find their way through the purchase process.AccessibilityBusinesses creating websites and applications have a responsibility to ensure they’re accessible. The web is an inclusive place, and everyone deserves to be able to interact with it easily.Next.js is packed with a handful of great tools to make writing clean code quicker, and accessibility problems easier to spot.FlexibilityNext.js is a powerful framework. It’s packed with everything required to develop a really nice frontend. Our team has managed to build some decently complex applications using a combination of Next.js and Laravel (for the backend).There is an argument for React being more flexible because it’s an unopinionated library. This is probably true for some use cases, but we’re yet to find a situation where Next has been the reason we couldn’t build something.Developer ProsCSS SupportNext.js ships with built-in CSS support. It’s easy to import CSS code from a JavaScript file, meaning there’s no need to waste time and money on third-party stylesheet services.Fast RefreshThe built-in fast refresh feature automatically reloads a page every time new code is added. Our developers no longer need to switch tabs and click the refresh button to test changes. This saves the effort of reloading the page every time a change is made. This sounds mundane, but it’s a big headache if you’re making a lot of quick changes to a site’s layout.Reusable componentsNext.js allows page constructors to be grouped as components and reused. This saves a ton of time if you’re building a web page or application that has UI components that duplicate across different pages.Cons of Next.jsTechnical ConsRoutingNext.js is not very flexible when it comes to routing. The default approach is page-based, where you specify whether to generate those pages server-side, client-side or static.While this is good for simple applications, if you need something more complex, you’ll need to write a lot more code and make use of Node.js servers. These issues are being worked on, though, and they’re gradually getting fixed. We are confident that routing will be much less of an issue in the future.OpinionatedNext.js is opinionated, so as a developer you have no choice but to do things their way.We’ve listed this as a “con” but it fits into the “pros” section too. Teams that are looking to do some wild integrations may hit limitations on how their application needs to be written, forcing work arounds.Business ConsFinding DevelopersWhile React is a very common JavaScript library that powers a large portion of modern web applications, it’s hard to find good, experienced programmers to write your application. React has become an entry point to development. It’s one of those technical skills that is (relatively) easy to learn the basics, but very difficult and time consuming to master.Since Next.js is an extension of React, it’s an easy thing for new developers to throw on their CV without having a ton of experience building clean, well architectured applications with Next.Hiring Next.js developers from Upwork, Freelancer, or any other contracting site is a huge gamble because there are so many novices saturating the market.Should I Use Next.js for my Project?The answer to this question is “it depends”. Is Next.js a great fit for your requirements? Do you need to build a highly scaleable application that is snappy for users, and is a dream for your development team to maintain? Or perhaps you upgrade your Shopify store to run as a headless implementation to unlock the SEO standards and huge traffic numbers you haven’t been able to achieve.In these cases, yes, you should use Next.js for your project. We believe it’s the best frontend framework for most applications in 2022.However, in saying that, there are cases to be made for using Vue, React, WordPress, Laravel, and a bunch of other great technologies. Coding languages and frameworks aren’t one-size-fits-all.The only way we can answer this question conclusively is if you reach out to our team for a quick conversation to discuss your project. We’re a website design agency highly experienced with Next.js, and can field any questions you have about it being the right choice for your project.In general, the benefits of Next.js far outweigh the limitations, and many of the disadvantages can be overcome when you hire Next.js developers. If you try to manage it all internally, you’ll probably spend excessive money and time, and it may not be as worthwhile.Our team of Next.js specialists would love to assist you with your web app. Contact us today to speak to us about how we can help you.ConclusionNext.js helps our team build web apps that perform fast, are SEO-centric and fit our clients’ budgets. In this post, we’ve looked at how it works, some pros and cons and whether you should use it for your project.Do you have any questions about Next.js, please feel free to leave them in the comments section below. We’ll respond with an answer in a day or so."
  },
  {
    "title": "Bootstrap vs Vue - Comparing a CSS and JavaScript Framework",
    "plaintext": "Choosing the right tech stack is an important part of the web development process and the longevity of any website or application. There are countless frameworks and libraries available to choose from, and some are better suited to particular tasks than others. In this article, we will compare Bootstrap and Vue.js, two popular options for building and interface components.A quick summary of differences between Bootstrap and Vue: Vue is a JavaScript framework that allows us to build interactive websites and application frontends, while Bootstrap simply provides predefined CSS classes for interface design and development.C﻿omparing Vue.js and Bootstrap is like apples and oranges. Vue is a JavaScript framework for building applications and the Bootstrap is a CSS framework for styling interfaces. Vue can use Bootstrap as its CSS framework, but it doesn't have to. Besides styling interfaces, Bootstrap can't do anything Vue can.Another way of saying this is that Vue is concerned with the entire process - setting up the project, installing plugins, creating HTML elements, JavaScript logic, and also design. Bootstrap is concerned with just the design of user interfaces.I﻿f you're unclear on Bootstrap, Vue, React, or what technology you should use for your project, then reach out to our team for an obligation-free chat. The worst that can happen is you get expert-backed advice.What is Bootstrap?Bootstrap is a large style sheet with predefined classes that govern website design: element positioning, size and appearance, responsiveness, and so on.Instead of spending hours making a website responsive, you can simply borrow predefined classes from Bootstrap.Beginners and even some experienced front-end developers struggle with writing CSS code. Making changes to one element’s style can mess up the layout of the entire page, forcing you to go back and fix five other classes.via GIPHYBootstrap is a CSS framework of classes (styles) that work well together.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages of BootstrapEasy to implementBootstrap is easy to learn and simple to use - one person with strong Bootstrap skills can style an entire web application.The same cannot be said for CSS. It’s easy to learn its basics but hard to master it completely. Styling a complex web application using CSS is not a one-person job, even if you’re very good. Small development teams are better off using a CSS framework like Bootstrap.Good starting pointBootstrap is great for quickly putting together a simple, functional design. This way, developers can focus on developing functionality of the app.ResponsiveMajority of people use smartphones to browse the internet. Implementing a responsive mobile first design is much easier with Bootstrap than CSS.Thanks to the grid system, creating a responsive layout is as simple as applying a few predefined classes.Consistent UIBootstrap makes it easy to design a consistent layout. It’s easy to predict how Bootstrap-styled components will look and display together.Working within one framework makes it easy for multiple developers to collaborate and design the app without inconsistencies in the UI.Potential for customizationBootstrap allows developers to overwrite standard classes to give the website a unique look.For instance, change the colour palette of UI components to match colours of your brand. Another option is to use one of the many Bootstrap templates and plugins.Well documentedBootstrap has a mild learning curve, partly because it is well documented. Specific and comprehensive documentation makes it easy to learn a library and fix possible errors in the code. Bootstrap also has a large community of developers who can answer your questions.Disadvantages of BootstrapUniform appearanceMillions of sites that use Bootstrap look almost the same. Customising the appearance of Bootstrap classes requires a fairly advanced knowledge of CSS, which a lot of developers don’t have.Ready solutionDevelopers learn and reinforce their CSS skills by working with it. Bootstrap provides predefined CSS classes, which can promote laziness.When should Bootstrap be used?The biggest draw of Bootstrap is that it allows you to design a website with minimal effort. It can be useful for building a prototype or initial version of a site. Or when you want to focus a team's attention on functionality and features, rather than customising the appearance.The difference between using Bootstrap and writing CSS styles is similar to the difference between hand-sewn and manufactured clothes. It is a fact that hand-crafted, tailored products look better, have a unique feel, and are overall a perfect fit. However, it requires years of experience and mass-manufactured clothes often work just as well, while costing only a fraction of the price.Examples of Bootstrap projectsMost of the time, it is the small-to-medium sized businesses that use Bootstrap. Large scale projects can afford to hire artists and developers to create and maintain a custom design.MontereMontere is an Italian business that sells organic fruit products. Its website looks original, but looking at the source code of interface components shows that they are designed with Bootstrap and CSS.Website looks unique because of custom CSS rules, but still uses Bootstrap’s grid system for responsiveness and beautiful layout.Fox NewsFox News is one example of an extremely popular site that still uses Bootstrap. They also use custom CSS, but heavily rely on Bootstrap to adapt UI components and long texts on small screen sizes.Pear AnalyticsLast, we have a digital marketing agency website styled with Bootstrap. It has a minimal, yet efficient design that displays well on smartphones. Responsive mobile first design is also beneficial for SEO.What is Vue.js?Web apps today are much faster, more user friendly and dynamic than they were 10 or even 5 years ago. This is only possible thanks to JavaScript frameworks, which lay the groundwork for a lot of advanced features.Vue is one of the three most popular JavaScript frameworks, the other two being React and Angular. Vue, like all other front end frameworks, follows a component model. Each component is a reusable piece of code that defines the appearance and functionality of part of a site. You can think of them as small building blocks that make up web applications.JavaScript frameworks like Vue provide a collection of advanced JavaScript tools and features (like Virtual DOM) necessary to build modern web applications.Advantages of Vue.jsSimplicityVue has a very simple syntax. Writing a simple web application takes just a few lines of code. Simplicity does not come at the cost of functionality though.To perform complex tasks like receiving data from the API, storing user input, changing element visibility, Vue developers only have to set one attribute, or write a few lines of code.ReactivityIn Vue, every component has its own state. It is easy to set up and useful for reacting to changes. For example, Grammarly looks for mistakes as soon as you’re finished writing the word.With Vue, there is no need to reload the page to see the feedback. It notices when the user enters a new word (a change has occurred), and reacts to changes.ReusabilityWeb apps built with Vue are essentially component trees. A blog application might have the following UI components: homepage, sidebar, header, post, comment, page. It will most likely have many blog posts with different categories, different content and different authors. It would be foolish to create a new post component every time we need a new post.Vue allows you to customise the content and other characteristics of a component, while keeping its overall structure. This way, you can reuse components to display different instances of the same type of content.SpeedFastest web applications are built with JavaScript frameworks similar to Vue. The package itself is very lightweight at just 20kb. Once the app is loaded, Virtual DOM ensures that pages are updated without any delay.Large communityFor JavaScript framework, large community means availability of experts to ask for advice. In the process of building complex applications, you will inevitably run into trouble. A large community of developers and Vue documentation will be there to guide you.Disadvantages of Vue.jsDifficulty with SEOApplications built exclusively with Vue are called SPAs (Single Page Applications). Instead of receiving a content-filled HTML page from the server, these apps generate the content within the browser. This makes it difficult for Google and other search engines to index them.Language barrier within communityVue is the most popular of all front end frameworks in China. Giant Chinese companies like Alibaba use it, so a large portion of the Vue community is Chinese.Shortage of senior developersVue is a young framework with a steep learning curve, so there is a shortage of senior developers with 5+yrs of experience.When should Vue.js be used?Vue shines brightest when a web application needs to be fast, smart, and interactive. In other words, one that requires JavaScript functions to implement business logic, reactive visual components, and process data.Size of the application doesn’t matter. Vue can be used for making simple prototypes, as well as some of the largest websites in the world like AliExpress (the biggest online retailer in China).If you want features like conditional styling, immediate feedback, smart search bar, instant form validation, and many other user-friendly features that require JavaScript logic, Vue is the best choice.Examples of projects built with Vue.jsHere is a quick list of large scale projects that use Vue to build their websites:GrammarlyThis application uses state maintenance, virtual DOM and other Vue features to find and fix errors in text as soon as you’re finished typing. Note that you don’t have to click any button, or refresh the page to see the feedback.It also displays different tooltips to explain different types of errors and show how they can be improved. This type of logic is only possible with JavaScript, not with CSS or its libraries like Bootstrap.Grammarly also dynamically calculates your text score, and provides the statistics to back it up. Every time you type a new sentence, Grammarly automatically updates the score.User-friendliness of this app is a testament to Vue and JavaScript’s ability to dynamically process user input to improve user experience.BehanceFrequent users know that browsing creative projects on Behance is a pleasure. It has features like predictive search and smart filtering to help you find what you’re looking for.When browsing digital art, hovering over an artist's name displays a quick preview of their profile and allows users to follow them. This increases engagement and keeps users coming back to see more of certain artists.This is just a short list of features that would be impossible without Vue and its underlying JavaScript foundation.Chess.comThe biggest chess website in the world uses Vue to create interface components. For example, hovering over the ‘Watch’ menu item instantly displays the list of most popular game streams. If one of the games stops streaming, Vue will update the list, even if the user doesn’t refresh the page.The website also has a predictive search, which shows search results as you’re typing in the query.Comparing Bootstrap and Vue.jsThe biggest difference between Bootstrap and Vue is scope of use. Bootstrap provides predefined CSS classes to style HTML elements and make websites responsive.On the other hand, Vue is a JavaScript framework, an all-in-one solution for building dynamic web apps. Designing user interfaces is just one step of that process. Developers can choose to style UI components using Bootstrap, handwritten CSS classes, or another popular UI framework like Material UI.Vue can be used to create HTML elements, customise their appearance and use JavaScript for business logic, loading external data, maintaining state, and so on. Vue combines HTML elements, CSS classes (‘borrowed’ or unique), and JavaScript to create reactive UI components.Is Vue.js better than Bootstrap?Comparing Vue and Bootstrap is like comparing apples with oranges.Bootstrap is a CSS library, great for quick website design and making your website responsive. Its dynamic features are very limited.Vue is a JavaScript framework for building web applications. That includes creating HTML elements, writing CSS to customise their appearance, and using JavaScript to implement business logic. It comes with built-in solutions for common JavaScript web development tasks, so developers don’t have to create them from scratch.ConclusionIn this article, we compared Vue.js and Bootstrap and their role in building modern web applications.If some of your questions are still unanswered, please comment below and our members will answer them within a few days."
  },
  {
    "title": "Minimum Viable Product in Agile Development",
    "plaintext": "For new entrepreneurs, building a minimum viable product (MVP) is synonymous with creating a new digital product. While this isn't accurate, it's not a bad thing. Minimum viable products are a great way to keep costs low and test ideas quickly.The problems usually start when the same clients ask when their completed product will be ready. The answer to this question is \"it depends\" if you want to build a true MVP with an agile process or if you're looking to build a V1.0 of your fully featured product.A true minimum viable product doesn't need to be pretty or fully automated. It should be the quickest path to providing the basic features of your product.This sounds good in theory, but it can be a hard pill to swallow for entrepreneurs who are perfectionists. They've built up the idea of a game-changing product that will look beautiful and blow all its competitors away. But this is describing a V1.0.Compared with an MVP, a first full version of a product can take months to design, develop and test. During this time, there's no chance for target audience to provide feedback and for the product to evolve. This approach doesn't fit with the concepts of agile development, but it's how the vast majority of projects are run.In this article, we'll discuss how starting with an MVP is perfect for agile development and why this approach is the smart and less risky way for businesses to invest in new products.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhy does agile pair well with the MVP concept?One of the guiding principles behind agile development is responding to change over following a plan. In the real world of software development, this means building a product in small pieces so quick adjustments can be made along the way.Since your team is already set up to adjust to change, they should be prepared to quickly take on user feedback when the MVP launches.A minimum viable product is the most lightweight version of a new product that can hit the market and be useful for users. This doesn't mean it's poorly designed or developed. Rather, it should be limited in what it can do. Users should ask for more features or for things to be changed.Pairing agile with a MVP process gives your users the tools to drive the product development process. Think about it this way. You've got a list of 50 new features to build but you only have the time and money for 10 right now. Everyone on your team has a different opinion about which features will be the most valuable for target users. The best way to end these arguments is to hand the microphone to your users and ask them directly.MVP Waterfall?One of the other popular approaches to building software is called waterfall. Most agencies and developers accidentally fall into the trap of building waterfall products, even though they claim to be running agile processes.Waterfall is defined by planning. All the features to be built are organised and defined at the start of the project and scheduled into a plan so the team can linearly work through them, start to finish.In my opinion, there's nothing wrong with building an MVP using a waterfall approach as long as your MVP doesn't take months to build. If the waterfall planning doesn't extend beyond the MVP, then the product team can reap all the benefits of user feedback but with fewer interruptions to development, getting the MPV out the door quicker.Many large teams have success with a kind of hybrid project management methodology where they plan a waterfall project and then execute it with scrum-style sprints and reviews.So you've got a great business idea - a cautionary taleEnough of the methodology theory. Let's talk about your product idea.You've come up with a disruptive idea that solves problems other products on the market have failed to figure out. This product is something you've needed for a while, and you think other users will love it.You research how to start and see thousands of articles talking about MVPs, gathering customer feedback, market research, developing a product hypothesis, and other overhead activities that don't seem appropriate for your idea. Your product already has competitors, so you guess there's no need to test the market. If your competitors, whose final product isn't all the hot, can acquire paying customers, then your idea should have no problem.You don't want to waste any more time, so shop around for quotes. After interviewing a dozen different development agencies, you pick one. The guys seem clued on, and they understand your vision.The project goes smoothly, even though it's taken 8 months to finish the product. That's water the under the bridge at this point. It's time to launch your product and show up your competitors.You do your best to generate some attention on Linkedin, Facebook, and TikTok. You run a handful of paid ads to get customers in, and it seems to be working!A week later, you've got 100 free trial members. Your support chat is going off the hook. Users are asking questions you didn't expect. They're having a hard time understanding how the product works and seem to think that it's missing important features.A couple of weeks later, all the trial members have left, and you're left with no paying customers.The problem is clear; adding a handful of missing features and cleaning up the product's user experience (UX) would have converted most of the trial customers. However, you've spent all the money your business could afford to invest in this idea.If only there was a different way to approach this problem.There is, and it's building a minimum viable product with an agile methodology.Why should we start with a Minimum Viable Product?The story above highlights the reasons for starting with a minimum viable product. 1. MVPs help with uncertaintyThe toughest part of software development isn't complex algorithms, machine learning, or artificial intelligence. It's picking which features to build.Knowing which features users will choose to use is almost impossible without watching over their shoulders and collecting real feedback. The MVP approach provides a way to test if your product's combination of features will be useful.2. MVPs can help with early cash flowProduct development is expensive. Most of the big SaaS companies you're familiar with have received hundreds of thousands (even millions) of dollars in investment to fund their products.Unless you're shaking hands with investors, getting cash into your business to fund future development should be an immediate goal. If your MVP is valuable enough to customers, they'll be happy to pay for it even without all the great features you're planning for the long-term vision.3.MVPs are cheaper than a full V1.0MVPs are the cheapest and quickest way to market. Even if you're completely committed to your product idea and 100% certain it will succeed, it doesn't hurt to save some cash on the way.4. Pivoting from an MVP is easierNote that I've used the word \"easier\" rather than \"easy\". Modifying a product in any significant way isn't easy, and it can take a decent chunk of time. An early-stage MVP is the best place to pivot because the true foundations (like a design system, heavy integrations, and completed data model) haven't been laid.How to get your MVP right on the first tryJust because you're building a lightweight product doesn't mean you should jump in without a waterproof plan. Going through a full product roadmapping process will save you countless hours and tens of thousands of dollars.A product roadmap is a blueprint for your new product that lists everything required to build the MVP. In a similar way that you wouldn't try to build a house without a blueprint, you shouldn't try to build a product without a roadmap.Our team specialises in helping entrepreneurs and established companies create their product roadmap. The process usually takes 4 to 8 hours of meetings and covers four steps; goals, flows, features and selection.Note: you can absolutely do this process by yourself! However, there are parts where working with an experienced team are going to save you a lot of time and money.GoalsBuilding a successful MVP is almost impossible if you can't define what will make it successful. In some cases, this is saving your team 10 hours of manual effort each week. In others, it's building a new service and reaching 1,000 paid users in 12 months.Different goals will influence the kind of design and development decisions during the project. For example, if the tool is being built to improve staff efficiency and is intended for a team's internal use, there's no point in adding tool tips or dumbing down the interface for the general public.Our advice is to avoid overcomplicating this step. The best way to define success criteria is to answer these questions: 1. What problem are you trying to solve? 2. What happens after you solve this problem? 3. If you could wave a magic wand and create a new solution, what three qualities you’d most want it to have? 4. What does a win look like in this situation? 5. Where do you want your business to be in 6 months? 1 year? 5 years? 6. When do you expect this project to turn a profit?When we walk clients through the Product Roadmapping process, we ask take them through a list of 25 - 30 questions of this vein that dig deeply into their goals. Almost everyone we've worked with has admitted they didn't think through this part before starting, and have gained some serious insights into what they're trying to do.FlowsRecording user flows accurately is the secret to creating great software. User flows are the steps a user takes to achieve an outcome. A great example is changing your Instagram profile picture. The steps to achieve this outcome are: 1. Log in 2. Open your profile 3. Select to edit your profile picture 4. Browse your media gallery for a new picture or upload a picture from your device storage 5. Edit the photo if it needs cropping or filters 6. Confirm 7. Go back to your feed to double-check it's implementedDigital product design needs to accommodate user flows in ways that make sense. It's a similar concept to sidewalks which need to be pathed logically for pedestrians to get to their destination quickly.If you can't answer the question, \"what do my users want to do with my app\" then you need to take a step back and figure that out.FeaturesOnce all the primary user flows are laid out, it's time to break them into features, so you have a full list of everything that needs to be designed.Our team have adopted a modified approach to writing user stories, which is a clean way of describing what a feature should do. Using our Instagram profile picture example again, one of the features would be photo editing.The user stories for this feature would look like this:Resizing & croppingAs an authenticated userWhen I've picked an image to editAnd the image is displaying at it's default aspect ratioThen I can resize the display area to make it bigger or smallerAnd I can crop the edges of the photo to make it a different shapeSo the photo will display at my ideal ratio and sizeFiltersAs an authenticated userWhen I've picked an image to editAnd the image is displaying in the editorThen I can apply any available filterAnd the filter will visually apply to the imageSo I can see how the filter will change the imageThere's no shortcut through user stories.Our team will spend a day or two reviewing each story and agreeing on an effort estimate. If the quote doesn't fit our client's budget, they get the chance to pick and choose which features they'll combine to make the project the right investment size.SelectionOnce you've got a full list of the features that could potentially make up your application, it's time to decide which ones will make up your MVP. It's best to be analytical during this process otherwise, you can end up trying to build a product that's more of a V1.0 than an MVP.When we go through this process, we'll assess each feature to determine: 1. Can it be handled manually while the app is getting off the ground? 2. Can we implement a workaround that will achieve the same goal? 3. Is the feature critical to the MVP's unique value proposition?If a feature can't be handled manually and there's no workaround, it's in contention. If the feature isn't part of the MVP's core value, then we'll leave it for later.Finally, when the list of features is laid out, it's time to determine how long the MVP will take to build. If the estimates indicate the MVP will spend more than a couple of months in development, we'll look for quicker approaches for some of the bigger features.Is product roadmapping worth the effort?Yes, it's 100% worth the effort. Having a plan for everything that will go into your MVP is a huge time saver. You'll have to coordinate between different team members as your MVP comes together (unless you're doing it solo). Having a single source of truth to point at when explaining how things should work keeps everyone on track and results in better products.How to build your MVPWe recommend taking one of two approaches to build your MVP; 1. No-code prototype 2. Coded prototype leveraging micro-servicesNo-code prototypeUsing the no-code approach, you become the system designer and developer. It's significantly quicker than writing code if you have a clear vision of what you're building and how it will piece together.The no-code prototype works best for businesses that are productizing a service. For example, an MVP for an online subscription-based individual health care planning service. Technically, this example only needs a customer-facing website to explain the concept, a form to collect the details, calendar software to schedule the appointments, a customer relationship management system to hold details, and a payment processor to collect fees.These are all the tools required to build this idea: * Website: Webflow * Forms & CRM: ConvertKit * Calendar: Google Calendar & Calendly * Payment Processor: Stripe Forms * Integrations: MakeAlternatively, you could manage the entire thing in a dedicated no-code MVP service like Bubble.The downside of this approach is: 1. You need to have thought through how everything will connect which can be hard if you're not technically inclined 2. There will be features you can't build 3. If you want to jump to a coded product, you'll need to start from scratchCoded prototype leveraging microservicesIf you're building an MVP for your business idea and have some cash to invest, this is the best option. Even though the goal is to build a robust, scaleable product, time can be saved by piecing together pre-made services.For instance, if you were planning on creating a new streaming service to compete against YouTube, rather than building your own encoding engine and video player, you could leverage a service like Bunny.net, which offers both of these features. Similarly, instead of building a custom content management platform, you could modify an open-source CMS like Strapi.The idea is to modify existing tools rather than build everything from the ground up. These parts can all be rebuilt in the future when you've achieved reliable cash flow.TakeawaysIf you take anything away from this write-up on building an MVP with agile, it's that you want to test your concepts quickly and often. The trap too many entrepreneurs get caught in is wanting their MVP to be perfect. If it's perfect, then you're moving too slowly.Q&AHave questions that we haven't answered? Leave a comment below, and someone from our team will get back to you in a day or so!"
  },
  {
    "title": "Shopify Lite Headless - The Cheapest Possible Headless Shopify Setup",
    "plaintext": "Shopify pushes the idea that if you want to create a headless store, you must upgrade to their $2,000 a month Pro plan. They’ve created a bunch of great resources about going headless with Shopify where they continually talk about how “Shopify Plus” can be used for a headless store.But what if you want all the benefits of headless eCommerce, and have the tools to build a site with Gatsby or Next.js? That leads us to ask the question; can we even build a headless store without Shopify Plus?While you’re learning the answer, here’s a quick pitch. We can help design and develop your headless store. Headless eCommerce isn’t the right option for all businesses. Contact Tim today to check if a headless store is your best play.Does creating a headless store require Shopify Plus?Thankfully, it’s possible to create a headless store using any level of Shopify membership. It’s even possible to create a Shopify Lite Headless store. However, Shopify restricts some API endpoints around coupons and authentication.What a standard Shopify headless store can’t doThe three biggest limitations of building a headless store on a “Lite”, “Basic” or “Shopify” plan are: 1. No storefront API for authentication cross-domain 2. Checkout restrictions 3. No access to coupons14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitNo storefront API for user authenticationWhen you create a headless Shopify store, you’re separating Shopify’s backend with all its great product and fulfillment management tools, from the customer-facing website. The new website doesn’t even run on the same domain anymore.E.g.Shopify backend = yourstore.shopify.comNew frontend = yourstore.comHaving different parts of your store on two different domains isn’t a problem until you need to send potentially confidential information between them, like your user name, password and account details.Without proving to Shopify’s backend that the frontend is trusted, it can’t get the information attached to a user’s account, like their purchase history or account preferences.The internet is set up with protocols to secure these kinds of data transfers. A kind of authenticated handshake needs to happen for the details to move from one place to another.This is where Shopify’s GraphQL Storefront API comes in handy. It can be used to call all these details into the frontend application. But only for Shopify Plus.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat’s a real example of this problem?You’ve just built a new headless Shopify store. It’s blazing fast, and new users love it. However, you’re struggling to retain customers after two purchases.They’re complaining about having to re-enter all of their details every time they purchase and the fact they can’t see what they purchased last time they were on your platform.There are requests in your support portal to provide tax invoices for a dozen different customers. But they should be able to get these details out of their own accounts right?No, unfortunately. Because you’re not using Shopify Plus, these details are not made available through their API so there’s no way for your headless store to know what each customer purchased in the past.Is there a workaround?All of the details users are looking for are saved by Shopify, they’re just not available through your headless store. To let users access their details, you’ll need to set these pages up on your regular Shopify theme.Make sure to restrict where users can go once logged into your regular Shopify theme. Unless you’ve spent the time to configure this theme to look and feel like your headless store, it will be a confusing experience and there will be nothing stopping them from browsing around empty pages.You’ll also need to provide a way for the users to return to the headless store once they’re done checking their account information.Checkout restrictionsShopify prevents their checkout page from being edited for users who haven’t upgraded to Shopify Plus. In my opinion, the Shopify checkout page is great, and most stores wouldn’t have a strong argument for modifying it.However, if you’re building a headless store in hopes of creating a fully customised journey for your users, then the experience can feel a bit disconnected at the point of checkout.Shopify’s checkout also provides user’s the opportunity to “log in” and use their existing payment details. This is a no-no for headless stores that aren’t on the Plus plan. As we mentioned above, your headless store doesn’t have access to these kinds of details, so the user will be routed off to the regular Shopify theme.Is there a workaround?Is there a workaround for checkout styling? Unfortunately not. Some plugins can help you make simple design changes to the checkout, but it’s pretty limited.As for prompting the user to log in before purchasing, these options can be hidden. However, this comes back to the problem we raised above. Users want to log in so they don’t have to re-enter their card details.No access to couponsAccess to the coupon API endpoint is restricted, preventing coupon-based discounts and sales. Coupons are a versatile tool for an online store, and being unable to run a flash sale can be a significant limitation.Is there a workaround?This problem has a decent workaround. There are plenty of plugins that can be used to make store-wide discounts or per-product discounts. This won’t solve every situation, like redeeming free products using a limited set of coupons. However, if your problem is not being able to hold a sale, then there’s a way to get it done.Should I build a Shopify Lite Headless store?This may come as a surprise, but my answer is no, you shouldn’t build a Shopify Lite headless store. The limitations on Shopify’s API are too great, and there is a much better option; BigCommerce.Unlike Shopify, BigCommerce doesn’t restrict its API for building headless stores. Their team has put a bunch of time into relationships with the Gatsby and Next.js developers to create tools that will help you get up and running quickly.I’ve written a more detailed breakdown of the benefits of going headless with BigCommerce, and a comparison of headless Shopify and BigCommerce so you don’t have to do the research.Frequently Asked QuestionsQ: What is a headless installation?The term “headless installation” in software development refers to the decoupling of the code that runs on the server from the code that runs in the browser (the head). Each part runs from a different codebase and communicates through API.Q: What is a headless checkout?Checkouts can be isolated from the rest of a website or application. This setup is called “headless” because the code that drives the checkout isn’t connected to the server, also known as the system’s head.Have any other questions that we haven’t answered here? Leave them below in the comments section and we’ll get back to you in a day or so!"
  },
  {
    "title": "JavaScript vs TypeScript - Why We Use TypeScript",
    "plaintext": "Typescript vs JavaScriptIn 2022, TypeScript has rocketed up the charts and, according to the annual Stack Overflow survey, is sitting at #5 on the list of most popular scripting, programming and markup languages.Tell me about TypeScriptTypescript is an object-orientated superset of JavaScript. In plain terms means TypeScript is JavaScript with some additional features baked in. It's compiled to JavaScript at runtime and is only an added development tool to make life easier for programmers.Microsoft developed it back in 2013 to solve some of the problems of working with JavaScript.TypeScript isn't trying to be a new, different version of JavaScript. It's really just an enhancement or an extension. Valid JavaScript code is valid TypeScript code.What are the \"problems\" with writing JavaScriptJavaScript is a great language, but the way it handles data types is... well, kind of weird. JS was originally developed in just 10 days in 1995 and is backwards compatible. This means there are some syntax situations that can be real head-scratchers.Here are a few examples.Q: True + FalseA: 1Workings:Number(true); // -> 1Number(false); // -> 01 + 0; // -> 1Q: (null - 0) + \"0\"A: 00Workings:Number(null); // -> 00 - 0; // -> 00 + \"0\"; // -> \"00\"Q: 1 + 2 + \"3\"A: 33Workings:1 + 2; // -> 33 + \"3\"; // -> \"33\"If you're unfamiliar with development, this might all seem like jibberish, but take a quick look at the last example. It's a simple maths scenario; 1 + 2 + 3. However, wrapping a number in inverted commas declares the value as a string (text), so JavaScript treats the equation as a string instead of a number.The way JavaScript treats combined data types is not always clear, and as a result, it's not difficult to accidentally introduce time-consuming bugs.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitIDE error catching isn't greatIntegrated development environments (IDEs) are the applications where developers write their code. They provide tools that make the process easier, like nicely coloured classes, automatic indenting, live previews, and (argubaly) most importantly, error catching.IDEs read code as it's written and underline problems as they're introduced. It's kind of like a spell-checker for code.Error checkers for JavaScript have had to intentionally ignore problems related to type conflicts because they might not be a problem. The developer may have meant to combine a number and a string in the same function.Bug fixingBug fixing large, complex projects written in JavaScript can be a nightmare because of the \"grey area\" I've hinted at above. Imagine looking through a 10,000-line project trying to spot a problem that's not actually being identified as an error.As the size and complexity of a project increases, more rigid processes and checks need to be introduced to avoid chaos taking over.How does TypeScript fix JavaScript?TypeScript offers a way to define \"types\" as you're creating objects in JavaScript. Here's a quick example listed on the official TypeScript website.The first step is to define the object `user`:const user = {  name: \"Hayes\",  id: 0,};Once the object has been defined, each property can be bound to a type. This is done through an \"interface\":interface User {  name: string;  id: number;}With the types of each object property now defined, the object can be associated with the interface and bound to the types by using the syntax :typeName after the variable declaration.const user: User = {  name: \"Hayes\",  id: 0,};Now that the property types have been defined, if you accidentally invalidate the interface declaration, your IDE will throw up an error telling you something is wrong.TypeScript goes a fair bit deeper than just defining property types. It can do cool things like composing new types by combining other simple types or declaring types based on an object's shape.Frequently asked TypeScript questionsHere are the answers to a few questions you might have about TypeScript.Is TypeScript better than JavaScript?Yes, it is, but keep in mind that TypeScript is JavaScript. It's a superset that allows types to be defined to avoid the confusion and accidental bugs that happen in JS by allowing types to be combined.As an agency that builds custom software that sometimes has large, complex interfaces, we would argue that TypeScript is better than JavaScript because it helps prevent type-based errors.Does React use TypeScript?React doesn't support TypeScript to the same extent Next.js does, but it does support JSX which is a feature of React.const element = <h1>Hello, world!</h1>; If you want full TypeScript support, you'll need to use a React framework like Next.js or create-react-app.Is TypeScript Object Oriented?Yes, TypeScript is an object-orientated language. Like JavaScript, TypeScript is actually prototype-based, which means that it defines behaviour through a constructor function instead of having true classes.Got more questions?If you've still got questions about TypeScript and its relationship to JavaScript, leave them in the comments section below and we'll get back to you."
  },
  {
    "title": "Custom Software vs Off The Shelf - What To Consider Before Committing",
    "plaintext": "If you can find an off-the-shelf (OTS) software solution that does exactly what you need, there's no reason to build your own custom solution. Custom software pretty much always costs magnitudes more, takes time to build, and requires ongoing attention.However, how often do you find pre-made software or template websites that do exactly what your business needs? The companies responsible for building software usually try to make their systems general enough to serve a wide audience to maximise profit. There are usually features that you wish the platform had, or more often, you end up having to completely change your processes to fit the tool you're using.So what do you do when your business desperately needs software features unavailable?You can weigh up the idea of going custom. Or you could find a combination of off-the-shelf tools that could be stitched together. Or maybe you just keep using the ill-fitting tool you're already familiar with and put up with the inefficiencies.It's super tricky (and a bit nerve-wracking) to pick the option that will leave your business in the best financial position.We wish we could build a questionnaire to give you a conclusive answer about what to do. There are simply too many variables for anything like that to work. However, what we can do is arm you with the knowledge to make an educated decision about which direction you should go.As a team that specialises in helping businesses who have outgrown their technology, this is a problem we're intimately familiar with and are qualified to give some direction on the topic!If you get to the end of the article and you're still not sure what it will cost to build a custom solution, if there's a pre-built tool that would fit your requirements, or whether there's an option you're not considering, then please reach out to us. The worst that can happen if you'll get some free experienced-backed advice.A quick comparisonLet's cut straight to the chase. There are situations where OTS is the right choice and others where it will be more of a hindrance. Here's our quick table that breaks down some common scenarios and provides insights into which option will be a better fit.Here's the breakdown of each consideration.Affordability - it's all about priceOTS solutions are cheaper for smaller businesses buying entry-level pricing. There's usually no implementation cost. Just sign up, set up the software how you like, and start using it.Custom solutions on the other hand require hiring an agency, setting you back somewhere between $25,000 - $300,000 depending on the complexity of what you're building.It's incorrect to make a blanket statement that off-the-shelf software is cheaper than a custom build. At some point, paying enterprise rates for OTS systems can get very expensive, and if your business is only using a handful of features, it may be cheaper to invest in your own solution.As a general rule of thumb, OTS will win the affordability battle 9/10 times.ExtensibilityNot being able to extend or modify off-the-shelf software is the biggest reason businesses start investigating custom solutions. It can be incredibly frustrating to have 90% of what you need from a pre-built solution with no way to add that last missing piece.Custom solutions are great for extensibility, especially if they're built with an agile approach. Creating a set of important features, testing them out, and then moving on to build the next set of features is a clever way to make sure the solution will fit your needs perfectly.OTS solutions can sometimes be integrated together through API calls to achieve things they couldn't otherwise. However, any complex integrations usually require a small application to sit in the middle between the proprietary software and pass data back and forth to achieve the integration.ScalabilityScaling custom software is relatively straightforward in that you can throw more server resources, load balances, and different infrastructure resources at your application to make it handle more load.Since you don't have any direct access to OTS platform's infrastructure, you're only option is to speak with the service's team. Sometimes they'll accommodate the request and move you onto an enterprise plan, but this won't always cut the mustard. If your company is pulling huge numbers and requiring more resources than OTS systems expect, it's time to go custom.Your team's expertiseThe teams that achieve the best results with custom software have team members that are familiar with the software development life cycle and have an intimate understanding of what's being built.Custom applications usually don't have nice onboarding or user experience features like OTS applications. The lack of these familiar features can make for a steep learning curve for non-technical users.Custom applications come with their own challenges, and if you don't have a semi-technical team member to navigate through the mayhem, it can make life difficult.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitImplementation speedDo you need a solution to your problem right now? Off-the-shelf software can be up and running in a matter of minutes. Maybe the first platform you try doesn't completely solve the issue, but you can try three or four more and have some success in a single day.Custom software, on the other hand, takes months to build. Any custom platform worth it's weight will have been planned for a week or two, gone through a prototyping and design phase and finally through a robust development phase. Doing complicated things right takes time.If you need to move quickly, OTS is the best option.Competitive advantageYour competitors have the same access to off-the-shelf software. If you're looking to create a platform that will give you an edge, it needs to be custom.The necessity for business operationsHow central software is to your operations is one of those considerations that businesses don't really think through until it's too late. Say you build a gold trading online store on Shopify, and it does most of what you need but requires heavy customisation to achieve your goals. Then Shopify goes and changes it's API from REST to GraphQL, which breaks all of your customisations. You probably wish you'd invested in a custom platform from the start.This is a bit anecdotal, but if you're planning on heavily customising OTS software to fit a requirement, but that software is also critical to your business operations, then it's a safer long-term alternative to build your own custom solution.OwnershipOff-the-shelf platforms are proprietary, meaning the codebase and data is owned by the host company. Sometimes their terms will state that you, the user, own your data. But that doesn't change the fact that they could sell their business to Adobe (looking at your Figma!) and the new host company could kill the platform.You're not the owner, and tieing your business to someone else's intellectual property creates an inherent risk of changes impacting your business.Flexibility and rapid changesIf you're an entrepreneur and creating a new product or service that doesn't exist, you'll be learning a lot of new information quickly and looking to adapt. There's an argument that you can cater to this requirement with both custom and OTS software.Stitching OTS platforms together through API and a small intermediary application would probably be the quickest approach to staying elastic in this situation. Committing fully to custom software development would be a good approach but might be too expensive. Only using OTS software would be too inflexible.The common \"gotchas\" of custom software developmentAnother consideration for going in the custom software development direction is that there are \"gotchas\" or \"hurdles\" that come of all the time. There's no logical way to anticipate them happening without experience. Here's our list of things to watch out for:Hidden and ongoing costsOne misconception about software development that our inexperienced clients make is that once the application is deployed to production, all the costs magically disappear. They think it's like building a piece of custom art that will sit out the front of a winery, being admired by the patrons.The truth is that even when your application is going live for the first time, there is probably a massive backlog of tasks that need to be completed (and paid for). Servers need to be paid for. External services need to be paid for. Licenses need to be paid for. There are ongoing costs and they're usually in the hundreds to low thousands of dollars a month.Thinking that you'll build a custom platform to escape the costs of off-the-shelf is a red herring.Cheap offshoring teams are a waste of moneyIf you're like me, you receive 15 emails from development teams based in the subcontinent each day advertising that they can build my application for $12/hour. You might think this is a bargain, and if you can just get a basic application together now, then you'll pay for a more qualified team to extend it later.I'm here to tell you this approach never works. In fact, we get contacted by one or two businesses every month asking for help undoing the sloppy work that a cheap offshoring company implemented.You don't need to find the most boutique, expensive agency, but don't work with teams that pitch you through a cold email advertising development for less than $50/hour.Changing business processesBuilding a custom application will sometimes require changing how your team does business. If you work with good developers, the change will be for the better and your processes will become more efficient. It's just worth considering that when you build a custom project management platform for your physio practice that it won't work exactly the same as Asana, and you'll need to change your business workflows.You're now a project managerNo matter which team you work with to build custom software, you will need to act as a project manager in some capacity. The experience is never entirely hands-off.The less money you want to spend, the more project management will go into keeping things on track. This doesn't just mean ensuring tasks get done on time, but it also means making sure the development team has the same vision of what needs to be built.Product Roadmapping is an excellent answer to this problem, and should always be done at the start of the project to align your business and the development team.Developer relationships are lastingCustom software requires maintenance. Things break frequently. You'll want to change features or talk about a different framework. Servers fall over. Stuff happens where you'll need technical help.Once you start down the custom software path, you'll need to work with developers or an agency permanently.Is custom software better than off-the-shelf?If you just want to know what's better, then the answer is OTS is better if you're on a budget and can find a platform that does exactly what you need. In almost every other situation, custom software will be a \"better\" option than off the shelf website, if you can justify the cost.Frequently asked questionsI﻿f you're still hunting for answers, these are a few common questions we've answered in the past on this topic.What is off the shelf software?Off the shelves software is proprietary software made by a company and licensed to users, usually on a monthly subscription. The software is \"turnkey\", meaning it requires little to no configuration to work. You just need to sign up, turn the key, and start using it.What is custom made software?Custom made software is a computer program developed for a particular, focused purpose. Typically software is referred to as custom when it's built for a business to do a job that general off-the-shelf solutions can't handle. Custom software is written by a developer or development agency.What is bespoke software development?Bespoke software development is a fancy way of saying software that's built specifically for a purpose. If a business can't find an off-the-shelf solution they like, they might opt to have a bespoke system built to fit the business requirements.What is bespoke website design?Similarly to bespoke software development, bespoke website design describes a design that is custom-made and tailored by an expert web designer to particular business needsWrapping upHopefully, we've given you all the details you need to make an informed decision about using readymade software or spending the time and effort to build something custom. For more articles, check out the Clean Commit blog and if you've got questions or comments, please leave them in the comments section below and our team will get back to you in a day or two!"
  },
  {
    "title": "Blazor vs React: Pick the Best Stack for your Project",
    "plaintext": "Blazor and React are open-source tools for building interactive single-page applications (SPAs). React is a Javascript library that was launched in 2013 by Facebook to enable developers to build intuitive interfaces and UI components. Blazor on the other hand is a UI framework that was launched in 2018 by Microsoft. Unlike React, Blazor relies on C# and Razor syntax, instead of Javascript, to create reusable and intuitive user interfaces. Until Blazor’s invention, all major frontend frameworks were built on top of JavaScript, so Blazor has created a bit of a splash in the developer community.That said, even though both tools serve the same function, they’re uniquely suited for different projects. In this article, we’ll compare their features and weigh their pros and cons to help highlight which projects are best suited for each.Before we get too deep, please hear this quick pitch. If you’re weighing up the technology for a new project and you’re unsure what is the best stack for your situation, please reach out to our team. We’ll either be able to help you or provide free, experience-backed advice!Since publishing this article we've received a number of questions about how suitable Blazor is as a replacement for React, Vue or Angular in larger SaaS projects. We've added a dedicated question-and-answer section at the end of the article. If you have additional questions, please leave a comment and we'll add the answer to the section so other folks can benefit!Blazor overviewBlazor is an open-source web development framework developed by Microsoft. It uses C# alongside HTML and CSS, enabling you to build web UI for client-side applications written in. NET. The applications are executed under Web Assembly, meaning they can run on any browser. As such, you don’t require any third-party add-ons and plugins for execution, consequently giving users platform independence.What makes Blazor stand out as a favorite tool for developers is its interoperability with Javascript. This allows a Blazor app to call Javascript functions from .NET methods and .NET methods from Javascript functions. In addition, unifies the client and server-side using C# as the codebase, consequently empowering developers to share libraries and ultra-modern single-page applications.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBlazor featuresSome of the most prominent Blazor features include:Offers two hosting modelsBlazor framework offers two primary hosting models; server-side Blazor and Blazor WebAssembly. The server-side Blazor allows you to host your app on ASP.NET Core where “Razor components'' are executed. Razor components are isolated interface components that can execute logic, enabling dynamic behavior. The frontend sends UI updates, Javascript functional calls, and event handling via a SignalR connection.Blazor server apps boast complete .NET API compatibility and fast load time. However, they suffer from high latency and scalability challenges.The Blazor WebAssembly (WASM) model allows you to run your .NET app directly in the browser. To achieve this, the app and its dependencies (including HTM, images, CSS, and .NET runtime) are downloaded to the client’s browser before running. As such, Browser WASM apps don’t require a server connection to run, making the host model ideal for static site hosting. In addition to offloading processing to the browser, Blazor WASM enables clients to run the app offline once the files are downloaded.Supports HTML and CSSAlthough Blazor uses Razor templates to create user interface components, the display is rendered in standard HTML and CSS. As such, you can use any CSS frameworks and preprocessors to style your page. This is great news for teams like ours that have adopted Tailwind CSS.Additionally, Blazor supports CSS isolation allowing you to style each component individually, thereby eliminating styling conflicts. Blazor also features additional features such as built-in form and input components that help in generating HTML syntax for forms.Pre-renderingMost single-page applications experience slow loading time due to the delay between fetching the data from servers to rendering it on the client’s browser. Blazor offers a solution to this problem by offering server-side pre-rendering which ensures that all webpage elements are compiled on the server and static HTML is served to the client. This means that the UI is displayed even before the application can be fully downloaded. As a result, Blazor’s pre-rendering makes SPAs load faster, consequently improving their SEO and customer experience.VirtualizationVirtualization is a technique for limiting UI rendering to only the items that are currently visible to the user. This concept is useful when dealing with massive amounts of data which can take time to process and display. For example, if your page has over 2000 items, you can use virtualization to render only a small portion of these on the users’ viewport. The rest of the data will be loaded and rendered dynamically as the user scrolls the viewport.Blazor’s virtualization functionality can be implemented on either Blazor WASM or Blazor server-side applications to improve performance. To enable this functionality, you need to wrap the data using the virtualize HTML tag. Conversely, without virtualization, you’d have to use C# foreach loop to iterate through the items.Without virtualization: @foreach (var employee in employees)    {        <tr>            <td>@employee.EmployeeId</td>            <td>@employee.Name</td>            <td>@employee.Role</td>        </tr>    }Implementing virtualization: <Virtualize Items=\"employees\" Context=\"employee\">    <tr>        <td>@employee.EmployeeId</td>        <td>@employee.Name</td>        <td>@employee.Role</td>    </tr></Virtualize>Lazy loadingLazy loading is a design pattern that allows an app to load specific files only as requested by a user. Blazor WASM supports lazy loading which improves the start-up speed of your app. Essentially, this feature defers loading a resource until it's requested by the user, meaning the app doesn’t download all the resources on start-up.gRPC-web supportgRPC is an open-source remote procedure call framework that facilitates efficient communication between the client and server-side applications. The framework was recently integrated into Blazor alongside a library to help create a gRPC server in ASP.NET and in Blazor client-side.Finding this writeup useful? You should join our newsletter to receive a monthly summary of our articles and research. We use the newsletter to build a relationship with potential clients. There's no selling or spam.Blazor pros and consClient-side Blazor advantages include: * Enables you to run .NET applications in a browser * SPAs can run in an offline state * Blazor WASM is interoperable with Javascript, allowing developers to use .NET methods and Javascript functions * Blazor WASM applications can run on most browsers without using additional plug-ins or source compilersCons * Prolonged initial load times especially on devices with a poor connection. This is because it requires the entire .NET runtime to be downloaded * It has limited debugging capabilities and .NET tools * Doesn’t work on thin clientsServer-side Blazor advantages include: * Both server-side Blazor WASM applications are built using C#. This helps speed up the development process and allows developers to focus on more important processes * Offers fast and efficient build time * The download size of the app’s components is significantly smaller than the Browser WASM which improves the app’s performance * Works on all browsers including thin clients and those that don’t support WebAssembly * Runs on the full .NET Core runtimeCons * Reduced scalability. This is because server-side Blazor apps use SignalR connection for event handling. This type of connection has a limit to how many events can be handled from the client-side * Must be connected to the server at all times and as such it doesn’t offer offline support * Doesn’t work well in high-latency environmentsReact overviewReact is a Javascript-based library for building UI components. It was developed and launched by Facebook in 2013 and has since then grown to become a popular UI library for building highly intuitive interfaces. It's used by notable companies such as Paypal, DropBox, Twitter, Netflix, and Walmart.By the time it was released, developers used other frameworks such as Angular and Vue which often required reworking most of the code. React positioned itself as a solution to this problem by enabling developers to create reusable code components thereby speeding up the development process and making it easy to maintain SPAs.React featuresSome of the notable features of React include:JSXJavascript syntax extension (JSX) is a combination of HTML and Javascript. It's used in React to easily write HTML and Javascript together, making the code easier to understand and debug. JSX is also faster than the typical Javascript code which helps create a high-performance React app. Here’s a simple JSX code:const name = ‘JSX sample’const ele = <h1>This is a {name}</h1Note that JSX isn’t a valid Javascript code and as such can't be executed directly on a browser. It must be compiled using the Babel compiler to convert it to Javascript code that can be understood by a browser.Virtual DOMDOM manipulation is an important aspect of UI web development. It allows developers to modify UI components and perform users’ actions on web elements. However, this process is usually slower in most Javascript frameworks as it involves updating the whole DOM at once, which impairs the performance of a web application. For example, if an app contains a list of twenty items and a user checks off three items only, most frameworks will rebuild the entire list just to update the three items.To improve performance, React uses virtual DOM which is essentially a representation of the real DOM in memory. This way, whenever an element in the web app is modified, the virtual DOM is updated first and compared with the actual DOM to find any differences in the elements. ReactDOM then updates only the parts of the app that have been modified, while everything else stays the same. This process is called reconciliation.One-way data bindingReact uses unidirectional data flow, which means that the data flows in one direction from parent components to child components. As such, the properties of a child component cannot send data to its parent component, but they can communicate to modify states based on provided inputs. This model helps keep all app activities modular and fast.ComponentsReact divides the user interface into numerous components. These components have their own set of properties and functions, making them easy to debug. The components can also be reused which helps speed up the development process. Other features of React components include: * Nesting - meaning a component can contain several other sub-components. * Render method - this allows you to define how a specific UI component will be rendered in the DOM * Passing properties - enables a component to receive properties from its parent component.Extension supportReact supports numerous extensions that help in building a full-fledged UI application. They also enable React to support mobile app development and server-side rendering. Some of the extensions include; Flux, Redux, and React Native.React pros and consAdvantages of using React include: * Improves app performance thanks to the virtual DOM capability * Saves time spent in the development process through reusable components * Uses less and maintainable code that’s easy to understand and debug * Improves SEO due to improved performance * Has a wide range of developer tools * Underpins Next.js (our favourite frontend framework) * The library is updated regularly to offer more functionality * React has a strong community of users that provides resources and solutions on the best ways to use the libraryCons * Lacks sufficient documentation, especially for new updates and releases * Due to its fast-paced updates, developers have to constantly invest in learning about new React developmentsComparing Blazor and React for building SPAsBlazor is a relatively new UI framework that offers an alternative to using Javascript for SPAs. It uses C# as its primary language to build interactive web applications. As such, for businesses that already have a team of .NET developers Blazor is your best choice. It helps eliminate the hustle of hiring Javascript developers to build SPAs since the existing developers can easily build reusable code for both the front and backend.React is a well-established Javascript-based UI library that has numerous third-party libraries, packages, and extensions. These tools help streamline the development process and optimize React apps. Besides, React helps build high-performance SPAs, making it a better choice than Blazor.Frequently Asked QuestionsQ: Is Blazor faster than React?No. React apps usually load faster than Blazor, especially when compared to Blazor WASM, which has to download the entire .NET runtime in addition to other app dependencies. However, Blazor server-side apps are slightly faster than React apps.Q: My team are .net experts and aren't familiar with JavaScript. Is Blazor the right choice for us?Yes and no. If your team really don't want to use JavaScript or bring in an experienced agency to build your frontend, then yes, Blazor is the right choice. But not because it's better than JavaScript frameworks, simply because it's the best option that isn't JS based. React, Vue and Angular are years ahead of Blazor in terms of maturity, resources, and tooling.While your team might pick up Blazor quickly, you're ultimately trading off the chance to adopt a better stack.There are tons of high-quality libraries, packages and tools specifically made to work with JavaScript frameworks that won't work with Blazor. Imagine being in a situation where you find a library that would achieve a complex requirement with 15 minutes of implementation, and then realising you need to spend a whole week to build the same feature because of your tech stack.Q: Is Blazor mature enough for enterprise development?It really depends on the complexity of your application. Blazor is still relatively immature, compared with the popular JavaScript frameworks.  There's nothing that would prevent Blazor from building a enterprise application, especially if it's paired with a microservice architecture REST API with asp.net core.However, as we pointed out in the last answer, Blazor is not as mature as the popular JavaScript frameworks so there will be times when you probably wish you were working with the same stack as everyone else.Q: Is Blazor replacing Javascript?No. Javascript is a popular language for building SPAs and has a booming ecosystem of development tools. Its frameworks and libraries, especially React, are well-established and have a proven track record of building robust applications. Blazor on the other hand is yet to mature beyond its experimental stage and win the conviction of Javascript developers.ConclusionOverall, when deciding whether to use Blazor or React, you have to consider the trade-offs that come with each tool. Most importantly, it all depends on your team - Blazor works best for a team of .NET developers while React is well-suited for Javascript developers. If you have any questions about Blazor vs React we didn’t answer, please leave them in the comments section below and our team will respond in a day or two."
  },
  {
    "title": "Next.js vs React: Which is the Best Frontend Technology for your Upcoming Project?",
    "plaintext": "React is the incumbent technology of modern frontend development for startups. It’s become synonymous with creating beautiful, interactive user interfaces, to the point where non-technical entrepreneurs don’t understand that sometimes there are better-fitting technologies for their project, like Next.js.Hold on there! Isn’t Next.js and React essentially the same thing? If they’re different, what are the benefits of one over the other? And what kind of projects would suit one and not the other?Good questions. This is what we’ll be unpacking. Feel free to skip ahead if you’re looking for a particular answer.React explained 1. What is react and why use it? 2. React features 3. Pros of React 4. Cons of React 5. Examples of apps built with ReactNext.js explained 1. What is next.js and why use it? 2. Next features 3. Pros of Next 4. Cons of Next 5. Examples of apps built with Next.js 6. FAQReact explainedWhat is React and why use it?React is an open-source JavaScript user interface library built by the Facebook team in 2013. It’s become wildly popular for building web and mobile applications and has laid the foundations for many excellent frameworks such as React Native and Next.js.React saves developers time in building new products. Writing a mobile app or complex web app in raw JavaScript is completely possible, but it’s hugely inefficient since there’s a lot of recreating the wheel.Rather than rebuilding functions that every application needs, React offers a nicely organised library of code. However, it’s still just a library rather than a framework that offers opinions on how to build an application.React has countless use cases and the breadth of applications that it’s been used to build is mind-boggling. We’ll list some actual examples a little later, but here are a handful of good use cases for React: * Building single page applications (SPAs) * Building the frontend of a new Social Media platform * Developing a news site or similar application that is content-oriented and needs to be heavily interactive * Creating a simple RSS feed reader * Developing complex data visualisation dashboardsEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitReact FeaturesReact has a ton of great features which have laid the foundation for frameworks like Next, React Native and Create React App. Here are the features worth paying attention to:React RouterSuper useful in developing Single Page Applications. Since SPAs don’t have “pages” like traditional monolithic websites like WordPress, they need a system for routing between different views. That’s where React Router does its work.One Way Data BindingWhen developing React applications, data is always sent to the child node from the parent as read-only properties. This is a feature only developers can truly appreciate, but having a unidirectional data flow between components is much easier to understand. When multiple developers are working together on a larger project, anything that helps simplify complex code is a benefit.Virtual DOMThe Document Object Model (DOM) is essentially the name given to the page you see in a browser. It represents all the styles, structures and content that make up everything on your screen when you’re viewing a website or web app. The problem with a traditional DOM is that modifying it is slower than most JavaScript operations.As a solution, React provides a virtual DOM. Every DOM object has a corresponding copy in the virtual DOM. Whenever React makes a change, it happens in the virtual DOM first before being reflected on the actual DOM.The best way of thinking about this is drafting changes on a blueprint rather than rebuilding sections of a house.JSX (JavaScript Syntax Extension)JSX is a JavaScript Syntax Extension that allows HTML and JavaScript to be written together. This is a benefit because while the rendering of JavaScript logic is separate from the user interface, they’re tightly coupled together. Writing JS and HTML in the same function can make the UI easier to visualise.React HooksReact Hooks are a fairly complex concept to expand on if you’re not familiar with JavaScript functions and the difference between stateless and stateful components. Without explaining exactly what hooks are, React comes baked with a bunch of standard in-built hooks that help with component state management.Pros of using ReactActive Community: React has 195k+ stars on Github, thousands of regular users, and a big talent pool contributing to its promotion and growth. This is good news for any business looking to pick a permanent technology for their new product.High Reusability: React components are intended to be reusable. Being able to easily reuse components rather than spending the time building something from scratch is a huge time and money saver. It also makes the project more easily maintainable.Good Documentation: Good documentation is a must-have for any complex technology, and React docs adhere to this principle. Besides this, community resources like these Youtube videos or stack overflow questions help to learn React and its core aspects without extra effort.Customisation: Unlike frameworks that dictate particular approaches to building interfaces, React is simply a library. It can be combined with other technologies and implemented pretty much any way that suits the project. This allows it an unrivalled level of flexibility and customisation.Cons of using ReactTons of underqualified devs: React is the first step for most new JavaScript developers, once they’ve got a handle on the basics. It’s relatively easy for new developers to pick up and build basic apps to throw on a CV. As a result, every man and his dog claims to be a React developer.Building an organised, maintainable and scale-able application using any framework is difficult and requires more knowledge than just writing basic React functions. As a startup or even an established business looking to hire React developers, you can’t trust that any old React dev will know what they’re doing.Lack of conventions: The development team is responsible for determining the development stack, since React is just the view library. This can be a problem for teams or freelancers that don’t have a strong grip on the best technology to pick for each job.More complex: React is intended to handle complex use cases. Sometimes it’s overkill for simple applications that would do better with something like Alpine.js or even vanilla JS.Examples of apps built with ReactReact apps are everywhere. Plenty of the big online services you’re used to using on a daily basis have been built with React. To give you a bit of context, here are a handful of popular applications. * AirBnB * Trello * Instagram * Facebook * Netflix * New York Times * Asana * Cloudflare * BBC * Imgur * PayPalNext.js explainedWhat is Next.js and why use it?Now that we’ve covered the high-level details about React, it’s time to introduce its most popular frontend framework, Next.js.Next.js is a React-based JavaScript framework, created by Vercel in 2016. Their primary goal is to provide a developer-friendly stack of tools for creating React-based applications.Next does a bunch of cool things but its big claim to fame is the rendering flexibility it provides. Since it’s coupled together with Node.js, it can render content on the server as well as statically at build time. All this means is websites or apps built with Next can be configured for elite performance without the usual headaches that come with static site generation.If you browse around the websites of big tech brands, you’ll find Next.js everywhere. If you don’t know how to see what technology a website is running on, I’ve written a handy guide on the topic. Brands such as Github, Twitch, Hulu, Nike and Nintendo have all thrown their chips behind Next as their frontend framework of choice. It’s quick, secure and easy to work with.Since Next.js is a framework for React, all the regular React syntax and features are available, in addition to a bunch of extensions.Next.js featuresNext comes with some seriously cool features. Here are the top picks.Data FetchingUtilising the two pre-fetching approaches (static generation and server-side rendering), the Next-based projects can be easily optimised for fast loading. While pre-fetching enables the Static site creation for SEO and fast content delivery on user request, its Hot Code Reload feature can dynamically load the newly-updated data on a web page.Code SplittingNext’s code splitting is a neat feature that bundles up just the necessary chunk of the Next.js application that is required for a user to view a single page. Since the user only has to download this small package of code to start interacting with the webpage, they can do so incredibly quickly, unlocking elite load times and performance.Typescript SupportNext.js supports TypeScript out of the box. TypeScript is a JavaScript extension developed by Microsoft to solve some of the complexity in how JS handles different data types. From a business perspective, using TypeScript in a Next.js application is going to cut down on errors and the amount of time that goes into bug fixing.The EdgeDepending on which host you’re using, Next.js can be deployed to “The Edge”. This concept is essentially a network of servers that host the Next.js application in a similar way to a content distribution network. Whichever server is geographically closest to the user will serve the content.On a traditional Content Distribution Network, this is limited to static content like images and HTML. However, Edge servers can run some backend functions too. So caching and code execution can be done physically closer to the user, resulting in even faster websites and applications.Pros of using Next.jsIt’s Performant: As a frontend framework that supports static site generation (SSG), Next.js creates super fast-loading websites and applications. It also comes packed with an innovative feature called SWV (stale-while-validated) that returns data from the cache to load the page immediately and then works on loading updated data.Image Optimization: Next natively puts images through a variety of optimizations intended to help in passing Google’s Core Web Vitals assessment. 1. Serving images at the correct size for different devices, using modern formats like webP 2. Preventing cumulative layout shift 3. Lazy load by default and the image area is blurred until fully loaded 4. On-demand image resizingBuilt-in CSS: Next.js lets you import CSS styles from a JS file. This is a nice feature for keeping larger Next applications organised.Cons of using Next.jsHonestly, Next is such a great framework that’s been well thought out by the Vercel team. It stands up compared to its main React competitor, Create-react-app. The only major downside is:Server-side rendering is complex: Honestly, this isn’t even a huge downside. But SSR isn’t straightforward. For a frontend developer, it requires knowledge of Node.js and some knowledge that may not be in their skillset.Examples of Next.js projectsConsidering the efficiency of Next.js, the Hulu web development team chose it among all Javascript Frameworks. They used Next to create their entire app for web users.Netflix, the top streaming platform, uses Next JS as it ensures smooth navigation and fast content rendering, delivering the best user experience through the UI.Next is a great framework for eCommerce development as well as for selling digital goods. That’s the reason why AT&T Store uses this React Framework.Frequently Asked QuestionsAre React and Next.js The Same?They’re not the same. React is a Javascript library for building UI’s. Next.js is a framework for building applications. While it’s built on top of React, it’s a more complete solution that provides all the tools and an opinionated approach to building an application.Is Next.js better than React?Neither technology is “better” than the other. There are cases when implementing a full frontend framework like Next.js makes sense, and others when using React in combination with another stack is the best approach.Since Next.js is an extension of React, it comes with additional features out of the box that React doesn’t, like static site rendering and conditional server-side rendering.Is Next.js or React better for SEO?Next.js is better suited to building websites, especially if good SEO is the goal. There’s a lot more to SEO than just the technology used to build a website, but Google has started focusing heavily on websites that load quickly and pass the CWV assessment, which is one of Next’s specialities, given it supports static site generation and code-splitting.Have any other questions that we haven’t answered here? Leave them below in the comments section, and we’ll get back to you in a day or so!"
  },
  {
    "title": "Choosing The Best Database For Your Project",
    "plaintext": "There are SO many database options available it’s kind of overwhelming to know which option will be the best for your next project.This isn’t a complete list, but it summarises the big players:Relational databases * SQLite * Postgres * MySQLDocument databases * MongoDB * FirestoreGraph databases * Fauna * Hasura * Neo4jK/V stores * Redis * Worker KV * MemcachedAt their core, all these databases do pretty much the same thing. They store data created by users for access later. However, they all work very differently and aren't suited to solving the same problems.Without spending time investigating each solution and having an intimate understanding of the philosophy behind the technology, it’s easy to pick the wrong database for your project. This can come back to haunt you down the road.Rather than suggesting you go off and spend a month playing with every database available on the market, we’re going to summarise the big differences and how you can pick the right database for whatever you’re building.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitQuick definition of a databaseFor the sake of the next section of this article, we’ll lay down a quick definition of a database (otherwise you can argue that Google Sheets and Airtable are databases).A database is something external that stores data, persists that data and is accessible via API and standard client.The fact that you’re reading an article about databases means you don’t need a “Harvard Dictionary” definition of a database, so let’s move on.The next decision: HostingKnowing what kind of database you want to run is arguably easier than deciding on where and how it will be hosted. Database hosting options have different skill requirements that start with “I don’t know how databases work, but I know I need one” to “I practice DevOps on the weekend”.There’s a specific set of skills required to spin up a database on a server like DigitalOcean, AWS, EC2, or Heroku. The idea here is that you spin up a virtual container, essentially like a Docker image, where the box is running an instance of your database software. You need to know which provider you want to use, how to deploy the database, how to manage the database and what kind of limits you’ll run into.This is a hill that even some developers decide isn’t worth dying on. For the aspiring entrepreneurs or non-technical founders looking to take charge of their technical direction, this is usually a poor place to start.The next option is managed services. There are provided or autoscaled hosts like Planetscale and Railway. These serverless database services are super quick to get started with, but they follow standard database conventions. The gif below shows how long it took me to spin up a Postgres database on Railway (15 seconds, although it looks quicker because I trimmed down the gif).Finally, at the end of the technical food chain are Superbase and Firestore (Firebase). These options move further away from the “standard” SQL conventions. Even though Superbase is built on top of SQL, it does things in its own way. This means less configuration, but as a tradeoff, once your app has committed to Superbase or Firestore, there’s no easy way to move onto a more scaleable platform.Comparing the types of databasesFor the sake of suggesting which type of database to use, we’re going to ignore graph databases and talk about their particular use case later in the article. That leaves us with three types of Db’s: * Relational * Document * Key value storeKey-value stores are the more specific and least comprehensive data storage solution. They’re used in very specific situations where relationships between data aren’t necessary to capture, and returning data as quickly as possible is the goal. For example, a cache like Redis.Document databases can do everything a KV store can do and more. Are they as quick as a key-value store for performing the same role? No, but they can achieve the same functionality. However, they can do things KV stores can’t, like data normalisation and lookup by subtables. This is perfect for cases where your application or website simply stores logged data that doesn’t need to have relationships. Document DBs can even be a good fit for simple content management systems.Relational databases can do everything a Document DB can do, but also define relationships between data. It might seem a bit over the top to configure a Postgres database simply storing objects with no relations, but being able to add the relations in the future offers flexibility in the future as your application grows.How to pick the right DB?The best approach for figuring out what type of database your project needs is working from the top down. Start by assuming you’re going to need a SQL / relational database to handle complex data relationships, and then see if it’s feasible to trim down the scope.The only time you would commit to using a document DB like Mongo, Firestore or Couchbase is if you’re absolutely certain that your application won’t evolve to need relationships.Applications pretty much always have data problems with relations. Here’s an example of what happens when an application architecture has committed to a Document DB and needs to accommodate these relationships.Scenario: An application has users who can write comments.The application already has a user table that records the user’s ID and name.To record comments, since it’s a document, we can add a suitable.But comments can also have reactions.Reactions have a User ID. To get this data, we’ll need to query the User table and get all the same data again just to access that ID. It’s a really sloppy and unmanageable process for handling data relationships.On the other hand, in a relational model, the same problem looks like this.In this model, a User has Comments which can be selected via foreign key, and the Comments have a user ID to identify which user left the comment. Comments also have Reactions which can be called by the Reaction ID.The point of this demonstration is that having the ability to define data relationships is going to save a ton of headaches down the line. Defining a set of relationships is a more agile approach to building a data model than adopting a Document DB where you really need to define every possible data relationship upfront. Otherwise, you’ll be in for some fun data migrations when things change.Should I use Firestore?Firestore is Google Firebase’s data solution. It’s a subset of the broader tools that make up Firebase. It’s known in the development community as an innovative data solution that asked questions that, at the time of its invention, didn’t have answers like ‘what if the client updated automatically when the database’s content changed?’ and ‘do we need a server?’However, since 2017 other solutions answering the same questions have popped up that do a much better job, particularly Superbase and Cloudflare DurableObject. Firebase was a Google acquisition rather than an invention, and the innovation velocity dried up when they were purchased.The biggest issue with Firestore is that when a client requests data, there’s no server that speaks to the database, finds the right field and returns the data. This becomes a problem when user-generated content enters the equation. If your application shows the most recent 20 comments on your homepage, but there are 10,000 comments in Firestore, then the full dataset will be called just to show the homepage.Firebase, like many other Google products (looking at you AWS), has its own opinions and standards that don’t align with the rest of the market. Developers experienced with SQL will still need to learn how Firebase wants them to handle authentication.There are also hidden risks in using Firebase that aren’t well publicized: * It can get crazy expensive as your app scales. * It’s a proprietary platform and migrating off Firebase is painful. Once you’re committed, that’s it. * Non-standard security practices are easy to misunderstand and leave your application vulnerable * Not modular, so you can’t swap parts out if they don’t suit your use caseSo coming back to the question, “should I use Firestore?”, the answer is no unless you’re already using it. If you really don’t want to handle the backend part for your small iPhone app or your company’s internal PWA, then Superbase would be a better alternative. It’s built on top of open-source technology, namely Postgres, so if you need to migrate in the future, it’s not such a headache. It’s also miles cheaper when your app starts to scale.Derisk your databaseThere’s a time and a place to get crazy with your tech stack. For example, our team are huge fans of building applications with Next.js, tRPC, and Tailwind CSS. These are all evolving technologies that do some cool stuff older technology can’t do for the user.Database, on the other hand, are not the place to go wild. They need to be stable and operational. They’re essentially invisible to the user, so there’s no great benefit to stepping outside of the norm. A good database has the responsibility to be scaleable, cost-effective and allow offboarding in situations where you need to use a different client or host.This is why applications using Firebase or FaunaDB can end up in sticky situations if there’s a strong reason to move to a new data solution. Since the database server handling your application’s data is proprietary and non-standard (compared with SQL), these companies provide no easy offboarding method. There’s no tool that lets you dump your data into a SQL format to pick up and use with another solution.Wrapping upPicking the right database solution isn’t as daunting a task as we made it out to be. Most applications need a relational database and will do well with Postgres or MySQL. The tricky part is hosting, or it was before solutions like Firebase and Railway entered the scene.Firebase is almost always a bad idea because it’s built on top of proprietary technologies, and you can’t escape, plus it gets super expensive. Superbase is a better alternative if you have to head in that direction.We recommend always having a server between the client and your data. It will future-proof your application and avoid the tricky situations serverless databases create.Let us know your thoughts below. We’ll get back to you in a day or two."
  },
  {
    "title": "Serverless Databases - Are They the Right Choice for Your Business?",
    "plaintext": "Serverless databases have seen a spiked adoption by many businesses due to their ability to handle dynamic workloads. These databases are based on an on-demand model and are provided by third-party service providers.They are best suited for enterprise solutions that need to handle fluctuating traffic without the hustle of managing the underlying infrastructure. This allows the business to focus more on important operations that increase their productivity.But before we look into other advantages of serverless databases, let’s unpack what they are and how they work.What are serverless databases?A serverless database is an elastic database that’s optimized to meet the irregular workload of applications. Traditionally, a business will spin up a server where the database lives and pay for it. This model follows a flat cost because even if the database isn’t being actively used, the business still pays for the server.Serverless databases asked the question “can we act as the server and offer the database as pay-per-use?”. Their main unique feature is that it eliminates the need for businesses to manage in-house servers, hence the name serverless.Serverless database pricing modelThe concept of serverless databases is based on the cloud computing execution model. With the serverless architecture model, you only pay for the amount of time and memory an application’s code takes to perform a task. Most providers measure this process by gigabyte-second.Note that this pricing model separates storage and processing power costs; meaning you will only pay for storage when there are no tasks to be executed.Traditional vs serverless databasesTo truly appreciate serverless databases, we need to take a step back and look into traditional databases.Traditional databases refer to the physical servers maintained by a business in-house. They use a single-tenant architecture - meaning they’re designed to serve one dedicated user, which improves data security and reliability.Traditionally hosted databases require manual provisioning, capacity planning, and sometimes heavy maintenance. These processes cost money and take time, and can slow down your development team’s efficiency. Especially for developers whose efforts are split between server maintenance and application development. A lot of devs, especially mobile devs, don’t need to be familiar with spinning up and maintaining a database on something like EC2 or Heroku.With serverless databases, you don’t have to purchase or lease any server. You only pay for the computing resources used on a workload basis. They are managed by the service provider, allowing your team to focus more on building your app and less on keeping the infrastructure working.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitHow do serverless databases work?Applications on a serverless database run on managed stateless containers. When a request is initiated, it goes through an API that routes to the provider’s backend resources. An instance or pod is then allocated to handle the request. Upon completion, the allocated resources are returned to the pool and you’re then billed on CPU capacity, RAM, and time active.While resource allocation takes place almost instantly, in some cases you may experience latency in request handling. This happens when there aren’t sufficiently sized pods in the resource’s pool. To avoid this latency, you may consider paying to keep some instances “pre-warmed” and ready to handle your requests instantly.That said, serverless databases are referred to as Function-as-a-Service (FaaS) platforms. This is because they allow the deployment of parts of business logic or individual pieces of code known as functions.They are ephemeral, meaning you can’t store the code on the platform, which explains why providers separate storage and processing services. Once a function is executed, the instance handling it vanishes automatically and another one is created on request when your application sends another function. Very cool stuff!It's common for serverless database providers to incorporate Backend-as-a-Service (BaaS) in their offering, for example, AWS Lambda. Generally, BaaS offers authentication and data storage services, allowing developers to focus on the front end. A combination of the two, FaaS and Baas, therefore allows businesses to run their applications in event-driven containers while providing the entire backend as a managed service.Features of a serverless databaseLet’s look at some of the most defining features of serverless databases:Automated elasticityServerless databases are inherently elastic. This means that you don’t have to worry about scaling your application since the database can scale automatically to accommodate sudden rise and fall in traffic. In addition to eliminating resource allocation challenges, elasticity ensures you only pay for the resources used, which helps you lower overhead costs.Geo distributionServerless databases feature protocols that allow businesses to replicate multiple datasets across the world without using any extra tools. This helps minimize latency consequently improving the user experience. Additionally, with evenly distributed datasets across the world, businesses can expand their global reach and tap into new markets.Multi-tenant architectureA multi-tenant architecture in cloud computing means that a vendor’s customers can share computing resources. However, the customers aren’t aware of each other nor is their data mixed. Serverless databases utilize the multi-tenant architecture, meaning that computing resources exist in a pool and can be shared by multiple projects on an on-demand basis.In a single-tenant architecture, a vendor allocates businesses/customers a dedicated server to handle their workload. As such, the customers pay for the server's entire resources, even if you only use a fraction of it. Contrastingly, a multi-tenant architecture allows you to share a server’s resources with other businesses while storing your data in silos. This enables you to pay only for the storage and processing capabilities you use, which is cheaper than single-tenant architecture.Further, the multi-tenant architecture leads to faster deployment since it eliminates the need to build siloed datasets for different projects. All projects within the same organization can utilize the same database cluster.ACID compliantThe ACID in database systems refers to a set of principles - atomicity, consistency, isolation, and durability – that guarantee data validity and reliability. Serverless databases are ACID compliant especially if they utilize a structured data schema. This way, all requests from the end user are managed as a single logical operation.Pros and Cons of serverless databasesHaving gained a clear understanding of serverless databases, let’s look into their benefits and drawbacks.Advantages of using a serverless database:Cost-efficientOne of the most significant benefits of using a serverless database is its cost efficiency. This is because it's charged based on a runtime model that ensures you only pay for the resources used. When your app is idle, you only pay for storage thus lowering operational costs in the long haul. With in-house servers, you pay a fixed amount of computing resources, which in most cases might end up being underutilized, yet you have to pay for it in its entirety.Boosts productivityUnlike traditional/in-house servers, serverless databases don’t require installation, provision, or any other type of maintenance. The service providers handle all the maintenance which leaves businesses to focus on building their applications. This leads to fast application development and deployment since development teams aren’t bogged down by the stressful server management operations. It also means that businesses don’t have to hire extra talent to manage their infrastructure, consequently saving them money and time.Efficient scalabilityThanks to its inherent elasticity, a serverless database can grow with your business needs over time. As such, you don't need to switch to a powerful server when your app's traffic grows. This helps future-proof your application since it can adapt to unprecedented workloads. Also, due to its automated scaling, a serverless database eliminates the chances of server overload resulting in application downtime. In-house servers have limited resources making them experience overload when there’s a spike in traffic. As such, serverless databases guarantee a smoother user experience than traditional servers.Improved resilience and availabilityA serverless database allows you to create multiple datasets across a vast region. This way, if one node fails all functions are diverted to the nearby functional nodes until the faulty one is fixed. This makes your application more resilient to failures while improving availability. Functions are executed based on the closest dataset to the user thereby reducing latency.SimplicityServerless databases reduce the complexity of working with databases to a simple API. Users can create functions and computational logic which are executed by the provider through an API. These databases empower developers to create clusters and manage operations with a press of a button which ultimately streamlines business operations. Also, thanks to its simplicity teams without system administration experience can get started with production quicker without hiring dedicated experts to manage their infrastructure.Here are the disadvantages of using serverless databases:Response latencyWhen a database isn’t being actively used, it goes into “idle mode” to save on resources. As such, when the app restarts it may experience response latency as the database takes time to relaunch the underlying resources. This problem is commonly known as a \"cold start\", and can potentially impair user experience. If your application is performance-sensitive, serverless databases may not be an ideal choice for you. To solve this problem, you’ll have to pay to keep some resources pre-warmed for your application. Cumulatively, these expenses can exceed the cost of configuring in-house servers with a fixed throughput.Difficulty in testing and debugging applicationsA serverless database makes it almost impossible to monitor and diagnose an app’s performance. This is because it’s difficult to replicate a serverless architecture environment since most serverless databases aren’t open-source. However, you can use some third-party serverless tools to monitor your app’s performance.SecurityServerless databases are often considered safe since the vendors are responsible for securing the system's vulnerabilities. However, it's a business's responsibility to configure its app's logic, data, and security-related layers that determine how an app interacts with the serverless database ecosystem. This introduces room vulnerabilities where every element can be an entry point for a hacker.Vendor lock-inIt's easy for a business to be tied to a vendor's serverless database solution. This makes it difficult to switch to other alternatives since each vendor offers unique features and additional perks.Serverless databases use casesIdeally, serverless databases are best suited for small businesses as they don’t require regular maintenance. Other cases where you might consider using a serverless database include:PrototypesPrototype projects are usually designed for short-time usage to test a solution and collect user feedback. As such, they can benefit from pay-per-use billing of serverless databases which is more economical than paying for an entire server.New applicationsWhen launching a new application, you're unsure of how the user base will scale. Using a serverless database in such cases allows you to create room to accommodate variable workloads. The database will scale automatically based on users’ growth.EcommerceOnline stores process payments from third parties. Instead of creating a dedicated server to store users' payment information, a serverless database offers you an alternative to process payments using cloud APIs that collect payment information and pass it to your database.How to choose a serverless database solutionThere is a wide variety of serverless database solutions available in the market. As such, it can be daunting to choose a suitable one for your business. Some of the popular choices include Amazon DB, CockroachDB, Amazon S3, Google Firestore, Fauna, and Amazon Aurora serverless.Some of the factors you should consider when choosing an ideal serverless database include:Data model needsYour choice of a serverless database should be based on your data model. For organized data with predefined relationships between data points, a relational serverless database works for you. Some of the best examples of relational serverless databases are Cockroach DB and Amazon Aurora. These databases prioritize query flexibility over performance. NoSQL serverless databases are designed to optimize read-time queries. Some of the best examples include Amazon DynamoDB and Google FireStore. Some databases such as Fauna are versatile in that they integrate both relational and non-relation schemas.Pricing modelWhen choosing a serverless database solution you need to consider the vendor’s pricing. Most of them use pay-as-you-go, AWS Lambda in particular charges only for the component you use regardless of the traffic. This model is more affordable than hourly charges.Frequently asked questionsWhat is meant by serverless?Although the name implies a lack of servers, it's not necessarily true. Serverless means that developers don't have to deal with server management; instead, this process is left to the database service provider.Is Amazon S3 serverless?Yes, Amazon Simple Storage Service (S3) is a scalable infrastructure offered through Amazon Web Service.Does serverless mean no database?No. Serverless databases do have databases that are based in the cloud.ConclusionServerless databases are an investment to any business. They are more cost-efficient and more scalable than traditional servers. If you have any questions about serverless databases we didn’t answer, please leave them in the comments section below and our team will respond in a day or two."
  },
  {
    "title": "Modernizing legacy systems",
    "plaintext": "Technical debt is one of those funny things that can easily be ignored... until it can't, and you find yourself Googling articles on modernizing legacy systems.One day, your legacy system is humming along on your in-house server, like it has for the past 12 years. The next minute, the world is on fire, and you're weighing up the options for bringing your dark ages legacy system into the 21st century.There are several different directions you can go at this point: * Salvage the code (if it's possible), update your dependencies, migrate to a new environment * Replace the application with something off-the-shelf * Rebuild the application with modern frameworks and technologiesThere are probably plenty of situations where moving to a new environment or addressing problems in the existing app will get you over the line. But that content isn't exciting and edgy!In this article, we're going to focus on rebuilding your application with modern technologies and truly future-proofing. We'll also briefly cover the \"textbook\" approaches to this problem, even though we think that only a couple are practical.Before we get started, please hear out our quick pitch. You're looking for options to get your system up to modern standards so it's quick and reliable. We specialise in helping teams in your position. Drop us a line to see if we can help lighten your load. The worst that can happen is that you get free experience-backed advice!The problem with your outdated softwareOutdated software starts to accumulate a unique set of risks: * Software dependencies and underlying packages are no longer supported, so if there's a problem, you're stuck * Developers typically learn and practice modern software, so it can be difficult to find qualified help * Legacy software becomes less cost-effective over time as high maintenance costs for the reasons I just mentioned * For legacy systems that are running on in-house infrastructure; there's always a risk that the hardware fails, ending up with long down timesModernizing legacy systems is all about risk mitigation. Can your business bear the cost of your existing systems going offline for a week? Or even if your system is perfectly hardened, can it adapt to whatever changes your business is going through?The next logical question is whether the cost of bringing your system up to modern standards will ever pay for itself with future growth. There's no straight answer to that question, but cloud infrastructure is pretty awesome these days.With the rise of serverless databases, headless API-driven solutions, and affordable distribution through global content distribution networks, ongoing costs can be significantly cheaper for a modernized system, especially one that needs to scale.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitHow much will my modernization project cost?There's only one way to answer that question, and that's going through a full Product Roadmapping process.I don't want to bore you by rehashing the topic since I've already covered a bit of it above. The basic idea is that every feature of your system is documented through user stories, and those stories are estimated by our project team.The Product Roadmapping process is priced separately to the project so we have no incentive to rush through it or to overprice the main project. At the end of the process, you get a water-tight plan for the modernization of your application, along with a detailed breakdown of costs and timeframes.Where to start your modernization project?Planning and documentation are always the place to start, but it also depends on where you're at in the process. This is a summary of everything from start to finish: 1. Documentation 2. Architecture plan 3. Build & write tests 4. Migrate data 5. Set up your new environmentArguably the toughest part of the entire exercise is capturing the system requirements and writing the documentation. Once that's done it's not like the rest of the process is \"easy\", but it's mechanical.Documentation: Is it even possible to rebuild this undocumented system?Yes, but there's no shortcut. There are two approaches you can take: 1. Work through the codebase and document each function 2. Go through a Product Roadmapping processWorking through the codebase line by line is no fun, especially if you don't have someone with intimate knowledge of the application. Given you're working with a \"legacy\" system, chances are not everyone who was involved in writing the application is around to help answer questions.This problem is compounded if the application is written in some archaic language like Visual Basic Applications (VBA) that takes forever for modern developers to read, let alone understand.The other option is jumping straight into a Product Roadmap. We've written a pretty detailed guide on how Product Roadmaps work so we won't go too deep. The idea is to capture the user workflows, then break them apart into user stories and finally into individual features.The risk of building a Product Roadmap for a legacy system is missing an important feature that's hidden somewhere in the existing code.The winning formula usually lies somewhere in the middle. Start with a Product Roadmap to lay the business goals and foundations. The team responsible for the legacy system modernization process needs a document to reference that explains the business logic behind each of the application's features. Once the document is ready, the project team can attempt to read and document the codebase. If they get stuck, there's at least a document they can reference to understand what in the world the application is trying to do for the user.It's a difficult and challenging task, but our team have experience and know the challenges well. If you're reading this article in hope of finding a team to handle this job for you, drop us a line. At the very least you'll get some experience-backed advice on how to move forward on your legacy modernization project.The Architecture Plan - Picking your tech stackOnce you've built your Product Roadmap, it's time to figure out what technology you're committing to.The choice is often an extension of whatever your legacy system was built with. For instance, PHP has been around a looooong time. If your legacy system was built on an ancient version of PHP then it'll make sense to keep it running on PHP, and migrate the functions into a framework like Laravel.In cases where your application has been built in a technology that's no longer popular, or isn't suited to running in the cloud, then it's time to pick modern systems.Everyone has an opinion on which language is the best. Stackoverflow captures the most popular languages and frameworks each year in their developer survey. These are the results from front and backend frameworks in 2022:I've annotated what kind of language each of the top results is (frontend, backend) and which language it's built on top of. JavaScript dominates the top of the table, which is no surprise since it can do everything. Between frontend frameworks like React, Vue and Angular, and runtimes like Node and the frameworks it supports, plenty of enterprise applications are built on top of nothing but JavaScript.The point we're making here is that JavaScript is a safe choice, and one we would recommend. Our team built a lot of Laravel (PHP) backends, and it's also a great choice.However! If a new client asked us tomorrow what architecture we would recommend for their application, without knowing their requirements, our suggestion would be:Next.js + tRPC + Tailwind CSS + TypeScript + Prisma + NextAuth.jsThis stack is called T3 and it was made by the CEO of Ping.gg. It's bleeding edge stuff and focuses on performance, modularity and full-stack typesafety. The stack hinges on Next.js, which is a React-based framework that's been extended for developing full-stack applications with the help of the supporting technologies.If you're unsure what architecture will best suit your legacy system modernization approach, drop our team a line, and we'll help you think through the options.Build and write testsThe next step is getting your hands dirty and rebuilding the application.If you're optimizing existing code, this will be a challenge of porting parts of the application over bit by bit, updating them to work with the technology's dependencies before moving on to the next step.If you're rewriting your application from the ground up, it's more likely to be a series of sprints where your development team aims to build a set of features every couple of weeks. By this point, you should have already committed to rebuilding your tool internally or hiring a development team, and if they're worth their salt, they'll follow a viable methodology to get the application built and tested correctly.Write automated tests for your features. Going through the effort to modernize your system with new and better capabilities only for it to become unstable and not work as well as the previous version is nobody's idea of a fun time.Achieving good test coverage has a huge suite of benefits to the bottom line. It takes time and arguably slows the pace of the project down since the team have to think through all the potential side effects of each feature. However, automated testing heavily reduces the amount of rework and implementation time for new features in the future.Migrate your dataData migrations are often tricky, especially if your team has had to change the schema along the way to accommodate upgrades and changes to technology architecture or functionality. If your legacy system is a few years old, you could have to accommodate a significant amount of data. There's a chance there will be problems, inconsistencies, or junk data in outdated systems you'll need to work through.There's not a lot of concrete advice we can give you on migrating your data, except that you'll want to make a plan early on and account for the process taking a while.Picking the right databaseOne thing that's going to make life difficult with data migration is picking the wrong kind of database. Your team should work this out pretty quickly, but if you're moving from a relational database like MySQL to a Document database like MongoDB, then you're going to have a bad time.Why would anyone do this, you ask? Well, the MERN (Mongo, Express, React + Node) stack has been pretty trendy for a little while. JavaScript devs love it because they can manage a full-stack app without having to jump between languages. For most applications, this stack is going to cause inflexibility.We've written a guide on picking the best database for your project you should check out before making this architectural decision.Set up your new environmentIf your legacy application has been running on a server managed by your business, or even by a small infrastructure company, then you're in for a treat. Cloud computing and managed infrastructure have come a long way over the past five years.Cloud hosting has been delineated into different products: * Virtual private servers * Routing and load balancing * Content distribution network * Middleware services * Firewalls * Managed databasesPretty much anything your legacy application had, you can get in a dedicated cloud form. The benefit to being able to pick and choose which pieces make up your new environment is unlocking scaling performance and cost efficiencies you can't otherwise.For example, if you only need a load balancer for a certain part of the year, there's nothing stopping you from spinning it up and down when required. It's a similar story for resources. Need extra processing power and memory for a month or two? Just ramp your VPS up and down as required.Lots of businesses gravitate towards Amazon Web Servers for their infrastructure needs. To be honest, AWS is pretty great, but Amazon does everything in their own non-standard way which is kind of a pain in the ass for the uninitiated. We're bigger fans of DigitalOcean and Cloudflare. Between these two services, most of your environment requirements will be covered.Things to look forward to post upgradeThe process of bringing your legacy systems up to date can be gruelling, costly and time-consuming but just think about what life will be like on the other side.The headaches that you have put up with in the old system can finally be ironed out, without the risk of everything going offline. Those workarounds your team have become used to can be thrown in the trash. Maybe you can even get to your system on your phone?It's easy to grow comfortable with legacy systems and forget that the entire software world has undergone a user experience revolution over the past decade.Wrapping upThere's a lot of decisions to make when figuring out how to modernize a legacy system. Do you try to update the existing codebase (if that's even possible) or start from scratch? Then there's the question of how to document your new system, what tech stack to use and what kind of infrastructure to commit to.The best way to think through all these decisions is to create a Product Roadmap and spend a couple of days working through every possible question.If you think we've missed anything, which is likely because it's a big topic, feel free to leave a comment below and we'll get back to you."
  },
  {
    "title": "Gatsby Starter Henlo - The Best Starter for Netlify CMS",
    "plaintext": "Gatsby is arguably the best choice for building simple, lightweight, highly optimized websites. For website developers, it provides answers to a lot of the weird problems we’ve had to accept in WordPress. However, the area it can’t compete with WordPress is out-of-the-box content management.After playing around with most of the popular CMS options on the market, we found that Netlify CMS is the best solution to pair with Gatsby for smaller sites that only want to show an online presence and publish an article here or there.Even though Netlify CMS is the right choice, users are limited in how they can maintain their website beyond simple content changes. Want to move a call to action further up the page? Bad luck. You’ll need to speak to your developer.Our solutionOur solution to this problem is an official Gatsby + Netlify CMS starter that utilizes custom plugins and beta features to provide a WordPress-like experience.In addition to unlocking flexible content management, the starter focuses on providing a way for developers and small businesses to build blazing-fast, simple, cheap-to-maintain websites.Introducing Gatsby Starter HenloAs an agency that builds websites for paying clients, we’re always on a mission to provide the best possible flexibility and performance. There are plenty of ways to deliver a performant site which are all slightly different depending on the stack we’re using. However, for flexibility, we use the same approach regardless of the CMS or technology.This CMS setup comes straight from Advanced Custom Fields (ACF) Flexible Content field in WordPress. Each section we create is a reusable component that can be added to any page through the site. This allows content editors to grow pages without any need for changing content structures and eases further development of the page.Netlify CMS is my personal favourite flat-file CMS out there, that's why we decided to create a special starter that allows everyone to create absurdly fast, flexible websites without any issues.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPage Builder & Blocks - How to make Netlify CMS more flexible?Since we like the way WordPress manages content, we started with 3 default post types - Pages, Posts and Authors. These are the basis of almost all modern websites.Flexible pagesIn our approach, there's no need for additional page templates because every page is controlled by a Page Builder. Using Blocks it's easy to generate blog pages, partner pages or any other page you want.There's only one problem - slugs. By default, slugs are generated based on the file name of the markdown file created within the Netlify CMS collection. This causes quite an issue, that's why we had to create a widget - Netlify CMS Permalink Widget - which duplicates WordPress slugs handling. Instead of using filenames, we save slug directly in the markdown file, this allows for creating robust sitemaps with ease.Additional Post TypesPosts & Authors are set up to create the blog functionality of the site. This can be extended further by adding additional post types (or collections using Netlify's CMS nomenclature).Normally we want to use post types to re-use the content across different Blocks, but this can cause issues due to the way Netlify CMS works. We can refer to different documents by one of the populated fields, when the referred field changes the connection between Block and that document is broken (yes it's a massive pain in the ass).The solution was brilliantly simple - unique IDs. We've created an additional widget for Netlify CMS to handle that, meet Netlify CMS ID Widget. This widget generates unique IDs for each document, which allows us to create connected Blocks for displaying selected posts/FAQs/case studies and any post type you might want.While creating new post types you might want to use a slug widget as well, it can automatically add a base path, which allows content editors to change slugs quickly and efficiently while reusing Page Builder, helping you save development time.Previews - out of the box!To make sure Netlify CMS is the best it can be for users, previews are reusing the same Block components as the actual page (🤯). This allows for a quick preview of the content without a build phase. The only case you have to handle is a dynamic reference to other post types.Forms builder - baked in 🔥Netlify offers an amazing solution for handling forms, but creating forms with Gatsby kind of sucks. Well, no more!Every website requires forms, so it was a no-brainer to include a system to generate and reuse them easily (think Contact Form 7 for Gatsby). Content editors can create native forms without the developer's help by utilizing instant previews, and reusing them across different pages.Easily manageable settingsThe last part to make Netlify CMS more approachable was introducing JSON-based settings. With this approach, fallback values such as SEO descriptions, titles and more can be changed from the CMS level directly and used even during build processes.We've added this to enable you to create themes that can be reused across different pages when needed.Great DX is crucialImprovements to Netlify CMS were made to ensure the best developer experience. We switched to manual initialization dumping Yaml in favour of JavaScript config. Yes, you can use functions to generate collections (and yes it is awesome!). Working with lots of Blocks and different fields has never been easier!Additionally, Netlify CMS is ready to be run locally. Hence, it's possible to change the configuration and review changes quickly, as well as create new content using Netlify CMS without creating markdown files.All great features of Gatsby Starter Henlo * 💪 Battle-tested starting point for small & large web projects * 📄 Form Builder that enables Admins to create multiple forms with ease & Netlify Forms integration * 🌗 Darkmode support * 🗺 Sitemaps using gatsby-plugin-sitemap * 🔥 Perfect score on Lighthouse for SEO, Accessibility and Performance * 💇‍♀️ TailwindCSS support with PostCSS processing & PurgeCSS * 🔌 Support for Gatsby API functions * 🎇 Crazy fast images with gatsby-plugin-image * 🕵️‍♂️ Complete SEO configuration with GraphQL fragment and reusable components * Netlify deploy configuration * Example pages, collections, CMS configuration with Netlify CMS & hooks * Readme template for custom projects * Easy Netlify CMS configuration using Manual Initialization ..and moreIf you'd like to test it out, check out our Gatsby Starter Henlo GitHub repo"
  },
  {
    "title": "MEAN vs MERN - The Ultimate Comparison 2023",
    "plaintext": "MEAN and MERN stacks are popular technology stacks for web application development. The main difference is that MEAN uses Angular as its front-end framework, while MERN uses React Js for its UI. MEAN is more popular for enterprise-level architecture, while MERN is more popular for smaller applications. That said, the ideal choice of tech stack to use in your business depends on several factors, including the complexity and timeline of your project.Here is an in-depth comparison of the two stacks to help you choose the right one for your business needs.What is MEAN stack?The MEAN stack is made of four main components; (M)ongoDB, (E)xpress JS, (A)ngular JS, and (N)ode JS.MEAN stack is an open-source JavaScript-based framework for building web and hybrid mobile applications. The framework is based on the Model-View-Controller (MVC) architecture, making it an ideal choice for accelerated application development. Besides, it offers developers access to numerous plugins and other tools that offer an efficient development process.How the MEAN stack worksHere’s how the MEAN stack works based on its architecture: 1. MongoDB – databaseMongoDB is an open-source non-relational database for cloud applications. It offers improved performance and scalability, making it ideal for some large applications. In the MEAN stack, MongoDB is used to store an application's data in the form of JSON files while also facilitating the transfer of data between the client side and the server side. Since the data application and the database use JavaScript, it eliminates the need for translating files as they journey to and from the application and database.Note: MongoDB can be difficult to maintain when your data has a number of complex relationships. In this case, it’s better to use a relational DB. Check out our comprehensive guide on picking the right database.Some of the best features of MongoDB: * Offers horizontal scalability to support the increasing workload of modern applications * It comes with built-in sharding support, which helps breakdown large datasets * Allows duplication of data over multiple servers * It’s a schema-less database2. Express.JS – back-endExpress is a back-end framework based on Node.JS and, as such, it maintains the use of JavaScript between front and backend (one of the big reasons MEAN is popular). Its primary role in the stack is facilitating a smooth data transfer between the frontend and the database.Thanks to its minimalist design, Express handles all application processes efficiently while eliminating the risk of redefining variables, and saving time and money. In a nutshell, it provides excellent tooling for the development of single-page, multi-page, and hybrid applications.Express.JS features include: * Easy to configure and customize * Offers an advanced routing mechanism that allows you to define the route of your application with the help of HTTP methods * It comes with additional middleware that can manipulate requests and responses. * It has a debugging mechanism that pinpoints the parts of the web application that have bugs. This helps improve productivity. * Provides access to Node.JS features in the form of functions that can be used for fast application development3. Angular – front-endAngular is a JavaScript-based front-end framework for building intuitive user interfaces using reusable templates. It was created by Google in 2016 and has a bit of a divisive reputation in the development community. Some devs love it because it’s opinionated and provides a complete development framework. Others (our team included) think it’s a convoluted and poor experience to work with because of the developer workflow it forces.Angular enables developers to extend their HTML tags with metadata for a more dynamic and interactive web experience, compared to extending them with static HTML and JavaScript or jQuery. The framework has other perks, such as form validation and back-end communication.Angular's unique features include the following: * Compatible with most browsers * Uses Typescript syntax * Uses the MVC architecture * Animation support * It offers advanced testing tools, for example, Karma and Jasmine.4. Node.JS – serverNode.JS is a server-side framework that provides a JavaScript runtime environment, allowing you to run JavaScript apps outside the browser. Its greatest perk is its scalability, enabling you to run cloud-based applications that scale on demand. It also comes with an extensive ecosystem of libraries known as Node Package Manager (NPM), which helps deliver more value and features with less effort and time.Other Node.JS features include: * It uses event-driven architecture, which helps build lightweight applications * It's asynchronous, thus allowing your app to run and respond to other events while handling a long-running task. This feature provides an improved user experience. * Run on single-thread architecture meaning all requests are executed in the same thread, unlike traditional servers such as Apache HTTP that create limited threads to process requests. This way, Node.JS can process more requests than its counterparts.Essentially, Angular accepts user requests and interactions. These requests are then moved to Node.JS, as Express.JS initiates a database request. This prompts MongoDB to retrieve the requested data and send it back to Express. Express then returns the response to Node.JS, which sends it to Angular for display.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPros and cons of MEAN stackThe advantages of using MEAN stack include: 1. Uses isomorphic codeThe MEAN stack runs entirely on JavaScript on the client and server sides. This means it’s isomorphic by design which allows for rapid development and deployment of applications. It also eliminates hiring a different development team to handle your back-end and front-end. You can use the same team to build an entire application, lowering development costs and saving time.2. Cross-platform compatibilitySince the stack uses JavaScript, you don't need a different codebase when developing web and mobile applications. The stack supports hybrid mobile application development that utilizes the same codebase as the web application while maintaining the same functionality and features across all platforms.3. Access to extensive librariesThe MEAN stack components are open-source, giving businesses access to resourceful libraries and tools for efficient development. Also, since it's open source, it means development teams can access solutions to problems they might encounter during development, making debugging easier.4. Development of real-time and interactive appsThe Node.JS in the MEAN stack facilitates the integration of features in real time without necessarily requiring a user to update the app. You can use it for a live app demo and even build interactive real-time apps such as messaging apps.MEAN stack disadvantages include: * MEAN stack offers poor isolation of server and business logic, which could potentially result in spaghetti code * You may lose your data during data partitioningWhat is the MERN stack?MERN stack is basically a variation of the MEAN stack, where the former uses React JS library for the front-end, and the latter uses Angular.The MERN stack is made up of the following: * MongoDB * Express.JS * React * Node.JSReact, is a declarative JavaScript library developed by Facebook in 2013 for building dynamic UI for web and hybrid mobile applications. It uses a component-based architecture, making it easier to reuse the code and modify individual interfaces. Its main feature is its virtual DOM (Document Objective Model) for improved app performance.With the conventional DOM, when a single object state changes, the entire list of objects is updated, too, leading to slow loading time. With a virtual DOM, however, only the manipulated object state will be updated in the real DOM, consequently improving the app's loading speed.MongoDB, Express, and Node all serve the same functions as in the MEAN stack which we’ve already covered. MongoDB forms the database tier that stores the app's data, and Express.JS and Node.JS form the server-side tier, where the former handles HTTP requests and responses. Node, on the other hand, receives the responses and sends them to React for rendering.Image credits: https://www.mongodb.com/mern-stackPros and cons of MERN stackLet’s look at some of the benefits of using the MERN stack: * High performanceMERN stack offers fast UI rendering thanks to React’s virtual DOM feature. Unlike AngularJS framework, React is a library, meaning it gives you the freedom to organize and optimize the code for improved performance. As a result, it improves the user experience and makes your web application more SEO friendly. * Cost-effectiveMERN, similar to MEAN, uses JavaScript for its back-end and front-end. So, you don't have to hire different developers for each tier, thus saving you money and time. This also gives you flexibility allowing you to switch between client and server-side development, resulting in faster deployment. * Offers native experience to usersReact, as part of the MERN stack, enables businesses to build robust hybrid mobile apps using React Native framework. This framework is dedicated entirely to building mobile applications. As such, it supports features such as camera access and seamless data sync between the offline and online states of the app.The downsides of using the MERN stack include: * Low productivityWhen working with MERN's React JS library, developers usually use numerous third-party tools and libraries to get the job done. Although access to these tools offers an opportunity to build a robust app, they require additional configurations, slowing development and deployment. * Used for small projectsMERN is best suited for building single-page applications and mobile applications. If you want to build large applications, you're better off using the MEAN stack.MEAN vs. MERN: Head-to-head comparisonBelow is a compiled list of the differences between MEAN and MERN:MEAN stack-﻿ Uses Angular for the frontend-﻿ Has a steeper learning curve-﻿ Offers good developer productivity for fast deployment (for devs who are familiar with the framework)-﻿ Lower performance in UI rendering-﻿ Usually preferred for large-scale apps because of its opinionated and standardised approach.-﻿ Angular uses two-way data binding-﻿ Supports hybrid mobile app development, but there’s no Angular framework for building native apps.MERN stack- Uses React library for the frontend- Relatively easy to learn and has a large pool of developer talent- Lowers productivity because there’s a need for 3rd party tools, resulting in less rapid development- Quicker response time- Often used for building single-page applications- React uses a unidirectional data flow- It has a dedicated framework, React Native, for building hybrid mobile applications.The obvious differences between the two stacks stem from using Angular and React:1. Error preventionIn terms of error handling, the MEAN wins over the MEAN stack since Angular uses Typescript, which is more effective in spotting bugs in the early development stage and improving code maintainability. Fewer bugs mean faster development and deployment. MERN's React uses JSX, which is basically a combination of HTML and JavaScript. Although, React does offer an extension to work with Typescript, it’s not a native integration.2. SecuritySecurity is an important component of your application as it helps maintain data integrity. Both stacks offer high security standards thanks to their component's advanced security modules. They both use MongoDB – a non-relational database that helps prevent SQL injection attacks, thus securing users' data.Factors to consider when choosing between MEAN and MERN stacksYour decision on the ideal stack to use for your application should be based on the following:UI requirementsWith React, you can build complex interfaces from simple blocks thanks to its component architecture. If you're looking to build advanced yet intuitive interfaces, then the MERN stack is more suitable than MEAN. Besides, MERN offers a better user experience than MEAN due to its fast UI rendering.Maintenance and modificationsMERN stack is easier to maintain and modify, especially on the front end. This makes it best for shipping a minimum viable product (MVP) as you work to build a more robust application.Project TimelineThird-party tools in Angular are integrated in a plug-and-play fashion, which improves productivity, especially when working with the MEAN stack. Even though React gives development teams numerous third-party libraries and tools to work with, these tools require more effort to integrate and run, potentially delaying development.Frequently asked questionsT﻿here's a fair bit to cover on this topic. Here are a couple of questions we didn't answer directly across the rest of the article.Is the MEAN stack better than MERN stack?The ideal stack to use depends entirely on your project needs. MERN is more suited for single-page applications and CRUD operations. MEAN, on the other hand, works best for large applications.Which stack is in demand, MEAN or MERN?Both stacks are in demand, but the MERN stack boasts more popularity than its counterpart since it’s easier to learn.ConclusionChoosing the right stack between MEAN and MERN can be daunting, given their similarities. As such, you should take time to weigh the unique capabilities offered by each and choose one that best aligns with your project needs. If you have any questions about MEAN and MERN stacks we didn't answer, please leave them in the comments section below, and our team will respond in a day or two."
  },
  {
    "title": "Sending Emails in Laravel: Mailable Classes, Templates & Laravel Versions",
    "plaintext": "For creating apps with PHP, software engineers may choose Laravel, a PHP framework that optimizes emailing processes. Laravel allows you to manage email previews, has various options for localization, and ensures that real users never see test emails in their inboxes.The available documentation and tutorials cover most of the questions on managing emails in Laravel. Still, new releases and constant updates may cause questions. So let's go through the most frequent ones: how to send emails in Laravel, and manage mailable classes and Blade templates.Сreating Mailable ClassEach type of email sent in Laravel is presented as a mailable class. It is stored in app/Mail directory that is automatically generated as soon as the class is created using the make:mail Artisan command:php artisan make:mail OrderShippedConfiguration for mailables is done in several methods — envelope, content, and attachments.Configuring The SenderUsing The EnvelopeIn Laravel, we have two ways to configure the sender.Firstly, it may be specified on the message's envelope:use Illuminate\\Mail\\Mailables\\Address;use Illuminate\\Mail\\Mailables\\Envelope;/*** Get the message envelope.** @return \\\\Illuminate\\\\Mail\\\\Mailables\\\\Envelope*/public function envelope(){    return new Envelope(        from: new Address('jeffrey@example.com', 'Jeffrey Way'),        subject: 'Order Shipped',    );}Using a Global from AddressWhen your application has the same sender address for all the emails, you may specify an address in the config/mail.php configuration file. If there is no fixed \"from\" address within the mailable class, the system will use this one:'from' => [  'address' => 'example@example.com',  'name' => 'App Name'],Use global \"reply_to\" address within config/mail.php file:'reply_to' => [\t'address' => 'example@example.com',\t'name' => 'App Name'],Configuring The ViewYou may define the view or the template needed to be used when rendering the email's contents within the content method:/*** Get the message content definition.** @return \\Illuminate\\Mail\\Mailables\\Content*/public function content(){    return new Content(        view: 'emails.orders.shipped',    );}Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPlain Text EmailsSpecify the plain-text template when creating the Content definition to define a plain-text version of an email:/*** Get the message content definition.* @return \\Illuminate\\Mail\\Mailables\\Content*/public function content(){    return new Content(        view: 'emails.orders.shipped',        text: 'emails.orders.shipped-text'    );}You may use the html parameter as an alias of the view parameter:return new Content(    html: 'emails.orders.shipped',    text: 'emails.orders.shipped-text');View DataYou may use one of two to view data:Via Public PropertiesAny public property defined on the mailable class will be available to view automatically.For instance, pass data into the constructor and set that data to public properties:<?phpnamespace App\\Mail;use App\\Models\\Order;use Illuminate\\Bus\\Queueable;use Illuminate\\Mail\\Mailable;use Illuminate\\Mail\\Mailables\\Content;use Illuminate\\Queue\\SerializesModels;class OrderShipped extends Mailable{    use Queueable, SerializesModels;    /**    * The order instance.    * @var \\App\\Models\\Order    */    public $order;        /**    * Create a new message instance.    * @param  \\App\\Models\\Order  $order    * @return void    */    public function _construct(Order $order)    {        $this->order = $order;    }    /**    * Get the message content definition.    *    * @return \\Illuminate\\Mail\\Mailables\\Content    */    public function content()    {        return new Content(            view: 'emails.orders.shipped',        );    }}When the data is set to public property, you may access it:<div>    Price: {{ $order->price }}</div>Via The with ParameterWhen you need to customize the email's data format before it is delivered to the template, pass the data manually to view via the Content definitions with parameter.Set the data to protected or private properties, and the data will no longer be automatically available to the template:<?phpnamespace App\\Mail;use App\\Models\\Order;use Illuminate\\Bus\\Queueable;use Illuminate\\Mail\\Mailable;use Illuminate\\Mail\\Mailables\\Content;use Illuminate\\Queue\\SerializesModels;class OrderShipped extends Mailable{    use Queueable, SerializesModels;    /**    * The order instance.    * @var \\App\\Models\\Order    */    protected $order;    /**    * Create a new message instance.    * @param  \\App\\Models\\Order  $order    * @return void    */    public function _construct(Order $order)    {        $this->order = $order;    }    /**    * Get the message content definition.    *    * @return \\Illuminate\\Mail\\Mailables\\Content    */    public function content()    {        return new Content(            view: 'emails.orders.shipped',            with: [                'orderName' => $this->order->name,                'orderPrice' => $this->order->price,            ],        );    }}You may access it as soon as it is passed to the withmethod:<div>    Price: {{ $orderPrice }}</div>AttachmentsTo add attachments to an email, add them to the array returned by the attachments method.Firstly, add an attachment — provide a path to the fromPath method:use Illuminate\\Mail\\Mailables\\Attachment;/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment*/public function attachments(){    return [        Attachment::fromPath('/path/to/file'),    ];}While attaching files, specify the display name or MIME type — use the as and withMime methods:/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment*/public function attachments(){    return [Attachment::fromPath('/path/to/file')->as('name.pdf')->withMime('application/pdf')];    }Attaching Files From DiskAttach files from filesystem disks using the fromStorage attachment method:/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment\\[]*/public function attachments(){    return [        Attachment::fromStorage('/path/to/file'),    ];}Additionally, specify the name and MIME type for the attachment:/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment\\[]*/public function attachments(){    return [        Attachment::fromStorage('/path/to/file')                ->as('name.pdf')                ->withMime('application/pdf'),    ];}To specify a storage disk use fromStorageDisk method:/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment\\[]*/public function attachments(){    return [        Attachment::fromStorageDisk('s3', '/path/to/file')                ->as('name.pdf')                ->withMime('application/pdf'),    ];}Raw Data AttachmentsTo attach raw data, use fromData method:/*** Get the attachments for the message.** @return \\Illuminate\\Mail\\Mailables\\Attachment\\[]*/public function attachments(){    return [        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')                ->withMime('application/pdf'),    ];}Inline AttachmentsTo embed an image, use the embed method.The system automatically makes the $message variable for all templates:<body>    Here is an image:    <img src=\"{{ $message->embed($pathToImage) }}\"></body>HeadersTo attach additional headlines, define a headers method. It will return Illuminate\\Mail\\Mailables\\Headers instance:use Illuminate\\Mail\\Mailables\\Headers;/*** Get the message headers.* @return \\Illuminate\\Mail\\Mailables\\Headers*/public function headers(){    return new Headers(        messageId: 'custom-message-id@example.com',        references: ['previous-message@example.com'\\],        text: [            'X-Custom-Header' => 'Custom Value',        ],    );}Tags & MetadataAdd tags and metadata via Envelope definition:use Illuminate\\Mail\\Mailables\\Envelope;/*** Get the message envelope.** @return \\Illuminate\\Mail\\Mailables\\Envelope*/public function envelope(){    return new Envelope(        subject: 'Order Shipped',        tags: ['shipment'],        metadata: [            'order_id' => $this->order->id,        ],    );}Working with Laravel MailCreating the Laravel Email TemplateWith Laravel, you can create templates, including buttons, tables, and panels — a rare feature for other frameworks' markdown support. The template is a fully customizable Blade file.Template files use the .blade.php extension. They are stored in the resources/views directory.To return Blade views from routes or controllers, use view helperDisplaying DataTo display data, use the route:Route::get('/', function () {    return view('welcome', ['name' => 'Samantha']);});Display the contents of the name variable:Hello, {{ $name }}.HTML Entity EncodingTo disable double encoding, use the Blade::withoutDoubleEncoding method from the boot method of AppServiceProvider:<?phpnamespace App\\Providers;use Illuminate\\Support\\Facades\\Blade;use Illuminate\\Support\\ServiceProvider;class AppServiceProvider extends ServiceProvider{    /**    * Bootstrap any application services.    *    * @return void    */    public function boot()    {        Blade::withoutDoubleEncoding();    }}Sending an email with LaravelTo send an email in Laravel, use one of the API-based drivers: Mailgun, SparkPost,  Amazon SES or Mailtrap email API. You may set a default driver in a mail configuration file and manage particular types of messages with SparkPost:Mail::mailer('sparkpost')\t->to($emailAddress())    ->send(new NewUserNotification));Sending Emails Through Laravel using SMTPYou may use any SMTP server, Gmail, for instance. All the configurations are in config/mail.php file.Laravel recommends using the Mailtrap SMTP server. It ensures that the actual users will never get a test email — to send a message to real users, change the configuration:MAIL_MAILER=smtpMAIL_HOST=smtp.googlemail.comMAIL_PORT=465MAIL_USERNAME=youremail@gmail.comMAIL_PASSWORD=your passwordMAIL_ENCRYPTION=sslIntegrate Mailtrap with LaravelLaravel did work with Mailtrap simple. There is a default Mailtrap server, so you only need to enter credentials. Use Cloudways Managed Hosting Platform to install Laravel and paste the configurations in the .env file.MAIL_DRIVER=smtpMAIL_HOST=smtp.mailtrap.ioMAIL_PORT=2525MAIL_USERNAME= //your username generated by MailtrapMAIL_PASSWORD= // your password generated by MailtrapMAIL_FROM_ADDRESS=from@example.comMAIL_FROM_NAME=ExampleLaravel VersionsLaravel releases a new version every year. All the versions designated LTS are supported with security fixes for three years and bug fixes for two years.The 9th version of Laravel was released on February 8, 2022. The 8th version is still maintained; older ones are not updated or maintained. The 10th version may be released on February 7, 2023."
  },
  {
    "title": "tRPC vs GraphQL: How to choose the best option for your next project",
    "plaintext": "GraphQL has become the successor to REST as the standard for building APIs. It wraps a query around a request, allowing particular information to be fetched, instead of REST's one-size-fits-all approach. This leads to significant performance benefits.Despite its popularity, many companies experience serious problems implementing and growing with this technology. It's complex and takes a lot of time to develop an API that works effectively. GraphQL can often be poorly implemented if developers aren't experienced, so this can pose a problem, too.Fortunately, there is another option - tRPC.tRPC is a more lightweight alternative to GraphQL that can speed up development and improve performance drastically. In this article, we'll discuss what each of these technologies are, and provide some advice to help you choose the best one for your application. Let's get started!What is GraphQL?Graph Query Language (or GraphQL) is a query language that fetches data from an endpoint  and returns it to the client. GraphQL focuses on giving the client exactly the data it needs, and nothing extra, and it does this by wrapping requests around queries so they describe specific requirements for what information needs to be returned. As a result, the client is only returned the exact pieces of data it needs, as opposed to REST which returns all the data from an endpoint.For REST APIs, data types do not need to be typed out as part of the property. In GraphQL, the type of data does need to be typed in properties, and this can greatly reduce the frequency of bugs on the frontend. It does mean you will be making a heavy investment in spending time defining types, though.How GraphQL WorksGraphQL is used to create schemas that describe all the data the client can possibly request. These schemas use a sort of nested, recursive structure and are organised into types and fields.Types make sure the client can only request data that the server is capable of delivering. It also means more helpful and easy-to-understand errors can be provided to developers. GraphQL supports a range of types, including Int, Float, String, Boolean and ID. To define a type, include the field name with a colon and the type of data the object can contain. For example:{name: String}This would define the name field's type as a string. Generally, defining a type will be much more complex than this, and will involve objects and lists, but at the basic level, this is how you do it.Some of the biggest problems with GraphQL are caused by developers using it for the wrong purposes. GraphQL is not designed to talk with your database, so your client side shouldn't be querying your database for information, and neither should your server. It's designed for the client to query the server for information, and for the most part, this is the only time you should use this language.Tying your API to the database can create a range of problems, especially when it comes to scaling your app. When you connect your frontend directly to the database with GraphQL, they need to have similar architectures so they can communicate effectively. In many cases, you'll be limited to the changes you can make on the frontend because of the fact that you'll need to complement them on the backend, too.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBenefits of Using GraphQLGraphQL is quickly becoming one of the most popular ways to build more complex APIs, and for good reason. It has a lot of benefits to consider when choosing what technology to use in your application.1. Works without TypeScriptOne of the biggest benefits of GraphQL is that it can define types without requiring TypeScript. If you have backend developers who don't want to use JavaScript or a frontend team that prefers frameworks like Flutter (which doesn't support TypeScript), you will still be able to use GraphQL for your application.2. Highly scalableFor backend development teams who are heavily focused on scaling their side of an application, GraphQL can be a great solution. It provides a set of rules that are all defined and agreed upon in one schema, which can then be improved on gradually as needed. It's easy to start relatively small, and slowly add to the schema as your API becomes increasingly more complex and intricate.3. Resource efficientUnlike REST, GraphQL can be used to fetch just the information required, rather than the entire endpoint payload. This is a big deal for mobile apps that need to be mindful of their bandwidth requirements for users with slower connections or on limited data plans.Downsides of Using GraphQLWhile it is a fantastic, powerful language, GraphQL is not for everyone. Here are some of its downsides.1. Hard to get rightWhile it's great for larger teams that have GraphQL experts to make sure everything gets done the right way, smaller teams may find it challenging to build schemas that work well for their needs. A lot of smaller teams see large tech companies like Pinterest, FaceBook and GitHub using GraphQL and assume that they should too, but this is not necessarily the case. GraphQL is really easy to mess up because you're essentially adding a bunch of extra steps to something like REST, often without having the skills and knowledge to do so effectively.2. Messy version managementAfter a schema is generated, it's assigned a version number. When the frontend sends a request to the server, it uses the most recent version of the schema to return information. There are a lot of problems that can arise from this if you're running an old version of the application. Essentially, the frontend is trying to pull data from the server using a schema built for an entirely different version of the app. It just doesn't work.GraphQL is a huge step up from REST, and making the switch is often well worthwhile. However, it can be overkill for a lot of projects. Developers are always looking for ways to make complex processes more simple, and this was essentially the mission statement behind tRPC.GraphQL was a huge step up from REST, and it's honestly pretty awesome, but can be overkill for a lot of projects. The development community are always looking for ways of simplifying a complex art. This was essentially the mission statement behind tRPC, which could arguably be described as the next step in simplified API technology\"What is tRPC?tRPC stands for TypeScript Remote Procedure Call, and is the most simple and lightweight library for remotely calling backend functions on the client side. It aims to provide developers with the experience of TypeScript inference to make communication between the backend and frontend more productive.This does mean you will require TypeScript on both your backend and frontend, but if you already have your application set up like this, tRPC is easy to implement. Unlike GraphQL, tRPC is not schema, but a protocol (or 'method') for exposing backend functions to the frontend. It simplifies your API by making the backend and frontend work more closely together to ultimately result in a more lightweight and better-performing application.How tRPC WorkstRPC does not use schemas or code generation to build APIs. Since it's designed to be an easier, more efficient choice for developers, creating tRPC APIs is relatively simple. The frontend uses procedures to remotely call backend data. Procedures are composable, which means they are made up of components. There are two types of procedures - queries and mutations: * Queries: A query is a request sent from the client to fetch data from the backend. * Mutations: A mutation can then create, update or delete data on the backend.When working with tRPC, you'll usually find it much easier to use a monorepo, and the library heavily encourages you to do so. Modern application architecture has moved towards using multiple repos to separate the backend, frontend and other key areas. A monorepo is just one repository that contains all of an application's code. tRPC's type definitions are generated from your TypeScript code itself, so if you choose not to use a monorepo, you'll probably find that a range of problems start to occur when it comes to working with different versions.Benefits of Using tRPCAlthough tRPC is a lot less popular than GraphQL, for many developers, it's a much better choice. Here are some of its biggest benefits.1. Simple and lightweighttRPC is a very light library that you can use to build complete, working APIs without any schemas and code generation. When the client requests information from the server, it only calls the types rather than the actual code itself, which involves a lot less processing. Additionally, tRPC uses TypeScript, which is a statically typed language. Type definitions are checked during compiling, rather than at runtime, increasing the speed of your applications.2. Encourages monoreposWith tRPC, it's generally much easier to use a monorepo. While it may feel like a disadvantage to have this limitation, it's actually highly beneficial for things like version control and git history. If you're running an old version of your app, your frontend will be able to query the relevant version of your backend. Without a monorepo, when running an old version of your frontend, the app would query the latest version, which may not be compatible with the version you're currently running.3. Fast developmenttRPC is the quickest and easiest way to develop an API. TypeScript allows tRPC to use type inference, which means the type of data is automatically detected (or inferred). Type inference helps development move much quicker, especially in the early stages. tRPC can also comfortably integrate with most IDEs to further streamline development.Downsides of Using tRPCAs with anything, tRPC is not perfect and is not suitable for everyone. It has strong limitations, which are often downsides to the technology.1. Requires TypeScripttRPC is completely centred around TypeScript and it can be annoying to be forced to use it, especially on a small project or some kind of utility where it would not normally be necessary. If you decide to start using tRPC in a non-TypeScript application, you're going to have to implement that before you can actually get started with tRPC.Should I use tRPC or GraphQL?Often, you won't start off a project using one or the other. You'll develop a set of specific needs in your application that lead to one of them becoming the better option.Use GraphQL if: * You want to separate your backend and frontend (or work from two repos). GraphQL creates a standard for passing information between backend and frontend developers working on the same project. If for some reason they don't communicate effectively or if they have different, it can ensure they adhere to a common standard. Ultimately this reduces the risk of introducing bugs and issues, improves the quality of code, and speeds up development. * You're scaling your backend and need a clear set of rules for your API. If your backend teams are focused on scaling their side of the application, it's important to create a schema that everyone agrees on so that the two sides of the app can work together as effectively as possible. GraphQL is a great solution for this. * The application has increasingly more complex and intricate requirements. Whether it's to scale your application's architecture, optimise its design, or essentially any other reason, if you need to build more complex capabilities into your app, GraphQL is almost certainly the best way to do it. * TypeScript isn't an option for you. If your backend or frontend developers prefer different technologies to JavaScript, or if TypeScript isn't an option for some reason, GraphQL is a good choice, as you get some of the benefits of strongly typed data without having to use on TypeScriptt.Use tRPC if: * You want to bring the backend and frontend closer together. If you have a small to medium sized team of developers who need to start working more closely together to effectively build your application, tRPC is the way to achieve this. Since it's a 'method' rather than a schema, things are less clearly defined, but this does mean backend and frontend teams will work much more efficiently. * You don't have complex needs. If you don't foresee the need for using other (non-JavaScript) languages in your app, and if your architecture and requirements are relatively straightforward, you should be considering tRPC. It requires JavaScript, but is generally the best way to eliminate unnecessary complexity. * Your app needs to be more lightweight and simple. tRPC eliminates all the unnecessary fluff so that you can build a reliable and simple API that calls backend data on the frontend effectively. It is a lot quicker and easier to implement, so development times will be drastically reduced compared to a solution like GraphQL. * You're building a Next.js project. tRPC helps connect Next's back and frontend. A lot of people forget that Next.js actually fits the definition of a backend framework, since it runs on a server. Adding tRPC to a Next.js stack is a great way to simplify your technology choices for a full-stack application.Wrapping upGraphQL is a powerful step up from REST, but it adds more complexity to a project that is often necessary. tRPC is a great solution for calling backend functions on the frontend that leverages a lot of GraphQL's benefits, with significantly less complexity.If your next project needs a frontend and backend but you don't want to separate them, then you might want to consider using tRPC!If we haven't answered your questions, or you think we've missing the point completely, feel free to leave a comment below and we'll get back you in a few working days."
  },
  {
    "title": "Progressive Web Applications vs React Native – A Guide To Picking The Right Technology",
    "plaintext": "Everyone business that sells products online knows that mobile is king. Most consumers interact with brands and shop online from their smartphones and have for several years now. The move to mobile catalysed a trend of eCommerce businesses adopting a mobile-first design when building enterprise applications.There are three approaches to developing an awesome shopping experience from a phone; building a Progressive Web Application (PWA), a mobile application, or simply trying to make your store responsive. Each have their own pros and cons, but mobile apps and PWAs have become the choice for companies that want to invest in the future of their stores.PWAs are a blend of a responsive website and a mobile app. They're designed to offer a native app-like user experience with the comprehensive capabilities of a website.On the other hand, mobile applications are referred to as native applications that are installed on a user's device. There's a ton of different technologies that can be used to create a mobile app, but for the sake of this article we're going to focus on React Native which is a JavaScript framework specifically designed to build mobile apps.PWA vs React Native - here's what we're coveringWe often get approached by clients looking to build mobile apps when they would get better results from a PWA. When we suggest this approach, they often come back saying they've never heard of a PWA.In this article, we'll aim to give you a breakdown of the differences between the two technologies, cover the pros and cons of each, and suggest some situations where you should choose one over the other.The first place to start in this breakdown is diving into \"conventional native apps\".Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat are native apps?Native apps are software designed to run on a specific operating system -- either Android or iOS. They can only be downloaded from the Apple App Store or Google Play store.These apps have the ability to utilise a device's features and hardware, such as a camera, Bluetooth, GPS and push notifications, to feel like they're really part of the phone. They're also highly performant, reliable (if built well!), and efficient on resource usage since they are built using a device's/OS native language.Android apps are built using Java or Kotlin, while iOS apps are built using Swift language or Objective-C.Being platform-specific means it's expensive for businesses to develop a native app as it would require them to spend resources on building an app for each OS. Also, launching a native app requires validation from platform-specific app stores and massive marketing to attract users. **Each month there are roughly 30,000 - 40,000 new apps released.Building two codebases doesn't exactly double the cost of development, but it's often not too far away. There are some efficiencies gained by not having to go through the requirement gathering stage or designing the application, but there's a significant amount of effort duplication, which is something most businesses are keen to avoid (since it costs $$$).What are Progressive Web Applications?PWAs are websites specifically optimised to offer a mobile app experience. They are built using core website technologies - HTML, CSS, JavaScript - and can run on any browser in every platform, including Android and iOS.Similar to native apps, PWAs can be saved on a smartphone's home screen, work offline, send push notifications, and use some of a device's features and hardware (not to the same extent native apps can).Google developed the PWA concept in 2015 to offer a fast, engaging and versatile app that works on mobile, tablet, and desktop environments. This way, users don't necessarily need to search and download a PWA from a specific app store. They can install it on the home screen directly from any browser when they visit your site using a smartphone. Once installed, the app will perform on full-screen like a native app.One of PWAs' biggest advantages is that businesses can achieve all three apps, a website, an Android and an iOS app, using a single codebase. This helps save on time and development costs. Some of the most popular PWAs include Twitter, Spotify, and Medium.Google has even started prioritising websites that adhere to PWA standards in their Lighthouse measurements:Features of PWAsSome of the unique attributes that empower PWAs to offer a similar UX as native apps include:Service workersFor a web app to pass as a PWA, it needs a service worker. A service worked is a JavaScript file that acts as a proxy between a web browser and servers. They enable offline access to a website and, as a result, improve an app's reliability and performance. Service workers are supported by virtually every browser.When a user initiates a request on a PWA, service workers handle the request and decide to retrieve a response from the cached data or the server based on whether the user is on or offline.Web app manifestA web app manifest is a JSON (JavaScript Object Notation) file that contains a PWA's metadata. This includes default settings and parameters such as the app name, icon, theme color, screen orientation, and the URL to be opened when the app is launched, among other preferences. The file is usually deployed in the HTML page using the link tag as such: .Application shell architectureApplication shell architecture is a set of principles that ensures minimal user interface loading. The UI data is then cached before the PWA loads its content. This way, the next time a user visits the app, the cached data is displayed immediately, and any other new request is fetched from the server if the user is online. This model helps improve PWA loading time in addition to supporting offline availability.Pros and cons of PWAsAdvantages of PWAs, especially for businesses, include:Cost-effective & quicker to developPWAs offer a quick pathway to connect with users through mobile devices. They're able to be built within a relatively short timeframe since they use standard web technologies -- HTML, CSS, and JavaScript.If you already have a website for your business, it can also serve as a mobile app once you integrate the PWA features (depending on the technology you've used). This is especially true for cutting edge technologies like Gatsby and Next.js.Streamlines customer acquisition processWith a native app, you must submit your app to an app store and spend resources on marketing your app to attract users. However, with a PWA, you necessarily don't need to spend resources on marketing your app. This is because PWAs are websites, meaning search engines index them. Given that search engines use a mobile-first indexing approach, your PWA will be given a high ranking.Additionally, A PWA enables you to build a website that prompts your consumers to install your business app directly from the browser. They don't have to visit the app store and manually search for your app, as it's the case with native apps. This makes your app more accessible and discoverable, giving it the best chance to reach your target audience.Facilitates secure online paymentPWAs utilise web security standards, particularly HTTPS, which allows for secure data transfer. Further, given that a PWA can cache data, users' payment info can be stored on their local storage and accessed during payment checkout. This helps streamline the payment processes for customers.Increases customer retentionTypical websites usually have a high bounce rate as they take longer to load on smartphones. Also, most of them can't be accessed offline or in cases of poor network connection.PWAs, on the other hand, support offline access, making them appear to load faster. When a user launches the app/website, the cached data is displayed instantly instead of a blank page or loading screen, as it's the case with websites. This feature provides a better user experience and reduces your site's bounce rate regardless of the network connection status.Low maintenancePWAs have lower maintenance than native apps since they utilise a single codebase on all platforms. Also, they update automatically, unlike native apps whose feature updates have to be scheduled with respect to app store terms and conditions.Disadvantages of PWAsFast battery consumption - PWAs run on technologies that aren't intended for the mobile environment. As a result, devices use more CPU power to interpret and analyze the code.Feature limitations - Unlike native apps, PWAs may have limited access to certain device features (i.e. push notification on Apple devices, interfacing with a stylus, connecting to 3rd party devices like headphones).What is React NativeReact Native (RN) is a JavaScript-based framework for building native iOS and Android applications. Apps built using RN utilise native rendering APIs in Java for Android and Objective-C for iOS to render real mobile UI components instead of webviews. This gives your application a native app user experience.Facebook created the framework to support cross-platform development using a single codebase. Similar to React for web apps, RN uses JSX syntax extension, a mixture of JavaScript and XML, to write declarative UI components. The framework also features reusable components for faster app development and state management to monitor component changes.Some of the most popular apps built with RN include Facebook, Skype, Bloomberg, Pinterest, and Walmart.Features of React NativeHere are some RN framework features:Third-party library supportRN allows developers to work with third-party libraries to build robust applications. This allows them to work with external tools that optimize the app's performance and functionality.Cross-platform compatibilityReact for web apps renders UI components in HTML and CSS web standards. Conversely, RN renders UI with native components that map to iOS and Android UI building blocks.RN bridgeThe RN bridge is a communication pathway between RN's JSX code and native app layers. It allows for bidirectional and asynchronous communications to support a universal mobile UX.Image source: HackernoonPros and cons of React NativeRN development offers the following advantages:Cost efficientRN uses a single codebase to build applications for iOS and Android. This means you don't have to hire separate teams to build your app, thus saving time and money. In addition, due to the single codebase reusability, you can build a minimum viable product faster with a short time-to-market period.Smooth UI and fast performanceRN uses native rendering and other native resources to offer fast performance and improved user experience similar to native apps.Rich ecosystemRN has a wide range of tools and libraries freely available to developers to facilitate their work and accelerate development. If a developer runs into a problem when using the framework, they can utilize the community resources for solutions. The RN community is recently enabled Flipper support to help with the debugging process.Disadvantages of RNHard to debug - RN apps are built using JavaScript, Kotlin/Java, and C++, making debugging more difficult. However, the RN community is recently enabled Flipper tool support to help with the debugging process. That said, it may require a developer to have an in-depth understanding of the native technologies and web development for easy debugging. This makes hiring RN developers quite challenging since it's hard to find developers with a good understanding of both.Performance - RN app performance isn't as great as native apps.Which one should you choose -- PWA or React Native?Choosing whether to build a PWA or RN app depends on what stage your business is on in the growth cycle. If you're starting out and need to give consumers a simple app, then a PWA is more suitable for your business. It's fast and affordable to develop, especially when working with limited resources. PWAs are also a great way to improve your brand visibility and conversion rate since they are indexed as websites by search engines. This makes them more discoverable than RN apps.We can compare the two using important criteria such as:User experienceRN apps boast a better native-like user experience since they use native components for UI rendering. PWA use web components instead. Additionally, RN apps are usually more robust than PWAs. They can make the most of a device's features to offer an interactive user experience just like a native app. They are mostly used by businesses looking to establish their brand authority and visibility.Offline availabilityPWAs are the clear winners in this category. This is because their offline mode is included in the initial building stages, thanks to service workers' capabilities. RN apps need extra effort to implement offline availability, which mostly involves SQL database management.PerformancePWAs tend to have a slightly higher performance than RN apps due to their service workers and app shell structure. RN apps are generally heavier and larger because of the additional components in their architecture, RN bridge, for instance, making them relatively slow.That said, you should note that the development time for PWAs and React Native apps is essentially the same. The only advantage PWAs have over RN in this category is that you get a website and mobile app, while RN offers only a mobile application.Frequently asked questionsIs PWA better than React Native?It depends on your use case. A PWA is your ideal choice if you want a simple solution that works with a limited budget and time. PWAs also offer better performance and online availability, which is ideal for online e-commerce businesses.Is PWA replacing native apps?Thanks to their cross-platform compatibility, PWA and RN technologies are well-positioned to replace conventional native mobile apps. However, they're yet to match native apps' performance, hardware access, and user experience.ConclusionPWA and RN are great alternatives to native mobile apps due to their low development cost and short time-to-market timeline. However, each technology has unique benefits and opportunity costs, which you should consider before choosing either."
  },
  {
    "title": "What is API testing and why is it awesome?",
    "plaintext": "An Application Programming Interface (API) is a tool used to facilitate efficient communication between software components. Think of it as a bridge that connects complex and distributed programs to form an ecosystem of applications that can exchange data to serve the needs of consumers.API testing entails making several requests to an API endpoint and validating the response to guarantee the API's safety, reliability, and performance.Usually, API testing is expensive and doesn't have an immediate return on investment. However, it's one of those mundane maintenance tasks that cost money when ignored.With that out of the way, let's get stuck into unpacking the benefits of conducting API testing:Benefits of API testingEarly detection of bugsA typical application comprises three distinct layers: the presentation, business logic, and database. API testing is done on the business logic layer. So, once the logic is designed, you don't have to wait for the entire application to be developed to carry out the test. This allows your development team to find and fix bugs during the early development stages, saving you time and money in the long run - especially when building an enterprise-level application. Besides early detection of bugs, API testing allows you to validate your business logic early enough, contributing to fast product release.Effective use of timeAPI testing takes less time than functional GUI testing. A single UI-level test takes about seven minutes, while an API test usually takes less than fifteen seconds. The GUI test takes longer as it involves loading and rendering pages and UI components. Also, a developer may experience a few setbacks, such as a poor network connection and browser limitations during testing. On the other hand, API testing is quite straightforward as it involves only sending requests to an endpoint and verifying the response.Language independenceDuring API testing, data is exchanged in XML and JSON formats. This method is independent of any programming language, thus allowing quality assurance engineers to choose any suitable language that supports the data transfer format.Broad test coverageAPI tests are aimed at ensuring all components of an application work as intended. As such, they have a broader scope than unit tests which are often limited to certain components within an application. Due to their comprehensive coverage, API tests help identify potential bugs and improve the overall quality of an application for improved user experience.Easier to maintainChanges in APIs are quite rare, neither are they subject to major releases or recent merges. Their changes are well-controlled and infrequent since they only happen when the business logic layer is updated. As such, API testing is inherently stable, making them easier to maintain than GUI, which is more dynamic due to changes in the UI field regarding browser, devices, and screen orientation upgrades.Having understood the benefits of API testing, let's have a look at the various tests done on APIsEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitTypes of API testingThere are seven types of API testing:Functional testingAs the name suggests, functional testing entails the assessment of certain functions in a codebase. The goal is to ensure that the API returns the expected output from a given input. It also ensures that errors are handled well if the output is outside the expected parameters.For example, let's say a user searches for the price of an equity in a trading app. The API should return the requested equity price if the input is error-free. If there was an error in the input, the user should be served with the appropriate handling instructions or a corrected response that's in line with the request/query. Functional testing works to cater to these scenarios.Load and performance testingLoad testing focuses on checking whether a systems API can handle high loads. To achieve this, the API is tested against two main parameters -- the baseline and theoretical maximum traffic. When testing against the baseline traffic, regular-sized requests are sent to the API to simulate day-to-day usage, and its response time and throughput are evaluated. As for maximum traffic, QA engineers simulate numerous API calls to test if an API can scale to handle the requests and respondquickly.On the other hand, performance testing is similar to load testing, only that it tests the API against the unregular flow of requests (spiked traffic) instead of a constant steady flow of traffic.Security testingSecurity testing is designed to ensure that an API is safe from external threats. It focuses on authorization validation, access control, and validation of data encryption methodologies. Although the test is done independently, it consists of two other components -- penetration and fuzz testing.In penetration testing, an API's functions, processes, and resources are attacked by an outsider with little knowledge of how the API works. This helps reveal and assess security threats from a third-party perspective.Fuzz testing is the last step in the larger security audit test. Its stress test involves inputting an influx of data to see whether an API will withstand it or result in a forced crash.Runtime and error detection testingUnlike most API tests that focus on the results and behavior of an API, runtime and error detection test is concerned with the actual running of an API. This type of test is done while running the API is running to allow for error logging in real time.The test focuses on four main areas; monitoring, execution errors, resource leaks, and error detection. * Monitoring - the runtime of the API code is tested for handling failures and implementation errors to eliminate security threats that may stem from malfunction. * Execution errors - involve testing whether the API responds to valid requests in an expected and predictable way. * Resource leaks -- involve testing an API's memory, resource, and operational leaks by initiating invalid requests. * Error detection -- the system is subjected to known errors to see whether they're detected and handled correctly.Validation testingThis test is done during the final stage of API development to ascertain that the API works as per user requirements. The test checks the following facets of an API: * Product -- this refers to the API itself. The goal is to check whether the API works based on product specifications. * Behavior -- seeks to determine whether the API is accessing the right data and storing it with respect to data integrity measures. * Efficiency -- checks whether the API is the most accurate and efficient way of accomplishing the task.UI testingIt tests the user interface of an API and its constituent components. As such, the test leans more on the developer's experience of using an API's interface and less on the API's functionality. The results from this test give an overview of an API's usability and efficiency from a front and backend perspective.Integration and reliability testingIntegration and reliability tests check the communication between APIs to ensure they're well connected and synced with other modules.Manual vs. Automated API testingManual testing requires you to write your own code to test an API. As such, it's prone to human errors and difficult to maintain or update. On the other hand, automated testing involves using a tool such as Postman and Soap UI. This makes it more time and cost-efficient and is often preferred for dynamic and repeated testing designs. Also, automated testing offers more accuracy, broader test coverage, and fast feedback than manual testing.Ideally, manual testing is used to confirm whether an API is working, while automated testing is commonly used to test if an API can perform under pressure.How to go about API testingHere are some of the best practices in API automated testingDetermine the API testing requirementsBefore starting an API test, you must lay out the testing boundaries and requirements. To determine these requirements, you must fully understand the API's target users, features and functions, and other connected APIs. You also need to specify the areas to be tested, types of tests to run, desired output, and a metric to measure whether the API has passed or failed a test.Set up an API test environmentThe best way to set up a test environment is through API virtualization. This process involves creating a virtual copy of your API that will be used for testing in place of your production API. The virtual copy mimics all components of your production API, including its endpoints, eliminating the need to configure a server to mirror a production environment.One of the most significant advantages of API virtualization is that it allows early testing. This way, development teams can perform comprehensive API tests frequently even when the production API is still under development. This helps solve bugs and other bottlenecks that would delay time-to-market delivery. Virtualization also saves you money, especially when working with third-party APIs that charge a premium for usage.Define the input parameterParameters are resources in memory that store variables. Input parameters, in particular, pass information to an API to request it to perform a specific function with a known outcome. Therefore, these parameters are necessary for testing whether an API works as it should.Before testing your API, you should plan all the input parameters you intend to use.Choose the right testing toolOnce you have everything ready, it's time to choose a testing tool for your API. However, the wide variety of testing tools available in the market makes it a bit challenging to choose the right one for your API. A good rule of thumb is to choose a tool that your team will find easier to learn and use. Most importantly, the testing tool should be compatible with the CI systems in your organization. Some popular automated API testing tools include SoupUI, Parasoft, Runscope, and Postman.Challenges in API testingDeciding the scope of your testOne of the most frustrating challenges QA engineers face during API testing is deciding what not to test, especially when working with third-party applications. You should prioritize testing parts that apply to your application only to save time and money.For example, if you run an e-commerce website, you'll probably use a third-party API to process payments. In such cases, you don't have to run an API test on the payment processor since it's likely that the provider has done all the necessary tests. It would be best if you consolidated your effort on checking whether your app handles errors such as payment denial from the process and presents them correctly.Sequencing API callsAPI calls must appear in a specific order to achieve the desired results. However, sequencing these calls is challenging for many testing teams, especially when working with multi-threaded applications. It helps to create a flow chart of API calls to mitigate the sequencing challenge.CompatibilityWhile APIs are designed to facilitate communication between systems, API compatibility isn't guaranteed. Every system has a unique integration standard, making it difficult for some systems to connect with others seamlessly. The only solution to this problem is planning ahead of the API rollout. Take time to evaluate which systems are compatible with yours and which might require more integration time. Be sure to account for revenue losses or gain associated with pursuing the integration process.Planning for failureWhen working with third-party systems it's a good idea to prepare for failure. For example, assuming you run an online store and the payment processor fails. You're at risk of losing data and revenue if there's you don't have a failover plan. However, setting up a failover environment during testing is resource intensive in terms of time and technological knowledge.Frequently asked questionsWhat is API testing?API testing is a type of software testing that evaluates the performance, security, and reliability of an application programming interface (API).Which language is used for API testing?You can use any programming language for API testing, provided it supports JSON or XML data formats.Wrapping upAPI testing helps ensure that your API function as expected even when faced with unprecedented errors. This helps improve the user experience for your customers. If you have questions about API testing, please leave them in the comments section below, and our team will respond in a day or two."
  },
  {
    "title": "Discovery Phase In Software Development - Get It Right And Win Big!",
    "plaintext": "It makes sense to have a plan before you start a software development project. To explain why we'll pose a metaphor.There's not a single licensed, experienced builder who would be willing to build you a house without a blueprint or set of detailed plans. There are too many problems that could come up along the way: * What if you change your mind after you see their choices? * What happens if their understanding of your vision is different from yours? * How do they know when they're \"done\"? * How do they know how much they should spend on the project? * How can they ensure that all the building activities happen in the right order?Attempting a big project without a plan carries a lot of unnecessary risks. This is as true for someone building a house as it is for a business building new software. The difference is that building a house carries the same challenges as it has for hundreds of years.Software development is a unique beast. Requirements between one custom software development project are rarely the same as another. For big projects, it's almost impossible to know everything upfront. Things can change halfway through a project and require rapid adjustment.Given the challenges that software development poses, it makes sense to plan as carefully as possible. The period of planning that happens at the start of a project is referred to as the \"Discovery phase\".Our team have mastered the discovery phase and can help you work through your own discovery. We run a process called Product Roadmapping where we run a short series of 2-hour meetings to understand everything that will get your product a MVP. Drop us a line to see if we can help with your upcoming project. At the very least you'll get some free experience-backed advice.In this article, we're going to try to provide some insights into the discovery phase in software development from an agency that has gone through it dozens of times over the last few years.Understanding the discovery process in software developmentWe'll start at the top with what the discovery phase is, why it's important and what's included, and throw in some insights to keep the article exciting :).What is the Discovery phase and how does it work?The Discovery phase was probably invented by someone who tried to build software for a client without taking the time to deeply understand what they were building.The Discovery phase is a period at the start of the project where the development team becomes intimate with the problem they're solving and plans the best solution.It's usually conducted as a series of meetings where lots of questions are asked. The goal for the development team is to understand the business and why they're willing to pay for software to be developed. Here are the kinds of things we ask our clients during this process: * How will this software impact your bottom line? * When do you expect to see a profit from this project? * What will life look like for your business after the software is live? * What are the weaknesses and strengths of your current approach or system? * How quickly do you need the software to be live for the project to be a success? * Who will use the system? * What is the most important thing the system should do for each user?We have a template of around 120 questions which we can draw from during these meetings to get a rounded picture of what the business's goals are and what we're building.A well-executed discovery phase will be broken into a few stages, each task with gathering details on something that will help steer the project. We typically break our discovery phase into four parts: * Goals * Flows * Features * RoadmapEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitMain stages of the discovery phaseIf you read a traditional project management book, they'll probably have a different answer to this question but for our team, the four stages of discovery are Goals, Flows, Features and Roadmap.GoalsThe Goals stage of the discovery process is focused on understanding what the business hopes to get out of this project. They've decided that custom software is going to result in a net financial gain sometime in the future. Our job is to get to the bottom of what their vision of the future looks like.Without understanding what the business is expecting to get from the project, it's very difficult to make it happen.There's usually more than one goal behind a software development project. Often it relates to improving efficiency for the client and ultimately reducing costs or increasing revenue, but there can be a number of smaller goals along the way: * Fix processes that the team have become used to working around * Outdo the competition * Integrate systems the avoid unnecessary manual effortFlowsFlows are the sequences users follow as they attempt to do something in a system. For example, changing your Facebook profile picture would look like this: 1. Log in 2. Open profile 3. Select profile image 4. Choose to change profile image 5. Browse gallery for the right image or upload a new image 6. Edit image 7. Upload 8. View profile page to review new pictureThis flow can be mapped out visually to show the features a user needs to interact with to achieve a goal.Capturing all the major flows the system's users will expect to undertake allows us a macro-view of all the functionality the systems should include.FeaturesWith all of the flows captured, the next step of the Discovery phase is to figure out what features are required to let the user achieve their outcome.Taking our Facebook profile example, there are a few features needed: * A photo gallery to allow the user to browse their images * Uploading and document storage * Editing and image adjustmentNot to mention the broader feature sets like user profiles, the database to store everything, navigation to move around the app, etc.The best way to capture these requirements is through user stories and acceptance criteria. User stories follow a specific syntax and aim to make the feature easy to understand for developers and the business. Acceptance criteria are essentially the things that need to happen for the feature to be considered complete.When our team go through this exercise, we'll put our heads together and figure out roughly how many hours of effort each story will require to build out in totality from prototyping all the way through to finished code. This exercise helps with the final step of the process.RoadmapThe final step is the Roadmap. Trying to squeeze every feature into the first build is a recipe for failure. The goal of most products is to get to market as quickly as possible to start receiving feedback so they can evolve. In order to release a useful first release, the Roadmap creates a plan for which features will be included and which will be left until later.This step needs to be a discussion between the business and the product team, where each makes their case for the features that are the most valuable to include in the first release.Since each feature has an estimate assigned to it, once there's consensus on what's included, all the estimates can be tallied to create a project schedule and expected budget.At this point the Discovery phase is essentially complete and the project can start. The development team have answers to all of the questions they needed to understand to build the right product. The business has confidence the project will do what they want, and understand the costs and timeframes involved.Why is Discovery useful?Discovery aligns the business and development team in a way that removes much of the risk involved in software development. There are an infinite number of things that can go wrong during a complex application build, and taking the time to try and think through everything often solves problems before they're even born.In a lot of projects, it's also the first time the business and extended development team get the chance to work together. Once the design starts, it's too late to ask some of the obvious questions that could make the development team look unprofessional.What activities are included in Discovery?Here are the activities you can expect to undertake during the discovery period: * Meetings, meetings, meetings! * Defining goals * Capturing user flows (often on a whiteboard) * Recording user stories * Defining features * Figuring out which features will make up the MVP and future releasesDepending on how big the project is, sometimes the development team will build a set of wireframes or create a prototype or low-fidelity design to visually explore the requirements.Who needs to be involved?At a minimum, the \"product owner\", or person responsible for communicating the business's wants and needs should be available to chat with the project manager from the developer's team.It might seem like the more the merrier for discovery meetings, but it's better to have a small focused group of individuals who can make the decisions quickly. We find the best balance when these people are involved:Development team * Project manager * Lead developer * DesignerBusiness team * Product owner or project manager * Someone technicalfour or five people is usually a good balance. There's an argument for adding backend engineers, quality analysts, and more people from the business team, but we find it makes the process longer and less effective.Project discovery phase deliverablesAt the end of the discovery phase, these are the deliverables that should be produced: * Product roadmap, or some kind of master document * Set of user flows * Suite of user stories and acceptance criteria * Release plan that details which features will be included in the MVP, and which will wait until future releases * A recommendation of technology stack and implementation approach * (Optional) A quote or breakdown of costsThere's not really a one-size-fits all to the deliverables that come out of a discovery phase. In some situations, the project financials have been finalised and there's no need for an estimate. At a minimum, there needs to be some kind of master document that captures all the user flows, features, and the release plan that details what the software's rollout will look like.How much does it cost to start the discovery phase?Our team typically charge around $3,000 for a discovery phase with a new client, which is refundable if the client decides to work with us.Since the process is separated from the main project, and we know we're getting paid, there's no need to rush through the discovery phase. This is a problem for a lot of companies that build the discovery phase into their fixed price. Clients that don't understand the value of a discovery phase in software development will often push back on a long, expensive period of planning. As a result, it's underpriced and cut short.How long does a typical discovery phase take?The short discovery phase usually takes about two weeks. A long discovery phase can take up to two months.As a rough guide, this is where the time goes: * 2 hour meetings (10%) * Writing user stories and acceptance criteria (50%) * Estimating effort (15%) * Planning technology stack (5%) * Planning the release map (5%) * Writing the documentation (15%)It might seem like meetings are the main activity of the discovery is meetings as the development team and business try to get on the same page. Realistically, most of the time is spent translating notes from those meetings into user flows and user stories. For every feature, there will be a handful of stories and for every story, there should be a handful of acceptance criteria.These stories are the details that drive the project and tell the dev team exactly what to do, so there's no shortcut around the lengthy process.Next steps after discoveryOnce you've finished up the discovery phase, it's on to building the software. By this point, the development team have all the answers they need to start designing and developing.Most of the time, we'll jump into a set of wireframes and a prototype to validate our understanding of the requirements through a low-commitment solution. We've written a detailed guide on prototyping so we won't go too deep on the topic!Tips and Tricks for the Discovery PhaseHere are some tricks and tips we've picked up from going through dozens of discovery phases.Tools to useSince our team are completely remote, we need special tools for coordinating with clients. This is the stack we've come to depend on: * Figjam * Zoom * Jira * Planning Poker extensionFigjam is a great tool to start off with. It's honestly the best collaborative whiteboard tool for talking through ideas. Clients can join Figjma sessions for free, everyone can participate by drawing and adding sticky notes, and everything happens in real-time!Zoom is our go-to meeting tool, but we're partial to Google Meet too. Even though meeting online can be a bit more difficult for communication, the benefit is that it's super easy to record the call and go over the details later.Jira is our project management tool of choice. Honestly, it's an ugly old beast to use, even for experienced users, but it's built specifically for development teams and it provides a lot of useful functionality.Since we create estimates for each of the user stories during the discovery phase, we like to use a tool called Planning Poker to facilitate the process. The idea behind Planning Poker is that everyone on the team gets a set of cards they can assign to a story to indicate how much effort is required. The final estimate won't be locked in until everyone on the team agrees on a single estimate.Behaviour Driven Development Acceptance CriteriaWe've mentioned user stories and acceptance criteria a few times since they're the best mechanism for capturing requirements. Our favourite approach for capturing user stories is behaviour driven development (BDD).The idea behind BDD is to think through all the scenarios around a feature and then capture them using the Gerkin or Cucumber format like thisA user requirement looks like this:As an administratorWhen I try to run a revenue reportIt will run succesfully because I have the right credentialsIn the requirement above, the feature is a revenue report that can only be run by an administrator. The other scenarios that might happen are: * A non-administrator tries to access the report and it fails * A non-authenticated admin tries to access the report directly and can't because they're not logged in * An administrator tries to run the report without entering any filters or valuesThis is a pretty basic example, so there aren't too many different scenarios that would realistically happen. For more complex features that developers may struggle to understand, having a batch of examples can be a massive help!The only downside to BDD is it takes a long time to capture the requirements upfront. But it's worth it when the feature is built with all the edge cases in mind.Wrapping upThat's it for our overview of the discovery phase in software development. If we haven't answered your question, or there's something you'd like to know, leave a question below and one of our team will get back to you in a few business days."
  },
  {
    "title": "React vs. Angular: Which One Should You Choose?",
    "plaintext": "In the world of front-end web development, there are three major players: React, Angular, and Vue. But for now, let's focus on the first two technologies. The main difference between the two is that React is a library while Angular is a framework. As a library, React comes with predefined code snippets for fast and standardized development. While Angular being a framework, provides a template or foundation upon which developers build UI components.Due to this difference, both technologies have their own unique strengths and weaknesses. React is known for its simplicity and speed, while Angular is favored for its robustness and flexibility. So, which one should you choose? In this post, we'll take a look at the pros and cons of React and Angular so you can make an informed decision.React overview?React is a JavaScript library for building user interfaces. It was created by Facebook and released as open-source software in 2013, making it one of the most mature front-end technologies in the market, with a robust ecosystem of users and supporting tools.The library is commonly used for building single-page applications and mobile apps. It employs a component-based architecture that makes it easy for developers to debug and build customized UIs. Even better, these components are reusable, which helps speed up the development process. React is used by major companies such as Netflix, Airbnb, and Walmart.React featuresSome of the notable features of React include the following:JSXReact uses JavaScript syntax extension (JSX), a combination of HTML and JavaScript. The syntax is then processed by transpilers such as Babel, which convert it to JavaScript code for browsers. JSX is faster than the typical JavaScript code, which helps create a high-performance React app.Virtual DOMDOM is an object-based representation of the current view as seen by a user in the browser. Developers can manipulate it to change UI components and perform users' actions on web elements to accept users' requests. Developers can manipulate it is an important aspect of UI web development. It allows developers to modify UI components and perform users' actions on web elements. However, the entire page must be re-rendered once updated to reflect the changes. This process is usually slow, making your application appear sluggish and slow. s forced to re-render, this process is usually slower in most JavaScript frameworks as it involves updating the whole DOM at once, which impairs the performance of a web application. For example, if an app contains twenty items and a user only checks off three items, DOM will re-render the entire list to update the three items.React uses virtual DOM to help improve application performance. When a UI is rendered, React creates a virtual DOM of that render and keeps it in memory. When there's a change, the virtual DOM is updated first and then synced with the Actual DOM. This eliminates unnecessary re-rendering of elements making your app appear to load faster.One-way data bindingReact supports a one-way data binding or unidirectional data flow method. This feature allows developers to nest child components inside parent components. This way, the data can only flow from parent to child, meaning child components cannot modify the data alone. Developers, therefore, have more control over the application. It also makes it easier to locate bugs and debug errors.ComponentsReact is made up of components that are used to build interactive UIs. These components are reusable and have their own logic and control. As a result, they make it easier to build and manage UI code for large applications.Extension supportReact supports numerous extensions that help in building a full-fledged UI application. They also enable React to support mobile app development and server-side rendering. Some of the extensions include; Flux, Redux, and React Native.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPros and cons of ReactThe advantages of using React include the following: * Easy work with -- Due to its component reusability, React requires less coding, which makes debugging easier in addition to speeding up the development process * High performance -- React uses virtual DOM for rendering web components faster. Pages appear to load faster, thereby improving your search engine ranking. * Supports both web and mobile app development -- React library is used for building web UIs while its framework, React Native, is used to build hybrid mobile apps * It comes with handy tools for debugging. These tools are available as browser extensions for Chrome and Mozilla. * Backed by a strong community -- React has a wide community of users who regularly contribute to its development. As such, you can easily find solutions when you get stuck while working with the library.Limitations of React * Some developers may find JSX too complex to grasp * Lacks enough documentation due to regular updates and releasesAngular overviewAngular is a JavaScript framework for building interactive UIs for web applications. It was developed and released by Google in 2010 as AngularJS. Since then, the framework has undergone several improvements, culminating in the release of Angular 2.0 in 2016. This new version uses Typescript syntax, which results in less coding and is thus easy to debug. Also, similar to React, Angular uses a component-based architecture, allowing you to divide UIs into functional and logical components that can be nested to build complex applications.Angular featuresOne-way and two-way data bindingAngular supports both uni- and bi-directional data flow. Unlike one-way, two-way data binding means the data can flow from the parent to the child component and vice versa. As such, when you modify the data in the model, the view is updated to reflect the changes, and when the view changes, the model is also updated. You can opt to use one-way or two-way data binding based on the app you're building.Dependency injectionDependency injection (DI) is a design pattern for creating and delivering some parts of an application to other parts of the application that require them. This helps improve the flexibility and modularity of an app. Angular supports DI to separate different parts of an application, making it easy to test and debug components in isolation.Ajax supportAngular comes with Ajax and HTTP support, enabling it to connect and communicate with backend services. This helps boost an app's performance and reduce response times.Angular CLIThe Angular command line interface (CLI) allows developers to initialize, scaffold, and maintain angular applications from a command shell. It also allows you to preview your application with LiveReload support.Pros and cons of AngularAdvantages of using Angular include: * Angular offers clean code development since it uses Typescript syntax. Unlike vanilla JavaScript, Typescript results in less code which is easy to maintain and ideal for building enterprise-grade applications. * It supports lazy loading, which ensures that only the required modules are loaded. This offers less loading time which improves your app performance. * Employs MVC architecture enabling developers to separate the data, UI, and business layers. These units can be developed and tested in isolation. As a result, it becomes easier to understand and maintain the code. * Backed by Google -- a trusted company, especially in the developers' communityDisadvantages of Angular * Has a steep learning curve. For businesses, this means that there are few Angular developers, thus making the hiring process a bit time-consuming. * It has Limited SEO capabilities. Angular is great for building single-page applications. However, these applications are usually rendered on the client side, meaning search engine crawlers cannot see a page's complete structure and content. Consequently, it's difficult for search engines to rank your page on the results page. * Too many versions forcing businesses to constantly work on their app to resolve conflicts and incompatibility issues.React vs. Angular comparisonPerformanceGenerally, React apps boast better performance than Angular apps. This is because React uses Virtual DOM, while Angular only relies on the Real DOM. With the Virtual DOM, only the changed objects are updated without necessarily rewriting the entire tree structure, as it's the case with Angular's Real DOM. Also, by default, Angular supports two-way data binding. While this ensures model view and model are in sync, it impairs performance since the number of watched elements grows exponentially as the app increases in size and complexity. If you're aiming for high performance, React is a more suitable choice with added benefits of improved customer experience and SEO ranking.State managementState management involves managing data as a user interacts with the app. When a user triggers a request, the app's state changes, consequently changing the view. It's a crucial concept, especially when working with large and complex applications with multiple views/components.In React, each component has its own state, making it easier to manage the state across your application. It also relies on external libraries, particularly Redux, for state management. Redux holds the entire state of an application in a single mutable object. On the other hand, Angular comes with built-in functionality for state management, so you don't have to use an external library unless you're building a large application. NGXS is a popular external library for state management that helps you enforce unidirectional data flow in Angular.Development speed and productivityReact relies heavily on external libraries to build robust applications. The type of tools used varies depending on the project, so you have to invest time in choosing the right library. This might slow down the speed of development, leading to a delayed time-to-market schedule. Angular, on the other hand, comes with all the necessary tools to support full-fledged development. You don't have to rely on external libraries allowing you to focus primarily on building and deploying the app. Its CLI also offers developers helpful tools to automate certain processes instead of doing them manually.Backward compatibilityBackward compatibility is the ability of a technology tool to work with both new and old architecture. React is backward compatible, meaning you update its old libraries and add different releases. However, Angular isn't backward compatible. You cannot jump from Angular 7.0 to Angular 13.0 without installing all other versions. As such, it's easier to update a React app than an Angular app.ScalabilityIn front-end development, scalability refers to the ability of an app to expand in functionality consistently. As your user base grows, your app needs to grow in size and complexity to handle the increased traffic.Angular is more scalable than React, thanks to its modular development structure. It can support the sudden increase in app users, making it an ideal tool for building real-time applications. React, being less scalable, is easier to test.Community supportReact was launched almost five years after AngularJS was released. Despite being relatively young, React has a larger community of users than Angular. This makes it easier to work with React since you can easily find reusable components contributed by other developers.When to use React * When building an app with multiple events * Building highly customized app * If you're aiming for a high-performance appWhen to use Angular * For building large-scale applications such as e-commerce apps * Building simple single-page applications * Apps with dynamic content * When building a minimum viable product (MVP)Frequently asked questionsIs React better than Angular?React is better than Angular in terms of performance thanks to its Virtual DOM feature. However, Angular is more suitable for building large applications.Is React easier than Angular?Yes, React is easier to learn and use than Angular. The library runs on JSX syntax, meaning you can get started immediately if you already understand basic HTML and JavaScript. With Angular, you need to invest time in learning Typescript -- a JavaScript superset. This explains why there's a larger pool of React developers than Angular.Wrapping it upReact, and Angular are suited for different use cases. React offers better performance than Angular. However, the latter is more suitable for building large applications due to its scalability and capacity to handle unprecedented spikes in app traffic. That said, the right tool depends entirely on your project requirements."
  },
  {
    "title": "GraphQL vs REST - Is GraphQL The New API King?",
    "plaintext": "GraphQL is spoken about as the successor to REST APIs for good reason. It's not really fair to compare the two since they've been created with different intentions. Before we dive into the details, it's worth laying out a quick definition of what they both are and how they compare.What's the difference between GraphQL and REST?GraphQL is a query language for fetching data, specifically via API while REpresentational Transfer State (REST) is an architectural style for transferring data between computers on the web.REST was built in the early 2000s while web APIs were realising their potential as a way to standardise information transfer. Whereas GraphQL was created by Facebook in 2012 as a better way of fetching data across all their products and services.What is REST, and why was it created?REST is an architectural style for software that specifies a set of requirements for developing web services. It is intended for use with media components, data, or hardware devices. Here's a summary of why REST is hugely important to web technology: * It's used in a wide range of languages, frameworks and contexts. * It allows web apps written in multiple programming languages to connect with one another. * With the support of REST, web apps can run seamlessly in different operating systems like Windows and Linux. * Make can make user interfaces portable across platforms.What is GraphQL and why did Facebook make it?GraphQL is a server-side application layer technology developed by Facebook for query execution using existing data. It provides a declarative method of retrieving and modifying your data.Unlike REST APIs, GraphQL allows data requests to be customised. The best way to think of this is needing to retrieve the name of a single Pokemon from a list of all Pokemon. Using REST, we'd have to request the entire list. Using GraphQL, we can specifically request the name of the Pokemon we need.This specificity and flexibility of data requests was something that Facebook needed, given the magnitudes of data they deal with.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat Other Technologies are Using GraphQL?REST has arguably been the standard for creating web APIs during the last decade. It includes several excellent concepts, such as stateless servers and organised resource access. However, REST APIs have proven to be too rigid to keep up with the continuously changing needs of the clients that use them.GraphQL was created in response to the requirement for more flexibility and efficiency! It addresses many flaws and inefficiencies developers have while working with REST APIs.New technology like Gatsby uses GraphQL to allow page and StaticQuery components to define the data that they and their sub-components require. Then, as the components requires it, Gatsby makes that data available in the browser.It's a difficult concept to articulate, but the idea is that GraphQL can be leveraged for elite performance on the web.GraphQL ApplicationsThe following are some of the most important uses of GraphQL: * GraphQL's customised queries can be used to improve application performance * It can be incredibly effective at simplifying complicated APIs. * Calls to REST APIs can be wrapped in GraphQL schema as a facade layer, which is useful when you need to combine data from several sources into a single API. * GraphQl is great for mobile applications where reduced bandwidth is a high priorityFetching data with REST vs. GraphQLREST APIs are used to fetch data by querying endpoints.For example on a simple social media platform, the /users/id> API might be used to retrieve user's details like name, user name, age, address, etc. Then there might be a /users/id>/posts endpoint for retrieving all of the posts they're written. Finally, /users/id>/followers, would return everyone who follows the user.To retrieve the needed data via REST, you would need to send three queries to different endpoints. Depending on the kind of information we're looking to retrieve, chances are that we'll end up with a bunch of data we don't need.By comparison, GraphQL allows the client to provide the exact data it needs in a query. A query could be submitted to the GraphQL server, which would return the data that matched the conditions of the query.The returned data is formatted as a JSON object, with a structure that matches the layered structure provided in the query.Underfetching and n+1 problemUnderfetching and the n+1-requests problem are two further issues with REST APIs. Underfetching often indicates that a certain endpoint does not give sufficient information. To get all it needs, the client will have to submit more requests. This can lead to a scenario in which a client must first download a list of items before making one more request per element to retrieve the relevant data.Consider how the same app would need to present the previous three followers per user. The API also includes the endpoint /users/user-id>/followers. The app will need to make one call to the /users endpoint and then hit the /users/user-id>/followers endpoint for each user in order to show the relevant information.Overfetching -- Superfluous Data DownloadsOverfetching occurs when a client downloads more information than required. Consider a screen that needs to present a list of people just by their names. In a REST API, this app would typically call the /users endpoint and receive a JSON array containing user information. This response would typically contain other information on the returned users like their birthdays or addresses - information that is irrelevant and not needed.Insightful Analytics on the backendGraphQL provides detailed insights into the data requested on the backend. Because each customer defines exactly what information they want, it is easy to acquire a thorough insight into how the available data is used. This can aid in the evolution of an API by deprecating particular fields that any customers no longer require.You can also use GraphQL to do low-level performance monitoring on your server's queries. To collect the data requested by a client, GraphQL employs the idea of resolver functions. The ability to instrument and measure the performance of these resolvers gives critical information regarding bottlenecks in your system.Rapid Product Iterations on the FrontendA common pattern with REST APIs is to organize the endpoints based on the views in your app. This is useful since it allows the client to obtain all necessary information for a certain view by just contacting the associated endpoint.The main disadvantage of this method is that it does not allow for quick frontend iterations. Every modification to the UI increases the likelihood that more (or less) data is now required than before. As a result, the backend must be modified to accommodate the increased data requirements. This reduces productivity and makes it difficult to incorporate consumer feedback into a product.This issue is handled with GraphQL. GraphQL's flexibility allows updates to be performed on the client without requiring additional work on the server. Because customers may declare their specific data requirements, no backend developer is required to make changes when the frontend design and data requirements change.Advantages of GraphQLHere are some highlighted benefits of GraphQL: * It offers declarative query language, which is not required. * Requests are tailored to your specific need. * It's hierarchical and product-focused. * GraphQL is a tightly typed language. It indicates that queries are run inside the context of a certain system. * Versioning is not required for API evolution. * It is suitable for fast application prototyping. * GraphQL queries are encoded in the client, not the server. * It automatically updates documentation in response to API changes. * It has all of the properties of the OSI model's application layer. * GraphQL provides a human-readable query. * It is simple to work with several databases with GraphQL. * GraphQL fields can be shared and reused at a higher component level. * It lets you choose which functions to expose and how they operate. * A single API request can be used to get data. * It aids in query batching and caching.GraphQL OR REST?I﻿t's okay to implement both REST and GraphQL on a project. However, here's a breakdown so you can see how they compare.ResourcesThe resource is at the core of REST. Each resource is identifiable by a URL, and you may access it by making a GET request to that URL. You'll most likely get a JSON answer because that's what most APIs use these days. So it looks like this:// GET /books/1{  \"title\": \"Black Hole Blues\",  \"author\": {    \"firstName\": \"Janna\",    \"lastName\": \"Levin\"  }  // ... more fields here}One thing to keep in mind with REST is that the type, or form, of the resource and the method used to get it are inextricably linked. When discussing the above in REST documentation, you may refer to it as the \"book endpoint.\" GraphQL differs in this regard since these two ideas are fully independent in GraphQL. You may have Book and Author types in your schema:type Book {  id: ID  title: String  published: Date  price: String  author: Author}type Author {  id: ID  firstName: String  Lastname: String  books: \\[Book]}We've explained the types of data accessible, but that doesn't tell you anything about how those objects may be obtained from a client. One key distinction between REST and GraphQL is that the description of a resource is not dependent on how it is retrieved. To really retrieve a specific book or author, we need to add a Query type to our schema:type Query {  book(id: ID!): Book  author(id: ID!): Author}Now, we can submit a request identical to the REST request previously, but this time with GraphQL:// GET /graphql?query={ book(id: \"1\") { title, author { firstName } } }{  \"title\": \"Black Hole Blues\",  \"author\": {    \"firstName\": \"Janna\",  }}We're finally getting someplace! Even though both may be queried through URL and both can provide the same structure of JSON answer, we can instantly identify a few differences between GraphQL and REST.To begin, we can see that the URL with a GraphQL query indicates the resource we're looking for as well as which attributes we're interested in. Furthermore, rather than the server author selecting for us whether the linked author resource should be provided, the API consumer decides.Most crucially, the identity of the resources, such as Books and Authors, is not linked to how they are retrieved. We may theoretically obtain the same Book using many different sorts of queries and data sets.GraphQL Schema Vs. URL RoutesAn API is useless if it is not predictable. When you consume an API, you're normally doing it as part of a program, and that program has to know what it may call and what it should anticipate as a response in order to act on that result.As a result, one of the most critical components of an API is a description of what may be accessed. This is what you discover when you read the API documentation, and this information can be inspected programmatically using GraphQL introspection and REST API schema tools like Swagger. The API is often stated as a set of endpoints in today's REST APIs:GET /books/:idGET /authors/:idGET /books/:id/commentsPOST /books/:id/commentsSo, the \"shape\" of the API may be described as linear --- there is a list of items you can access. When accessing or storing data, the first question to ask is, \"which endpoint should I call?\" As previously discussed, URLs are not used in GraphQL to identify what is available in the API. Rather, you employ a GraphQL schema:type Query {  book(id: ID!): Book  author(id: ID!): Author}type Mutation {  addComment(input: AddCommentInput): Comment}type Book { ... }type Author { ... }type Comment { ... }input AddCommentInput { ... }When compared to REST routes for comparable data collection, there are a few intriguing elements here. To begin, rather than sending a separate HTTP verb to the same URL to distinguish between a read and a write, GraphQL employs a distinct starting type --- Mutation vs. Query. With a keyword in a GraphQL document, you may specify the sort of action you're sending:query { ... }mutation { ... }Other differences between REST Vs. GraphQL!Let's look into some more differences for more understanding:GraphQL * It is an application layer server-side technology that Facebook introduces for executing multiple queries with existing data. * You can organize GraphQL in terms of schema * GraphQL is relatively a fast-growing community * It follows client-driven architecture * It offers fast development speed * It has a separate identity from how far you fetch. * HraphQL offers you high consistency over all platforms * The server determines available resources in GraphQL. * A string should be the message format for GraphQL mutations * GraphQL partners require API customization * It is typed strongly * GraphQL endpoints are single. * It offers high-quality and consistent UX for all the operating systems (OS) * GraphQL uses metadata for query validationREST * It is a software architecture style that defines a constraints' set for creating any web services. * It features server-driven architecture * REST is a huge community * REST has a relatively slower development speed. * You can arrange REST in terms of endpoints. * The message format in REST APIs mutations could be anything * REST API does not have machine-readable metadata cacheable. * It offers you a flexible public API that can enable new applications quickly. * It is very weakly typed * REST API has multiple endpoints. * It is much more difficult to get frequency and consistency over all the operating systems.Is GraphQL an Underrated Query Language?It will be difficult for someone who is new to GraphQL to put it up because its ecosystem and procedures are still evolving and developing. However, if one understands GraphQL, one may send simple text queries from the client application to request data from remote server-side apps to complete the task. Furthermore, tools like Apollo make caching and API creation easier. It handles caching cases on its own, without the requirement for specific code to enable it. On the other hand, file or picture uploading in GraphQL is still in its early stages, necessitating the use of a REST API.Conclusion - We recommend GraphQL!GraphQL has so many advantages over REST; it is faster compared to REST, allowing you to pick the fields you have to query quickly.On a final note, selecting GraphQL or REST is a complicated task because both of them are good in their own ways. Moreover, they also feature some similarities, such as the list of fields in GraphQL and the endpoints in REST API."
  },
  {
    "title": "React vs Vue: Which Frontend Framework Is The Best?",
    "plaintext": "If you're jumping into building a new web application, you'll need to commit to a frontend framework. There's tons of different options, but the big three are React, Vue and Angular. We're going to pretend like Angular doesn't exist because it's just... not a fun time to work with. So that leaves Vue and React.We're going to do a quick review of both and make some observations that might help you decide which one to adopt in your upcoming project.React overviewReact is an open-source Javascript library that was developed by Facebook in 2013. The Facebook team needed a standardised library for creating reusable UI components, speeding up the development process.React's main advantage is a robust ecosystem of users, tools, and resources. It's been battle-tested in thousands of enterprise-grade web applications. With its 10th birthday coming up, React is considered \"mature\" technology now. The development community has had time to work through the problems that have affected the library.React pros and consThe main advantages of building with React include:Great performanceReact applications boast improved performance due to the library's virtual DOM feature. With this feature, the DOM is stored in virtual memory, this way whenever the components of the application are changed, React will only update the specific items that have been amended instead of updating the entire DOM. This leads to efficient development and faster response times for an enhanced customer experience.Reusable componentsReact is a Javascript library, meaning that it consists of predefined functions that are used to build UI components. These functions can be reused throughout the application to build custom UIs, thereby simplifying the developers' work while reducing the time spent in development.Clean codeThanks to its component-based architecture, React's code is well-organized and easy to debug and maintain. This also helps manage an application more efficiently, while allowing you to replace a developer at any time in production without worrying about how the new dev would fit into the project.On the downside;Continuous updatesReact is constantly being updated to improve its functionality and performance. On the bright side, the updates enable you to build apps with the latest web standards. At the same time, the regular updates mean that React documentation usually becomes outdated quickly, forcing developers to re-learn some aspects to stay up to date.Needs additional toolsReact focuses mainly on the frontend, and as such, you'll need to use additional tools and platforms to have a complete set of development tools. This may also be interpreted as an advantage since it gives you the flexibility of integrating other tools.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitVue overviewVue is a lightweight Javascript framework for building web interfaces and single-page applications. It was developed and launched by Evan You, a former Google employee, in 2014 as an improvement of Angular.Js. The framework is considered to be versatile and progressive, as it allows the developers to effect changes on an application code, without affecting any core features. Due to its lightweight and fast performance, Vue is often used to build the minimum viable product (MVP) development. Some of the popular web apps built with Vue include; Grammarly, Alibaba, GitLab, Behance, and Adobe Portfolio.Vue pros and consVue is preferred by developers due to its:Readability and single-file componentsSimilar to React, Vue is based on a component-based architecture that improves code readability. Additionally, the components can be reused to create custom UIs, consequently improving the development timeline. The component architecture also streamlines unit-testing since all parts of an app can be tested individually.Robust tooling ecosystemSince its release in 2014, Vue has been gaining a strong set of tools that complement its functionality. For example, the Vue Command Line Interface (CLI), provides you with a rich collection of front-end plugins in addition to enabling you to create and manage Vue projects using a graphical user interface. The framework also supports Typescript, Babel, unit testing, server-side rendering, and browser debugging tools.High performanceIn addition to its lightweight, the Vue framework utilizes a virtual DOM in rendering web interfaces. This enables it to build high-performance single-page applications with highly responsive interfaces. In fact, Vue apps launch slightly faster than React and Angular apps.Compact sizeVue is a lightweight framework that weighs about 18kb in zip format with every subsequent release getting even lighter and faster. This makes the download and installation process easy while improving app performance.The cons of using Vue include:Too flexibleVue is known for its flexibility as it leaves room for developers to be creative when building interfaces. Think of it as a blueprint or a template upon which developers build applications while allowing them to use their code custom functionality. Although this flexibility gives developers the freedom to build custom UIs and implement new features, it comes at the cost of complexity, especially when building larger projects. Complexity creates more room for errors and irregularities which impairs production.Limited resourcesUnlike React, Vue doesn't offer a wide range of plugins and tools that are compatible with third-party resources. It also has a smaller community of users and contributors compared to React.Similarities and differences between React and VueThe most notable similarity between React and Vue is that they both use virtual DOM rendering and component-based architecture. Other similarities include: * Typescript support * Progressive web app support * Backward compatibility * Uses reusable parent and child components * Seamless version migration * Javascript usageAs for their differences, the most significant one is that React is a library while Vue is a framework. This means that Vue uses code provided by the developer for custom functionality, while React uses predefined code snippets to achieve the same.That said, let's compare the two frameworks based on the following criteria:PerformanceThere isn't much difference between React and Vue apps since they both use virtual DOM to render components. Additionally, these apps utilize the lazy loading feature that essentially loads only the components the user needs to see.However, for React apps, when a component state is changed, it triggers the re-rendering of the entire component starting from the parent. To avoid this re-rendering, you need to re-optimize the component when making changes. As such, you need to identify every component with specific commands - PureComponent and ShouldComponentUpdate. For small applications, managing these components is easy but when scaling the application can be challenging and potentially impair performance.Vue, on the other hand, automatically tracks components, and as such, you don't need to identify them. The system knows exactly which component needs re-rendering when its state changes. This consequently increases the app's performance and speed.ScalabilityReact is an ideal technology for building scalable UIs since it uses JSX template syntax - a combination of HTML and Javascript. This allows developers to build scalable and self-contained UI components with integrated functionality. Contrastingly, Vue uses HTML-based template syntax, and while this makes it easy for new developers to learn, it's less cumbersome and less scalable. This explains why React is ideal for building large apps while Vue is suited for smaller apps.State managementState management is the management of an application's data at any given time. This data can be in the form of an object, string, or array. For example, when a user logs in or inputs data, the state of an app changes. UI libraries and frameworks are responsible for state management, thereby giving you control over your app and especially if you intend to scale it.Managing the state of a small app is pretty easy as there are few components, however for larger apps, it can be challenging. As such, it's important to consider state management when choosing a library or framework if you plan on scaling your app.React lacks state management tools and meaning you have to use third-party tools, particularly Redux and the create-react-app CLI tool. Basically, the library outsources this state management to its vast community, effectively creating a fragmented ecosystem. Vue, on the other hand, contains a state management library, Vuex, at its core. The library has official support meaning all updates are in sync.Adapting to mobile devicesReact supports mobile development through its React Native framework that allows the building of cross-platform apps for Android and iOS devices. The framework doesn't have a steep learning curve, as it allows developers to use their React knowledge to build native apps using Javascript syntax. React library is also used in Progressive Web App development. PWAs are similar to the typical web apps but are optimized to perform like native mobile applications.Vue also supports mobile app development using its cross-platform UI framework - Weex. The framework was created by Alibaba Group but it's still in the active development stage, therefore it isn't as mature and reliable as React Native. However, you can still achieve native app experience since Vue supports PWA development.Code managementBoth React and Vue use component-based architecture to build interfaces. While this improves code maintenance, React boasts better code management than Vue. See, with Vue, the standard way to store components is in a .vue file, which combines HTML, CSS, and Javascript in the same file. Conversely, React doesn't have a standard for storing files. Since the components are built with Javascript, the developer is at liberty to organize them in the best way they see fit.Ideally, when building a large web application, you want the freedom to manage the numerous components in the most suitable way rather than being restricted to a rigid way of organizing your code. React applications, therefore, offer better code management than Vue apps.Data bindingData binding facilitates interaction by allowing a user to change UI elements, which consequently changes the underlying model state to reflect the changes made. For example, if a user changes/inputs a value in a textbox element, the underlying data value also changes.React uses one-way data binding, meaning that the model's state is updated first, and then the changes in the interface element are rendered afterward. This model gives you a better data overview, making it easier to debug your React app.Image credit: StackoverflowIn contrast, Vue uses a two-way data binding model. This way, whenever a user changes an interface element, your model's state changes automatically at the same time. It can be daunting to debug large scale apps that use Vue's two-way binding.Hiring developersThanks to its broad ecosystem, it's easier to hire experienced React developers than Vue. However, Vue is easier to learn especially for new developers, since it uses HTML-based template syntax. Its documentation is also simple to grasp and not as extensive as most javascript frameworks and libraries. React uses JSX syntax, Javascript, and HTML combination, which has a steeper learning curve for newbies.When should you use React?React library is suited for the following use cases: * When you need to hire fast or considering outsourcing the development process * Building large scalable web applications * When you want to build a cross-platform app * Want to build a complex app using a variety of third-party libraries, plugins, and tools * Build Saas productWhen should you use Vue? * Launching a startup with a focus on MVP * Building lightweight application * Building prototype websites * Building animation and interactive elements * If you wish for seamless integration with other single-page and multi-page appsFrequently asked questionsIs React faster than Vue?Vue is faster than React due to its lightweight. But in most cases, the difference is almost negligible.Is React more scalable than Vue?No. Both React and Vue are scalable. However, React is often preferred for building scalable apps. However, this doesn't mean Vue isn't scalable at all, you can use web packs and Mixin elements. It's just that React has more social proof of scalability than Vue.ConclusionReact and Vue are powerful tools for building interactive UIs. When choosing between the two be sure to consider the type of web app you're building, the development timeline, and talent availability."
  },
  {
    "title": "Is Test-Driven Development (TDD) Worth The Effort?",
    "plaintext": "Test-driven development (TDD) solves some of the chaos introduced by an agile software development methodology by forcing the devs to consider the behaviour they're looking to achieve before writing code.However, it's certainly no silver bullet. Taking a TDD approach adds a decent amount of overhead, and there are times when it doesn't make as much sense.Our team are always searching for the best way to manage our projects. Gathering a few hundred complex requirements and working through them in an efficient manner while coordinating with a handful of colleagues is really hard and easy to mess up. So we've tried pretty much every management approach under the sun; test-driven development, behaviour-driven development, acceptance criteria-driven development, agile, scrum, kanban, extreme development, waterfall, hybrid, and a bunch of less structured approaches.Whenever we try a new approach, I try to do a bit of research to see if it's going to be worth the effort. This might sound a bit cynical, but it's all about the time and effort required to properly learn and implement a business process. It takes my team months to get good at a new process, and I think they're sick of me asking them to learn new things!So in the spirit of asking questions and weighing up our options, this article will be dedicated to figuring out if test-driven development is worth asking my team to implement.What is TDD & what problem is it solving?TDD is a testing framework for writing unit tests first and code second.The tests tell development how to proceed. If a new feature is developed but the test fails, then additional development is required. Every requirement and feature must have full test coverage to tell it how to behave.TDD is a response to getting to the end of a project and having to frantically rush through a bunch of testing to figure out if everything works properly. It forces the project team to create a set of tests that can be automatically executed to check if bugs have been introduced accidentally.This kind of automated unit testing is pretty much necessary for any larger application. While manual testing will always be required to some extent, relying on just manually testing for a large application where a lot of changes are happening is a nightmare. It's super easy to introduce regression issues, knowing if the backend is working correctly is virtually impossible, and the effort involved to test thoroughly can be extreme.Since automated testing needs to happen for the project to stay healthy and developers to remain sane, TDD takes the stance that it should happen up front and drive the whole process.Test-driven development cycleThe test-driven development cycle looks like this: 1. Write tests 2. Red: Tests fail because code isn't complete 3. Green Phase: Tests pass when code is complete. Rerun entire test suite. 4. Refactor code to ensure optimization and best practicesRed stateThe red state is essentially everything before the complete code is implemented and the test passes. It falls between the point when the test is written and it passes.Green stateThe green state is when the code has met the conditions of the test and it's passing. Once the individual test passes, the entire suite needs to be re-run to ensure no regression issue have been introduced. If something fails, you're back in the red state until there are no problems.Refactoring phaseOnce all the tests have passed, it's time to refactor the code. Since the goal of TDD is to pass individual tests, there can be some inflexibility in how code is written. Often, the first way you write a unit of code to pass a test isn't the most optimal and it will need a bit of reworking, which is the point of this phase.Accounting for refactoring every unit of code creates room to build a high-quality, well-thought-out application, but it also adds effort and overhead to the project.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe bigger picture TDD processI find it more helpful to consider TDD at a slightly less granular level so you can see how it fits in with defining requirements. 1. Define the user flow, or the steps they will take to achieve their goal 2. Break the user flow into stories 3. Decompose the stories into features 4. Write tests for each unit of code required for the feature 5. Write code 6. Execute test 7. Refactor code until the test passesLooking at TDD this way helps paint a more accurate picture. Most of the time, the development team will have some involvement in figuring out what features are required to achieve a story and how that should be broken down into units of code.We've written a pretty detailed explanation about writing user flows and stories so we won't rehash that topic. Rather, we'll jump into the actual testing part of TDD.Designing for testabilityThe biggest value of test driven development is its emphasis on forcing developers to think through the design of their code instead of taking a cowboy approach. The process of thinking through the logic to create a feature and implementing the code is decoupled. As a result, the development team can focus on achieving the conditions of the test case, heavily reducing the amount of code written and building only what's needed.By forcing this process of thinking through the code design, a number of other benefits are unlocked: * Less code to maintain * Higher-quality releases with few bugs * Self-documented code that will help future devs figure out what's happening in the codebaseWill my team hate me for implementing TDD?There are two situations when your team will hate you for implementing test driven development: 1. The project is small and doesn't justify the overhead that TDD adds 2. Your team is working on an existing project and you're asking them to retroactively implement TDDIt takes a bit of time to get used to any new process, and writing tests for every unit of code can make the speed of development feel relatively slow. However, I've found that most development teams embrace the idea of writing tests since it cuts down on the number of bugs they have to deal with down the line.The times when protests will happen around implementing TDD is when the project needs to happen as quickly as possible and doesn't justify an automated suit of tests. The popular project management approaches often don't consider these kinds of projects, but we all know they happen.The other situation when you'll feel backlash from your team for implementing TDD is on an existing project. Retroactively writing codes for someone else's code sucks. It takes forever and can be quite tricky to get right. While it's possible, your team will hate every minute of it :).Testing: fakes, mocks and stubsTest driven development revolves around writing unit tests and getting them to pass. Most functionality will require some data to work with in order to test if it's working. The problem with adding data during development is that it's rarely possible to work with actual product data and services. There are three main ways that TDD solves this problem; * Fakes * Mocks * StubsFakes are a watered-down version of a production object, where the code is representative and slimmed down in some way. For example, a fake database object would return the same values as the real object, except it could be called without requiring a database connection and everything that comes with it.Mocks follow a similar principle, except they register any calls received. A good example of this is a mock for a form submission. Writing out the form data every time is a massive time sink, so automating the process and setting up for mock to register the submission makes sense.Finally, stubs are objects configured with test data that will return when called. They're helpful when the database contains actual data that shouldn't be returned, or when the database isn't configured to return data.Leveraging these test doubles is necessary to ensure that tests can pass and the project can continue to roll forward. However, setting up test doubles is another aspect of TDD that can feel like an investment of effort that's slowing everything down.SeedingAnother option that's less \"by the book\" is seeding the database with test data. This requires a bit more messing around and may still need to be combined with the methods we just covered if the database schema isn't complete for the feature you're writing tests for.Backend frameworks like Laravel make seeding data super simple, and it's a good practice to get into even if you're only doing it so the manual tests can be more meaningful.TDD vs ATDD - How do they stack up?The difference between TDD and ATDD is the granularity to which the tests have been written. Under the test driven development approach, a test is written for each unit of code. Whereas, under acceptance test driven development, each feature has an acceptance test that covers all the units of code within the feature.TDD is arguably a more thorough methodology because it questions and strengthens the quality assurance behind each small unit of code. However, as we've mentioned a couple of times, this can be a pain in the butt and sometimes uncalled for. ATDD on the other hand sets a definition of done for multiple units of code, and is much quicker to implement across a project. However, it's easier to achieve false positives where even though the acceptance criteria are being met, something within the code is actually not working correctly.TDD vs BDDPersonally, I prefer behaviour driven development as a way to write requirements and drive the direction of a project.It was created in the early 2000's as a response to the rise in TDD. Rather than writing out a never-ending list of unit-tests, BDD focuses on defining all the ways a feature (or story) will be used. The scenarios that describe the story follow a synxtax called Gerkin that looks like this:GIVEN some conditionAND additional information about the conditionWHEN something happensTHEN there will be a predictable outcomeThe benefit of behaviour-driven development over test-driven development is creating a shared understanding between the developers and business about exactly how the feature should work and what kind of edge cases should be considered.Popular TDD toolsSelenium and Cucumber are the two tools we're most familiar with for supporting TDD, but there are tons of other great options: * Cyprus * Mocha.js * JestThe testing depends on what languages the project has been set up with. These tools are all for JavaScript and can be used for frontend testing. Do a bit of research into which tools are the best for whatever backend language your project plans to use.Limitations of Test-Driven DevelopmentThere aren't really any limitations to TDD but there are a few \"considerations\": 1. You're spending testing time up front rather than behind 2. Tests can pass without the user's requirement being met 3. There's a learning curveTDD takes time and effort. This isn't a bad thing, but it can feel like it's slowing your team's velocity down. In reality, you're building the time your team would have spent testing into your development sprints (assuming the project is following an agile or hybrid methodology).A problem that's less obvious is that your application can have great coverage but not meet the user's requirements. Unit tests do a great job of breaking a functional goal into digestible chunks of code, there's no mechanism that ensures the business and development team are on the same page about the requirements. These problems are addressed by BDD, and there can be an advantage of combining the two approaches.Finally, training your team to use test-driven development takes time. Tests are a kind of code too, and they need to be written carefully. Since they add time and effort, there can be a reluctance to adopt the approach.Wrapping upTest-driven development is a great way to ensure your next agile application project achieves a high standard and enjoys easy maintenance once deployed. We've covered all the important business considerations about TDD. If we haven't answered your questions, please leave a comment below and someone from our team will get back to you in a day or two."
  },
  {
    "title": "How to Write a Good User Story: with Examples & Templates",
    "plaintext": "Writing requirements for a software project without a structure is a complete nightmare. Anyone who's worked on the development side of building a digital product knows that the biggest challenge isn't building the thing; it's knowing what to build.Like everything else in software development, there's a scientific, systematic solution to this problem; the user story. A user story is a syntax of defining a requirement that's become the incumbent in software development because it both the business and developers understand what's required.I've probably written more than 10,000 user stories. Still, whenever I take a break for a few months, I find myself browsing Google looking for examples of stories to see if I can strike up some inspiration of how to handle the trickier stuff (like authentication, project setup, design tasks, etc).Every time I go looking, I end up on Reddit where the answers usually follow the theme of \"no one would share actual user stories because they're legally protected\" - which isn't true. It's just that user stories are boring, and no one has bothered to make Google index an article actually dedicated to story examples... until now :).I'm sharing some examples of actual stories I've written recently, along with the behaviour-driven-development acceptance criteria my team uses to make sure that everyone understands the requirements and acts as a baseline for our automated testing.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is a user story? Our definitionA user story is a vehicle for describing a system feature that follows a particular syntax. Even though it's technically possible to write a story without following this syntax, it wouldn't really be a proper user story.Here's the user story syntax:As some kind of user,I want to perform an action,so I can achieve an outcome.The idea behind this formula is to answer the biggest questions that developers have when they start building the feature.Which user are we working with? Is it an administrator, a user with restricted permissions, or someone who shouldn't even have access to the system?What does the user want to do? From the user's perspective, what are they trying to do? The important distinction here is the question isn't asking, \"how should this feature work\". Requirements should be agnostic of implementation suggestions.Why do they want this? Sometimes it's hard to understand how a feature should work simply by knowing what the user wants to do. Having the additional context to understand why they want to do something can let developers create a better-fitting solution.Pros of using storiesUser stories can feel tedious to write out, but they bring tangible benefits to the organisation and management of a software project.Remove assumptionThe biggest problems with application development projects usually come from making assumptions. Assumptions aren't limited to how the developer implements a feature; they're also made by the product owner (or client) on what's feasible.Define intentWithout including the \"so I can achieve an outcome\" part of a user story, it's just a vague request that may not be the best way to achieve the outcome. Knowing the intention of a requirement helps get the product owner and development team on the same page.Standardised requirementsWithout a structure to stick to, requirements tend to take the easiest and sloppiest form. It's rarely consistent or detailed enough to figure out what needs to be done. Dealing with a large number of requirements that don't follow the same structure or approach is an absolute nightmare.Provides stakeholders with a way to communicateStakeholders who are working with a development team rarely know how to think through their requirements fully or communicate them eloquently. User stories give them a concrete approach for explaining what they want.Cons of user storiesUser stories on their own don't really have \"cons\" or \"disadvantages\". The problems come from their implementation.They're easy to write poorlyIt's easy to accidentally write a user story the wrong way, so it doesn't communicate the business's need. For example:As a user,I want to implement a form plugin,So I can have a working form.From a developer's perspective, this doesn't get you any closer to understanding what the customer wants. The requirement is coloured with technical implementation details. If the best possible solution isn't to use a form then the development team can only achieve this requirement through a sub-optimal implementation.Customers often find themselves writing user stories, especially if they're going to market to get developer quotes. Without some understanding and practice, the requirements end up needing to be rewritten down the line.The format can feel repetitious and tediousA big application can require hundreds of user stories. If there are only one or two user types, then starting every single story with \"As a user...\" can feelStories aren't complete without additional detailUser stories are a conversation placeholder and aren't intended to have all the details required for a developer to start building a new feature. That part needs to be handled during a sprint planning session or technical review.To get the most out of our user stories, there needs to be well-defined conditions for completion and examples of how the story should work. This is where acceptance criteria and behaviour-driven development scenarios come in handy.What makes a good user story?A good user story doesn't necessarily need to follow the regular syntax, despite what a lot of die-hard agile project managers will argue.To be useful and complete, a good user story need to: * Covers a description of the feature to be built * Avoids any description of how the feature should be built (i.e. technology) * Explains the value to the end user * Has an outcome that can be measured and achieved * Consistent * They're testableA lot of teams, including ours, will start writing user stories in a slightly different format. However they're written, the story always needs to inform both parties of what's required and have a clear way of being achieved.Behaviour-driven development scenariosBefore we get to the user story examples, it's worth talking through the other methodology we use to expand on the information available for the developers. User stories by design, are supposed to be concise and indicative. The developers and designers implementing the story will have plenty of questions that need to be answered.Behaviour-driven development is an approach of documenting requirements with examples. It follows a similar syntax to user stories:GIVEN some condition has been achievedWHEN a trigger event happensTHEN a result will be achievedThe idea is to document a few primary examples of how a feature (or user story) will be used. Providing actual examples not only acts as a great way to get everyone agreeing on how it should work, it also makes the product team think through the edge cases and creates tests that need to be passed for the feature to be considered complete.Agile user stories examplesFinally, on to the actual examples. I've anonymised and sanitised these stories and scenarios a little to avoid making any of our clients upset.These stories would typically have a handful of acceptance criteria too for peripheral behaviours like confirmation or validation messaging. To avoid making them too hard to read through, I've left these out.-﻿--Feature: Marking invoices complete.Story: As an administrator, I want to mark a job as invoiced, so it can be recorded and reconciled with accounting.Scenario 1: A job is completed and marked as invoicedGIVEN I'm logged in as an administratorAND I've completed a jobWHEN I mark the job as invoicedTHEN the UI will show the job as invoicedAND the job status will change to invoicedScenario 2: A job is not complete and marked as invoicedGIVEN I'm logged in as an administratorAND a job has outstanding tasksWHEN I mark the job as invoicedTHEN I will receive an error message that says, \"Job can't be invoiced until all tasks are completed\"-﻿--Feature: Carpenter marks installation as completeStory: As a carpenter, when I've finished my installation, I want to mark it complete so everyone else on the team knows it's done.Scenario 1: The carpenter marks the job as complete, and job status changesGIVEN I'm logged in as a carpenterAND I've finished an installationWHEN I mark the job as completeTHEN its status will change to \"installed\"Scenario 2: An administrator wants to know if a job has been installed yetGIVEN I'm logged in as an administratorAND I want to know if a job has been installedWHEN I open the jobTHEN I can see it's status is \"installed\"-﻿--Feature: Staff unavailabilityStory: As an administrator, I want to see a list of upcoming days when the staff are unavailable, so I can resource and plan efficientlyScenario 1: An administrator wants to check who took holidays last monthGIVEN I'm logged in as an administratorWHEN I view past staff unavailabilityTHEN I can see a list of all staff holidays that are in the pastScenario 2: An administrator wants to check if a staff member has any upcoming holidaysGIVEN I'm logged in as an administratorWHEN I view upcoming staff unavailabilityTHEN I can see if a staff member has an upcoming holiday registered-﻿--Feature: Calendar rolling dateStory: As an administrator, I want to easily scroll up and down the calendar to see past and future dates, so I can plan my team's workload efficientlyScenario 1: An administrator wants to schedule a job 4 weeks in the futureGIVEN I'm logged in as an administratorAND I want to schedule a job in 4 weeks timeWHEN I scroll down the calendarTHEN new weeks will displayScenrio 2: An administrator wants to check how many jobs were done last monthGIVEN I'm logged in as an administratorAND I want to see what work was completed last monthWHEN I scroll up on the calendarTHEN I can see all the jobs that were scheduled and completed-﻿--Feature: Discourse Single Sign OnStory: As a user, I want to sign into Discourse using the same credentials I use for the app, so I can see my forum posts and comment historyScenario 1: A user wants to add a comment on the integrated Discourse forumGIVEN I'm logged in as a userAND I open the integrated Discourse forumWHEN I leave a commentTHEN I will be successful without having to sign up for a new accountScenario 2: A user wants to view their forum post history through DiscourseGIVEN I have an active application user accountAND I've left comments on the forum in the pastWHEN I log into DiscourseTHEN I can use the same credentials I use for the applicationAND I can see my forum comment history-﻿--This is a decent cross-section of user stories and scenarios to get you inspiration moving.How to Write User Stories: Our WorkflowThe last thing to explain is our full process for building user stories. Achieving a full coverage of stories can be tricky and it's easy to miss things at the start of the project.At the start of every project, we run a Product Roadmapping session with our clients, consisting of a handful of 2-hour meetings. One of the goals of the sessions is to understand and document the major user workflows. A workflow is a user's steps to achieve their goal.Because workflows are less granular than stories, capturing them in totality is easier. Once you've got all the workflows, then you can move forward to breaking the workflow into the individual stories. Then the stories are decomposed into scenarios and acceptance criteria!Wrapping upHopefully, this breakdown of how we write user stories, along with a handful of actual examples, has helped you on your journey. If you have questions, please leave a comment below, and we'll get back to you in a few business days."
  },
  {
    "title": "Why Use PostgreSQL For Your Next Project?",
    "plaintext": "Why use PostgreSQLMySQL has been the king of d﻿atabases for a long time, but these days there are relational DBs, document DBs, graph DBs, and K/SV stores. Within each category, there's a number of different databases. The question is how can we make the best choice from the various options?Database Popularity Evolution from StackOverflow(2017-2022)A research report published by StackOverflow gives us an answer! PostgreSQL has become the most popular DB technology in 2022. For the first time, PostgreSQL (46.48%) topped MySQL (45.68%) in the popularity rankings for the professional developer community. Its popularity is growing rapidly in the past few years, the report ranking it as the \"Most Wanted\" database and DB-Engines also declares PostgreSQL as the DBMS of the Year 2020.Why is PostgreSQL so popular? Why we use PostgreSQL? This article will give you the answer, and help you choose the best option for your next project.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is PostgreSQL?PostgreSQL is a full-featured object-relational database management system (ORDBMS), which was started in 1986 under the direction of Michael Stonebreaker, a professor at the University of California, Berkeley. It is a powerful cross-platform open source ORDBMS that runs on many operating systems such as Linux, FreeBSD, OS X, Solaris, and Microsoft Windows. It has excellent transaction processing capability and powerful data analysis capability. In terms of application scenarios, PostgreSQL is suitable for rigorous enterprise application scenarios (e.g. finance, telecom, ERP, CRM).PostgreSQL supports highly transactional, mission-critical applications, it is also well documented with a large number of free online manuals, and archived reference manuals for older versions.PostgreSQL's main benefit is it's high data consistency and integrity, but it also encapsulates four important features: Atomicity, Consistency, Isolation, Durability (known as ACID), which ensure the transactions remain correct and reliable in DBMS during the process of writing or updating data.What is ACID in PostgreSQLIn a database management system (DBMS), there are four characteristics that must be present to ensure that transactions are correct and reliable when writing or updating data: atomicity, consistency, isolation, and durability.TransactionA transaction is a sequence of one or more operations. For a database, this sequence of operations is either all executed or none executed, and is an inseparable unit of work for the database.AtomicityTransactions usually consist of multiple statements. Atomicity guarantees that each transaction is treated as a single unit, and that the transaction either succeeds completely or fails completely. In other words, if any statement in a transaction fails to complete, the entire transaction fails and the data entries in the incomplete transaction remain unchanged in the database. An atomic system must guarantee atomicity under all circumstances, including power failures, database errors, and instance runs. At the same time, atomicity prevents the occurrence of partial data updates in the database.ConsistencyConsistency ensures that transactions can only change the database from one valid state to another, guarantees that the final state of the database data is consistent. Consistency is mainly ensured by defining rules such as constraints on table objects, triggers, cascades or a combination of rules between them. These rules are used to prevent abnormal transactions in the database.IsolationIsolation guarantees that multiple transactions can occur simultaneously. The simplest example is that multiple transactions can read and write to a table at the same time. Isolation ensures that multiple transactions can proceed simultaneously and not affect each other.DurabilityDurability is to ensure that once a transaction is committed, even in the event of a system exception (e.g., power failure, instance crash), the incomplete transaction can be rolled back, and the completed transaction can be automatically committed and recorded on a permanent storage medium.ACID in PostgreSQLPostgreSQL mainly uses two technologies, Multi-Version Concurrency Control (MVCC) and Write-Ahead Logging (WAL), to implement ACID features, ensuring the validity of the data in case of exceptions. 1. In PostgreSQL, the transaction ID is left on the data operated by add, delete and change, so that the batch operation can be easily committed or completely undone, thus ensuring the atomicity of the transaction. 2. Using MVCC, read operations do not block write operations, and write operations do not block read operations, improving performance under concurrent access. 3. The rollback of a transaction can be done immediately, regardless of the number of operations performed by the transaction. 4. Data can be updated in large quantities and will not need to ensure that the rollback segment is not exhausted as in MySQL, InnoDB and Oracle.Benefits of PostgreSQLStableThe multi-process architecture makes PostgreSQL more stable under abnormal conditions. 1. A subprocess will not affect the operation of other processes even if it crashes. 2. Under high concurrent reads and writes, PostgreSQL's performance metrics can maintain a hyperbolic or even logarithmic curve with no drop after the peak, while MySQL will clearly dip after the wave.ScalabilityThe scalability of a database system is directly dependent on the ability to compress data. Ideally, database systems must have advanced, off-the-shelf compression techniques. In some database systems, developers have to compress manually, which is not only time-consuming but also inefficient. PostgreSQL provides it for free and the whole process is automatic.Active communityPostgreSQL basically releases a patch version every 3 months, which means that known bugs are quickly fixed and needs are met in a timely manner. One major version update per year, keeping it fresh and the more powerful it is.Powerful Function 1. In terms of tables and views, PostgreSQL supports temporary tables and can use PL/pgSQL (Procedural Language/ Postgres SQL), PL/Perl, PL/Python to materialize views. 2. For indexes, it fully supports R-/R+tree indexes, full-text search, bitmap indexes, hash indexes, reverse indexes, partial indexes, expression indexes, Generalized Search Trees (GiST). 3. For other objects, PostgreSQL supports data fields, stored procedures, triggers, functions, external calls, and 4. In terms of data table partitioning, it supports 4 kinds of partitioning, range partitioning, hash partitioning, hybrid partitioning, list partitioning. 5. In terms of stored procedures, PostgreSQL supports stored procedures. This point can avoid the transmission of a large number of raw SQL statements on the network. 6. In terms of extensions of user-defined functions, PostgreSQL can be more easily extended using User Defined Functions (UDF). 7. Point-In-Time-Recover (PITR), a feature introduced in PostgreSQL starting from version 8.0, allows database clusters to be recovered to any point in time using base backups and continuous archived logs. 8. Provide high availability services through asynchronous or synchronous replication methods across servers.Ease of operation and maintenance 1. Data Definition Language (DDL) can be placed in a transaction, delete tables, truncate, create functions, indexes, can all be placed in a transaction to take effect atomically, or rolled back. This can do a lot of cool things, like changing two tables via RENAME in one transaction. 2. Can concurrently create and delete indexes, add non-null fields, reorganize indexes and tables. This means that major schema changes can be made online at any time, and indexes can be optimized as needed. 3. Various replication methods: segment replication, stream replication, trigger replication, logical replication, plug-in replication, etc. It makes it very easy for services to migrate data: you can directly copy, re-read, and re-write. 4. Various submission methods: asynchronous submission, synchronous submission, and quorum synchronous submission. This means that PostgreSQL allows trade-offs and choices between C and A, such as using synchronous commit for transaction libraries and asynchronous commit for normal libraries. 5. The system view is complete and easy to monitor. 6. The existence of Foreign Data Wrappers (FDW) makes Extract-Transform-Load (ETL) extremely simple. FDW makes it easy for one instance to access data or metadata of other instances. It is useful in cross-partition operations, database monitoring metrics collection, data migration and other scenarios. It can also interface with many heterogeneous data systems.SQL Battle: PostgreSQL vs MySQLBoth PostgreSQL and MySQL are relational databases that organise data into tables. These tables can be joined or related based on data shared by each table. Relational databases enable your business to better understand the relationships between available data and help gain new insights to make better decisions or discover new opportunities.Comparison of PostgreSQL and MySQLOpen source * PostgreSQL is a free and open source system. * MySQL is an open source system developed by Oracle and offers several paid versions for users to access.Performance * PostgreSQL is suitable for use in large-scale systems that require high read and write speeds. * MySQL is mainly used for web applications which only need a database to perform data transactions.ACID compliance * PostgreSQL fully adheres to ACID principles and ensures all requirements are met. * MySQL is only ACID-compliant when using InnoDB and the NDB cluster storage engine.Platform Support * PostgreSQL can run on Linux, Windows (Win2000 SP4 and above), FreeBSD, OpenBSD, NetBSD, Mac OS X, AIX, IRIX, Solaris, Tu64, HP-UX OS, and the open source Unix OS. * MySQL can run on Oracle Solaris, Microsoft Windows, Linux Mac OS X, and open source FreeBSD OS.Programming Language Support * PostgreSQL is written in C. It supports several programming languages, C, C++, Delphi, JavaScript, Java, Python, R, Tcl (tool command language), Golang, Lisp, Erlang and .Net . * MySQL is written in C and C++. It supports C/C++, Erlang, PHP, Lisp (ListProcessing), Golang, Perl, Java, Delphi, R, and Node.js.Materialized Views * PostgreSQL supports materialized views. * MySQL does not support materialized views.Data Backup * PostgreSQL supports master-standby replication and can also handle other types of replication by implementing third-party extensions. * MySQL supports master-standby replication, where each node is the master and has the right to update data.Scalability * PostgreSQL is highly scalable, can add and have data types, operators, index types and functional languages. * MySQL does not support Scalability.Community Support * PostgreSQL has an active community of support that helps improve existing features, and its creative committers do their best to ensure that the database stays up-to-date with the latest features and maximum security, making it the most advanced database available. * MySQL also has a large community of followers, while these community contributors, especially after its acquisition by Oracle, will only occasionally focus on new features as they emerge and maintain existing features.Advantages of PostgreSQL over MySQL 1. PostgreSQL is under the BSD (Berkeley Software Distribution) open source protocol, which allows the development and sale of commercial versions based on PostgreSQL, which has more advantages in commercial scenarios. MySQL is under the GPL (General Public License) agreement, which means if a software uses the GPL agreement, then the software must also be open source, which is a strict limitation. 2. MySQL's storage engine plug-in mechanism has the problem that the lock mechanism is complex and affects concurrency, while PostgreSQL does not exist. 3. PostgreSQL uses physical replication. Compared with MySQL's binlog (binary log: record write operations: add, delete, change, exclude query in a MySQL database) based logical replication, data consistency is more reliable, replication performance is higher, and the impact on host performance is smaller. 4. From an enterprise user's perspective, MySQL is a single functional component dedicated to OLTP and often requires ES, Redis, Mongo, and others to work together to meet complete data storage needs, whereas PostgreSQL basically doesn't have this problem. 5. MySQL generally leaves the data compliance verification to the client; PostgreSQL does a stricter job in terms of legality difficulties. For example, if you insert the time \"2012-02-30\" in MySQL, it will succeed, but the result will be \"0000-00-00\"; PostgreSQL does not allow inserting this value. 6. Better performance. PostgreSQL performs nearly 50 times faster than MySQL when it reads 10,000 records at random after inserting 10 million data. (Test conditions: same database structure, table structure, insertion of 10 million random data.)6.1. Time for a random query of 10,000 records out of 10 million records using PostgreSQL.6.2. Time for a random query of 10,000 records out of 10 million records using MySQL.Challenges of using PostgreSQLThere are some several disadvantages of PostgreSQL: 1. Because of using Multiversion Concurrency Control (MVCC), the database needs to be VACUUM (In PostgreSQL operations, tuples that are deleted or deprecated by updates are not physically removed from their tables, they will remain until a VACUUM is performed) regularly, and tables and indexes need to be maintained regularly to avoid performance degradation. 2. The slow query log and the general log are mixed together, need to be parsed and processed. 3. The official PostgreSQL does not have a very useful column store.ConclusionMySQL is user-oriented, answering the question \"what problem do you want to solve\"; while PostgreSQL tends to be theoretical, answering the question \"how should the database solve the problem\", which leads its sustainable development, with rigorous transaction processing capabilities and powerful data analysis capabilities. In terms of application scenarios, PostgreSQL is more suitable for strict enterprise application scenarios (e.g. finance, telecom, ERP, CRM), while MySQL is more suitable for Internet scenarios with relatively simple business logic and low data reliability requirements.Frequently Asked Questions:Q: MongoDB vs PostgreSQL - which is better for most applications?A: MongoDB and PostgreSQL are stored in different data structures. PostgreSQL is preferred when a high level of security is required and the number of transactions or queries is large. MongoDB is used for unstructured data storage and is not suitable for highly secure applications.Q: What are the main differences between SQL vs NoSQL?A: We've s﻿ummarised the main differences between the two databases in the image below."
  },
  {
    "title": "Is Mobile First Always The Best Approach?",
    "plaintext": "Mobile-first design is a term thrown around a lot in the UI and web design industries, but there often need to be more clarity about what it is and why you should use it.Mobile-first isn't always easy to implement, and if your website or application also needs to operate on desktop, it can end up looking poor. There are a few considerations we've picked up from designing dozens of mobile-first products that we wanted to share in this article!Mobile-first Design Strategy: When, Why and HowIt's 2022, and users are staunchly intolerant of any user interface design that doesn't look good and work properly on all screen sizes. Whether the user is on a desktop, an iPad, or a mobile phone, they expect their browsing experience to be flawless.Any designer worth their salt will start creating a new website or application in a platform like Figma or Sketch (or Adobe XD if they're afraid of the \"new\" options). They need to pick one screen size to determine how everything will come together. Traditionally, this resolution has been 1920x1080 or 1366x768, because that's the size of a desktop monitor or a laptop. This idea was challenged when mobile phones enabled web browsing.Mobile-first design means that you begin by designing for mobile devices and then expand that to be compatible with tablets, laptops and desktop resolutions. While it will ideally look great on all screen sizes, the first design you create is usually the best.Mobile devices are by far the most widely used for web browsing and as such, are what designers should begin with. They make up around 60% of all web searches, which has increased from 30% in 2015, so we expect it to rise even more over the next few years.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitImportance of mobile-first DesigneCommerce, or any website that sells stuff, is an area where it's essential to have a strong mobile design. Online stores want to make the buying process as quick and easy as possible for customers so they have less time to back out of a purchase. This principle is tied to improving conversion rates, and successful stores will go to long lengths to maximise how many customers purchase.Mobile-first design ensures that any customer shopping from their phone can find the most relevant products in your online store and decide whether to make a purchase. There are a lot of forces that make mobile experiences feel more difficult, so mobile-first allows a chance to think through these carefully and intentionally.Any information-based content can benefit from mobile-first design. It can help keep users engaged for longer amounts of time. This is particularly beneficial if you're a blogger who generates revenue from ads or a small business trying to find new clients. By keeping mobile users on your site for longer, you're likely to increase the chance they click on an ad or read something that persuades them to give you their business.Mobile devices are small and often much more challenging to use than desktops and tablets. A good design that focuses on these less user-friendly devices is essential to keep visitors interested and moving through the conversion process.Mobile-first is content firstMobile-first design revolves around the notion that content is key. Designing for smaller screens is all about avoiding clutter and building minimalistic user interfaces so that the user's focus is directed to only the most important things. Only information that is relevant to the user should be featured.Designing something that looks awesome and is functional for mobile is restricted by the fact that the device is very small, and there's not much bandwidth to work with. As a result, the mobile design can lean towards removing everything that's not \"mission critical\". This purging often doesn't consider the fact that the content defines the needs of the user and what elements should appear in the UI. Desktop designs have the luxury of including everything. Mobile designs should include tools that are contextually relevant to the content within the view.For example, a sunglasses eCommerce store desktop design might feature a tall list of filters like face type, price range, brand, purpose and colour. It may also feature a search bar and a ton of white space to make everything look clean. Mobile users will need all of these features but the available real estate is reduced, so the design needs to take a different approach. The point is that the design should always ask, \"does a mobile user need this feature\" and adjust the UI accordingly.Challenges of mobile-firstMobile-first can yield some great results and produce nicely polished designs on smaller screens, but it can be a painful methodology to follow. Here are the drawbacks:Clients want to see desktop designUnless the product is a mobile app, the product owner or client will want to know what the design looks like on desktop as well as mobile. This means creating two designs, which can slow things down at the start of the project.Limited space means limited creativityThere's not much room for playing around with cool design implementations with mobile-first. It's usually a case of trying to pack all the important pieces in as cleanly as possible.Mobile users don't like it brightColours are one of the early considerations in an attractive product design. If your user base are largely on mobile devices, the colour pallet needs to consider that mobile users turn their brightness down which can cause accessibility issues.Expanding a design is difficultExpanding a small design into a full 4k resolution is difficult. There's a lot of empty space to fill with elements that were originally designed for mobile.Keeping the design system organisedAt the start of most projects, we'll create a design system of buttons, inputs, modals, navigation items, and all the atomic pieces that make up the design. These pieces need to be different between mobile and desktop, and maintaining two versions of a design system can be a bit of a headache.Mobile-first design principlesVisual HierarchyVisual hierarchy is the idea that elements in a UI should be arranged in a way that draws the user's eyes to the most important parts first so that they're guided towards performing the desired action. Achieving the right visual hierarchy involves a combination of various factors: * Size: Users will be drawn to larger text or elements first. * Colour: Brighter, bolder colours are more appealing (black is more appealing than grey and red is more attractive than pink). * Position: An element that breaks the alignment of a page's other elements will stand out (a centred heading vs left-aligned paragraphs). * Contrast: Colours that stand out against their background will be more eye-catching (on a white background, black stands out more than grey).The main heading (H1) on a simple website will often be the most important information. For this reason, designers will make it a colour that stands out from the background (like black) and will position it in the centre of the page. Smaller headings (H2s) can then be more subtle colours (like grey) and be smaller in size. This creates a visual hierarchy where the user is first appealed to the H1, and then to the H2.Simplicity is keyWhen designing UIs for mobile devices, one of the most fundamental things to keep in mind is simplicity. You can't afford to clutter pages with unnecessary elements.Make Call To Actions (CTAs) stand outIt's easy for CTAs to become lost amongst all the other content. This can create a barrier for users who may be interested in becoming a customer but cannot see where they can take the next steps easily.Making sure that your CTAs are bold, bright and consistent can make them more easily noticeable by the user without taking over the whole UI. It can be as simple as using a unique colour for CTA buttons and making sure that colour is used globally across your website or app. Some of the best colours to use for CTAs are: * Red: This is often the best. It stands out from most backgrounds and will complement a lot of other colours. * Orange: Orange is also a great choice, and is similar to red in its benefits. * Green: While it does stand out, it will blend in with some backgrounds a little too much. * Yellow: Stands out from darker backgrounds, but may cause eye strain to the user.Some colours that you should usually avoid for CTAs are black, brown, white and grey. These colours are associated with text, so they'll often be overlooked by users.Keep things lightweightCreating a UI that is lightweight can increase engagement and reduce bounce rates. Follow these principals in order to reduce the weight of your site: * Smaller images (and modern formats like webp) * Adding the most important elements at the top and lazy loading the less important content later on * Font and colour minimalisation - the more font varieties, the more files have to be loaded. Similarly, colours use more data * Reducing visible content so it can be lazy loaded (i.e. menus, filters, controls)Mobile-first design process1. Define your content requirementsThe first thing to do in mobile-first design is to determine what information you need to include. Consider what message you're trying to convey to the user and what you need to do to get that message across. How much content will you have? Is it going to be a large project, or just a single-page application? From there, you can roughly organise content into sections and pages to start deciding on the elements that can go into your design.2. Create wireframesWireframes are a skeleton for the general layout and structure of a UI. There is enough detail to provide an idea of what the completed design will look like.3. Mockups and testingWhen you're happy with the wireframes, you can start adding some detail and colour to create mockups. Mockups are essentially a full UI, minus the interactive aspects. In other words, a static UI. They'll provide even more of an idea of what a design will look like before development begins.Responsive Web Design (RWD) vs Adaptive Web Design (AWD)RWD and AWD are terms that are often used interchangeably, but they are actually quite different. The key difference lies in how the UI changes with different screen sizes.RWD is very fluid. The way content is displayed to the user changes consistently as the screen size gets bigger or smaller, and it usually does this by containing elements in rows and columns. As a screen gets wider, the elements change in terms of the column they're nested in. As screens get taller, elements change in terms of their rows.On the other hand, AWD does not consistently change how content is displayed. Instead, the layout of UI shifts once a certain screen size is met (these are called breakpoints). For example, you might set a breakpoint to change from a mobile-focused design to a tablet-focused design and then another one to expand into a desktop design. Some common breakpoints are: * 320px - 480px for mobile devices. * 481px - 768px for tablets. * 769px - 1024px for laptops. * 1025px - 1200px for desktops. * 1201px+ for widescreens and TVs.This means that for screens larger than, say, 769px but smaller than 1024px, the UI will adapt to be more appropriate for laptops.Reasons to design mobile-first1. Search Engine Ranking PriorityIf you want your website to rank better in search engines, mobile-first design is vital. Google and other search engines are moving towards priotising websites that have a good mobile experience2. Easy navigationCreating websites and apps that let users quickly and easily find what they're looking for is a key part of UX design. With a mobile-first design, you can create a much better user navigation experience on small devices.3. User-friendlinessWhen a design is scaled down and shoved into a smaller screen, it can often become cramped, confusing and frustrating to use. Since smaller screens are generally a little harder to create user-friendly UIs for, you start with them to ensure it works properly while maintaining a consistent style across all device types.FAQ:Q: How can I implement mobile-first approach in product design?A: The mobile-first approach can be implemented in product design the same way it is for website design. Pick a target mobile resolution and build your wireframes to that aspect. Extend the wireframes into a prototype and, ultimately a high-fidelity design.Q: Is mobile-first always the best option?Mobile first is harder to get right. Getting feedback from clients is more difficult because they'll typically be on a laptop when reviewing the design instead of the target device.Besides this, the general rule of thumb is to design for the device the majority of customers will use. If that's going to be mobile devices, then mobile-first will be the best option.ConclusionMobile-first design is an approach that involves creating user interfaces on a mobile scale first, and then expanding that initial design to larger devices like tablets and desktops. It eliminates many of the issues associated with scaling down from desktop to mobile, such as difficult navigation, more usability and slow load times.Do you have any questions about mobile-first design? Leave them in the comments below and our team will respond in a day or two."
  },
  {
    "title": "Customer Experience (CX) - Why It Pays To Invest In CX",
    "plaintext": "Customer experience refers to your business's customers' perception of dealing with you. It's their overall experience with sales, service, and any interaction with your team.CX is no longer a luxury. Competition is fiercer than ever, especially with the rise of eCommerce, pay-to-use applications, start-ups and corporate copy-cats. To thrive in an online setting, your business will need to take a hard look at its customer experience.Customer loyalty is key to business success---whether you agree or not, the customer is king. They hold more power in the marketplace than ever before, and poor customer retention can have a devastating effect. Without a transparent view of how your business attracts, converts and retains customers and a strategy to do it better than the competition, you're leaving money on the table and possibly jeopardising your product or service.As a company that builds web applications and websites, we intimately understand what makes a great customer experience. Drop our team a line if you're trying to piece together your strategy and need support. The worst that will happen is you get some free experience-backed advice.In this article, we'll look at the fundamentals of CX--- the core concepts, the customer journey and how to map it, service design, and its evolution.Core customer experience conceptsCustomer experience revolves around three core principles: 1. Discovery - how companies contact customers and make it relevant and meaningful. 2. Engagement - how customers interact with the company and its products. 3. Delivery - speed and accuracy. Customers are after fully-functioning products delivered on time.However, there are three competing groups to consider when looking at the whole customer experience: 1. Customer - how do you satisfy their needs? How do you build their trust? 2. Brand - how do you stand out from your competitors? What are your unique selling propositions (USPs)? 3. Organisation - what are your business priorities? Is it conversion, gathering leads or simply building trust through information?Your business must meet a handful of criteria to achieve optimal CX. These are: * Goal-oriented customer experience design * Give a human touch * Involve the organisation in the CX design process * Plan and create the ideal customer experience, and * Document the customer experience at every stage.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is Customer Experience Management (CEM or CXM)?Customer experience management, also known as CEM or CXM, is the term given to all marketing and analytical activities designed to facilitate customer engagement and create a great customer experience.CXM has become synonymous with systems like Zendesk, Freshworks and Salesforce Service Cloud because they automate the collection of customer feedback, engagement analytics and interaction insights. However, you don't need to pay money to join in the CXM game.The concept behind CXM is giving customers a way to provide feedback on their experience with your business's product or service. You are responsible for continually making adjustments to keep your customers happy.Once you've gathered a few rounds of feedback and the obvious improvements have been taken care of, it can be time to look at help from a CXM platform. These platforms provide more customer touchpoints (web, mobile, email, social media) and omnichannel analytics to identify areas of potential CX improvement.Start by mapping the customer journeyA customer journey map is a comprehensive, illustrated and annotated diagram of all possible stages and scenarios of interaction between the customer and the organisation. It's a concept that's been around since the 1980s, with models varying from five-step, seven-step, flow charts, funnels and beyond to improve customer experience at every stage.There are five standard phases in a customer's buying journey.1. Awareness phaseMost prospective customers start at the awareness phase. When a user has a problem or need and looks for an answer, they are first introduced to a company via advertising, word-of-mouth or social media.2. Consideration phaseThis stage reveals that the customer can solve their problem with this brand's product.3. Purchase phaseThe prospect becomes the customer by deciding to purchase the product.4. Retention phaseThe customer has possession of the product or service, and either they or an end user is using it. They might seek assistance or guidance from a community or a provider. There is an opportunity for the provider to engage with the customer to drive brand loyalty proactively.5 Advocacy phaseWhen your customer spreads the word about your product, will it be positive?By mapping these phases, you can begin the customer journey design iteration---a holistic, customer-centric, and iterative service design approach to improve the customer experience. It will involve software and systems, market research and the buy-in of customer support teams.What is the customer journey design process?The customer service or customer journey design can differ in phases depending on how established it is in your organisation. The following four phases are widely accepted as a good starting point if starting from scratch. Then you can branch out using more detailed frameworks.PrepareHelp your stakeholders understand the value of the service design you are about to undertake. Gather information about your customers' needs and the current state of service delivery in your organisation.UnderstandWith the information you've gathered from customers, your stakeholders and the customer support team, you'll realise the problem or opportunity to work on improving.CreateYou can make recommendations and develop different strategies to solve your problems. In this stage, you will also find the best solution by analysing all options and gaining the feedback of key people.DevelopThis is where you and your team work on your customer journey according to your chosen strategy.Measuring the customer experienceHaving accurate and complete CX metrics is vital to assessing the customer experience. It can tell you how likely a customer will return to your brand or refer you to others.You can measure CX through surveys (via pop-ups or email), retention rates, and churn rates. Some other common metrics you'll encounter are: * Customer Satisfaction (CSAT) * Net Promoter Score (NPS) * Customer Effort Score (CES)Set up how you measure CX right, and you'll get a crystal clear picture of problem areas and opportunities, giving you all the data needed to make the best decisions.Invest in customer retention by investing in CXBuilding customer loyalty and increasing a company's revenue go hand-in-hand. It does require an investment, but the benefits are vast: * Brings positive growth * Deepens customer relationships * Positive experiences increase word-of-mouth * Fewer negative customer experiences * Boosts morale and positivity in the workplace * Attracts innovation and better branding, andThe role of customer support in shaping CX strategyCustomer support is arguably the most vital aspect of CX. They ensure the company meets its customers' needs and expectations. Customer support agents are the face of your business. Good agents have a wealth of knowledge about your product or service, the ability to build important relationships, and are in the best position to convert customers that are on the fence.Picture this - a customer calls your support team directly because their subscription has expired and they want to renew. They never received an automated email or alert. Luckily, they were on the ball and knew time was nearly up. This is a call they had to make themselves, and there was a real risk the customer would let the subscription lapse, thus causing churn. Here would be an opportunity to improve the CX by looking into the alerts within the customer management software and ensuring no customers get missed.All these interactions with the general population and their pain points gather into a feedback loop that gets shared with team leads and then onto product and project management teams.Customer support can observe the customer journey at work and identify where gaps and opportunities exist. This is why investing in good hires, training and resources, technology and a strong team culture are vital for setting you and your customer support team up for success.How the pandemic has changed CXDuring the pandemic, a large portion of the developed world was forced to continue their lives from within their homes. The use of online platforms soared. Companies like Zoom became household names overnight.Many new customers who hadn't previously dealt with businesses in an online setting were now forced to use digital tools and services. The influx of \"noobie\" customers had an importance of CX in two ways; 1. A larger volume of customers naturally exposes poor experiences 2. Less experienced customers don't follow normal patterns 3. There was a boom in new SaaS and online service companiesAs a result, the importance of CX was catalysed for a lot of companies that had ignored it in the past. When your customer service agents are passing back a flood of tickets reporting a bad experience, it's hard not to take notice.Another less obvious trend during the pandemic was triggered by supply chain issues that left a lot of consumers unable to buy their regular branded products. Buying new products and trying new things meant that customers searched for new brand relationships. Savvy companies that valued CX saw this as an opportunity to throw resources behind their customer service teams to win new business.FAQQ: What is CX?A: Customer Experience (CX) is a blanket term for all customer interactions with a business. It's more commonly known by the efforts a company puts into its customer relationship.Q: What is a CX professional?A: A Customer Experience professional works to analyse and improve how a business interacts with its customers. They typically work with a Customer Experience Management system to identify data trends and make suggestions for improving CX.Q: What is a customer journey map?A: A customer journey map is a visual representation of the path a customer takes from deciding to make a purchase to buying something with a business.Q: What is the customer journey design process?A: The customer journey design process involves thinking through every step a customer takes along the purchasing journey and optimising it to create a great customer experience.Q: What's the difference between CX and UX (User Experience)?User Experience (UX) is focused on providing users with the least friction as they interact with a product. UX mostly involves design and layout. Customer Experience (CX) is an umbrella term that describes all customer interactions and business interactions.ConclusionDoes your organisation have a customer-first mindset? What CX initiatives do you have in place to improve the experience for your customers? You should get on board the CX train sharpish if you've answered anything less than two yeses. In the current economic marketplace, it's a business catastrophe to forget about your most important asset - your customer.Got questions or need some help? Please leave them below, and someone on our team will get back to you soon!"
  },
  {
    "title": "What Are The Benefits Of Sass in 2022?",
    "plaintext": "Cascading style sheets (CSS) dictate how HTML elements are displayed on a webpage. However, pure CSS can be repetitive and lengthy, especially when building a large and complex website. This slows the development process as you will likely have difficulty debugging and managing numerous CSS files. This is where Syntactically Awesome Style Sheet (Sass) comes into play.What is SassBefore we can look into the benefits of Sass, we need to understand what SASS is in the first place. SASS is a powerful CSS preprocessor that enables you to write more concise and readable CSS. Think of it as a tool that extends the capabilities of your standard CSS by adding features of traditional programming languages.Initially, Sass was written in Ruby and required one to install Ruby in the system where the preprocessor will be used. However, in March 2019, this requirement was done away with shortly after Dart Sass and LibSass were launched. Dart Sass is a Sass implementation in Dart, while the latter is a Sass implementation in C and C++. However, LibSass was recently deprecated, meaning it'll not receive any further feature updates and compatibility with future CSS features. It would be best if you used Dart Sass for all your projects.How does Sass work?Browsers don't understand SASS, so you need to use a transpiler, LiveSASS, for example, to convert SASS code to pure CSS for the browser. So, during development, SASS is saved as a .SASS file which is then compiled/translated to a standard CSS file for the browser.That said, Sass uses two main syntaxes -- indented and sassy CSS(SCSS). As the name suggests, the indented syntax, or simply Sass, uses indentation and .sass file extension. Conversely, SCSS is similar to standard CSS since it uses brackets and semicolons to denote code blocks. Here is an example of the two syntaxes:Indented syntax //.sass//nav     display: flex    align-items: center    justify-content: space-between    SC﻿SS syntax//.SCSS file// nav {    display: flex;    align-items: center;    justify-content: space-between;    }From the examples above, SCSS is stricter due to the use of brackets and semicolons. However, it boasts more readability and better code organization than indented syntax.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitSass featuresSass applies features of conventional programming languages to stylesheets. These features include:VariablesSass variables, similar to traditional variables, allow you to store properties/values that can be reused. These variables are declared using a dollar symbol ($), for example:$color-primary: #ffff00; // Yellow body {  background-color: $color-primary;}$color-primary is our variable. Once the code is compiled, the output CSS will be as follows:body {  color: #ffff00;}Arithmetic operationsSass supports standard mathematical operators, including subtraction, addition, equals, and Boolean. This allows you to customize variables easily.$size: 25px; h2{   font-size: $size + 5;} h3{FunctionsSass functions are defined using @function . They can accept arguments and return a value just like typical functions, thus allowing you to perform dynamic and complex styling, such as calculating dimensions and defining colour schemes. You can also use flow-control at-rules such as @if, @else, @each, and @for and encapsulate iterations and loops. Consider the following example:@function lightness-shift($colour){    @if ( lightness($colour) < 25% ) {        @return lighten($colour, 10%);    }@else{        @return darken($colour, 10%);    }}  p {      color: lightness-shift(#ffd956);  } Our function name is lightness-shift with variable $color as our argument. If the colour lightness is less than 25%, the colour displayed/returned will be 10% lighter and 10% darker if the colour lightness is greater than 25%.Mixins@Mixins directive lets you create multiple CSS declarations that can be reused throughout the project. This helps eliminate repetition, so you end up with a cleaner coder that's easy to read and debug. See the following example:  @mixin border-radius($radius) {    -WebKit-border-radius: $radius;       -Moz-border-radius: $radius;        -ms-border-radius: $radius;            border-radius: $radius;  }    .box {     @include border-radius(10px); }All the code will now be applied to the class box after being compiled:.box {    -WebKit-border-radius: 10px;    -Moz-border-radius: 10px;    -ms-border-radius: 10px;    border-radius: 10px;  }InheritanceAs the name suggests, inheritance allows multiple classes to share a common set of properties. Sass inheritance is implemented using the @extend directive.div {    background-color: #0000FF; // Blue    border: none;    color: white;    padding: 15px 32px;} .container {    @extend div;}InterpolationInterpolation isn't unique to SASS; it's common in other languages such as PHP, Perl, and Ruby. It allows for the insertion of SASS script into a stylesheet using #{$variable_name} syntax.@mixin interpolation($changeable, $val, $prop){    background-#{$changeable}: $val;    position: $val2;    #{$prop1}: 0px;     #{$prop2}: 0px;} .blockarea{    @include interpolation(\"image\", URL(\"img.png\"), absolute, top, right);}Compiled CSS will be:.blockarea {    background-image: URL(\"img.png\");    position: absolute;    top: 0px;    right: 0px;}Benefits of using SASSHere are the compelling benefits of using Sass when building your site:1. Improves code readability and organizationWhen styling a container element with pure CSS, you must select it repeatedly whenever you want to style its children and descendants. This results in repetitive coding, which is prone to errors and difficult to read.For example, let's say you want to style your navigation bar. Your CSS code will look like this:nav ul {  margin: 0;  padding: 0;  list-style: none;} nav li {  margin-top: 1rem;} nav a {  display: block;  padding: 6px 12px;  text-decoration: none;}Sass eliminates repetition thanks to its nesting capabilities. This feature allows you to write DRY CSS code, which is easy to read and maintain. As such, you can style the children and descendants inside the main container for better code organization and improved visual hierarchy. So, the above code will look like this when styled with the SASS preprocessor:nav {  ul {    margin: 0;    padding: 0;    list-style: none;  }   li { margin-top: 1rem; }   a {    display: block;    padding: 6px 12px;    text-decoration: none;  }}That said, you should avoid complex nesting as it creates large CSS files after compiling, making it hard to maintain your stylesheet.2. Improves productivitySass allows you to create partials, which are uncompiled sass files containing styling properties for specific elements. These files are then imported or forwarded into the main SASS file, which is compiled into a single CSS file.As such, you can store global styling properties in partials and reuse them to build/style your multiple-page web app. Think of it as creating a library that can be invoked elsewhere in the app to serve the same logic and functionality. This way, anytime you need to style the same element on a different page, you don't have to rewrite the CSS code.Your partial name should have an underscore prefix, for example, _mypartial. This ensures that the file isn't compiled.That said, partials save on time and effort that goes into building a large web application. They allow developers to reuse core styling properties, thus improving productivity and speed of development. Also, the re-usability of partials allows you to achieve a consistent feel and look across your applications. Here is an example of a partial://_mypartial. Sass Sass * {    box-sizing: border-box;    margin: 0;    padding: 0;}We can import it into our main sass file as illustrated below://Main. Sass Sass @forward ‘mypartial’ body {    font-family:’Helvetica’, sans-serif;    background-color: #efefef;The transpiler will convert the above into CSS as shown below:* {    box-sizing: border-box;    margin: 0;    padding: 0;} body {    font-family:’Helvetica’, sans-serif;    background-color: #efefef;}Sass mixins also help to avoid repetitive coding, thus saving you time and increasing productivity. Similar to partials, mixins allow developers to store pieces of CSS code that can be reused throughout the website. Consider the following example:@mixin set-font {    font-family: ‘Helvetica’, sans-serif;    font-weight: 400;    color: blue;    font-size: 25px;} body {   @include circle;}3. Easier to maintainPure CSS is hard to maintain and update properties. If you need to make any changes, you'll be forced to tweak each property and value individually. For instance, let's say you used pure CSS to style your web page. If you want to change the colour of the buttons throughout your site, you'll have to go through the entire stylesheet to change the button properties and their values. This process is time-consuming, especially for businesses working with a small team.SASS, however, allows you to create variables that store styling properties. This way, you can easily change the properties of certain elements from one place. Look at the following variables, for example;$navbar_color : #a2b9bc; $body_color : #878f99; $button_color: #b2ad7f; $primary_font: Poppins’, ‘Sans Serif’; $secondary_font: ‘Roboto,' 'Helvetica';   .navbar   {    background-color: $navbar_color;          font-family: $secondary_font;           } body  {       background-color: $body_color;       font-family: $primary_font;          } button {       background-color: $button_color;       font-family: $secondary_font;          }  If there's any design update for your buttons, you can conveniently modify the associated variable without modifying each button style property.4. Improves site performanceAs your web app grows in complexity, so does your stylesheet. Typically, when dealing with a large stylesheet, you may split it into smaller CSS files and import them into one main CSS file. But CSS is a render-blocking resource, and as such, a browser will trigger several HTTP requests to retrieve each CSS file before rendering the website to users.Similarly, with SASS, you can break down and import smaller SASS files into a single file. The difference with the CSS import rule is that all imported SASS files are merged/compiled into a single CSS file, meaning the browser will trigger only one HTTP request. As a result, your site is rendered faster, improving the user experience.5. Large community supportSass was launched in 2006. It has been growing in usage thanks to the continuous development by its core team and independent developers. In addition to its robust community of users, there are numerous free resources online to help you learn and get started with SASS. The preprocessor's official documentation is a good place to start -- it's well-detailed and full of examples to help you make the most out of SASS.6. You can customize Boostrap 4Sass preprocessor is used in popular frameworks such as Bootstrap and Foundation. As such, if you're already familiar with these frameworks, you can easily customize them by changing the Sass variables in the code.For example, if you want to increase the default container width offered by Bootstrap, all you have to do is update the $container-max-width values within the _variable.scss partial. After compiling, the new values, your Bootstrap source files will include the new values. You can also customize other Bootstrap aspects, such as colours, fonts, and margins.Is Sass still relevant?With the continuous improvements of standard CSS, one can't help but wonder if SCSS is still useful in modern web application development. But despite the CSS upgrades, SASS/SCSS still offers essential features that make it a better choice.That said, SASS helps you build for scalability. It modularizes your stylesheets making them more manageable and easier to update as your app grows in usage. Also, due to ease of editing, SASS allows you to scale and add more functionality to your web app.Frequently asked questionsWhat's the difference between Sass and CSS?Sass is considered a scripting language that extends CSS capabilities. It has all programming language features, including variables, functions, and conditional statements. In that regard, Sass tends to be less repetitive than CSS, which is why the former is used for building complex apps.Is Sass the same SCSS?Yes. Sass and SCSS refer to the same thing. However, the two denote different syntaxes used in the SASS preprocessor. The former uses indentation syntax, while the latter uses the regular CSS syntax, which includes brackets and semicolons for separating code blocks.Key TakeawayDespite being an old technology, Sass has managed to maintain its relevance in web app development. Even though it is more suited for large projects thanks to its nesting capabilities and the use of variables, small projects also benefit from its modular code organization and enhanced productivity."
  },
  {
    "title": "Who Decides Sprint Length in Scrum?",
    "plaintext": "Scrum teams are self-organising, so picking the length of the scrum should be a collaborative choice. If your team can't agree on a length, then the decision falls to the Scrum Master, since they're ultimately the facilitator.There's no wrong answer to how long a sprint should be, but there needs to be enough time to; * Plan the sprint * Execute the work * Test the changes * Conduct a retrospectiveDepending on how closely your team is working with the product owner (or external stakeholders), you may also need to account for the sprint to be reviewed and approved from people who aren't on your team. In our experience, this adds a significant amount of time and favours a longer sprint cadence, so the product owner has more time to get through the testing.The most popular lengths of a sprint are one or two weeks. However, the guys over at Basecamp proposed a new scrum-style methodology they call Shape Up (go check it out!) that preaches six-week cycles since this allows more time to get stuck into the deep work required to build complex features.There are a few variables to think through when picking the sprint length: * Are there lots of unknowns that require the product owner's opinion? * Is there value in meeting frequently, or is the same result achievable with a longer sprint length, less frequent retrospectives and planning sessions? * How experienced are your scrum team, and how long have they been working together? * How long will the product take to build? * How available is the product owner or client?The theory behind the sprint cycle is to create a feedback loop, so everyone working on the project is informed. If your product owner is figuring things out as they go, short sprints are usually a good idea. Having the opportunity to see the product come to life will provide them the opportunity to think through requirements they might have otherwise missed.If your team have been working together for a while and have struck a good balance of daily communication, then going with a two-week sprint or even a four-week sprint can be a good approach. However, you need to consider how many sprints the product will take to build. If it's going to take 18 months, then four-week sprints will be fine. It's a different story if the product will only take three months to build.What length do we recommend?Most of our projects run on two week sprints, but we prefer one-week sprints. The availability of our clients is usually the biggest sticking point for running a tighter sprint length.There are lots of implementation questions that come up while building complex applications. It's part of the game. The quicker these questions can be answered, the more productive and focused our team are. It sucks having an unanswered question that blocks a task from being finished.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFAQThis is a pretty short article, so we wanted to throw in a few additional questions and answers that aren't worth dedicating an entire piece to but you might find helpful:Q: Is the sprint length determined during sprint planning?A: The sprint length should be agreed upon as the project is being planned and the initial backlog groomed. There's no problem determining the sprint length during the first sprint planning session as long as it's a collaborative decision that makes sense for the project's context.Q: What does Scrum stand for?A: Scrum doesn't stand for anything. Rather, it's a term borrowed from rugby where the players come together to restart play after a stoppage. The term was applied because a scrum requires a lot of coordinated teamwork to achieve a goal.Q: Is scrum software?A: No, scrum is a management methodology based on agile. The approach preaches cyclical phases of assessing a project's requirements, building, testing and reviewing. There are plenty of management software that support scrum, with Jira being the most well-known.Q: Who creates tasks in scrumA: Tasks should be discussed by everyone on the project team during the sprint planning session. Typically, the project manager will have written the user stories by this point to facilitate the discussion, and the people responsible for building the feature will suggest specific tasks.Q: What is scrum vs sprintA: Scrum is a management framework that helps teams work together. It describes the way a team should work together and the activities involved to keep a project managed. Sprints are the main tool of scrum. They're a cyclical process of planning, building, testing and reviewing small chunks of a product's backlog.Wrapping upMost decisions in Scrum come down to collaboration between the project team. This includes determining the sprint length. However, if consensus can't be reached for some reason, then the decision falls to the Scrum Master.If we haven't answered your question about sprints or scrum, please leave them below, and someone from our team will get back to you in a few business days!"
  },
  {
    "title": "Website vs. Web Application: Understanding the Differences",
    "plaintext": "There have been a few times when clients have approached our team asking to build a website that would allow payments, let members log in, create tasks, set reminders, and some other interesting features. We don't usually correct them by saying \"oh, you mean a web app, not a website\"... but we're thinking it!The fact that software operates on the web doesn't automatically make it a website, but it's a bit of an academic argument because websites and web apps are developed using pretty much the same techniques, the same languages, and a lot of the same architecture. So what makes a web application different from a website?Before we clarify the differences, if you are doing some research for a project and don't feel confident explaining what you need, please reach out to our team. We'll guide you through a judgement-free process to understand what you need so you can get a detailed, transparent and obligation-free quote! The worse that can happen is you get some free experience-backed advice.Web development - the umbrella termLet's start at the top; web development. This is the umbrella term that describes any kind of software development involving web technologies. This includes: * Frontend development (usually involved with web apps) * Backend development * Building services * Creating utilitiesUtilities and services can almost be identified as web applications, but they lack a few of the main traits of web apps. An example of a service may be a backend worker that executes a pre-written script every hour to perform a maintenance job on the server. The service could be completely separate from the application it's working on, it might not have a graphical UI, and users may never see it, so it falls into its own category.However, this raises the question of how to define a web application.What is a web application?This is no Oxford dictionary definition, but we would classify a web application as:A digital product built using web technology, accessible by HTTP, that provides interactive functionality that manipulates a user's data in some way.Let's break this down.A digital product built using web technology.Not every coding language was created to build web products. Certain languages and frameworks are specifically created for making web products. The resulting technology is designed to operate on the internet, following particular protocols.accessible by HTTPGone are the days of saying a web application has to live on a server. It's possible to create a static application that is hosted on a content distribution network rather than a server, and which operates entirely in the user's browser. The main point is to access the web application, you need to the hypertext transfer protocol through a browser.that provides interactive functionality that manipulates a user's data in some way.This point is really what separates websites from web applications. Most websites have interactive functionality like filters, internal search engines and contact forms. However, they don't manipulate a user's data. A web app, on the other hand, will often accept data from a user, perform some kind of calculation or mutation on the data and return it in a different form.There's a big grey area here with edge cases like membership sites and plugins that offer functionality usually associated with web applications.What is a website?A website is a collection of interlinked pages and posts, accessible by HTTP.This definition is pretty close to how we would define a web application, and that's because there's not really a clear line between the two. It's easy to argue that an eCommerce website is actually a web application because it provides user accounts, manipulates users' data, and often has a range of complicated functionality.Websites are defined by their intention. They're a set of pages used to inform a visitor. Sometimes the information is of commercial intent and provides mechanisms for purchasing.Website and web application - the major differencesHere are a few examples of websites that could be considered web applications: * eCommerce sites * Headless websites * Membership sitesThese sites don't follow the typical pattern of a website, but their intention is aimed at informing users and convincing them to take particular actions.Web applications don't follow this pattern, which is a big part of what defines them. Web applications like Google's search engine appear like a website, but help users to find other websites. Something like Facebook is a social media platform, and even though it's accessible through HTTP, there's a ton of other complicated functionality that make it clear it's in a league of its own. Even a more subtle example like realestate.com.au isn't a website, despite having a series of interconnected pages. It has a whole suite of functionality that helps people buy and sell property, which defines it as a web application.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhen does website development become web application development?When a website starts to demonstrate functionality that isn't typically associated with normal websites or isn't easily possible to achieve with a website, it starts to venture into the classification of being a web app.A good example of this is a headless eCommerce store. Technically it follows a website pattern, but the implementation of cutting-edge technology, rendering techniques and ability to extend the functionality places it in the web application category.TechnologyYou could argue that anything built with WordPress is a website, but some pretty complex WordPress implementations do things it was never intended to do. They no longer serve the purpose of a typical website.TechCrunch is a great example of this principle in action. Even though it's built with WordPress, it serves as a hub for user-generated news stories and the latest news affecting the tech community.On the other hand, if any web product is built with a framework like Ruby on Rails, Laravel, Express, Vue.js or Angular, it's likely to be a web application because these technologies are excessive for building a typical website.Wrapping upDrawing a clear line in the sand between what a website and a web application are is surprisingly difficult. The line blurs as websites get more complicated. Hopefully, we've given you some perspective on figuring out if you're dealing with a website or web application.If you've got questions, please leave them below, and someone on our team will get back to you in a day or two!"
  },
  {
    "title": "SEO Considerations When Redesigning Your Website",
    "plaintext": "Online shopping increased significantly as a result of COVID-19 and the accompanying lockdowns. And this is not a passing occurrence.The effect has been profound. According to Adobe, B2C commercial online sales increased by an additional $183 billion. And according to McKinsey & Company, 80% of B2B decision-makers favour omnichannel shopping.Companies are modifying their business strategies to include internet services like BOPIS (buy online and pick up in-store). To make up for a drop in tradeshows and in-person meetings, they are also updating their websites with videos, photos, and new information.The result of all this is an increase in requests to redesign websites. A website redesign is an opportunity to enhance digital marketing, conversion rates, and SEO. Unfortunately, it can also be a tragedy waiting to happen. Several elements, including the code and pages, are changed during the redesign. If they are not handled correctly, it may harm the website's SEO and its long-term growth. However, redesigning a website can also strengthen your SEO if done correctly.Before we unpack the rest of article, here's a quick pitch. If your website is struggling to perform and you're considering redesigning, reach out to our team. We'll help you get set up with the latest technology and give Google every reason to send traffic your way!If one of your goals in redesigning your website is to increase traffic and conversions, then you'll need to consider SEO as going through the process. However, the SEO team usually joins the project too late or not at all. Rankings, organic traffic, and organic conversions go into the gutter in such situations. Therefore, you could end up needing a decent investment to restore the SEO harm.Let's look at everything you need to consider when redesigning a website without harming SEO to ensure you keep and boost your current traffic and search engine rankings.The connection between SEO and website redesignEven if you create a website with one of the best designs in the world, no one will visit it if the site is poorly optimized. For this reason, SEO is crucial for website redesigns.Making a website's strategic pages rank highly on Google for meaningful searches is the goal of an SEO campaign. When determining a webpage's ranking, Google's algorithm takes a wide range of variables into account, including the quality of content, relevance and quality of the images, inbound links, user-friendliness, and metadata, to mention a few.Suppose your website's redesign doesn't pay attention to SEO and modifies or removes a URL performing and bringing in organic traffic. In that case, your results for that page may disappear from Google.You don't want to spend months recovering or rebuilding if you lose your existing ranks, link value, or traffic.Improving SEO while redesigning a websiteThere are three essential elements to maintaining (and, ideally, enhancing) your rankings and organic traffic throughout a redesign:Understand what is currently performing.If you are managing SEO strategies, you would ideally have a clear understanding of what is currently performing, including pages that generate organic traffic, keywords and themes that rank, etc. By conducting this analysis, you may learn what strategies work and incorporate that knowledge into redesigning the website.Know the common pitfallsRedesigning a website can be done for a variety of reasons, including traffic and lead generation, as well as branding and technology. During a redesign, the following things can frequently be altered or pose difficulties: * You can remove the content. (If it is missing, it won't rank!) * The content can be modified and become less relevant * Content may be moved within the hierarchy of the website * URLs could change * New content can be added * Technical problems can emerge * The internal link architecture might change * Domain names could changeAny of these factors could harm your organic traffic and rankings.Identifying the underlying cause of problems becomes more challenging when multiple variables have been changed, such as when content changes and is relocated to a different URL.What will be different after the redesign?Knowing what works well and what can go wrong will enable you to review the objectives for the new site. Two primary goals should be: * To protect the existing search engine rankings and traffic. * To increase traffic and rankings.In a perfect scenario, you would have a complete sitemap for the new website that you could compare to the current one and use to make mappings for URL movements.How to Redesign a Website Without Losing SEOAudit your old siteThe first thing you should do is conduct a comprehensive website audit of your old website. The goal is to identify any crucial website components that have been generating leads, traffic, and profits for your company.It will make it more likely that these important pages won't be misplaced during the redesign or, even worse, damaged.An audit might also reveal aspects of your website that are broken or could be harming users' experiences. Ensure the elements that are found in your audit are dealt with during the redesign process and not passed over to the new site.Your current website may have a number of common SEO problems, including: * redundant or missing page titles, * more than 512-pixel page titles, * less than 200-pixel page titles * absence of H1 tags * redundant H1 tags * several H1 tags * inadequate meta descriptions * overlapping meta descriptions * Metadata spanning 923 pixels * canonicalization * faulty internal and external linksSet up 301 redirectsEstablishing 301 redirects between the old and new URLs is the next step.As an illustration, suppose your former website had an \"About Us\" page with the URL \"www.xyzwebsite.com/about-us.html.\" If, during the redesigning, your developer altered the URL to \"www.xyzwebsite.com/aboutus.html\", then it is preferable to set proper 301 redirects to guarantee that both URLs function and that you don't lose the SEO advantages of your prior URL.Incorrect execution will result in 404 web pages not being found by the search engine. You would redirect the previous URL to the updated one using 301 redirects. It is how you inform the search engine that the URL has been changed. Google won't devalue your prior SEO work.Suppose you need clarification and need to know how to add 301 redirects manually on WordPress. In that case, you can also explore redirect plugins that allow you to accomplish it by filling out a form.This action is vital and should be taken without fail.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitUpdate the backlinksAnalyze your best backlinks and traffic-generating websites using the standard link index tools. You may also utilize a free backlink checker to examine all the backlinks. When you have a list, contact the webmasters to update them wherever possible. Don't stress about this because you should already have a 301 in place, but fresh backlinks can help the new site rank and get indexed more rapidly.Be sure to optimize your live URLs as well.Making sure that the recently added live URLs, which aren't yet on your present website, are correctly optimized is a proven way to maintain your SEO when revamping a website.Utilise the on-page SEO checklist below, which covers all the crucial places where you should incorporate your target keywords. * web page title tag * H1 tag * page URL * Tags: H2, H3, H4 * meta descriptions * broken links * redirects * internal linking * image alt tagsBecause mobile devices account for 54% of all internet traffic, you should also ensure that your site is mobile-friendly.An overall better user experience will result from all of these elements, which can increase your website traffic and lead conversion.Create 404 pagesAccidentally losing pages while redesigning a website is common. Have a 404 page set up so visitors and search engines can still browse the rest of the website, even if a page is missing.Although dealing with 404 errors can be aggravating, you can lessen the problem by offering a search field and menu bar to a visitor who encounters one. Additionally, some websites may use a lighthearted or straightforward approach to a 404 to reduce the potential annoyance.Test Out The New WebsiteIt's time to give your new site a test run if you're satisfied with it, following all the redesigns, tweaks, and alterations.Use Screaming Frog SEO Spider to crawl your test website and look for any mistakes that might have crept in during the redesign process.Testing can take a few days to a few weeks, depending on how effective your SEO approach was from the beginning. But always remember to conduct testing before launching the redesigned website! You risk receiving SERP penalties and losing a lot of organic traffic by launching the website too soon and without thoroughly testing it for bugs.Remember to update the sitemapA website makeover must include updating your sitemaps because this will let search engines know which pages have been added, deleted, or updated. Simply install and configure the Yoast SEO plugin to update your sitemap if you're using a content management platform like WordPress.Your website's sitemap will be automatically generated by Yoast SEO and updated each time you make changes.If you aren't using WordPress, take the following actions to update your sitemap for search engine bots: * Use a website map creator like Screaming Frog to create your XML sitemap file. * Submit the sitemap.xml file to the server hosting your website. * Verify that your server's root folder has the sitemap.xml file. The \"index.php\" and \".htaccess\" files are typically found in the same folder. * Make sure the sitemap.xml file is active. You can accomplish this by prefixing the domain name of your website with \"/sitemap.xml\" * Send Google your new sitemap using the Google Search Console.Track the changes.Finally, it's critical to keep an eye on the changes and search for any possible expansion. The task is finished at this point, and you are prepared to continuously keep an eye on new data regarding rankings, conversions, and general performance. Remember that your SEO results may only improve after a period of time, even if your website redesign SEO strategy is well carried out. That's okay. Maintaining the SEO benefits that your website had built up was the objective.But if your developers and user experience (UX) team are successful, your revamped website will engage users more and generate more business conversions. Be patient as elements that gradually positively influence your search engine rankings- longer engagement times and happy website visitors- improve.ConclusionRedesigning a website involves many steps. The very last thing you want to do is start again with your SEO once that website is finally up. By taking these actions, you can lessen the agony of future SEO loss and even completely avoid it."
  },
  {
    "title": "Next.js vs Nuxt.js - Is There A Clear Winner?",
    "plaintext": "Nuxt vs. Next: Which One Should You Use?When it comes to building scalable, interactive web applications, Nuxt and Next.js are two of the most popular choices. Nuxt.js is a frontend framework built on top of Vue.js. It provides built-in features and tools, making it easier to create complex applications. Next is built on top of React and more bare-bones, providing only the essentials and leaving more room for customization.Simply put, Nuxt is more opinionated than Next. This means that it has more defined conventions and standards, which can make development faster and simpler. However, it can also be more restrictive. Next is less opinionated and thus, provides more flexibility, but this can also make development more of a challenge.Part of the comparison between Nuxt and Next needs to take into consideration the fact that React is arguably more mature and further in its evolution than Vue. The maturity of both frameworks is inherited by all the tools and abstracted frameworks such as Next and Nuxt.Here's a super quick pitch. If you're researching the best technology for your upcoming project but don't have the time or expertise to build the product yourself, please reach out! We'll help you understand all your options and help bring your vision to life. The worst that can happen if you get some free, experience-backed advice.This article will compare the two frameworks to help you decide which one suits your next project.What is Nuxt.js?Nuxt.js is a framework created to make it easier for developers to create universal Vue.js applications. With Nuxt.js, developers can bundle JavaScript, HTML, and CSS together on the client side, which saves time and avoids the need for multiple files. Additionally, Nuxt.js uses Vuex to manage application state and custom SSR hooks for prerendering pages on the server. This makes it easier for developers to create high-quality, interactive applications without worrying about complex codebase management.Features of Nuxt.jsNuxt has a number of great features that extend Vue.js in ways that make it useful for building highly performant applications and websites:Server-Side RenderingNuxt.js makes it easy to get started with server-side rendering (SSR). Vue.js is a fantastic framework where this is possible, but it requires a lot of boilerplate code to set this up. Nuxt.js eliminates this boilerplate code by making it easier to create Universal applications. Nuxt.js also provides a great example of how to start an application without any configuration.Static Site GenerationYou can use Nuxt.js to build static sites as well. This means you can get all the benefits of server-side rendering (SSR) without worrying about the server-side rendering part.Code SplittingAs the name suggests, code splitting allows you to split your code into different bundles. This way, you can load only the necessary code on the client side, which can help improve your app's performance and reduce its size.Modular CodebaseNuxt.js has a modular codebase, allowing you to reuse code across different projects easily.SEO optimizationSEO is the practice of improving the visibility of a website or web page so that it may rank higher in search engine results pages (SERP). Nuxtjs gives you meta tag management capabilities for search engines to index your content easily and increase brand visibility.Auto-importingOne of the great features of Nuxt 3 is that it automates the process of importing components. This means that you can focus on writing your content, and the Nuxt 3 platform will take care of everything else. In addition, Nuxt 3 provides a new folder - composable - which will automatically import the Composition API function you define. And lastly, Nuxt 3 offers a great experience for TypeScript developers by automatically generating type definitions for you.Hot reloadingHot reloading is a powerful feature that allows you to preview changes to your page without reloading the entire page. This means you can test changes quickly and see the results right away. With Nuxt.js, you can reload individual parts of your page without affecting the rest of the page. This is a huge time saver and can be a crucial tool for debugging and testing.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPros and cons of using Nuxt.jsLet's look at the advantages of Nuxt.js: * Easy to learn- Nuxt.js is (relatively) easy to learn. Vue, and by extension, Nuxt are well known amongst the development community as the \"easiest\" JavaScript framework to learn - especially when compared with React or Angular. * Scalable - Nuxt.js is highly scalable. It can be used to create a large-scale web application, largely thanks to the rendering options it provides. * Async data - Nuxt.js automatically loads async data on the server-side before rendering the page. * Improves SEO for SPAs * Automatic code splitting * Improves app performance thanks to server-side rendering capabilities * Nuxt.js enables developers to build fast, making it an ideal framework for building MVPDisadvantages of Nuxtjs * Lacks some useful plug-ins such as Google Maps, calendar, etc. * High app traffic can strain the server * Insufficient documentation * Nuxt authentication is a nightmare to work with * The Vue community is significantly smaller than React and Next, so issues and bugs with the framework are slower to be resolvedWhat is Next.js?Next.js is a minimalistic framework for server-rendered React applications created by Vercel (formerly Zeit). Next.js comes packaged with Node.js and takes care of the server-side rendering for your React applications, making it easy to add a custom look and feel to your applications. It also has a highly modular architecture that makes it easy to extend and customize.This makes Next.js perfect for creating custom components or modules that can be used in your applications. Additionally, it enables your application to load faster by storing prerendered HTML files on the server. In turn, this improves your website's ranking on search engines in addition to improving user experience.Features of Next.jsNext.js is packed with features that effectively make it a full-stack development framework. These features include:Static generationStatic generation refers to the ability of Next.js to prerender pages at build time rather than runtime. This results in a significantly faster and more responsive user experience, as well as improved SEO for search engines.When a Next.js application is deployed, the build process will generate HTML files for each page. These static HTML files are then served by a web server, such as Nginx or Apache, without the need for Node.js. This offers several benefits over traditional server-side rendering, including reduced server load, lower latency, and increased security.Environment variablesEnvironment variables are global variables that can be used to configure the behaviour of Next.js applications, including the database connection string, the base URL, and the location of static assets.Next.js makes it easy to manage environment variables with the help of a .env file. The .env file is a text file that contains a list of key-value pairs, one per line. Keys are case-sensitive and must be unique. Values can be any string, including blank strings.Next.js will automatically load environment variables from the .env file when the application is started. This makes it easy to manage configuration settings for different environments (development, staging, production, etc.).Lazy loadingLazy loading is a technique for loading resources on demand. This can be used to improve the performance of an application by only loading resources that are required at a given time instead of loading all resources upfront. With lazy loading, an application can start up faster and use less memory, making it possible to load additional resources on demand as needed.Automatic code splittingNext.js automatically splits your code into separate files that can be loaded on demand, which reduces the amount of JavaScript that needs to be downloaded by the client. This results in a faster loading time for your web applications.Server-side renderingNext.js supports server-side rendering out of the box, which means that your web application will be rendered on the server before it is sent to the client. This makes your web applications more SEO friendly and can improve the user experience.Pre-rendered ReactNext.js is a tool that is used to build React applications. It provides React developers with the necessary tooling for developing React component libraries applications.PrefetchingPrefetching is a technique that allows Next.js to load data from external sources before the application actually needs it. This means that the data is available immediately when needed, without waiting for a network request to complete. This can be a huge performance boost for applications using external data sources, such as APIs.The framework provides a built-in way to prefetch data from external sources, which makes it easy to add this functionality to your application with just a few lines of code. In addition, Next.js will automatically prefetch data for any linked resources visible in the viewport, further enhancing your application's performance.CSS and Sass supportNext.js has built-in support for CSS and Sass so that you can write your stylesheets directly in your component files. This makes it easy to keep your styles consistent across your project and helps to avoid duplication. You can write your stylesheets in a variety of ways. You can use traditional CSS, or you can use Sass to write your stylesheets. Sass is a preprocessor that adds several features to CSS, including variables, mixins, and nesting.import styles from './Button.module.css'export function Button() {  return (    <button      type=\"button\"      // Note how the \"error\" class is accessed as a property on the imported      // `styles` object.      className={styles.error}    >      Destroy    </button>  )}ESLint SupportESLint is a popular JavaScript linting tool that helps developers identify and fix errors in their code. Next.js has built-in support for ESLint. This means that developers can use ESLint right out of the box to easily find and fix errors in their Next.js applications, making them more reliable and easier to maintain.Pros and cons of Next.jsAdvantages of Next.js for businesses: * Offers fast performance thanks to code splitting and lazy loading * Improves an app's SEO and user experience, which results in more traffic and a better conversion rate * The static sites generated by Next.js have no direct connection to the database, user data, or any other sensitive information. This guarantees data security. * Next.js web applications are accessible on any platform * Has a robust community of users who can help in troubleshooting * Supported by Vercel with an environment that can do some awesome stuff like edge rendering, A/B testing and native exposure to backend functions.Disadvantages of Next.js * Routing issues -- Next.js is limited to using a file-system-based router. This cannot be changed, and as such, you'll be forced to use Node.js for dynamic routing. * Next.js doesn't have an internal state manager. You must include state managers such as redux and Mobx in your app. * The versatility offered by Next.js means that you'll need continued maintenance. As such, you must have an in-house or a dedicated developer to handle any adjustments. * Has few plug-insSimilarities between Nuxt and Next.jsHere are the similarities between the two frameworks: * Nuxt and Next.js are JavaScript frameworks allowing developers to easily create modular, scalable web applications. * Both frameworks have in-built Typescript support. * Both frameworks are open source and have a large community of contributors * They both allow you to create reusable components. * They are both used in building server-side rendered and static web applications. * They both help in building SEO-friendly applications * Both support dynamic routingDifferences between Nuxt and Next.jsState managementThe biggest difference between the two frameworks is how the state is managed. Nuxt.js uses a centralized state management pattern called Vuex. This means you can access data from multiple components and add actions and mutations for accessing and manipulating this data. This makes it easy to keep track of the application's state and update all components that need to be updated when the state changes.Next.js uses a component-based state management pattern called Redux. This means that each component has its own state, and you have to use actions and reducers to access and manipulate data from other components.Both of these state management patterns have their own pros and cons. Vuex is easier to learn and use, but it can lead to problems with code duplication and tight coupling. Redux is more difficult to learn and use, but it can help prevent problems with code duplication and tight coupling.Developer experienceNuxt provides developers with modules for integrating new technologies into their websites seamlessly. This ecosystem of modules makes it easy to build fast, which translates to a short time to market for enterprises. Next.js, on the other hand, doesn't have these modules to support development. Instead, it relies on the extensive libraries built on top of React. The big difference here is that these libraries aren't out-of-the-box or tightly integrated into the framework as Nuxt's modules. As a developer, you might have to use boilerplate code to get them running.Automatic code splittingNext.js has built-in code splitting that automatically splits the JavaScript bundle into multiple files that are loaded on demand. Nuxt.js, on the other hand, has to be configured to use Webpack code splitting.Frequently asked questionsH﻿ere's a few questions that you might still be wondering about the comparison between Next.js and Nuxt.js.Is Nuxt better than Next.js?No. It all depends on your use case and preference. Nuxt is ideal for building a universal app - an app that's executed on the client and server-side - while Next is ideal for building websites, web applications or headless eCommerce sites that require real-time or frequent updating of content.Are you interested in headless eCommerce topic? Take a look at our article about headless eCommerce frontend frameworks, headless eCommerce examples.What's the difference between Nuxt and Next.js?The main difference between Nuxt and Next.js is that the former is built on top of Vue.js, while the latter is built upon React.js. Beyond this, the frameworks share a lot of similarities.SummaryNuxt and Next.js are powerful frameworks for building user interfaces and web applications. However, each framework has unique strengths and weaknesses, which you should consider before choosing either. If you liked this article, check out our blog for more!"
  },
  {
    "title": "The Pros and Cons of Headless Commerce - The Double Edged Sword",
    "plaintext": "Our team recently jumped in to help a headless eCommerce project that was heading in the wrong direction. The team had invested heavily in rebuilding their website with Next.js. By the time they contacted our team for help, they were considering jumping ship and going back to a regular Shopify build.When we took a look at how things were working in their setup, we noticed some problems that were causing them headaches: * Changes in Shopify weren't automatically published on the website * Any content changes in Contentful had to be manually deployed * There was no preview option in Contentful * When new changes did publish, the build times were crazy high * There were a ton of weird redirects for Shopify's default routes that hadn't been accounted for in the moveWhen we brought these issues up, their team didn't know that half of them shouldn't be happening. They just assumed that they would have to deal with clunky workarounds to do things that were easy in the past.This led me to question if online retailers have enough information to understand the pros and cons of headless eCommerce.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitMost of the case studies you can find across the web are from massive companies with their own in-house development teams that talk about how they wanted to \"achieve an API-driven microservice architecture (MACH) that would let them increase their team's velocity\".What they don't highlight is how the transition impacts the users that handle the day-to-day content management. The folks down in marketing who were used to uploading a new Shopify product and seeing it automatically appear everywhere they want now have extra steps.Our goal for this article is to give you some insights into the pros and cons of headless eCommerce from a business owner's perspective who will actively be using the site.An Introduction to Headless eCommerceHeadless eCommerce is all the rage right now. Companies like Vercel, Gatsby, Netlify, and even Shopify have created hosting environments and development products to help eCommerce companies modify their traditional shops.The idea behind headless eCommerce is moving away from a system that is tightly coupled together. What we mean by this is that if your store is running on Shopify, you're committed to Shopify entirely. If Shopify doesn't provide the tools or flexibility to achieve your goal, then it can't be done.In a technical sense, \"headless\" means the brains or head of the website are disconnected from the body. The \"head\" is the eCommerce backend (Shopify, BigCommerce, Commerce Tools, etc) and the \"body\" is the frontend, or the part that is interpreted by the browser.A normal eCommerce store will host all the code for these two parts in the same repository. Changing code on the backend might have an impact on the frontend, because all the code is managed in the same spot and tightly interwoven. This isn't a good or bad thing, by the way. It's an architecture that makes sense for 95% of small stores.In a headless eCommerce architecture, the backend and frontend code are hosted separately and communicate via API. The frontend can call in data from various sources, not simply from the backend. This concept is a little tricky to understand, but the general idea is that \"microservices\" can be combined to create a single powerful solution.When it's explained like this, the idea of breaking apart a standard store sounds like introducing complexity. Why would any business want to do this? Well, there are things that simply can't be achieved with a regular Shopify store.Here's a quick rundown of the benefits that draw businesses towards the idea of going headless.Pros of going headlessRebuilding a regular store to work as a headless implementation is essentially upgrading it from a website to a web application. This unlocks a world of customisation, extensibility and performance.Page load timesArguably the most important reason for upgrading to a headless implementation is improving your site's page load speeds. Faster page load times mean less waiting around for your users. This means less distraction and more purchasing.Small sites with little traffic won't feel this benefit. It's one of those things that accumulate at scale. Large stores with tens of thousands of products and hundreds of thousands of visitors can start to feel sluggish. Bottlenecks across the architecture are amplified by volume.Stores that reach these heights are often looking for little wins. They've already optimised the obvious things are have plateaued. Since Shopify and BigCommerce don't allow users to manage infrastructure, going headless is really the best option for making the next jump in performance.Customisability & experimentationImagine being a customer and arriving at a site where you can go through a lovely step-by-step wizard that gathers your preferences and then delivers hand-picked purchasing options. Or shopping for clothes and being able to play around with an augmented reality try-on engine to see what a new shirt will look like before you buy it. Or maybe you'd like to give customers an interactive animated model they can add different kinds of makeup to see how they'll compare.There are virtually no limitations (except time, money, and technical skill) to the kind of cool experimental features and customisations you can introduce to your store after going headless.For larger retailers that are looking for the edge on their customers, this can be a massive point of difference.ScalabilityScaling a site becomes important at higher volumes of traffic. This benefit ties into the page load times.If you've ever tried to purchase a ticket for a major event you'll know the struggle of a website that takes forever to load and then seems to be frozen. Something in the system (usually the server) becomes a bottleneck for requests, causing the whole site to seize up.Headless eCommerce is highly scaleable because it bypasses these problems by decoupling the front and backend code.Microservice upgradesMicroservice architecture is a headache for smaller sites because it means managing more pieces. For a larger retailer that has reached its plateau, this architecture is a blessing because it allows parts for the system to be swapped out relatively quickly.Not happy with how easy your content management system is to write new content? No problem. Find a different one. Shipping and logistics system not tailored to your process? Find a new one. Marketing analytics not providing the insights to make business decisions? All good, write a new one into the architecture.Microservice architecture is kind of like the P.C. vs laptop debate. If your laptop starts slowing down and having problems, there's no option but to buy a new one and spend time configuring it. However, if a P.C. starts to act sluggish, you can add more RAM, swap out the graphics card or add a new power supply.Progressive Web Application (PWA)PWA is an architecture created by Google in 2015 and is best described as the middle point between a website and a native mobile app. PWAs use a technology called service workers that can cache data from the server, synchronise data in the background, and execute push notifications.PWAs approach to caching data makes the browsing experience near-instant. They can also be installed as a shortcut (on Android and desktop).The frameworks typically used to create headless eCommerce sites (like Next.js) can tick all the PWA boxes with relatively little configuration. This means that your headless store will almost feel like a downloaded mobile app without the hassle of having to actually go to the App or Play store to download the app.Multi-currency and multi-lingual supportMulti-language support is a very appealing benefit of headless eCommerce implementations. There are ways around this issue for monolithic solutions, but they're difficult to manage and kind of clumsy.If you're a European eCommerce company, chances are you've struggled with multi-language or multi-currency issues in your store.eCommerce platforms like Shopify provide some features for multi-language and multi-currency support, but as a company that serves a U.S. market primarily, it's not a problem they've given enough attention.Going headless allows your store to serve language-specific versions of your products and content based on the user's country of origin. Companies like Netlify are getting ahead of this problem with new features like Netlify Edge.Improved customer experienceArguably the biggest pro of going headless is the improved customer experience. This benefit is an aggregation of everything that comes with headless eCommerce; fast page load speeds, experimental and fun features, and a native-app-like experience.Cons of going headlessWe've spent thousands of hours building headless eCommerce stores and have an intimate understanding of the things that users find frustrating. Here's our list of the cons of going headless.Build timesOne of the biggest \"gotchas\" we see for new headless converts is a misunderstanding about how quickly content changes will be available for viewing. In a traditional eCommerce platform, all you have to do is hit the update button, the changes are saved on the server, and the next time you view the site everything is updated.It doesn't work like this for headless eCommerce. To get the benefits of crazy fast page load speeds, most of your content needs to be pre-rendered and sit on a content distribution network (CDN).Whenever you publish a new change, your frontend framework receives a command to rebuild the store, recompile the assets and publish them to the CDN. This takes time. There are different rendering techniques like Next's incremental Static Regeneration that help cut down the time required to rebuild the site. However, there's still a delay and it can be quite lengthy depending on: * How many products your store has * How many changes you made in a single update * The rendering techniques applied across your site * How well your site has been built!It takes some time for marketing folks to understand that there can be a 10-minute break between making a change to the site and being able to view the change.Continuous Integration & Delivery (CI/CD) needs configurationCI/CD is a development concept of continually integrating new code into a repository and pushing it through the delivery pipeline. From a headless eCommerce perspective, it means that when your marketing team publishes a new change through your content management system, there's no need for a developer to manually execute a new build - it should happen automatically.CI/CD requires configuration. It's not something that will be set up out of the box. It sounds like an obvious thing to set up, but there's work required and some developers forget to put themselves in the shoes of the marketing team.Products and content are managed separatelyIf your team is familiar with managing products and content through a single system, then this can be a bit of a learning curve with getting used to the fact you need to add a product in Shopify, BigCommerce, Commerce Tools, or whatever platform you're using, and then also work it onto your site's content through your CMS.Upgrading to headless isn't cheapYou've got to spend money to make money, as they say. Many of the tools in the headless architecture ecosystem are intended for companies doing large volumes of sales and they come with a price tag.Shopify Plus is $2,000 USD a month, Contentful starts at ~$500 a month, hosting with Vercel typically costs thousands of dollars a month, and these are all just the tip of the iceberg. Enterprise solutions like Commercetools run into tens of thousands of dollars a month.Then there's the cost of upgrading to a headless store. On average, a medium-sized store takes around 500 - 700 hours to design and develop. Agencies experienced in composable commerce typically charge upwards of $200 an hour, so the total project cost will be north of $100,000.You're paying for performance, customisation and scalability, but this only makes sense for stores that have volume and will see the return from unlocking this kind of performance.Customization but also more complexityUnlocking the ability to customize your store is a double edge sword. Where you used to manage everything from one system, now there are half a dozen. The new headless approach has brought additional workflows that your team has to follow for publishing content, managing reviews, logistics and ordering.There's the headless commerce environment you need to learn and a lot of custom code running your storefront.If simplicity is something your team needs, then introducing a new technology like headless eCommerce is going to be a struggle. It's a growth play for retailers that are ready to take the next step in their evolution.Potential loss of native eCommerce functionalitySince the front and backends are being decoupled, any native functionality that works across both divisions of your store's architecture will no longer work without modification. This applies to things like forms, reviews, and sale banners.Plugins are another \"gotcha\" that inexperienced businesses don't realise will be affected by the transition. Some plugins are except to this rule because they have APIs that can work with the frontend, but there's still custom development required to build the UI that can talk to the API.You're only as flexible as your agency partnerEven though we're an agency that specialises in headless eCommerce, this isn't supposed to be a shameless plug. It's simply a fact. When you move to a headless architecture, you're limited by how well your agency partner can execute.If they're less experienced with the common challenges of headless eCommerce, their velocity will be slow and you may not leverage the full benefit of your new architecture. It's an advanced way to build a store and even experienced developers can struggle with some of the complexities.Who's going headless?There is a real trend of big companies moving in this direction. A while back we made an extensive list of recognisable brands that have made the switch to headless eCommerce so we won't rehash every name, but here are a few of the big ones: * Audi * BMW * Volkswagen Group * Danone * Qantas Loyalty * Kmart * Target * Under Armour * Kirkland's * Lancome * NikeThere are tons more, but this list is strong evidence that big companies are adopting a headless eCommerce solution. Usually, when the big players in the industry start to move in a particular direction, it's worth paying attention.What to ask yourself before moving forward with headless commerce?When we're approached by a customer asking if they're a good candidate for a headless upgrade, I ask these questions: * Are you turning over $1m annually? * Is your store growing year over year? * Do you have experimental features you'd like to implement? * Are you comfortable learning new technologies? * Do you have at least $100k to invest in your business? * Do you understand how composable commerce works?Ideally, the answer to all these questions is \"yes\", but it's not a dealbreaker. There are plenty of unique use cases when some of these answers will be negative. The point I wanted to make is that headless eComm isn't suited perfectly to every online store.Wrapping upHopefully, we covered some stuff about headless eCommerce that will help you and your team make a more informed decision. It's a really exciting area of web development to be involved with and only going to get bigger over the coming years!"
  },
  {
    "title": "Next.js vs Gatsby.js - Which Is The Best React Framework?",
    "plaintext": "Next.js and Gatsby are two of the most popular static site generators used to build fast and SEO-friendly websites. They simplify the development of static sites by providing a powerful toolset that allows you to use modern JavaScript features to build your website. However, these two tools have slightly different approaches and different targets. Next.js is dynamically rendered, while Gatsby is statically generated and rendered beforehand.In this article, we'll compare the two to help you decide which suits your needs.B﻿efore we get to the useful content, here's a quick plug. If you're weighing up building your new project with Gatsby or Next.js and plan to bring an agency into the equation, then reach out to us! We've built a bunch of sites and applications with both frameworks. The worst that can happen is you get some free, experienced-backed advice.Next.js overviewNext.js is a free, open-source React-based framework used to build server-side rendered websites with zero configuration. This way, the HTML is generated directly through the server whenever a user makes a new request. This helps improve the site's performance and user experience. The framework is ideal for building landing pages, enterprise web apps, and dynamic websites that require high performance. Next.js leverages the following core features:Auto-code splittingNext.js auto-code splitting helps reduce the size of your application and improves performance by splitting the code into smaller pieces that are loaded on demand. This is especially useful for large applications with large code files, as it can help reduce the time needed to load the entire application.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitLazy loadingNext.js lazy loading is a great way to improve your website's performance. By loading only, the necessary components when they are needed, you can save time and resources. This can be especially helpful if your website has a lot of content or if you have users with slow internet connections.PrerenderingNext.js pre-renders all pages by default, meaning it generates HTML for each page beforehand rather than relying on the client-side JavaScript. Without this feature, users would see a blank screen on the first load as they wait for JavaScript to load. With pre-rendering, a user will see the HTML content on the first load, which makes your site appear to load faster and improve your search engine ranking.Next.js offers two types of pre-rendering: static site generation (SSG) and server-side rendering (SSR). SSG enables you to render your pages at build time. This works well for an HTML page that doesn't require regular updates. The page is pre-generated and stored in a CDN, and cached to offer improved performance.The SSR model generates an HTML page for each user request. This makes it ideal for dynamic content since the content isn't cached.Pros and cons of Next.jsAdvantages of Next.js: * Offers excellent app performance thanks to lazy loading and auto-code splitting features. Fast loading times lead to improved customer experience and conversion rate. * Websites and applications built with Next.js boast high responsiveness and adaptability and can be accessed from any device. * It has a built-in image optimization feature that converts images to the high-quality webp format. * It's ESLint compatible * Allows for easy customization and deploymentCons of Next.js * It has a poor plug-in ecosystem * It is restricted to using only the file-router system * It lacks a built-in state manager -- you need to use Redux or MobX for state management.Gatsby overviewGatsby is a full-featured framework for building powerful React-compatible websites. It provides features that allow you to build dynamic sites, such as data source plug-ins, code splitting, client-side routing, and code-driven page building. It also has a rich plug-in ecosystem that allows you to customize the behavior of Gatsby for your site's needs. This flexibility makes Gatsby suitable for different use cases, such as building blogs, product pages, marketing websites, and landing pages.Gatsby's features include:API driven developmentGatsby.js is built on top of React, while its data layer is powered by GraphQL, which makes it a great fit for API-driven development.Open Source EcosystemGatsby.js was built to be a tool for developers by developers. It is maintained by a community of users and companies who use it daily to build their websites.Progressive web application supportProgressive Web Apps (PWA) are websites that can act like native mobile applications. They have many advantages over native mobile applications, such as faster load times and native-app experience.Gatsby supports the development of PWAs and actually has a special plug-in for PWAs called Gatsby-plugin-pwa that allows you to easily build your PWA with minimal coding and configuration.Framework-agnosticOne of the most important features of Gatsby.js is that it is framework-agnostic. This means that you can use it with any front-end framework or library. It has pre-configured integrations for React and Vue, but you can still use it with any other library. You can also write your own integration if you wish to do so.Static site generatorGatsby.js is a static site generator which means that it will generate a static version of the site, and hosting it on a server will be hassle-free. You don't have to worry about updating the content. When you update the content in your HTML or markdown files, the new version will be served to the visitors automatically.Single page applicationsYou can build single-page applications using Gatsby since it has built-in support for routing. You can use React Router v4 or v5 with Gatsby. The bundle size of your website will also be small compared to other single-page applications since Gatsby doesn't include unnecessary polyfills and code needed to generate a static site.Pros and cons of GatsbyAdvantages of Gatsby: * A rich ecosystem of plug-ins - Gatsby.js plug-ins are useful for integrating third-party services into your static site. You can integrate a ton of useful services like Google Analytics, Google Adsense, etc., into your static site using these plug-ins * It has comprehensive documentation to help you set it up and get started working * It improves static website performance * Has a large community of usersCons of Gatsby * Gatsby is less user-friendly than some other options out there. It takes some time to learn how to use all its features properly. * It's not easily scalable.Similarities between Next.js and GatsbyNext.js and Gatsby are similar in the following ways: 1. Incremental buildingThe two frameworks allow developers to make changes to the content without updating the entire page. This helps improve productivity and reduces the hustle of building pages.2. Developer experienceNext.js and Gatsby have comprehensive documentation to help developers set up everything and start building applications. Besides, they are both React frameworks. So, if you already understand React well, you can work with any framework without learning everything at once.3. Improved SEONext.js and Gatsby are tailored to improve your site's ranking on search engines. Next.js offer server-side rendering allowing the SEO crawler to index your site faster. Gatsby prebuilt the entire HTML before its even requested by the user making it readily available for indexing by search engines; while offering fast performance.Differences between Next.js and GatsbyPage renderingNext.js uses a traditional server-side rendering approach. Whenever a user requests a page, the server will render the page and send the HTML response back to the browser. This approach has several benefits, including increased performance and SEO friendliness. However, it also has some drawbacks, such as increased complexity and decreased flexibility.Gatsby uses a static site generator (SSG) to pre-render pages during build time. This means that when a user requests a page, they will receive the pre-rendered HTML file from the server instead of having the server generate it on the fly. This approach has several benefits, including decreased complexity, increased flexibility, and improved performance. However, it also has some drawbacks, such as decreased SEO friendliness and increased build times.Data handlingNext.js gives developers the freedom to manage their data however they want. You can fetch data using any API - REST API or GraphQL API -- from any database or headless CMS. You can even fetch it directly from the database.Conversely, Gatsby is opinionated as it requires you to fetch and handle data using GraphQL queries. While it's possible to use Gatsby without GraphQL, the framework advises against using any other queries since it claims GraphQL simplifies the building process and allows you to load data in the same place it's consumed.ExtensibilityBoth frameworks have a vast ecosystem of plug-ins, add-ons, and libraries to help you improve the functionalities of your app. However, Next.js plug-ins require more effort to work with them than Gatsby's. This is because Gatsby has a community-driven plug-ins ecosystem, and you can easily find pre-configured plug-ins that serve your unique needs. Next.js plug-in ecosystem is different -- the developers must do all the work themselves. However, this approach gives you full control over your project and data system. But if you want to save time -- avoid reinventing the wheel -- then Gatsby is your ideal framework.ScalabilityNext.js is ideal for building enterprise-grade applications. It's actually used by renowned companies such as Nike, Apple, Twitch, and TikTok. Gatsby, on the other hand, isn't optimized to support large applications. If your Gatsby app increases in size, it becomes relatively slow during build time and may even fail to build at all. This makes Gatsby an ideal framework for building personal websites and small static sites.SecurityGatsby is more secure since it compiles your files to pre-rendered files instead of building in real-time on a server. The framework also allows you to fetch only the requested data making it relatively secure. With Next.js, the data is present on the server, creating room for vulnerabilities and attacks.Page renderingAlthough Next.js and Gatsby both support SSG and SSR, there's a slight difference in how they handle deferred rendering. Let's assume you have a 250-page website, but the last 150 pages are outdated or non-critical. Gatsby allows you to use deferred static generation, which enables pre-rendering the critical 100 pages and defers the 150 non-critical pages. These non-critical pages will only be loaded upon user request. So, instead of generating all pages up front, you can choose to generate the critical ones at build time and the rest only when a user requests the page for the first time. This approach speeds up building times.On the other hand, Next.js uses incremental static regeneration (ISR). This approach allows you to update pages after you've deployed your site. This way, when a user requests the non-critical pages, you can update the data on demand. If you run a website that needs constant data updates, then Next.js stands as a more suitable tool.FlexibilityNext.js is more flexible than Gatsby as it allows you to choose how you want to render your website -- whether using server-side rendering or static site generation. This flexibility comes in handy when scaling your website to your business growth. Gatsby is an opinionated framework that's tailored specifically for static site generation.Content management system (CMS)Next.js doesn't have a well-developed plug-in ecosystem which makes fetching data from a CMS a bit challenging. Gatsby allows you to connect to a CMS via plug-ins. You can also edit content/update data without programming knowledge.Choosing between Next.js and GatsbyYou should use Next.js if you plan on building a scalable website with dynamic content. The framework also gives you complete control of the code that sources and manipulates your data. Gatsby, on the other hand, is ideal for building static websites. It has a rich plug-in ecosystem that allows you to extend the functionality of your website or application. But if you're uncomfortable using GraphQL, you better stick to Next.js.Frequently asked questionsQ: Is Next.js better than Gatsby?A: It depends on your use case. Next.js is suited for building large-scale applications and dynamic websites thanks to its scalability advantage and SSR. Gatsby, on the other hand, is designed for static site generation, which makes it suitable for landing pages, personal websites, and small-scale websites.Q: Is Gatsby worth using?A: Yes. Gatsby still has its place in the modern-day web development sphere. Making it an ideal tool for building static websites.SummaryNext.js and Gatsby are ideal frameworks for building fast and search-engine-optimized websites from scratch. However, it would be best to analyze each framework's strengths and weaknesses to choose one aligned with your business needs."
  },
  {
    "title": "Traditional vs. Headless CMS - Are Monolithic CMSs Dead?",
    "plaintext": "A Content Management System (CMS) is a software platform for creating, managing, and publishing digital content without writing code. For some time now, Traditional CMSs have been the default option for managing content (i.e. WordPress, Drupal, Joomla). They offer a one-size-fits-all solution that marries the front end to the back-end, making it easier to manage an entire website in one place. However, this architecture is restricted to one channel only; websites. This means content creators can't repurpose for an omnichannel experience.On the other hand, headless CMSs aren’t coupled to the frontend so they can be used to manage content across all channels. A custom frontend can be built specifically for phones, wearable tech, fridges, car tv screens, and any internet of things device, and the marketing team can manage the content from a headless CMS.This is broadly what’s meant by an omnichannel experience. From a marketing perspective, it’s focused on standardising the customer experience regardless of how they’re dealing with your company. Achieving this kind of streamlined experience with a bunch of different tools is difficult because they each have their own quirks and workflows - which is one of the reasons why headless CMSs are a big deal.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitTo further understand the differences between the traditional and headless CMSs, let’s look at their architecture and how they work.Traditional CMS architectureTraditional CMSs were launched in the early 2000s when web development was still relatively immature. They were introduced to open up the internet to non-technical users by empowering them to publish content/blogs online without any expertise in web development. A user simply logins to their website admin panel, writes a post and publishes it on the web with a push of a button.A traditional CMS architecture consists of three main components; * A database where your content is stored * A CRUD (create, read, update, and delete) interface allows you to manage and edit content. * A front-end layer that presents your content from the database to a site visitor.The database and CRUD comprise the back-end layer, which is tightly coupled with the front-end to serve as one functional unit. This is why traditional CMSs are called monolithic (i.e. borrowed from the word monolithe meaning a single block of stone).The front-end, is made up of templates, themes, and CSS that enables users to build their website without the help of a developer. You can customize the properties of your content, such as font styles, background color, headings, and images.Some well-known examples of traditional CMS include WordPress, Shopify, Joomla, and Drupal. WordPress, for instance, has a CRUD dashboard for editing content and a MySQL database that stores your content. A PHP application code links the database to the front-end where the content is displayed.Benefits of Traditional CMSLow barrier to entry for non-developersTraditional CMSs have built-in templates to help you design your website without coding. As such, they offer a cost-effective way of establishing your online presence since you don't need to hire a developer to build your site. You can set up everything by yourself.Easy site managementTraditional CMSs have a monolithic architecture that couples the front-end and the back-end into one unit. You don’t need a developer to integrate them. This means that you have everything in one place. You can manage the database, make content changes, tweak templates and the UI themes and deploy your site easily and fast with zero maintenance cost.Clear cost structureUsually, traditional CMSs pricing models are based on features such as custom domain names, hosting, themes, and plugins. With such a transparent pricing model, it’s easy to accurately predict the cost of running a website.Drawbacks of using traditional CMS:Limited delivery channelWhen traditional CMSs were launched, digital content was almost exclusively consumed via websites and served as static pages. However, with the rise of modern devices such as smartphones, smartwatches, and IoT devices, traditional CMSs with their single connection to a website may be limiting.Limited UI customizationAlthough traditional CMSs allow you to design your front-end, you're limited to using the built-in templates and themes. The UI limitation may not be a big deal if you're building a personal website, but it's a significant hurdle for a business that wants its site’s UI to rapidly evolve based on data-insights.Lack scalabilityTraditional CMS platforms host content in-house using limited servers due to their monolithic architecture. As a result, handling spiked traffic and scaling as your database grows becomes a challenge. Also, since the back-end and front-end are connected, when one element is affected by downtime, the entire site experiences downtime.Headless CMS architectureIn a headless CMS architecture, the back-end is detached from the front-end. The back-end is the 'body,' while the front-end is the 'head,' which is decoupled hence the name headless. As such, headless CMS platforms exist as a back-end layer where you can create, store and manage your content. This gives you the freedom and flexibility to deploy your content across any presentation layer. And since the front-end is separated from the back-end (where your content is stored), headless CMSs incorporate APIs that enable you to retrieve your content and publish it to any front-end.Headless CMSs works well if you’re looking to launch dynamic content with scalability in mind.It’s a bit tricky to analyse the benefits of headless CMS under a microscope, because they’re part of a bigger MACH (Microservices, API-first, Cloud-native and Headless) architecture. We’ve already written a detailed breakdown on the benefits of MACH architecture and what kind of companies can use it as a growth play, so won’t rehash the same information.Benefits of using Headless CMSFront-end agnosticHeadless CMS platforms were introduced to support seamless omnichannel experiences. This means they aren't restricted to any particular presentation layer. You can deliver your content to websites, mobile apps, wearables, and other smart devices. You don’t have to implement parallel CMSs to support various digital channels.Technological flexibilitySince a headless CMS decouples the content from its presentation, it gives developers more freedom when creating their desired user experience. They can work with their favorite tools and frameworks to create a personalized user interface and offer consistent user experiences across different platforms.Improved securityWith a headless CMS, you're working with the back-end only. So, you only have to worry about security in one front, unlike traditional or coupled CMS, where you have to keep your eyes on both the front and back-end. Less entry point translates to better data security.Fast content deliveryThe API-driven model of headless CMSs means that it offers high performance and delivers content faster for an improved user experience.Limitless integrationHeadless CMS’ decoupled architecture allows developers to plugin third-party applications to enrich content. You can integrate other systems, such as customer relationship management systems, ERP tools, market automation programs, and other applications.Future-ProofA headless CMS is a future-proof option as it can be easily adapted to any new technology or changes in user behavior. Besides, it's an iteration of traditional CMS designed to support content delivery to newer front-end layers.Saves timeThe content stored in a headless CMS isn't dependent on a specific front-end display. In other words, the content is modular, and as such, it can be reused across any touchpoint without duplicating or reformatting it from scratch.The only drawback of using a headless CMS is that you'll need a developer to handle integrations and the UI. This can increase the overall of your project.Traditional vs. Headless CMS use casesYou may want to use a traditional CMS if: * You want a simple website that gets the job done. In other words, if you’re working on a small project whereby your highest priority is usability with minimal personalization, a traditional CMS will serve you just right. * You have a limited budget or limited access to developer/technical support. It offers out-of-the-box templates and themes to help non-developers set up your website and publish content. * Omnichannel experience is not part of your business model.Use a headless when: * You want to separate your website’s tech stack from your content. This helps improve content delivery speed. Besides, headless CMS is an independent, self-contained content repository; you can change your tech stack whenever you want without breaking anything. * Offering omnichannel experience is part of your business model. Headless CMSs allow you to deliver content to users via multiple touchpoints. * Your project involves working with consumers' data, and as such, you can't afford to compromise on security. * You plan on integrating various systems to improve your website’s functionality. * You’re building a new MACH application and want easy content management that doesn’t need a developer to be involved.Factors to consider when choosing a headless CMSIf you’re planning on switching to a headless CMS, there are numerous options available on the market. Some of these options include Contentful, Strapi, Storyblok, and Contentstack e among others. While they all have the same architecture and the associated benefits, they differ in features and add-ons. As such, be sure to consider the following factors when shopping for your next headless CMS:Business needsYour business needs, or what you intend to achieve using the CMS, should guide your purchase decision. What do you hope to get out of a CMS? A good place to start is by defining the key pain points that aren't being addressed in the current system. Most importantly, involve your team – marketers, content creators, and developers – in your decision-making. Take notes of the critical features and nice-to-haves add-ons they're looking for in a headless content management system. Their list of needs will give you a clear roadmap toward the ideal CMS you should purchase.To make it even easier, it's a good idea to classify the list of requirements into two categories – idiosyncratic and priority requirements. The former refers to company-specific requirements that a CMS should have. For example, if your content needs to be translated into multiple languages, you should look for a CMS that supports internationalization. Priority requirements, on the other hand, refer to the essential functionalities a CMS should fulfill. For example, the CMS you intend to buy should have media editing tools if you are dealing with multimedia content.User-friendlinessHeadless CMSs tend to be more developer dependent than traditional CMSs due to their open front-end architecture. But developers aren't the only ones using the CMS in your organization. Ideally, you want a headless CMS that's intuitive for everyone on your team. So, when making your purchase decision, you need to account for both technical and non-technical users in your team.The good news is that most headless CMS vendors offer a demo account. You can use the free account for your typical CMS tasks and evaluate how efficiently it gets the job done. Everyone on your team should be given an opportunity to get hands-on running the demo account and form an opinion from their experience.ExtensibilityOur team are partners with Contentful and Prismic, and both headless CMSs are excellent at what they do. However, they’re proprietary and the codebase can’t be extended by our engineers.Most of the time this is a benefit. It means the engineering teams behind the CMS will take care of issues and ensure the product stays stable. However, there are sometimes when even these super flexible CMSs don’t meet the requirements.One example is being able to manage Shopify products from the same place content is being written. This isn’t a feature offered natively by any headless CMS. The only way to do this successfully is work with an open source CMS like Strapi and add build this functionality in.If your team’s requirements for content management are complex and unique, then an open-source headless CMS like Strapi might be the best option.Tech stack CompatibilityIt's crucial to ensure a headless CMS is compatible with your existing tech stack. The best way to verify if a CMS is compatible is by checking the vendor's website. Under documentation, you'll find all the supported software development kits (SDKs); verify if there's an SDK for your tech stack. For example, if your website is built using .NET, you want to use a CMS that offers an SDK for. NET. Otherwise, your developers will be forced to build everything from scratch, which is time-consuming. In extreme cases, you might even be forced to train or hire developers with the right skills to maintain your CMS.BudgetBesides your list of requirements, your budget greatly influences your CMS purchase decision. For starters, you should define how much you’re willing to spend on purchasing a CMS. It can be quite challenging to find an ideal CMS that meets all your needs without exceeding your budget. You may be forced to either increase your budget or go for the essential features and functionalities and forego additional nice-to-haves.Most headless CMS have a tiered price structure – basic free tier, standard, and premium tiers. Usually, the difference in price between the paid tiers is the number of users, supported content types, and API calls, among others. Determine which features are a priority to your organization and choose your plan accordingly.Technical and sales supportEven though you have an in-house development team, you may still require technical support from your CMS provider. Therefore, ensure the headless CMS you’re about to purchase has a comprehensive knowledge base on their website and a convenient communication channel where you can reach out to customer support. A good CMS should have email and phone support. Also, established headless CMSs usually have detailed documentation and a large community of users, which is helpful if you run into problems when using the platform. So, be sure to check a platform's maturity.Frequently asked questionsWhat’s the difference between a traditional CMS and headless CMS?The main difference is that a traditional CMS has a monolithic architecture that combines the back-end and front-end. Conversely, a headless CMS separates the front-end and back-end, allowing you to deploy your content to multiple channels.Is a headless CMS better than traditional CMS?A headless CMS is better than a traditional CMS since it supports an omnichannel experience. It's not restricted to one front-end/presentation layer, thus enabling you to reuse your content throughout multiple devices and platforms.Key TakeawayA headless CMS offers great flexibility and agility to businesses looking to deploy their content faster and provide personalized customer experience. It's also a great alternative for future-proofing your business, thanks to its support for omnichannel experiences.At the same time, traditional CMSs still have their place in the CMS market as they offer a great starting point for small businesses aiming to deliver their content to a single platform. Traditional CMSs are also easier to manage and less dependent on developers, saving you time and money."
  },
  {
    "title": "Commerce APIs Explained - What Are They?",
    "plaintext": "Most eCommerce companies start their journey with Shopify, BigCommerce, Prestashop or WooCommerce. These monolithic entry point platforms can be restrictive for businesses that muscle their way through the competition and find significant growth. For example, it's hard to plug in all the superb artificial intelligence, API-first services that are popping up these days.Inflexibility and the push to \"go to the next level\" is why many online retailers are turning their attention to a MACH (Microservice, API-first, Cloud-native, Headless) architecture. This approach means they're not bound to use one tool like Shopify. They can combine the best-of-breed technologies into a unified system, all connected through API.Explaining it like this makes the setup pretty straightforward, but developing a headless store means building a set of commerce APIs into a custom frontend so customers can do all the things they would normally expect to.Some eCommerce services like Commerce Layer, Commercetools, Crystallize, and Shopify has excellent, full-featured commerce APIs that you can leverage to build pretty much any experimental eCommerce store. Other platforms like Wix, Squarespace and Weebly are kind of garbage and not worth working with.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat are Commerce APIs?We've touched on why commerce APIs are important but have yet to expand on what commerce APIs are.Commerce APIs are a set of organised functions that capture all the \"things\" an eCommerce website can do. This includes authenticating a user and logging in, searching for a product, recording a sale, allowing users to check their purchase history, recording shipping details, etc.Here's a handful of the standard commerce API collections: * Authorisation API * Authentication API * Customers API * Catalogue API * Inventory API * Shipping API * Cart API * Storefront API * Tax API * Price lists APIIt's worth noting that Crystallize and Commercelayer are speciality eCommerce engines built for larger-scale projects and follow a less standard commerce API structure.Each API collection we listed above is broken down into a series of operations. For example, the BigCommerce Catalog API can create products, add product images, add variations to products, add custom fields, add product reviews, and a ton more.A good way to think about it is that the API endpoints are neatly organized collections of functionality that allow a third-party application to perform pretty much anything a native monolithic shop could do.What does using a Commerce API look like?Depending on the API, there will be different technologies involved in interacting with the API. The most common way to interface with a commerce API is through REST, but GraphQL is becoming quite popular too.Continuing with our BigCommerce product review example, this is what the code on your headless website would look like:POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/reviewsAccept: application/jsonContent-Type: application/jsonX-Auth-Token: {{ACCESS_TOKEN}}{  \"title\": \"Great Coffee Mug\",  \"text\": \"This coffee mug kept my liquids hot for several hours.\",  \"status\": \"pending\",  \"rating\": 5,  \"email\": \"testing@bigcommerce.com\",  \"name\": \"BigCommerce\",  \"date_reviewed\": \"2018-07-20T17:45:13+00:00\"}This snippet shows a POST sent to the BigCommerce API with the title, text, status, rating, email, name, and date of review for the product review.Calling a commerce API happens through HTTP methods, which most people would be familiar with as the protocol used to access web pages.Why use an API for eCommerce?There are a few use cases where working with eCommerce APIs is necessary to build a store that does something better, faster, or more complex than possible with a typical monolithic setup.Platforms like Shopify are pretty flexible, but if a big retailer like Walmart comes along and says to Shopify, \"I want my store to load ten times as quickly, and I want the content to be personalized to shoppers based on their location and spending habits\". Shopify would probably say, \"sorry, that's not what we do\".Walmart knows what they want, but they want to build something other than an eCommerce platform from scratch. They want a more flexible solution that can blend in with their existing technology and not be restricted. This situation is the most common use case for commerce APIs.Another great example is a blog that's been pumping out high-quality content for ten years and wants to expand its monetization strategy to sell products inside its content. They can't risk the performance hit a plugin would bring. Instead, they can use a commerce API and build a custom UI to facilitate a unique purchasing process.I've covered these arguments in much deeper detail on the topic of why a business would consider upgrading to headless eCommerce, so I won't repeat myself by going any deeper.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat makes for a good commerce API?The criteria for a great commerce API are pretty straightforward. First of all, all functionality should be available through REST APIs. Even if GraphQL is gaining popularity, it's still a pain in the ass to work on smaller projects (that's where tRPC is an ideal replacement).Secondly, it needs to tick these boxes: * Complete * Good developer experience & document quality * Event-driven architectureCompleteIt sounds like an obvious place to start, but some incredibly popular eCommerce APIs aren't complete. The standard Shopify API is intentionally incomplete. They don't make user authentication available, so users are forced to checkout on Shopify's domain through the standard cart, which is a terrible experience. Shopify Plus allows access to this API, but it sits behind a $2,000 paywall.Completeness is obviously essential. The whole reason behind leveraging commerce APIs is to do things that a standard store can't do. Services like Teachable, Squarespace and Wix don't get past this requirement and shouldn't be considered when weighing up which commerce API to use.Developer experience & documentation qualityNot all APIs are made equal. Some, like Commercelayer, provide an excellent developer experience. Have questions about working with the API? No problem; the documentation is high quality and extensive. The team are known for being lightning-quick to update their docs when changes are made to the API.Event-Driven ArchitectureThere's no rulebook on how API-first eCommerce companies should organize a massive collection of exposed commerce functionality into a set of APIs. An event-driven architecture is a tidy way to handle this problem and makes it much simpler for developers to figure out how to implement it.What is an eCommerce API example?Here are a few good eCommerce API document sources to check out: * BigCommerce API docs * Shopify API docs * Crystallize API docs * Commercelayer API docsEach of these docs provides hundreds of examples of individual eCommerce API examples.Frequently asked questionsWhat's an eCommerce microservice example?One of our clients, aftco.com, is an excellent example of an eCommerce store set up with microservices. They're using Shopify as an eCommerce backend, Klevu for product recommendations, Klayvio for eCommerce marketing, Contentful as a CMS and Next.js as the frontend framework.If you need more examples, head over to the showcase page for Prismic, Contentful, Commercelayer, Commercetools, or any of the services listed in the MACH alliance.What does a \"Commerce API\" mean?Commerce APIs are organised collections of operations and functionality authenticated third-party applications can access. The most common example is a headless eCommerce store that pairs something like Shopify as an eCommerce backend with a custom Next.js frontend that handles all the regular eCommerce features by speaking with Shopify's APIs.Wrapping upCommerce APIs aren't going away anytime soon. It's likely that enterprise technologies like Microservices, API-first, Cloud-native and Headless will continue to head downmarket, becoming a realistic investment for more than just enterprise companies.You should now understand what commerce APIs are and if they're relevant to your business!Still have questions? Feel free to leave a comment below, and we'll get back to you in a day or two."
  },
  {
    "title": "Laravel vs Express - Which Framework Is More Powerful?",
    "plaintext": "PHP has been alive in the programming world for a long time. Programming years are kind of like dog years, and PHP is the grandparent of the web. JavaScript isn’t much younger, but it’s traditionally been a front-end language with no business running on a server… until Node.js appeared on the scene.These two languages are the focus of plenty of memes and jokes on Reddit (/r/webdev). According to these communities, PHP is old and “confusing”, and JavaScript wasn’t designed to run on a server. Despite this, both technologies have frameworks used by hundreds of thousands of developers with thriving communities.Laravel and Express.js are the two frameworks we’re talking about. Both are used for building web applications. Laravel is a PHP framework known for its elegant syntax and extensive feature set, while Express.js is a minimalistic Node.js framework known for its flexibility and simplicity.The goal of this article is to compare Laravel and Express in terms of their features, performance, and popularity to help you decide which one is more suitable for your next project.B﻿efore we dive in - here's a quick pitch. Our team write a lot of helpful content on topics we understand intimately. We've developed tons of apps with Laravel and Express, and can help you get your technology stack right for an upcoming project. If you're looking for a reliable partner, or simply some advice on how you should approach your next web development or headless eCommerce project, drop our team a line. The worst that can happen is you get some free, experience-backed advice!Laravel overviewLaravel is a popular open-source PHP framework used for web application development. It was created by Taylor Otwell in 2011 and has since become one of the most widely used frameworks in the PHP community.Its most outstanding features are its focus on simplicity and ease of use. The framework is built on top of Symfony, which provides a set of well-tested, reusable components that can be easily integrated into Laravel projects. This allows developers to quickly create applications without having to build everything from scratch. The framework also offers numerous helpful tools and features that make development faster and easier. Its in-built command line interface (CLI) for example, allows developers to run tasks and generate code quickly and easily. It also includes a built-in templating engine, routing system, and database migration system, which all help to streamline the development process.While it’s not really a feature, Laravel is accompanied by arguably the best set of video documentation, Laracasts, to help a new user get up to speed.Here’s a detailed look into its featuresEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitLaravel Features1.   Eloquent object-relational mapping (ORM)Laravel has an in-built ORM known as Eloquent. This ORM allows you to interact with a database using PHP’s objects and classes instead of writing tedious SQL queries. As a result, you end up with a more efficient and readable code, with the ability to easily switch between different database types without changing the underlying code.In Laravel, each database table has a corresponding \"Model\" class that is used to interact with that table. The Model class contains methods for performing common database operations, such as inserting and updating records, as well as defining relationships between tables.For example, if a Laravel application has a \"Users\" table and a \"Posts\" table, you can create a \"User\" Model and a \"Post\" Model. The User Model will have a method for retrieving all of the posts written by a particular user, and the Post Model could have a method for retrieving the user who wrote a particular post. You can perform CRUD operations using classes as illustrated:Define the user modelclass User extends Eloquent{    protected $table = 'users';}Update user details:// Update an existing user$user = User::find(1);$user->name = 'Jane Doe';$user->email = 'janedoe@example.com';$user->save(); // Delete a user$user = User::find(1);$user->delete();A template engine is a tool used to generate dynamic HTML pages based on data. This allows you to create web pages that are customized for each user and that can be updated in real-time without needing to refresh the page.Laravel's template engine is called Blade, and it is a simple yet powerful tool for creating dynamic and reusable views in Laravel applications. Blade templates use a combination of plain PHP code and special Blade syntax to create dynamic and reusable views. Blade templates are compiled into regular PHP code and then cached until they are modified, which makes them extremely fast to render.Blade also allows developers to use conditional statements and loops directly in their templates, as well as include other views and layouts within their templates. Blade also provides several useful methods and functions for working with common view-related tasks, such as generating URLs, handling forms, and displaying data.3.   MVC supportLaravel follows the Model-View-Controller (MVC) design pattern. This means that it separates the application logic (the model), the user interface (the view), and the control flow (the controller) into distinct components, which makes it easier to develop, maintain, and test your code.The model represents the data that your application works with, such as users, products, or orders. The view is a template that defines how the data will be displayed to the user, such as an HTML page or a JSON response. The controller is a PHP class that contains the business logic of your application, such as handling user input, querying the database, or generating a response. By following the MVC pattern, Laravel makes it easy to build modular and maintainable applications that can be easily extended and customized.4.   Simple routing systemLaravel provides a simple and flexible routing system that allows you to define routes for your application using a PHP or a plain text file. For example, you can define a route that maps the URL \"/products\" to a controller action that returns a list of products or a route that maps the URL \"/users/{id}\" to a controller action that returns the details of a specific user. The framework also supports route parameters, which allow you to capture parts of the URL and use them in your route definitions. This makes it easy to build dynamic and customizable URLs that can be used to access different resources in your application.Express.js overviewExpress.js is a web application framework for Node.js. It is designed to make it easy to build web applications and APIs using Node.js.The framework is built on top of the core Node.js module called http, which provides a layer of web server functionality for Node.js. Express.js extends this functionality by providing a simple and flexible way to define routes, or URLs, for your application and map them to JavaScript functions that handle incoming requests and generate responses.Express.js Features1.    A simple and lightweight web serverExpress.js provides a built-in web server that can be used to serve web pages and APIs. It is fast and efficient, and it provides support for many common web application features, such as routing, middleware, and error handling. This makes it easy to create and deploy web applications using Express.js, and it allows you to focus on building your application instead of worrying about setting up and maintaining a web server.2.    A powerful routing systemExpress.js includes a powerful routing system that makes it easy to define and handle different URLs and HTTP methods in your web application. You can use this system to create custom routes and handle different types of requests and responses. For example, you can use routes to handle GET requests for retrieving data, POST requests for creating new data, and DELETE requests for removing data. This allows you to create flexible and scalable web applications that can handle a wide range of requests and responses.3.   Middleware supportExpress.js provides support for middleware, which are functions that are executed before or after a request is handled by your application. Middleware can be used to perform tasks like logging, authentication, or data validation, and it is a powerful and flexible feature of Express.js. You can use middleware to add additional functionality to your application without modifying your application's core code, and you can also use third-party middleware to extend the capabilities of your application.4.   A large and active communityExpress.js is a widely-used and well-supported framework, and it has a large and active community of users and developers. This means that you can find a wealth of resources, tutorials, and libraries to help you learn and use Express.js effectively. You can also get help and support from other users and developers if you have questions or encounter any problems. This makes it easier to learn and use Express.js, and it can also help you to stay up-to-date with the latest developments and best practices in the field.5.   Compatibility with other Node.js frameworks and librariesExpress.js is designed to be compatible with other popular Node.js frameworks and libraries, such as Socket.io for real-time communication and Mongoose for working with MongoDB databases. This makes it easy to integrate Express.js with other technologies and build powerful and scalable web applications. For example, you can use Express.js and Socket.io together to create a real-time chat application, or you can use Express.js and Mongoose to build a web application that stores and retrieves data from a MongoDB database.6.   Support for template enginesExpress.js provides support for template engines. This allows you to create web pages that are customized for each user and that can be updated in real-time without needing to refresh the page. Express.js supports a variety of template engines, including popular options like Pug and EJS, and you can use template engines to create flexible and dynamic web applications.Laravel vs. Express.js: Ideal use casesLaravel is best-suited for building large and complex web applications since it offers a wide range of features that make it easy to develop and maintain applications. On the other hand, Express.js, being a minimalistic framework, is great for building lightweight and real-time web applications.Choose Laravel if you want to build: * eCommerce websiteLaravel is ideal for building e-commerce websites due to its scalability. It provides all the necessary features and tools such as caching memory, authentication system and smooth database access. * Content ManagementLaravel provides a wide range of features for creating and managing content thanks to its template engine support, and robust routing system. It also has tools for creating custom fields, and taxonomies. * APIsLaravel is an excellent choice for creating APIs. It provides an easy-to-use RESTful API system that allows developers to create secure and powerful APIs. It also has tools for creating custom authentication systems, and webhooks.Choose express Express.js for building: * Single-page applicationsExpress.js's support for routing and middleware makes it easy to create SPAs that are fast and responsive, and that can update and re-render their content in real-time without needing to refresh the page. * APIsExpress.js's support for routing and middleware makes it easy to define and handle different API endpoints and to provide custom responses to API requests.Differences between Laravel and Express.jsLet’s compare the two frameworks using the following criteria:I.        Ease of testingOne of the biggest advantages of Laravel is its ease of testing. It has a built-in testing framework called PHPUnit that makes it easy to conduct automated tests on the code. It also has a feature called “mocking” that allows you to simulate different scenarios and test them.The framework also has a wide variety of tools and libraries to help you test your application. These include tools like BrowserKit, which allows you to simulate a browser environment, and Dusk, which allows you to test user-facing interactions.Testing Express.js applications requires you to integrate with popular testing frameworks such as Mocha, Chai, and jest. As such the testing process is a bit more complicated than in Laravel; which boasts an integrated unit testing feature, which allows developers to easily create and run tests on their applications.In addition, there aren't as many tools and libraries to help you with testing Express.js applications. This means you have to write more of your tests and make sure everything is working correctly.II.        Microservice compatibilityExpress and Laravel use different approaches for microservice compatibility. Express apps are compatible with other microservices by default. This is because it uses a non-blocking I/O model that enables multiple requests to be processed at once. Express apps also support dynamic routes allowing developers to easily add new functionality to their apps without modifying existing codebase files.On the other hand, Laravel uses a more complex approach that requires more work to make it compatible with other microservices. First, it requires the developers to explicitly declare which APIs they want to use in their app. Afterward, they must explicitly register those APIs in the app's configuration file using the API config module. This approach avoids conflicts by forcing developers to explicitly control which APIs are used in their apps.III.        Community supportExpress.js has a larger community of users than PHP’s Laravel framework. This is because Express is easier to learn, especially for beginner developers. As such, you’ll have an easier time finding and hiring an experienced Express.js developer than Laravel. Nonetheless, both frameworks have excellent documentation and numerous learning resources online.Frequently asked questionsIs Laravel better than Express.js?Laravel and Express.js are equally great frameworks. However, Laravel provides a more structured approach to development, making it ideal for building enterprise-grade web apps. It also offers a lot of features out of the box, such as authentication, authorization, and database migrations that make it easier to develop a complete application. Express.js is designed to be lightweight and fast. It is a great choice for creating modern and fast web applications.Is Laravel faster than Express?Although Laravel is more robust and scalable than Express.js, it's slower than its counterpart.Wrapping upLaravel and Express.js are both popular web development frameworks. Both frameworks are open-source and can be used to create powerful web applications. When deciding between the two, it is important to consider the specific needs of your application. If you are looking for a feature-rich framework for building complex web applications, then Laravel should be your go-to option. However, if you are looking for an easy-to-use and lightweight framework with a focus on performance, then Express.js may be a better choice.If you enjoyed this article, check out our Next.js Pros and Cons summary, Why we use Tailwind CSS as our primary framework, and other technology bites on our blog"
  },
  {
    "title": "Microservice Architecture - The Future Proofed Architecture",
    "plaintext": "Microservice architecture is becoming increasingly popular among businesses as it helps to break down large applications into smaller, more manageable components. This makes maintaining and updating individual components easier while reducing complexity and cost.In this article, we will explore the key characteristics of microservice architecture and discuss some of the benefits and challenges of adopting this approach.But first - Need help from a microservice implementation specialist? Our team can help plan and implement your headless eCommerce or composable architecture application. Drop us a line! The worst that can happen is you get some free experience-backed advice.What exactly is a microservice architecture?Microservice architecture is a software design approach in which an application is built as a suite of small, independent services. Each microservice is designed to handle a specific business capability and can be developed, deployed, and maintained independently of the other services. This approach is often used for building complex, scalable applications composed of multiple components.Although self-contained, the microservices communicate with each other through well-defined interfaces, typically using lightweight protocols such as HTTP. This enables the application to function as a single unit. There are a variety of different technologies and tools that can be used for communication between microservices. For example, some common options include REST APIs, gRPC, and message brokers such as Apache Kafka or RabbitMQ.The choice of technology and tooling will depend on the application and the organization's specific requirements and constraints. For example, factors that may influence the decision include the type and amount of data being exchanged, the performance and scalability requirements, and the level of reliability and security needed.Read how we helped AFTCO implement a wildly successful microservice-based headless Shopify store that turbo-charged their page load times.Characteristics of a Microservice architecture1. ReusabilityIn a microservice architecture, each service is designed to be self-contained and independent, with a specific and well-defined purpose. This allows services to be easily shared and reused across different applications, which can help to improve the overall efficiency and productivity of the development process.For example, imagine that a team has developed a service that handles user authentication and authorization for an e-commerce application. This service could be designed so that it could be easily reused in other applications requiring user authentication and authorization. This would allow the team to focus on developing the new application's core functionality rather than spending time and resources on developing and testing the authentication and authorization functionality from scratch.2. ScalableBecause each service in a microservice architecture is independent and isolated from the others, it can be scaled up or down independently to meet changing demands. This means that if one service becomes heavily used, it can be scaled up by adding more instances of the service without affecting the other services in the application. Similarly, if a service is not being heavily used, it can be scaled down to reduce resource usage.This scalable approach allows teams to optimize the performance and availability of the overall application by allocating resources to the services that need them the most. Additionally, because each service can be scaled independently, it can be easier to troubleshoot performance issues and identify the specific service causing the problem.3. Event-drivenAnother key characteristic of a microservice architecture is that it is event-driven. This means that services communicate with each other through events rather than through direct requests.In an event-driven architecture, a service will publish an event when it has completed a certain action. Other services interested in that action can subscribe to and respond to the event. For example, suppose a service that processes orders receives a new order. In that case, it might publish an \"order_received\" event, and other services that need to respond to the new order, such as a service that sends confirmation emails or updates inventory, can subscribe to the event and take the appropriate action.This event-driven approach has several benefits. First, it allows for loose coupling between services, which makes the overall application more resilient to change. If one service is updated or changed, it will not necessarily affect the other services because they are not directly connected. This can make the application easier to maintain and evolve.Second, an event-driven architecture can improve the application's scalability because services can respond to events asynchronously. This means that a service that publishes an event does not have to wait for the other services to respond before it can continue processing. This can help improve the application's overall performance because it allows different services to work in parallel.4. Decentralized data managementOne of the key characteristics of a microservice architecture is decentralized data management. This means each service manages its own data and has its database. As such, each service is responsible for storing, retrieving, and updating its data rather than relying on a centralized database that is shared by all the services in the application.This decentralized approach to data management allows each service to be scaled independently because the data for each service is managed by that service itself. This can improve the overall performance and availability of the application.It also allows each service to use the most appropriate data storage technology for specific requirements. For example, one service might use a relational database, while another might use a NoSQL database. This flexibility can improve the overall performance and maintainability of the application.In addition, decentralized data management allows teams to develop and maintain each service independently. This can improve the overall agility of the development process.5. PolyglotMicroservice architecture is polyglot, meaning each service can be implemented using a different programming language or technology stack, depending on the specific requirements of the service. This allows teams to choose the right tools for the job, which helps improve the application's overall performance and maintainability. The polyglot attribute of a microservice architecture also makes it easier to integrate with a wide range of external systems and technologies.Advantages of a microservice architectureThere are several advantages to using a microservice architecture, including the following:1. Improved agilityEach service is independent and has its codebase, data store, and deployment cycle. This is known as autonomy - it allows teams to work on their services without being constrained by the dependencies and constraints of other services.Also, each service is typically managed by a separate team responsible for all aspects of their service, including development, testing, deployment, and maintenance. This allows teams to have more control over their services, and it also allows them to iterate quickly and release new versions of their services without having to coordinate with other teams. Consequently, it helps improve the overall agility of the development process and makes it easier to respond to changing business needs.2. Increased flexibilityEach service can be managed independently, allowing teams to optimize the application's resources and capacity to meet the business's changing needs. Additionally, it is easier to replace or modify a service without disrupting the overall functionality of the application.3. Better maintainabilityIn a microservice architecture, each service is small and focused, which makes it easier to understand and maintain. Additionally, because each service is independently managed, teams can make changes to their service without coordinating with other teams, which can help reduce the risk of conflicts and dependencies.4. Enhanced resilienceIn a microservice architecture, the failure of one service should not cause the entire application to fail. Other services continue to operate, and the failed service can be restarted or replaced without disrupting the application's overall functionality.5. High cohesionOne of the advantages of using a microservice architecture is that it promotes high cohesion, which means that all of the components and logic related to a specific aspect of the application should be contained within the service. This makes it easier to understand and maintain the service and helps improve the overall quality and stability of the application.6. Increased securityMicroservice architecture is more secure because it allows for more fine-grained control over the security of individual services. You can implement each component with its security controls and policies.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitMonolithic vs. microservice architectureTo truly appreciate a microservice architecture, it makes sense to compare it with a monolithic architecture. A monolithic architecture refers to a software design approach in which an entire software application is built as a single, autonomous unit. This means that all components of the application are tightly coupled; as such, they're interdependent and cannot function independently.As we discuss the comparison between monolithic and microservice architectures, keep in mind that we’re not comparing a simple WordPress store with a 100,000 user microservice-based application. We’re assuming that the implementation case is quite large and complex.Difficult to maintainOne major disadvantage of monolithic architecture is that it can make the application difficult to maintain and update as the application grows in complexity. Because all of the components are tightly packed together, any changes or updates to one part of the application can have unintended consequences for other parts of the application. This can make implementing new features or fixing bugs challenging without potentially breaking other application parts.Scalability issuesAnother disadvantage of monolithic architecture is that it can make the application difficult to scale. Because all components are tightly coupled, the entire application must be deployed and run as a single unit. If one part of the application is experiencing high demand, the entire application must be scaled up to accommodate the increased load. This can be costly and inefficient, especially in large and complex applications.Additionally, monolithic architecture can make it difficult to reuse code or components across different applications. Because all components are tightly coupled, they cannot be easily extracted and used in other applications. This can make it challenging to leverage existing code and components and result in duplication of effort and prolonged development time.Disadvantages of a microservice architectureAlthough microservice architecture offers a modern way of building applications, it has disadvantages. They include:Increased complexityMicroservice architecture can be more complex to implement and manage than monolithic architecture. It can be challenging to ensure all services work together seamlessly and to troubleshoot problems when they arise. Additionally, the increased number of services can make it even more challenging to maintain a consistent user experience across the entire application.Difficulty in testing and deploymentMonolithic architecture is easier to test and deploy than microservice architecture. This is because each service must be tested and deployed independently, which can be time-consuming and error-prone. Additionally, because services are independent and can be developed by different teams, there may be more variation in the quality and reliability of individual services, which can impair the overall quality and reliability of the application.Expensive to implementMicroservice architecture can be more expensive to implement and maintain than monolithic architecture. This is because it typically requires more infrastructure and support, such as more servers and additional tools for managing and coordinating the services. Additionally, using multiple services can result in increased network traffic and communication overhead, which can impact performance and add to the overall cost of the application.W﻿ant to know exactly how expensive your project would be to implement with a microservice architecture? Reach out to our team and we'll help you work through an estimate.Frequently asked questions1. What is microservice architecture?Microservice architecture is a software design pattern in which a large application is built as a collection of small, independent services. Each service is designed to be modular and to handle a specific function or set of related functions, and the services can be deployed and scaled independently of one another.2. Why use a microservice architecture?Microservice architectures offer several advantages over monolithic architectures, including improved scalability, flexibility, and reliability. Because each service is independently deployable, it's easier to scale specific services to meet the changing demands of the application and to replace or update individual services without affecting the entire system.3. How does a microservice architecture differ from a monolithic architecture?In a monolithic architecture, an application is built as a single, large codebase that includes all of the application's features and components. In contrast, a microservice architecture involves breaking the application into smaller, independent services that can be developed and deployed independently. This allows for greater flexibility and scalability, as well as the ability to use different technologies for different services.Wrapping upOverall, microservice architecture is a modern approach to building applications that involves breaking a large, monolithic application into smaller, independent services that can be developed, tested, and deployed independently. This architecture offers several benefits, including increased scalability, flexibility, and the ability to use different technologies for different services. It also allows for easier maintenance and faster deployment time. However, it can be expensive and complicated to implement, in addition to difficulties in managing the many services involved.Did you enjoy this article? Visit our blog for more!"
  },
  {
    "title": "Native App vs. Web App: Are Native Apps Still Relevant?",
    "plaintext": "Business owners that need custom software tend to get drawn into the allure of \"building an app\", meaning they're looking to build something that users can install on a mobile device.There are times when mobile apps (also called native apps) are a perfect choice. When a business comes in with a pre-defined solution, it can overlook the idea of building a web app, which may offer a much better solution.There's less difference in user experience between web and mobile apps than ever before, thanks to the invention of Progressive Web Application (PWA) architecture. So how do you decide which approach to take when investing in your new software?Although both application types serve the same purpose, native apps offer better performance but are more expensive to build than web apps. But there's more to consider than just performance and cost of development. Let's dig a little deeper into their differences.Before you dive any further in, please hear our quick pitch. Sign up for our monthly article summary. We chop out all the SEO fat and get right to the point. The newsletter is used to build relationships, never to sell. Sign up below.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is a native app?A native app is developed specifically for a particular platform, such as iOS or Android. This type of app usually requires the user to install it directly into their device from a platform-specific app store.Due to their inherent requirement to run on a device, native apps can run offline and utilize a device's built-in features and hardware, such as the camera, GPS, and other sensors. Interfacing with this hardware enables them to offer a fast and immersive user experience. Some features won't work without access to the device's hardware (i.e. fitness trackers, interactive map applications, virtual wallets).However, since they are platform-specific, native apps are usually built using the platform's programming language for which they'll be used. Kotlin and Java are used to build Android apps, while Swift language is used for iOS apps. Having to write multiple codebases makes it expensive to build native apps, as you'll need twice the development resources.The workaround is to create a hybrid application with a framework like Flutter or React Native that complies into two native codebases. This isn't a foolproof approach, but we want to avoid repeating topics we've already covered in detail. If you're interested in reading the pros and cons, check out our article comparing PWAs to native apps.Advantages of native appsHere are some compelling advantages of building native appsEnhanced securityOne of the key advantages of native apps is that they can offer enhanced security compared to other types of apps. This is because native apps are more tightly integrated with the platform they are built for, which allows them to take advantage of platform-specific security features.For example, on iOS, native apps can use the Secure Enclave, a hardware-based security feature, to protect sensitive data such as passwords and cryptographic keys. This makes it much more difficult for attackers to access this data, even if they can compromise the device itself.Additionally, native apps can be more easily reviewed and audited for security vulnerabilities since they are designed to follow the platform's guidelines and conventions. This can help identify and fix potential security issues before the app is released.Improved performanceNative apps tend to be fast and responsive since the code runs natively on a user's device. It can be fetched from a server or require loading time to display static content. Users can view content immediately when they open the app, whether online or offline.**It's worth noting that this is no longer unique to native apps, since PWAs can do this too.Native apps are specifically designed for a particular platform and can take full advantage of the device's hardware and software capabilities. For example, a native app on a smartphone can use the device's processor and memory to run more efficiently and provide faster performance.Tailored user experienceBecause native apps are designed specifically for a particular platform or device, they can take advantage of the device's features and capabilities, such as the camera, GPS, or accelerometer. This can make the user experience more intuitive and seamless, as the app can interact with the device more naturally and efficiently. Each operating system also has requirements around styling, interaction with keyboards,For example, a native mobile app might use the device's GPS to provide location-based services, such as showing the user nearby restaurants or stores. This can make the app more practical and convenient for the user, as they can access information and services that are relevant to their current location.Additionally, native apps can provide a more polished and professional user interface, as they are designed to integrate with a device's interface. This can make the app more visually appealing and easier to use, improving the overall user experience.Access to device featuresNative apps are developed specifically for a particular operating system, such as iOS or Android, which means they can more easily integrate with the features and functions of that system. For example, a native app on an iPhone can take advantage of features like Face ID or Apple Pay. This way, the app can offer more functionality. For example, an e-commerce app can access a user's payment info from Apple/Google Pay to complete a purchase without necessarily leaving the app.Offline accessibilityOffline accessibility is another advantage of native apps. Because native apps are installed directly on the device, they can function even when it is not connected to the internet. This can be useful for applications that need to be used in offline or low-connectivity environments, such as when the user is in a remote location.For example, a native app might allow users to access and view important information or data, such as a map or a document, even when they are not connected to the internet. This can make the app more useful and convenient for users, as they can access the information they need without worrying about having an internet connection.Additionally, offline accessibility can improve the performance and reliability of the app, as it does not have to rely on a constant internet connection to function properly. This can make the app more stable and less likely to crash or experience errors, improving the user experience.**This is another advantage that PWAs have replicated.Push notificationsNative apps can provide push notifications for sending updates, alerts, and other important information directly to users' devices. This can be useful for engaging with users and keeping them informed about the app's content and features.Disadvantages of native appsDespite their advantages, native apps have a few drawbacks which you should consider:High cost of developmentThe high cost of development for native apps is primarily due to the fact that native apps are developed specifically for a platform - iOS or Android. This means that a separate version of the app must be created for each platform. So you'll be forced to hire two teams of engineers to work on each version of the app, which can be time-consuming and expensive. For small businesses operating on a limited budget, the high cost of developing and maintaining native apps may reduce profit margins. Fortunately, with frameworks such as React Native and Flutter, you can build a cross-platform app that works on all devices and offers a native-like user experience. This can reduce the cost of development and maintenance.Limited reachNative apps are tied to a specific platform, so it can be a problem for businesses that want to reach as many potential users as possible. For example, if a business develops a native app for iOS, it will only be available to users of iOS devices, such as iPhones and iPads. This means that users of other platforms, such as Android or Windows, cannot access the app. As a result, the business may miss out on potential customers and revenue. Also, for your app to be downloaded, you may have to actively invest in marketing it to your target audience to prompt them to download it.Lack of flexibilitySince native apps are tailored to specific platforms' unique features and capabilities, it can be challenging to update or add new features. The updating process is usually long and may involve downtime. This lack of flexibility denies businesses the opportunity to iterate quickly with the changing business and customer needs.Dependence on app storesNative apps can only be downloaded from their respective apps store. Unfortunately, app stores are crowded and competitive, making it difficult for users to find and download the app. In some cases, you may even have to invest in marketing your app to increase its visibility on the app store – this adds to your overall budget. Additionally, app stores take a cut of the revenue generated by the app, which can be a disadvantage for businesses looking to maximize their profits.Corporate restrictionsSince native apps need to be deployed through Apple's App store and Google's Play Store, the application needs to adhere to their guidelines. Apple places restrictions around \"internal\" applications being released on the app store that aren't intended for public use. There are ways around this, but they're expensive, clunky and time-consuming.Code changes require updatesAnytime a bug fix or minor tweak is implemented, users need to download a new version of the app. If you're in the middle of fast-paced fixes, being forced to go through the deployment and download process can feel super inefficient and frustrating.Commission & feesIf you're planning to make money from your application, then be prepared to cough up a decent commission. Apple takes a whopping 30% commission on any sales made through its platform. Google's rate is slightly kinder at 15%.Now let's have a look at web applications.What is a web application?A web app, also known as a web-based or web application, is a software application accessed and used through a web browser. So, unlike a native app, you don't necessarily need to download or install it. Web apps are typically developed using web technologies, such as HTML, CSS, and JavaScript. Since they are not tied to a specific platform or device, web apps can be accessed from any device with a web browser and an internet connection, regardless of the operating system. This makes them highly portable and allows them to be used on many devices, including smartphones, tablets, and desktop computers. They're a popular choice for businesses and organizations that want to provide their users with easy access to their services.Advantages of web appsLower development and maintenance costWeb apps are less expensive to develop and maintain since they aren't platform-specific. As such, a single codebase can run on all platforms and devices. So you can hire a small team of developers to build your app. The development process is also faster than building a native app, which translates to fast time-to-market.Additionally, because web apps are accessed via a web browser, they do not have to be downloaded and installed from an app store, which can save on costs associated with app store fees and other charges.Ease of accessibilitySince web apps are accessed via a web browser, they can be used on any device with a web browser and an internet connection. This makes them highly accessible and allows users to access the app from any device, regardless of platform or operating system. Also, since web apps are essentially websites, the content can be indexed by search engines and displayed on the results page. This helps increase your brand visibility.Highly flexibleWeb apps are not tied to a specific platform or device; as such, they are highly flexible and can be easily adapted to changing user needs or technology. This makes it easier for businesses to update and improve their app over time.Simpler marketingWeb applications lend themselves to search engine optimization and advertising in a more natural way than native apps. There's no point where the user is asked to pay for, and download, an application to their device. It's also easier to write blog content on a website that's seamlessly integrated with a web application.Composability and extensiabilityThe MACH trend (Microservices, API-first, Cloud native & Headless) has swept the world of enterprise web applications over the past few years. The idea behind this approach is to build an application composed of many \"microservices\", or self-contained applications that specialise in doing things really well.Integrating services like this rather than trying to build all the functionality within the codebase means you can extend the application with new services quickly. Adding a new AI-powered product recommendation engine becomes weeks of development instead of months or years.Disadvantages of web appsLimited access to native hardwareThis is a bold claim, but the only disadvantage to building a web application over a native app is the limited access to native hardware.Web applications don't have the same unrestricted access to a mobile device's features like camera, GPS, near field communication, and push notifications. The API for some hardware features are exposed, but not all of them, and not on all devices.For example, web applications can't access push notifications on Apple devices (Apple says this feature will be available in 2023). Due to the lack of hardware access, it's sometimes necessary to create workarounds, resulting in certain tasks being performed inefficiently due to the overhead of running in the browser.As a result, web applications may be limited in their tasks and may not be suitable for certain types of workflows. This disadvantage is a complete show-stopper for some app ideas.In the past, it was possible to argue that web applications were also at a disadvantage in areas like security, performance, offline access and user experience. There are still some benefits to native apps in these areas, but it's minor at best. PWAs and static rendering techniques through cutting-edge frameworks like Next.js have brought web applications to a relatively even playing field.Frequently asked questionsQ: What is the difference between a native app and a web app?A: A native app is a software application developed specifically for a particular platform or device, such as iOS or Android. On the other hand, a web app is a software application that runs in a web browser and is accessed over the internet.Q: Can a web app replace a native app?A: In some cases, a web app may be able to perform the same tasks as a native app and may even provide a similar user experience. However, native apps have access to some hardware features that web applications do not (not yet, anyway!).Key takeawayOverall, native and web apps are valuable tools for delivering software applications to users. Web apps are easy to develop and maintain and can be accessed from any device. No app store claims a commission; they're easier to market and have greater potential for extensibility. The only situation where a native app makes more sense than a web app is if the access device hardware is critical to the application's function."
  },
  {
    "title": "PWA vs SPA - Choosing the right architecture",
    "plaintext": "Modern JavaScript frameworks like React, Angular and Vue brought with them a host of modernisations to how websites and web applications can be architected. Single Page Applications (SPAs) and Progressive Web Applications (PWAs) are two of the big buzz terms that are always brought up by our new clients.Our clients typically understand the benefits of these architectures; they're used to achieve high performance and a rich customer experience. They see that plenty of larger organisations have implemented their latest service as a PWA or SPA and jump to the conclusion that this is the \"best\" approach for their upcoming project.Often, they're correct. PWAs in particular have been an excellent solution for a number of our clients who initially wanted to build a mobile app but didn't have the budget to commit to native development.Neither PWAs nor SPAs are a golden bullet that can be adopted for every use case. They’re uniquely suited to different use cases.The goal of this article is to unpack the benefits of both architectures and outline the kinds of projects when they make the most sense.Figuring out the best technology and architecture choices is difficult but there's a standard process our team follows called Product Roadmapping. The result is a plan that lists everything required to turn your idea into a MVP. Check out an example of a Product Roadmap below.Don't take our word for it. Get a finished Roadmap.Get a copy of the actual roadmap (anonymised) that drove the development of a new platform and a 500% conversion rate increase for one of our clients.DownloadWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is a PWA?A progressive web app (PWA) is a type of web app that uses modern web technologies to deliver a native app-like experience to users. The concept was introduced in 2015 by Google to enable businesses to offer improved user experience across devices using a single codebase.PWAs are designed to work on any device, including smartphones, tablets, and desktops, and can be accessed through a web browser. They're designed to be reliable, fast, and engaging, and offer features such as offline support and push notifications.PWAs are built using standard web technologies such as HTML, CSS, and JavaScript, which makes them easier to develop and maintain than native apps. Since they are essentially websites, they are indexed by search engines and shared through URLs, making them more discoverable and accessible than native apps.Advantages of PWAsFast and reliable performanceProgressive Web Apps (PWAs) are designed to offer a fast and seamless experience to users. They use a variety of techniques to optimize their performance, including caching, service workers, minification and compression, and code splitting. Caching allows PWAs to store assets such as HTML, CSS, and JavaScript files on the user's device, which can reduce the amount of data that needs to be downloaded and improve loading times.Service workers enable PWAs to work offline or in low-quality network conditions by intercepting network requests and caching data and assets. Minification and compression reduce the size of assets such as HTML, CSS, and JavaScript files, which can also improve loading times. Code splitting allows PWAs to load only the code that is needed for the current view or route, rather than loading all of the code upfront, which can reduce the initial load time of the app and improve overall performance.Cost-effective to buildOne of the main advantages of Progressive Web Apps (PWAs) is that they are more cost-effective to develop and maintain than native mobile apps. This is because PWAs are built using web technologies (HTML, CSS, and JavaScript). So, unlike native apps, you don’t need to build an app for each native platform – Android and iOS. This saves on time and resources spent on the development process, allowing you to ship your product faster without breaking the bank. It also helps lower the maintenance costs as you'll be maintaining one app as opposed to native apps.Additionally, since PWAs are accessible through search engines, you don’t have to upload them to app stores. This saves you on app store fees and the associated stringent review process.Offline functionalitySimilar to native apps, PWAs can be accessed offline. This feature allows for session continuity by enabling users to view content and complete certain tasks, even when they aren’t connected to the internet or when experiencing slow unstable connection.The offline functionality is enabled by the service workers, which are essentially scripts that run in the background and intercept network requests. The service workers can store resources locally, allowing the app to access them even when the user is offline.Automatic updatesPWAs enable you to roll out automatic updates without requiring the user to manually update their app from the app store. When you update your PWA, the new version is automatically downloaded in the background. This way, the next time the user launches the app, they'll have the latest version.Automatic updates allow you to implement patches immediately which reduces the risk of security vulnerabilities and improves the overall user experience.This seems like a peripheral benefit, but repeatedly asking a client to download a new version of a mobile app that's in development is a massive pain in the butt!Quick installationUnlike native apps, a user doesn't have to visit the app store and manually search, download and install a PWA. It's a website, meaning it can appear on SERPs, and when a user visits the page for the first time, they’ll be prompted to download the app on the device. Once installed, the PWA appears as a web shortcut on the user’s home screen. The quick installation process improves your app's discoverability and customer experience.There's more to say about PWAs, but we've covered the details in our article that highlights the pros and cons of PWAs.Now that we've outlined the basics of PWAs, let's take a look at SPAs.What is a SPA?A single-page application (SPA) is a type of web application that loads a single HTML page whose content updates dynamically as the user interacts with the app. In other words, the content isn’t entirely downloaded from the server, it is rendered as the user scrolls.It’s pretty similar to how you view your social media feed/timeline. This way, as the user navigates the site, only the data is updated without necessarily loading the entire page. This ensures fast interactions and a seamless user experience.SPAs are built using JavaScript frameworks, such as React or Angular, which allow developers to create interactive and responsive user interfaces.Advantages of SPAsImproved performanceSPAs only load a single HTML page and then use JavaScript to dynamically update the page with new data as needed. This eliminates the need for the server to generate a new page for each request, resulting in faster response times and a smoother user experience.In contrast, with a traditional web application, each user request requires the server to process the request, retrieve the necessary data, and generate a new HTML page to be sent back to the client. This process can be time-consuming, especially for applications with a large amount of data or complex server-side logic.Easy to buildOne advantage of single-page applications (SPAs) is that they are often easier to build than traditional web applications. This is because SPAs only require a single codebase, rather than separate codebases for each page. As a result, it saves time and resources for businesses, allowing them to focus on building and improving the application rather than dealing with the overhead of managing multiple codebases.In a traditional web application, each page is a separate entity and requires its own HTML, CSS, and JavaScript code. This can make it difficult to coordinate changes between pages and can increase the overall complexity of the application.Offline functionalitySimilar to PWAs, SPAs use service workers to cache data and allow the application to continue functioning when the user is offline. This can be especially useful for businesses that need to support users in areas with unreliable or non-existent internet connections.PWA vs SPA: Which one should you choose?Having looked at each technology, let's compare them using based on the following criteriaSecuritySPAs are less secure than PWAs as they are vulnerable to cross-site scripting (XSS). XSS attacks occur when an attacker injects malicious code into a web page that is executed by the victim's browser. This can allow the attacker to steal sensitive information or perform other malicious actions. PWAs on the other hand have fewer security risks since all requests go through HTTPS.  This help protects the privacy and integrity of the data being transmitted.SEOPWAs are designed are websites and as such, they are discoverable and crawlable by search engines. Search engines can index the content of a PWA, and users can find the PWA by searching for relevant keywords.SPAs, on the other hand, are web applications that are designed to be fast and responsive. They are built using JavaScript and are intended to provide a smooth and seamless user experience. However, since SPAs only load a single HTML page and dynamically update the page with new content as the user navigates, they are more difficult for search engines to index and rank. Search engines rely on the structure and content of HTML pages to understand the relevance and context of web pages.Development costDeveloping a PWA tends to be more expensive than developing a SPA because it involves building both a server-side application and a client-side application. A PWA requires a back-end server to handle server-side rendering, data storage, and other server-side tasks, which can add to the development cost.On the other hand, an SPA is a client-side application that is loaded entirely from the client and does not require a back-end server. As a result, the development cost for a SPA may be lower than that of a PWA, especially for simple apps with minimal server-side functionality.PerformancePWAs are generally faster and more responsive than traditional web apps because they are designed to be loaded from the server and then cache content for offline use. This means that the initial load time may be slightly longer, but subsequent loads will be faster because the app can retrieve content from the cache rather than making a round trip to the server.SPAs are loaded entirely from the client and do not require a full-page refresh to update content. This can make the app feel more interactive and responsive, as users can navigate between different sections of the app without having to wait for the entire page to reload. However, SPAs may be slower than PWAs when it comes to initial load time, as they must download all of the necessary resources before the app can be rendered.But it’s important to note that both PWAs and SPAs can be optimized for performance through techniques such as code optimization, image optimization, and the use of caching and other performance-enhancing technologies.Maintenance and ease of updatePWAs are often easier to maintain and update since they are hosted on a server and updates can be rolled out centrally. This means that any updates or bug fixes can be made on the server and will be automatically reflected in the app for all users.SPAs, on the other hand, require updates to be deployed to each user's device individually. This can make maintenance and updates more time-consuming and costly, especially for apps with a large user base.However, both design patterns can be set up to use a continuous integration/continuous deployment (CI/CD) workflow, which can streamline the process of releasing updates and making code changes.Frequently asked questionsWhat is a progressive web application (PWA)?A progressive web application (PWA) is a type of web application that uses modern web technologies to provide a native-like experience to users. PWAs can be installed on a device like a native mobile or desktop app and can work offline, but they are accessed through a web browser rather than being downloaded from an app store.What is a single-page application (SPA)?A single-page application (SPA) is a type of web application that loads a single HTML page and then updates it dynamically as the user interacts with the app. SPAs can provide a smooth and seamless experience to users and can work offline, but they are typically served as standalone applications that must be downloaded and installed from an app store or other distribution platform.Can a SPA be converted into a PWA?Yes, it is possible to convert a SPA into a PWA by adding a service worker and using a web app manifest to make the application installable on a device like a native app. However, it may require some development effort to ensure that the PWA provides a seamless and native-like experience to users.Key TakeawaysProgressive Web Apps (PWAs) and Single Page Apps (SPAs) are both popular options for building modern web applications, but they differ in terms of performance, security, and maintenance. The right choice for your app will depend on the specific requirements of your application and the available resources.PWAs offer a more native-like experience for users, with features such as push notifications and offline support, and are often better for search engine optimization (SEO) since they are indexed by search engines like regular websites. However, they may require more development resources and expertise to build and can be more expensive to maintain and update because they involve a back-end server.SPAs, on the other hand, offer a more seamless and fluid experience for users because they do not require full-page refreshes to update content. They are generally easier to develop and can be faster to load initially, but they may be slower to update and may be more difficult for search engines to crawl and index."
  },
  {
    "title": "Web Application vs Enterprise Application - Are they the same?",
    "plaintext": "Once upon a time, enterprise applications operated in a very specific way. They ran from a self-managed server somewhere in the office and often required a client to be installed on each machine. However, this definition hasn't been accurate for a while.  These days, the cloud dominates everything. Enterprise applications run on the cloud because it's easier to scale globally, avoids the need to do on-site troubleshooting, and opens up a range of modern tools.So what is the difference between an \"enterprise application\" and a \"web application\"? Technically, a web application can be an enterprise application, but an enterprise application doesn't have to be a web application.There are a handful of other differences to expand on that we're going to cover in this article.What is an enterprise application?An enterprise application is a type of software that is designed specifically for large organizations and businesses. These applications are usually complex, with a wide range of features and functions that are meant to help businesses streamline their operations, improve efficiency, and make better decisions. Some examples of enterprise applications include human resources management systems, customer relationship management systems, and supply chain management systems.Enterprise applications are typically designed to be used by a large number of employees within an organization, and are often integrated with other business systems and processes. They are also typically more expensive and require more maintenance than other types of software, due to their complexity and the large number of users.Defining features of enterprise applications:Complex architectureSince they process large amounts of data, enterprise apps have a complex architecture than other types of software.There's a trend of businesses moving towards a MACH (Microservice, API-first, Cloud native and Headless) architecture, allowing them to stay flexible but also adding complexity to their site's construction. The distributed design means that different parts of the application are run on different servers or devices.This approach can improve scalability and performance, as different components can be scaled up or down as needed. While the modular design allows for the application to be broken down into self-contained components that can be developed and maintained independently. This makes it easier to update and maintain the application, as changes can be made to individual components without affecting the entire system.CustomizableEnterprise applications are often highly customizable to meet the specific needs and requirements of an organization. This may include the ability to integrate with other systems, add or remove features, and adjust the user interface. For example, an enterprise application for managing customer relationships might allow users to customize the layout of the dashboard, add new fields to forms, or integrate with other business systems.ScalabilityEnterprise applications need to be able to handle large amounts of data and users and be able to scale up or down as needed. This is important because an organization's needs may change over time, and the application needs to be able to handle an increase or decrease in usage. For example, an enterprise application for managing orders may need to be able to handle a sudden increase in orders during the peak season.Integration with other systemsEnterprise applications can be integrated with other systems and software used by an organization, such as CRM, ERP, and HR systems. This allows the application to share data and functionality with other systems, which can improve efficiency and reduce the need for manual data entry.Regular Maintenance and updatesEnterprise applications require ongoing maintenance and updates to fix bugs, add new features, and ensure that the application remains secure and reliable. This may include patches, version updates, and new releases.Workflow and process managementEnterprise applications may include features for automating and managing business processes and workflow. For example, an enterprise application for managing customer orders might include a workflow for processing and fulfilling orders, with different steps being triggered based on certain conditions.Analytics and reportingEnterprise applications may include tools for analyzing and reporting on data, such as dashboards and custom reporting. These tools can help organizations to track performance, identify trends, and make data-driven decisions.Pros of enterprise applications:CustomizabilityEnterprise applications are often highly customizable to meet the specific needs and requirements of an organization. This can make them more effective at addressing the unique challenges and needs of an organization.Advanced security measuresEnterprise applications may include advanced security measures to protect sensitive data and processes, which can help to ensure the confidentiality and integrity of data.Robust user managementEnterprise applications often have complex user management systems to handle permissions, roles, and access controls for different users within an organization, which can help to ensure that users have the appropriate level of access to data and functionality.Cons of enterprise applications:High costEnterprise applications may be more expensive to develop and implement compared to web applications or other software. This can make them less cost-effective for organizations with limited budgets.Complex architectureThe inherent complex architecture of enterprise applications makes it difficult to deploy and maintain these types of applications. This can increase the time and resources required to support the application. Usually, enterprise applications are built using two major design patterns – modular and distributed architecture.With the modular design, the app is divided into smaller, self-contained components that can be developed and maintained independently. This can make it easier to update and maintain the application, as changes can be made to individual components without affecting the entire system.In the distributed architecture, different parts of the application are run on different servers or devices. This design pattern is optimized for scalability and performance, as different components can be scaled up or down as needed.Limited accessibilityEnterprise applications may be limited to use by authorized users within an organization, which can limit their accessibility compared to web applications that can be accessed by anyone with an internetEnjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is a web application?A web application is a software program that runs on a web server and is accessed over the internet through a web browser. It’s designed to be used through a web browser, which means that it can be accessed from any device with an internet connection, without necessarily having to install it.Web applications are built using a variety of technologies, including HTML, CSS, and JavaScript for the user interface, and server-side languages such as PHP, Python, and Ruby for the backend. They may also use databases to store and manage data. They enable businesses to establish an online presence and expand their market reach.Web application featuresAccessibilityWeb applications are designed to be accessed from any device with an internet connection, which makes them highly portable and convenient to use. This means that users can access a web application from any device with a web browser, such as a desktop computer, laptop, smartphone, or tablet. This can be especially useful for users who need to access the application while on the go or from multiple devices.Multi-platform compatibilityWeb applications are typically compatible with a wide range of devices and web browsers, which makes them accessible to a larger audience. This means that users can access a web application from different types of devices and operating systems, as long as they have a web browser installed.Ease of useWeb applications are often designed with a focus on usability, which means that they are easy to use and navigate. This can make them more user-friendly and appealing to a wider audience.Low cost (relatively)Web applications may have a lower cost compared to traditional desktop software, as users do not need to purchase and install software on their devices. This can make them more cost-effective for users, as they do not need to pay for software licenses or upgrade fees.Automatic updatesWeb applications may automatically update with new features and bug fixes, which can be more convenient for users compared to installing updates manually. This can help to ensure that users always have the latest version of the application and can take advantage of new features as they are released.Cloud-basedWeb applications are often based in the cloud, which means that they are accessed and run over the internet rather than on a specific device. This can make them more reliable and scalable, as users do not need to worry about installing or maintaining software on their own device.Responsive designWeb applications are designed to be responsive, which means that they can adapt to different screen sizes and devices, such as smartphones and tablets. This can make them easier to use on different types of devices and improve the user experience.Differences between enterprise and web applicationsThere are several key differences between enterprise applications and web applications:DeploymentEnterprise applications may be installed on a local server or accessed through a private network, while web applications are accessed over the internet and run on a web server. This means that enterprise applications may be more difficult to deploy and require more infrastructure and resources, while web applications can be accessed from any device with an internet connection.ScalabilityEnterprise applications may need to be able to scale up or down to meet the specific needs of an organization, while web applications are typically designed to handle a large number of users. This means that enterprise applications may require more resources and infrastructure to support larger numbers of users, while web applications can be more easily scaled up to meet increased demand.SecurityEnterprise applications often have more robust security measures in place compared to web applications, as they are dealing with sensitive data and processes. Enterprise applications may include authentication, authorization, and encryption to protect data and prevent unauthorized access, while web applications may have fewer security measures in place.Integration with other systemsEnterprise applications are often designed to integrate with a wide range of other systems and software used by an organization, while web applications may have limited integration with other systems. This means that enterprise applications can more easily share data and functionality with other systems, which can improve efficiency and reduce the need for manual data entry.CustomizabilityEnterprise applications are often highly customizable to meet the specific needs and requirements of an organization, while web applications are typically less customizable. This means that enterprise applications can be more easily tailored to the specific needs of an organization, while web applications may be more limited in terms of the features and functionality that can be added or removed.Maintenance and updatesEnterprise applications may require more extensive testing and planning before updates are released, while web applications may have more frequent updates and maintenance. This can make it more challenging to keep enterprise applications up to date, as changes may need to be carefully coordinated with other systems and processes. However, the more frequent updates of web applications can also make them more nimble and able to adapt to changing needs and requirements more quickly.Frequently asked questionsQ: What are some common examples of enterprise applications?A: Here are some examples of enterprise applications: * Customer relationship management (CRM) systems * Enterprise resource planning (ERP) systems * Human resources management systems * Supply chain management systems * Financial management systems * Project management systems   Q: Can enterprise applications be customized to meet the specific needs of an organization?Yes, enterprise applications can often be customized to meet the specific needs and requirements of an organization. Enterprise applications are designed to be highly flexible and scalable and can be tailored to the unique processes and needs of an organization. This can include customizing the user interface, adding or removing features and functionality, and integrating with other systems and software used by the organization. Customization of enterprise applications is typically done by the vendor or a third-party developer with specialized expertise.Wrapping upOverall, enterprise applications and web applications can be used to support the operations and processes of organizations. However, they have several key differences, including the way they are deployed, their scalability and security measures, their integration with other systems, and their customizability.Enterprise applications are typically designed for use by large organizations, such as corporations, government agencies, and educational institutions, and are customized to meet the specific needs and requirements of these organizations. Web applications, on the other hand, are accessed over the internet and are designed for a wider audience. Both types of applications have their own unique benefits and drawbacks, and the best choice for an organization will depend on its specific needs and requirements."
  },
  {
    "title": "How To Rebrand: Our Step-By-Step Breakdown With Examples",
    "plaintext": "When we started Clean Commit, the initial stages were treated like a 100-meter sprint. We needed to get our branding done immediately, so we had something to show potential clients. Now that we’re a few years down the track, our brand isn’t conveying who our business is.Rebranding has now become a priority. Our business has grown; we’re targeting larger and more competitive projects and need our brand to help get this message across to potential customers.A handful of our clients have become stuck in the same position. Since we’re helping them rebuild the technology they’ve outgrown, they assume we have the answers about rebranding. Until now, we haven’t been able to help.We wanted to share the lessons we’ve learned in rebranding Clean Commit and unpack how we approached the task.Here’s the structure that we followed for our rebranding process: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSThe resultsYou can see the results of our rebranding by poking around our site. More importantly, we’re on the way to achieving the goals we set out in the first article; Defining Rebranding Goals & Brand Strategy - A Complete Guide✅ Create a conceptual logo that distances us from being “coders”✅ Define a clear brand story that will run through our copy✅ Rewrite our copy with a consistent voice✅ Reorganise our website structure to focus on actions🟠 Grow our email list to 1,000 users over the next 12 months🟠 Increase our lead acquisition conversion rate by 100%The first four parts of our goals have been accomplished. Our branding and messaging are a million times clearer than it was on our old site. Our website structure is cleaner and easier for users to interpret and navigate. Google has noticed this change too:The spike in traffic coincided with our rebranding. The results were mostly due to a content-writing campaign we’ve been running over the past few months but were further spurred on by the reorganisation of our website.Our email goal is still a while away yet.The lack of progress here is expected at this stage. We haven’t fully set up our newsletter automation or added CTAs through our content, so there’s no easy path for a user to sign up. This will be the next step in our process. If you’re enjoying the content, feel free to sign up for our newsletter below. We’re about to research and write up a breakdown of popular headless products - it’ll be a super valuable series for anyone in tech or involved in managing an online product.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe final goal was to increase our conversion rate by 100%. Since rebranding, these are our numbers:Site entries: 12,400Contact page entries: 124Form submissions: 31This brings our overall conversion rate to 0.25%, up from where it started at 0.10%. The conversion rate for users landing on our contact form is 25%, up from 10%.These numbers are still pretty average, but that’s the nature of niche service companies. We need to build a relationship with our new clients over the course of a couple of months.Wrapping upRebranding is absolutely worth the time and effort if you have clear goals. For our team, it was increased traffic and conversion rate. We needed to rebrand to make our messaging and UI clearer and get the most out of our existing content to spur on those changes.We’re super happy with the results and moving onto the new stage of polishing our design and content.If you’re looking for advice on your own rebranding exercise, feel free to drop us a line or leave a comment below."
  },
  {
    "title": "Defining Rebranding Goals & Brand Strategy - A Complete Guide",
    "plaintext": "There are a lot of questions to ask when rebranding. It can be a time-consuming and expensive exercise to get wrong. In our case, this would mean coughing up a bunch of money and potentially losing some big-ticket clients.This was enough motivation for us to figure out what we were really trying to do before we started our complete brand overhaul.Our first step was to work out a broader brand strategy. Our strategy ended up being a detailed look at the problems with our current brand identity, setting goals and defining outcomes and working out how we were going to get across the line.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSThings to consider when rebranding a companyWe haven't rebranded before and we're not rebranding experts. But as professional problem solvers, if there's one thing we're good at, it's thoroughly thinking through all the options. The image below is the best way I can sum up just how deep our planning goes.These are the things we felt were the most important to think through before pulling the trigger on our rebrand: * What do we like about our current brand? * What are the problems with our current branding? * What should our logo say about us? * How will our new brand identity communicate what we do? * How will we achieve brand recognition?We were also planning on a website redesign to reflect our new brand.Even though a website redesign isn't technically the same as \"rebranding\", we're treating it as part of the process. These are the considerations for the new website: * How can we encourage visitors to reach out to us? * Is our copy persuasive? * Are we telling an engaging brand story? * Does our website speak to our target markets? * Does our web design \"wow\" our customers?The Clean Commit team are a critical bunch. As we were thinking through the considerations for our rebranding we were also auditing our current branding. We all agreed that our brand identity was confusing and lacked the instant recognition we're chasing.It's easy enough to point out what's going wrong and make a plan for improvement, but it led us to ask the question...Why don't you join our newsletter?Sign up and be the first to know about our exclusive articles and free resources.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhen will we consider Clean Commit a \"successful brand\"?Brand reputation is hard to measure, and we couldn't find a good scientific answer to this question. Instead, we figured these were the things we wanted to achieve that would define us as having a successful brand: * Easily recognised and consistent visual brand identity * Aligning our website, social media and written documentation with clear brand guidelines * Doing an amazing job on our website redesign and having leads ask us to create them a website just like ours * Picking new brand colours and visual elements that just look good * Implementing a brand story that new leads mention in their contact form submissions * Writing copy that successfully speaks to our customer profileSome of these points will be impossible to measure accurately. We'll never really know if the brand's voice is consistent and truly speaking to our target markets. Just because we objectively say we've passed the test, we felt it was important to have some kind of measure of success before we moved on.Problems with our current brand identityFiguring out concrete goals for something as conceptual as branding is something we were struggling with. However, we were pretty clear on the problems in our current branding. We figured fixing these problems would be a great start to our new branding strategy.These are the issues we identified:Poorly defined nicheIf you think not having a well-defined niche isn’t a problem for a brand's identity, you’re wrong. Across the first few years of our operation, we tried to do everything for everyone. We were jumping at whatever work we could get our hands on, which meant spreading our skills thin and not getting really good at solving one line of problems.When people asked what we did, we would say web development. But that’s a poor answer and not a niche. If anything, it’s a commodity or generally a profession. A small company can’t build a recognisable and memorable brand around such a broad service.We needed to be able to tell new customers and visitors how we could help them in one sentence so they instantly understood if we can solve their problems.Picking a niche is difficult, and it took us many months to work out. Like everything else we do, there was a method behind the madness, which I’ve written about separately.No clear brand storyThe other problem with not having a niche is being unable to tell a brand story. Great brand identities focus on the customer. They need to be relatable so readers can identify with their position. Since we hadn’t figured out what problem we were solving, we couldn’t paint a picture for readers that they would relate to.Current logo and brand assets paint us as a utility rather than consultantsMy business partner, WK, who spends his time working as a full-stack developer, created our logo in less than an hour. I think he did a great job. The logo looked great and was easily recognisable.Despite this, it had a couple of problems; 1. Half of the development agencies on earth use some kind of code-related logo 2. We don’t want to be associated with coding resources, because that’s a race to the bottomThe second point is the most important one. Our old brand image painted us as a commodity, or supplier of resources. The kind of development shop you could write to and ask if they have a React developer available for four weeks, almost like you’re hiring a pair of skis.Hiring out one of our React developers for four weeks may be the end result of an engagement, but we need to make that recommendation after careful analysis of the client’s situation.Our new logo needs to distance us from this model with something more conceptual to reflect the fact that we’re consultants that help businesses balance their technology equations.Copy lacks a consistent voiceOur content had been written as a piecemeal process, one page at a time, across a couple of years. The messaging consistency was all over the place, creating a chaotic reading experience.Keeping the voice consistent across our website and written content is a subtle problem, but one that affects how persuasive and memorable we are as a brand.Website layout and design are not focused on our target audienceThe layout and focus of our website aren’t really “branding” by the letter of the law, but it’s a problem we wanted to fix at the same time as our rebranding. Our site is, after all, the main vehicle for delivering our branding to visitors.Our site looks pretty good, and the design itself is solid. It doesn’t showcase how competent we are as a development agency, lacking animations and complex interface features, but that’s a problem that could be overcome in time.The bigger issue is that when we assembled the site, it wasn’t focused on achieving any particular goal. We had thrown a few calls to action into the content to get potential customers to reach out to us, but the approach was anything but scientific.We needed a site that told a story with its design and content layout, pushing new customers to take the next step in engaging with our brand.Setting our goals for a strong brand identityBy the time we came to lay down our rebranding goals, we had defined our niche: we help businesses that have outgrown their technical stack of web tools. Our new branding exercise would focus on helping customers understand what we could do for them.Most of the “goals” we ended up with are more like outcomes or objectives. Besides the increase in leads and email list growth, there is no direct way to measure the other targets. Regardless, this is what we ended up with: 1. Create a conceptual logo that distances us from being “coders” 2. Define a clear brand story that will run through our copy 3. Rewrite our copy with a consistent voice 4. Reorganise our website structure to focus on actions 5. Grow our email list to 1,000 users over the next 12 months 6. Increase our lead acquisition conversion rate by 100%I’ve already explained #1 through #4. These goals are focused on fixing problems in our current branding.#5 and #6 are the money items and require some explanation.Grow our email listWe built a small email list about 12 months ago. It grew to around 650 people before we abandoned its maintenance.Why would we get that far and give up? Because the approach we took to build the list sucked, and the people who opted in didn’t have any investment in what we were doing.Most of the opt-ins came from an advertising campaign that was geared to push potential clients to convert straight away. We offered them a couple of mediocre lead magnets like pricing guides and website templates in exchange for their email address. They were then greeted with a 5-part series of emails that tried to move them further down the funnel.In hindsight, it was poorly thought out, and the clients we did acquire from the process were highly price sensitive.In the end, it was an expensive learning experience.This time around, we’re going to build our email list the right way, with people who are interested in coming on the learning journey with us. We won’t secretly be trying to sell to anyone who opts in. The goal is to build relationships and offer value over time.The launch of our newly branded website will be the engine for this growth. Our new website content and design will be focused on getting visitors to sign up for our newsletter or download one of our helpful project planning resources.We’ll probably end up adjusting the target as we go, but our initial goal is 1,000 subscribers across a 12-month period.This isn’t a finger-in-the-air metric.Our website currently receives between 2,000 and 3,000 visitors a month. We expect to convert around 2% to 3% of visitors into email subscribers. Our monthly website visits should rise as we build our backlink profile and write interesting content (like this!).3,000 users per month x 0.05% conversion rate x 12 months = 150 opt-ins.There’s no point in setting a low target, so we’re shooting a bit higher than where our estimates would see us land.If you’re enjoying following our journey and want to hear more stories about the lessons we’re learning with rebranding, website design and development, and picking the right tools to succeed, then why not help us reach our 1,000-user target right now 🙂. We use this email list to build relationships with potential clients - we don't sell stuff.Increase our lead acquisition conversion rate by 100%As a service-based company that gets leads from various places, we’ve never had a good hard think about our website conversion rate and the factors that might be impacting it.We went through an exercise about a month back to figure out what percentage of website visitors end up submitting a legitimate contact form enquiry. The number we landed on is 0.6%.If you think that sound like a really small number… then you would be right. It’s too small.Since we’re trying a new website structure and focusing on more specific problem-solving, we want to increase this conversion rate by 100% to 1.2%.The main ways we plan on increasing this number are: * Clearer copy that explains the problems we solve * Writing high-quality, less generic content * Keeping our audience warm by providing valuable assets * Giving users easier ways to reach out to us (contact forms in places that make more sense) * Split testing language and design on all parts of the opt-in funnelWhile we expect the new branding and website design to create some “wow” factor that will result in higher contact form submission rates, it’s unlikely to get us all the way to our goal. We’ll need to continue taking small steps to optimise our funnel.Timelines for our new brand identityThe last part of creating our brand strategy was figuring out how long we needed to get everything done.While we have a full-time designer in-house, he's not a branding guy, so we needed to account for finding a specialist to help with some of the visual identity creation.This is roughly how we planned the rebranding timeframe:Logo, typograph and style guide (6 weeks) * Find a branding specialist (week 1 - 2) * First version of logo, fonts and colours (week 3 - 4) * Finalised logo, fonts and colours (week 5 - 6)Website planning (4 weeks) * Roadmapping (week 1 ) * Card sorting and figuring out sitemap (week 2) * Wireframing (week 3 - 4)Writing content (4 weeks) * Writing content & variations (week 1 - 4) * Adding content to wireframes (week 4)High fidelity website design (4 weeks) * Create website in Figma (week 5 - 8)Build website (2 weeks) * Develop website (week 9) * Testing & release (week 10)These timeframes seem optimistic for a company that's actively managing dozens of support websites and applications while also working on a handful of major projects. Unfortunately, we need to soldier ahead despite the workload. Getting more done in less time is part of the agency lifestyle.Wrapping upWe’re happy with the goals and objectives of our rebranding exercise. It’s not just a case of making a new logo, some nice colours and slapping together a cool-looking website. We need results, and creating a more cohesive brand that solves a problem will help us get there.To identify the most meaningful goals we first had to identify the problems in our current branding that have been holding us back. The biggest problem with our current branding can be summarised as poorly expressing how we can help customers.Our new brand image will distance us from this issue. We’re putting intentional thought into a visual identity and written communication that will help visitors see the value in working with us. Ultimately, we want this to build a 1,000-person strong email list and increase our contact form submission rate by 100% within the next 12 months.We’ll provide monthly updates on the steps we’re taking to ensure we hit these targets with detail on what’s working and what’s failed. If you’re in a similar position to us or interested in keeping up to date with how things are going, then join our newsletter.Next stepsThe next step in our rebranding process is picking our niche. This is something we should have figured out at the start, but better late than never.You can read the article on how we figured out which niche to commit to here."
  },
  {
    "title": "How To Pick Your Niche - How My Software Agency Solved This Problem",
    "plaintext": "One of the first pieces of advice any seasoned agency owner will tell you is that your business will not thrive unless you pick a niche. It’s good advice, but it doesn’t mean much when you first start out as a freelancer or agency. Getting the first handful of clients through the door can be the hardest period of time and the urge to say “yes, we can do that” is strong.I was the main culprit. As the guy responsible for bringing in business, ignoring the fact that we hadn’t niched down. The problem was that we were a young business with an unreliable pipeline. It made complete sense to take any kind of business we could find.We’re a web development company, but during the early stages of business, we stretched our services from copywriting to graphic design, SEO and mobile app development.We struggled with this problem for three years. I trawled Reddit forums, blog articles, took Udemy courses, watched a ton of YouTube videos, and read a handful of books looking for concrete answers.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSProblems of running a niche-less online businessThe two biggest issues our team have noticed running a business that doesn't focus on a single niche market is: 1. Sloppy efficiency and slow delivery 2. Not knowing our target audienceThese issues strongly affected our ability to grow as a company because they hampered our service quality and chances of landing new clients.Sloppy efficiency and slow deliveryCatering to every kind of project meant that the lessons we learned along the way weren't retained for the next job. Every time we'd land a new client, it was like we were starting our learning from the beginning.Without getting better at one kind of job, we would end with sloppy efficiency. Tasks would take longer than they needed to, resulting in a project that ran over time.In the early days of running Clean Commit, most of our projects were fixed price. So not only were our clients annoyed that the project had run over time, we were lowering our effective hourly rate.Not knowing our target audienceNot knowing exactly who we were selling to ended in us writing super generic sales copy. Trying to explain how we help our clients with unclear arguments ended up leaving new visitors unsure if they should bring their problems to us.It also coloured the topics of our blog. At the start of our journey, we were writing articles on any old keyword that seemed to have high search volume. As a result, our blog answered some small one-off questions but didn't dive deep enough into the target market we were actually interested in.Without understanding our target audience, our digital marketing strategy was essentially a shotgun approach, spraying everything trying to see what we could hit.We wanted to become a more focused business. Rather than trying to compete with every other company in the mass market, our goal was to understand our chosen niche well enough that we could make them look for us.It's easy enough to understand that having a niche is good and not having one is bad. But we were no closer to picking what our agency would specialise in.How we found our niche - approaches that failedWe were actively trying to figure out our niche for over two years. Most of what we tried failed. Here's what we tried and why it didn't workBrainstorming niche ideasUsing brainstorming to find a profitable niche to focus on sounds like a good idea. The problem we found with this approach is that there's no way to measure or test the niches.We did a decent amount of keyword research and came up with some interesting niches like headless eCommerce, JAMstack website development, and Progressive Web Application development. In the end, our brainstormed ideas list was huge and we felt like most of the options could be viable.In hindsight, our problem was focusing on what we could do, rather than what problem we could solve for our target audience.Niche market examples we used for inspirationOur next approach was researching other companies in our space to see what was working for them. This is a great approach to feel terrible about your own progress. Finding other businesses that have dominated a niche that would have been a great fit for your own company is deflating!Bejamas are a great example of this approach. They had taken a strong stance on JAMstack development. They formed around the same time as us, and we watched them grow rapidly, bringing on recognisable clients.We never wanted to be Bejamas even though we respect the way they committed to their niche.What we learned from this approach is that other businesses have been where we are and figured the out the solution. And that we need to keep working on the problem.Half-commiting to a nicheAt one point in 2021 we decided that headless eCommerce was going to be our new niche. We wrote a handful of detailed articles about this emerging topic. * 50 Headless eCommerce examples * 7 Best Jamstack eCommerce Solutions * Headless eCommerce Frontend Frameworks * Pros and cons of headless eCommerce * 10 Benefits of headless eCommerceHowever, the rest of our website content was speaking to clients who needed a new website because this was where most of our revenue was coming from. We weren't ready to fully commit to this niche because we had only built a few headless sites and weren't sure the demand was great enough to focus on.The big lesson from this experiment was that there's no such thing as half-committing to a niche.Enjoying the content? We're working on some really cool new content around headless services and the best digital products to watch in 2023. Sign up to our newsletter to receive a monthly summary directly to your inbox.Why don't you join our newsletter?Sign up and be the first to know about our exclusive articles and free resources.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat helped us pick a niche - success at lastAt the start of 2022, Clean Commit's co-founder stumbled across a guy who had grown a software agency from nothing to seven figures. He shared a lot of our experiences and offered an online course that promised to help us settle on a niche.Without relaying the entire course, he recommended interviewing past and potential future clients and deeply understanding their needs. Ask them questions about their struggles and why they're willing to pay for help. This will provide insights into the services they need.This was easy enough for us. I'd met with dozens (maybe hundreds) of clients by this point and had countless emails and tons of notes on the things they were trying to do with their business.The lightbulb momentI followed the approach Brennan Dunn (creator of Double Your Freelancing) recommends; highlight the phrases used by the client to describe their issue. As I was reading through the notes of a recent meeting with a potential client, I spotted this sentence:We've outgrown our technology and it's preventing our business from getting jumping to the next level of business developmentThis was the lightbulb moment. I realised what our new niche was going to be. We were going to focus on helping companies that had outgrown their existing technology and off-the-shelf platforms who were looking to build a custom platform.You might argue that this is just \"software development\", but it's not. There are a few differences that make this a legitimate niche; 1. We're focusing on established businesses that have money to invest in internal tooling 2. The niche is solving a unique problem 3. We can clearly define our target audienceWhy was this niche the right choice?Around the time I landed on this niche, our team started pushing a new, unique service; Product Roadmapping. A Product Roadmap is a clear plan that takes an idea and turns it into a minimum viable product (MVP). It’s a blueprint for a project that bridges the gap between the client's team and ours.Very few agencies offer this service, but clients love it because it shows them how their project will come to life before any coding happens.Product Roadmapping helped us clearly understand our client's business problems. They all boiled down to one thing; outgrowing their technology.After I'd finished our third Product Roadmap, it was clear that this niche was the right choice.It ticked all the boxes: * Businesses with this problem have cash and have typically worked with developers before (i.e. the ideal customer). * Projects run for longer periods, so it's easier to bring on more expensive, experienced resources with less risk of having them underutilized * The problem is well-defined and forms a great foundation for our niche marketing materialsDon't take our word for it. Get a finished Roadmap.Get a copy of the actual roadmap (anonymised) that drove the development of a new platform and a 500% conversion rate increase for one of our clients.DownloadWe won't send you spam. Unsubscribe at any time.Built with ConvertKitIt really was the perfect niche for our team. We already had a product offering that was well-suited to our ideal customer. All we needed to do was rebrand, rewrite our website copy and build our marketing strategy around this new niche.How can I replicate your process to find my niche?Here's the process I wish someone had explained to me when I first started to work out our niche. This process assumes you already have skills in some sort of digital activity; copywriting, search engine optimisation, web design, development, link building, etc.Here are the steps we suggest following:1 - Figure out who you want to work with and who needs helpThis might not seem like the obvious place to start, but hear me out.Work out what your ideal customer will look like. For us, we were sick of working with \"solopreneurs\". Most of them suck as clients. They're super price sensitive, don't understand the value of what we're helping them with and have unrealistic expectations. Instead, we wanted to work with owners of established businesses who have worked with developers before. They understand roughly what's possible, aren't afraid to spend money, and have a lot more to gain from our services.Additionally, we want part of their operations to be based online. Any business that operates online, even if it's just their internal tooling, will need help from developers at some point. They'll probably be able to explain their struggles and the things they need help with.2 - Talk to these peopleI'm not going to lie. This step is uncomfortable if you don't already have clients that you can chat with.You need to speak with your ideal customer and find out what their day-to-day frustrations are or what's holding them back. One way to do this casually is to start a podcast and contact your potential customer under the proviso that you're interviewing them for the podcast.I tried this a couple of times, and it went okay. The nice part about this method is that you're offering value to your potential customers. Being on a podcast is cool! They get some street cred, and you get to ask them questions that will potentially unlock valuable insights.The other way you can tackle this problem is by reading through emails clients have sent to you where they're asking for help. I tried this initially and didn't get much from it because most of our older clients were asking for a website redesign. The problem was their own website wasn't great, and they wanted a new one. There were few insights to be found in those emails.What you're looking for in any verbal or written conversations with clients is the underlying problem that's impacting their ability to do business.For our clients, that's a technical ceiling placed on them using off-the-shelf software. They can't do what they want with the software, and it's so engrained in their businesses that it ends up hampering their ability to grow.This was never how they described the problem. It usually comes out as \"Xero is too slow, and it takes us too much time to use\", or \"Asana's permissions don't fit the way we've integrated it with our other systems\".Your job is to read between the lines.3 - Propose your solutionOnce you've got a clear grasp on the problem your ideal customers are struggling with, figure out what you can do to solve it.This is your niche. You fix a unique problem.I came across a great example of a niche relevant to our business a while back. A lady approached me on Linkedin selling her service as \"discount lead generation for small businesses\". Lead generation is not really catering to a niche, but by specifying that she helped small businesses generate leads at a budget they could afford, she'd created a niche market.Once you've figured out your solution, reach out to your customers are see if it resonates with them. You don't need to ask them to commit to anything; just get feedback on the solution.4 - Turn your solution into a serviceFinally, if you've had positive feedback from your ideal customers, then it's time to work out the details of how you can turn your solution into a service.Why does advice for finding a niche suck?Most advice online for finding a niche is focused on eCommerce businesses creating new online stores and finding products from AliExpress to dropship. The blogs writing this content make decent affiliate commissions from the products they're referring, so the keywords are completely saturated. Unfortunately, that means the legitimately useful content focused on small businesses finding their way is buried deep in the weeds.The articles targeted at service businesses usually revolve around finding that \"cool new thing\" on Google Trends, or they assume that every business knows exactly who their target customers are.Finding a niche is hard and it takes a lot of time. There's no easy way to validate your idea, and few businesses have done it successfully. Even fewer have taken the time to explain what they did. As a result, most of the articles about this topic suck.If you're still looking for advice on finding your niche, I would highly recommend checking out Brennan Dunn's Double Your Freelancing Blueprint course. We're not affiliated with Brennan, but we found a ton of value in the course. It offers a great step-by-step playbook that will prepare you and take you through the steps to find your niche.Wrapping upFiguring out what niche market Clean Commit was going to focus on was a challenge for almost two years. It started to impact our team's ability to survive, let alone grow. We went through a number of failed experiments whilst trying to find the answer to what we should focus on.Eventually, I spent time speaking with our customers and reading between the lines of how they described their struggles. After seeing the patterns three or four times, our niche slapped me in the face!Hopefully, our recount of this experience helps you figure out where to focus.What's next?The next step in our branding exercise is finding a branding freelancer to bring our ideas to life. There are a hundred million self-proclaimed branding experts on the web. Finding the right one was challenging, but we built a repeatable process that I break down in the next article. Check it out now."
  },
  {
    "title": "Finding A Branding Freelancer - How To Hire An Expert On A Budget",
    "plaintext": "Finding an exceptional branding designer isn’t straightforward. There are a million graphic designers that pitch themselves as branding specialists but no trustworthy peer review system to help figure out who is worth working with.We know from experience that just because a branding freelancer or agency has a lot of noise about them doesn’t mean they’re the best.This part of our rebranding process was focused on researching branding specialists who showed a style that was inline with what we were hoping to achieve, and figuring out if they were going to be good to work with.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSWhere to find a branding freelancer?Here are the obvious places to start looking for a branding freelancer: * Upwork * Freelancer * Airtasker (Australia only) * Google * Dribbble * BehanceUpwork is a hive of scum and villainy which we recommend you steer clear of. There are some legitimately awesome freelancers working through Upwork, but the organisation itself is poorly run and has turned into a race to the bottom.Freelancer is even worse. It’s an Upwork clone that hosts Upwork’s dregs that have been banned or couldn’t get their foot in the door. Avoid at all costs.Airtasker is the Australian equivalent, so it might not be relevant for a lot of folk reading this article. However, I’ve had some success working with freelancers through Airtasker. The biggest downside is a lot of unqualified freelancers bid on any job they think is roughly within their skillset. Picking the right person comes down to how good you are at screening and interviewing.Google is always hit-and-miss for freelancers. The obvious keywords like “branding freelancer” or “help rebranding my company” have been purchased as ads by agencies with budgets. This isn’t a bad thing especially if you want to work with an agency. If you don’t have a lot of cash to splash, then this isn’t the best approach.Dribbble is our favourite platform for showcasing our work. It was originally set up to allow designers to drop quick shots of their work so they can be viewed like a social media feed. More importantly, it provides some basic tools for browsing different designer’s work. At some point last year the interface and format of “shots” changed to more of a long-form project presentation, making it harder to quickly assess individual pieces of work. Still, Dribbble is a great platform to research freelancers.Behance is Adobe’s version of Dribbble. It’s the biggest designer showcase platform (although I don’t have any evidence for this claim!) and provides the best filtering tools to drill down and find the right person. Behance’s filters allow the user to choose between freelancers and agencies, where the individual is from and their speciality (UX, UI, graphic design, web design, etc).Enjoying the content? We're working on some really cool new content around headless services and the best digital products to watch in 2023. Sign up to our newsletter to receive a monthly summary directly to your inbox.Why don't you join our newsletter?Sign up and be the first to know about our exclusive articles and free resources.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBehance search —> Dribbble investigationOur approach for researching freelancers was to start with Behance and cross reference with Dribbble. The tools Behance provides for searching for freelancers are unrivalled and allow us to drill down to exactly who we were looking for: * Someone from Central Europe * Graphic design & branding expert * A decent number of followersAll that’s required once you’ve entered the right filters is browsing through hundreds of pages of feature images to find something that looks cool.As I mentioned earlier, Behance forces this weird long-form presentation format. It makes it difficult to figure out if the logos and assets being showcased are actually good, or they just look good because they’re part of a larger artistic mosaic.To get a better understanding of the design’s style, we cross-referenced their Behance and Dribbble profiles. This is still worth doing, but a little less effective in 2023 with Dribbble now forcing the same kind of long-form style as Behance.Contacting and interviewingWe’ve worked with a ton of freelancers over the past five years and one of the most overlooked attributes that can make or break the experience is their ability to communicate. Since we were looking for someone from Central Europe, we knew English was going to be their second language so it was imperative we spoke to them before committing to a contract.Along the same vein, freelancers that take days to respond to emails are a pain in the bum. It’s the biggest cause of delays on small projects like what we were about to jump into.By this stage we had a shortlist of freelancers we were considering, so we reached out and scheduled a screening meeting with each to discuss their processes.The other part of the equation was finding someone with a process. Designers can tend to be creative cowboys that don’t put enough focus on structure and repeatability. If they have a process, we at least know they’ve put thought into the problems that usually arise during branding.Budget, contract and engagementFor visibility, our budget was $5,000 USD, or roughly $7,500 AUD. This is a tiny budget for most companies, but we’re a small team and anticipating some pain in 2023 with a recession on the way.After interviewing a few different freelancers, we ended up picking a guy called Sam from Kosovo (https://www.instagram.com/eight.seconds)He met all our requirements: * Could get our branding done for $5,000 * Great communication * Had a defined branding process (we’ll discuss this in the next rebranding article) * Most importantly, his portfolio aligned with our styleAfter a couple of quick meetings, he fired across a standard engagement contract that detailed the deliverables and conditions of the arrangement (50% payment up front, 50% on final delivery).Wrapping upUncovering a great branding designer isn’t hard, but it’s a decent amount of work. Researching portfolios is only half the work. You’re going to have a bad time if they can’t communicate effectively or are so overworked that every milestone is delayed.In the next step of our rebranding process, we share some insights into how Sam created our new branding assets and what the experience was like from our side of the fence!What's next?The next step in the rebranding process is a breakdown of what the brand-building activities look like from the client's side of the fence. We explain Sam's process and how we worked with him to achieve the result we want."
  },
  {
    "title": "Building Our New Branding - The Process To Follow",
    "plaintext": "We've handed the reigns over to Sam, our freelance designer, to create our new brand identity. we're relying on him to come up with a concept for our new brand that ticks all the boxes we identified as we were laying out our new branding strategy.Suppose you haven't been following the story. In that case, we've been documenting all the challenges and lessons we've learned from the point of realising we didn't have a niche to deciding that it was time to spend money on a branding specialist and thinking through what we wanted to get out of the whole experience.We've been recording as much as possible because we couldn't find decent articles online explaining the process from the client's perspective.We're finally at the point where we're ready to become a great digital brand with a new logo, colour pallet, typography and style guide.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSThis is what the rebranding process looked likeIn scouting out a brand designer, we were hopeful we can find someone that would have a solid process to appease our need to do things in a structured manner. Luckily for us, Sam did have a process. This is what it looked like:Survey to understand company identityTo kick things off, Sam asked us to complete a form to understand our business model, target audience, brand values, company vision and brand strategy.He posed questions like: * \"In one concise sentence, what problem does your business solve?\" * \"Describe the key services & benefits of your products. \" * \"How does your business make money?\" * \"In three words, your brand is summed up as:\"This resonated strongly with us because these are the kinds of questions we ask clients when we're taking them through the Product Roadmapping process to start to understand who they are and what their goals are.Figuring out a logo conceptWith a name like \"Clean Commit\" and services as conceptual as helping businesses that have outgrown their technology, we needed a strong concept behind our logo. We wanted the concept to move away from anything that hinted at code or programming. After all, we're consultants who solve business problems. We can also code, but that doesn't define our digital brand.Sam came up with half a dozen concepts and narrowed the selection to a couple he thought were the best.The one that stood out to us was the idea of a logo that draws its shapes from a blueprint with angular lines and vectors, kind of like what would be used for a new building. This concept summarises what we do; getting to the bottom of a problem and carefully designing a solution that will stand the test of time.Picking a logo designThe most challenging part was picking a logo design that we liked. This process made us double-guess whether we had settled on the right concept.The problem with picking a logo design is kind of like going to a Chinese restaurant and having 700 dishes to choose from. After a while, everything looks the same, and it's hard to tell what looks good. At some point, you have to trust your gut.Luckily for us, as we were deliberating and not really getting anywhere, Sam gave us a push towards one particular concept. His arguments were: * It looks good as a small icon * It holds up as a stand-alone image but also has a nice shape when combined with the text part of our logo * This version is the most unique and memorableHere are the runner-up logos:Pick our new brand colour palletWe were looking for a colour pallet that was somewhere between \"fun startup vibes\" and \"minimalistic corporate\". Luckily, this means more to a branding specialist than it does to me.Sam picked out a ton of different colours for us, as you can see above. It's almost impossible to say which of these colours is the winner without seeing it in context, so we asked for a couple of mock-posters to be made up. This was a great strategy. It's a million times easier to look at colours in context:Once we had the chance to review the colours in their final form, the decision became clear. We were going with a strong blue, white and yellow combination.It's hard to be unique with colours. There are only so many, and big recognisable brands have already laid their claim. Unfortunately for us, it seems like a lot of companies have had the same thought. Most notably Atlassian and DigitalOcean.It's a small thing, but using yellow as our secondary colour at least buys us a little sense of individuality. Enough for us to be happy with our choice of colours and move on to the next step.Choosing the fontsThere are no rules when it comes to using fonts, but best practice is to have one font for headlines and another for the body. Using more than two fonts can become busy, and only using one font can feel a little lack lustre.Sam laid out a handful of fonts to choose from, along with the reason for his pairings. But picking fonts is something we’ve done a lot of, so we ended up doing our own research and committing to different options.In the end, we chose Gilroy Semi Bold as our headline font and Public Sans as our body font.We had hoped to find two Google fonts that worked nicely together so we didn’t have to write documents in MS Word, but sometimes these things just don’t work out! Gilroy was too nice to pass up.Delivering the final assetsWith all the individual components and stylings designed, all the was left was for Sam to package everything together in a Figma project and build the various implementations; * Social media covers * Logo marks, covers, full logos and colour variations * Stationary design * Brand guidelinesHaving the assets prepared in the forms we intended to use them was super handy. We probably could have figured out how to modify a banner to make it the right dimensions for different social media platforms or separate the logo mark from the cover, but having this done for us was great.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWrapping upWe’re super happy with the results and the experience of working with our branding freelancer. The concept has grown on us over time and looks really tight in our website implementation.What’s next?The next part of the branding rework is arguably the most important part; planning our new website. We follow a specific process that has yielded great results for our clients, but we’ve never tried the process on our own website. Stay tuned because the next article holds a bunch of value for any business that wants to improve its website conversion rate."
  },
  {
    "title": "Website Roadmapping - Planning To Maximize Conversions",
    "plaintext": "Website Roadmapping is one of the planning activities that separates our team from average web developers. It's a collaborative process we facilitate with our clients to figure out what content, features and design each web page should contain.It sounds simple, but figuring out a new website's composition is usually lumped on the client. They rarely have experience with a task, and as a result, the site's content ends up being sub-par.Our team were very keen to avoid ending up in this situation during our rebranding exercise. We had already poured a lot of time and money into the project and needed to get it right on the first try.Ultimately, we needed our new website to convert visitors into customers. Convincing a visitor to take a particular action is influenced a bit by having a nicely polished design, but it's mostly driven by the messaging, copy and content of the site.In this brief article, we're going to explain how we went about our Website Roadmapping process. Following these steps for your own business website is incredibly valuable, even if you're not planning on building a new site.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSWhy do you need a Roadmap for your website?I'm going to answer this question with another question. Have you ever browsed a website where everything feels intentionally synchronised? The logo and page design seem to be related, the content ties into the design, and everything feels like it belongs.Websites like this feel safe. They're usually nice to navigate and interact with. They're memorable.Building a website that ticks these boxes doesn't just happen. The experience and composition need to be carefully planned from the outset.There are a few other tangible reasons to spend time going through the website roadmapping process:Define information architectureInformation architecture is the formal term given to the arrangement of information and content across a website. It answers the question \"what journey do we take the visitor on?\" by deciding the layout of your website's messaging.If this isn't clear, think about information architecture like sorting a bunch of related arguments into a logical sequence, like in a newspaper article. The most important and critical information is always at the start of the story to get readers hooked. The deeper details are saved for later in the article when readers are committed to learning about the story.During the \"cart sorting\" stage of website roadmapping, we work with our clients to talk through the priority of presenting information to visitors. It usually looks like this: 1. Let the users know who we (the business) are and what we do 2. Benefits of working with us 3. Our services or product 4. Call to action 5. Finer details about what we do and how we workThe journey is slightly different depending on what the business goals are. eCommerce sites typically cut to the chase and present a product offering whereas brochure websites need to let visitors know that they're in the right place before making any kind of pitch.Connect design and digital marketing strategySavvy businesses with a well planned digital marketing strategy often need some help from the website design for their strategy implemetation.A good example is adhereing to Google's SEO guidelines and writing content to an E-A-T (expertise, authority, trustworthiness) model. This can be achieved by writing a series of articles that deeply explain a topic. To make life easier for visitors, these pages can be collected and summarised on a single landing page, but this requires a dedicated design.A similar example is including lead magnets and newsletter opt-ins in the middle of blog content. A clean transition between written content and a newsletter opt-in improves the chances visitors will take the offer.Why don't you join our newsletter?Sign up and be the first to know about our exclusive articles and free resources.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBeing intentional about designing mechanisms to support a digital marketing strategy can help its implemetation. This is only possible if there's an open discussion about what kind of digital marketing the business plans to undertake during the website roadmapping process.Align business and tech teamsA mistake a lot of businesses make when hiring an agency to handle their website development is assuming that the agency knows exactly what they want. Similarly, agencies that make assumptions about what the business wants always get it wrong.Website roadmapping circumvents these issues by getting both parties together so the right questions can be answered.When we're in charge of facilitating a website roadmapping session with client stakeholders, we ask questions that will help us understand what a wildly successful website will look like for the client.What is their primary goal? How will the website support its broader strategy? What functionality is necessary? What do their customers like about their current website? What will the website need to do in 5 years?Website roadmapping provides an opportunity to ask the questions that ensure the right thing gets built.Prioritize conversionsAlmost every website project we've worked on had the ultimate goal of converting visitors to customers. Trying to figure out this piece of the puzzle after your new website has been designed is ten times more difficult than getting it right from the start.In order to convince a visitor (that doesn't know your brand) to take action, they need to be taken through a seamless journey, given the right information and asked to take the next step.During the website roadmapping process, this process is put under the microscope to consider the kinds of objections a visitor would have to take the next step. These are the kinds of questions we ask: * What kind of call to action will have the highest success rate? i.e. Newsletter opt-in, lead magnet, or contact form? * Does a new visitor have all the information they need to understand the value of the service? * How can we visually guide through the journey? * Where are users likely to drop off? * How far up the page should the CTA be? And should we have multiple CTAs?This was a huge consideration for our website, with only 1% of visitors converting by submitting our contact form. Since most of our new work comes through this channel, it was an obvious problem to work on.How We Prepared Our Website Roadmap TemplateOur website roadmapping process took longer than we would normally commit to the process if we were working with a client because we second-guessed every decision. When we work with other businesses, the direction is so clear, but for some reason, it's all different working on our brand.Anyhow, the website roadmapping process is separated into three parts: 1. Defining goals 2. Card sorting 3. WireframingDefining goalsWe've written an extensive guide on Product Roadmapping goals and how they lay the foundation for a successful project. Even though our team were all pretty clear on our goals, we decided to go through the exercise.We jumped into a Zoom room for a 2-hour session of questioning each other about the reasons we decided to rebuild our website. The kind of questions we asked were: * What is our current conversion rate? * What is our goal conversion rate? * What is our website missing at the moment that would be of value? * What are the pain points of using the current CMS? * What do visitors like about our site, and what can be improved? * Where do we want our site to be in 5 years?We ended up going through about 50 questions until we had a baseline of where we are and where we want to be after the website rebuild.Card sortingThe next step is the magic behind website roadmapping. Card sorting is an exercise where everyone on the team jumps on a Zoom session with a shared Figjam board. The aim is to write down all the \"things\" we believe to be important to include on the new website. The result will be a rough sitemap where each page is made up of the required information and functionality.The things to include during the cart sorting exercise can be: * Content * Functionality * Design styles or elements * Calls to action * Lead magnets * Images * Particular media typesIt can be hard to get started with this process, but once the juices are flowing, it tends to go quickly.All ideas are recorded on Figjam sticky notes in a big pile. Once all the ideas have been captured, they need to be organised into logical pages.This part of the process simply boils down to questioning how valuable each piece of information, functionality or design element is and where it should fit. You should be asking questions like: * Should it be on the homepage, or does it make more sense to be on the contact page? * Are we adding duplicate arguments or functionality? * How high up the page should this piece of information be?Below is the finished result of our card-sorting exercise. It's a hard concept to articular clearly, so this example should help.WireframingThe final step in our website roadmap template was to prepare wireframes based on the card sorting exercise.We use a free Figma library called Sections 2.2 for this step. It contains a set of heroes, CTAs, navigation, footers, sliders, content areas, and all the other \"blocks\" we need to arrange to create a wireframe.The process here is pretty straightforward. For each sticky note in the card sorting sitemap, we look through the Sections 2.2 wireframe library and pick a block that matches our intention. The blocks aren't meant to describe how the final design will look. They're just rough placeholders.The benefit of laying out a complete wireframe in this fashion is: 1. It's quick because we already know the information architecture of the entire sitemap 2. It provides guidelines for the length and amount of copy we'll need to write 3. It's way easier to discuss the website's construction with something that's closely representative of the final designBelow is a screenshot of a couple of pages of our finished wireframe.Wrapping upThat's it for website roadmapping. If you followed along at home, your wireframes are ready to be filled in with actual content.What's next?The next part of our rebranding write-up will focus on how we went about the copywriting process. Like everything else, it's a task that can yield excellent results if the right process is followed!Feel free to drop us a comment below and we'll get back to you in a few days."
  },
  {
    "title": "How To Write Great Website Copy - Sharing Our Process",
    "plaintext": "Writing website copy - sharing our processWriting compelling website copy is seriously hard stuff. It’s one of the pieces most businesses get wrong when they rebrand. Prioritizing a sleek and stylish website design is great, but if the copy sucks, an increase in conversion is unlikely.Copywriting is one of those skills that seems easy because anyone can do it, but realistically it requires a ton of practice or a very intentional process and some patience to get right.Coming into our rebranding, we knew that our existing copy was very poor. Potential clients were finding our site but weren’t sure if we could solve their problem. Our messaging was confusing and we weren’t clear on how we could help a visitor.Worst of all, our copy committed the ultimate sin; it was all focused on us. We wanted to tell visitors what we could do, who we are and why we’re awesome. Visitors simply don’t care about you and your team, with the exception of figuring out if you can solve their problem.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSWhy didn’t we get it right the first time?For starters, no one on our team is a professional copywriter. So when we went to write our copy, we took a cowboy approach and slapped together what we thought sounded good.To be fair, we took inspiration from a number of our competitors. The problem with that approach is that a lot of our competitors also had terrible copy.The next problem with our approach was writing page-by-page across a period of months without a consistent theme or approach. We hadn’t really figured out our niche or who we were as a brand.Follow this process to write great copyAnyone can write great copy for their website with a bit of patience, a few hints and the process I’m about to unpack.Step 1: Prepare your site’s wireframesIf you don’t already have wireframes prepared, go and read the previous article in this sequence that talks through website roadmapping and how to prepare wireframes<<article>>.One of the most challenging things about writing copy for your new website is knowing how long headlines and body content should be. It’s easy to use too many words, cluttering up the design and hurting the readability of the site. Using the wireframe technique I described in the last article solves this problem because it comes with lorem ipsum headlines and descriptions.Step 2: Prepare a new Google Doc titled “website copy”Create a new document to host your draft copy.Start by adding a H1 for “HOMEPAGE”. On this page, you’ll want to list out H2’s for each block of content; headlines, subheadlines, descriptions, button labels and anything else that contains text.Step 3: Value propositionsYour copy should contain a scattering of the value propositions your company can bring to a customer.A great process for figuring out your value propositions is to list all the bad alternatives to how you do business. For example, a bad alternative for our services would be “committing to a technology stack without understanding the options, their pros and cons”.When you’ve got the poor alternative written out, simply state how your service does this better. Sticking with the example above; “Explore your technology options with help of experts who can point you to the stack that will be the best fit”.Do this for every part of your offering until you’ve exhausted the list. I managed to list out 23 value propositions on my first try. I could probably stretch this to 40 now. This is a benchmark for you to shoot for.Step 4: Start writing variationsThe best way I’ve found to write copy that is compelling and catchy is to try a ton of variations. Before I landed on the primary headline for our website; “Outgrown Your Tech Stack? We Can Help”, I tried dozens of variations.Mix in the most compelling value propositions from Step 3 into your headlines. Try writing the headline from the perspective of a customer. Avoid using terminology that focuses on your business, instead, try to highlight the user’s problem.Step 5: Collaborate and vote on the best optionBy the time you’ve written 30 variations for each headline, description, title, button field, etc, the words will all look the same. Picking the best phrase is a team activity. Grab someone else on your team, and who understands your business and get them to vote on the best three options in each set of your copy variations.You’ll never really know which copy is the “best” without A/B testing it, and that can happen later down the line. For now, you need to feel confident that you’re picking the best copy possible.Step 6: Complete all the pages across your siteNow that you’ve finished up the homepage copy and picked the winning variations, move on and repeat the process for every page across your site.It takes time and can feel a bit daunting, but there are no shortcuts for writing compelling copy.Step 7: Add your copy to the wireframesThe wireframes act as the source of truth for the final copy. When you’re happy with each block of copy, add it back into the wireframes.You’ll probably find that some text is too long for the design. If this is the case, work on shortening the copy and being more concise with your wording. Don’t expect the design to accommodate long copy unless you’re writing a long-form sales page.When all the wireframe pages have had their original lorem ipsum swapped out for real copy, you’re done!Enjoying the content? We're working on some really cool new content around headless services and the best digital products to watch in 2023. Sign up to our newsletter to receive a monthly summary directly to your inbox.Why don't you join our newsletter?Sign up and be the first to know about our exclusive articles and free resources.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWrapping upI wish someone had explained this copywriting process to me before I started. It’s certainly not rocket science, but once I adopted the approach, our final copy was written in the space of a couple of weeks.This approach works best for a new project, but nothing is stopping you from using the same technique to rewrite your site’s existing content.What's next?The next part of our rebranding process focuses on researching our competitors to see what kind of design tricks and styles they are using in preparation for building our high-fidelity design.If you have any questions about this article, leave them in the comments section below, and we’ll get back to you in a few business days."
  },
  {
    "title": "High Fidelity Design - Prepare and Execute Like An Agency",
    "plaintext": "One of our primary services is designing impressive, modern websites. So when the time comes to work on our own site, our team are all in.We need to result to be so good that when potential leads turn up on our site, they’re half sold by the time the homepage loads.The next step was putting together the high-fidelity design.Here’s a summary of the topics we cover in this rebranding series: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSResearch processRather than simply jumping into design concepts, we wanted to do our due diligence and survey the design landscape. There are tons of great websites that have had a lot of research poured into them, just asking to be leveraged.However, finding websites worth investigating amongst the vast sea of the internet is challenging.Sites like Awwwards are an easy place to start, but the designs that make it onto these sites aren’t built for practicality. They’re slow, full of animations and err on the side of artistry rather than conversion.The next option is simply plugging “top companies in my niche” into Google and seeing what returns. Surprisingly, companies with a budget to spend on SEO and ads aren’t always the ones with good design.We’ve also flirted with digging around Dribbble and Behance but the way they require posts to be formatted makes it difficult to identify good designs.So what is the best way to research relevant websites that have great web designs?Enjoying the content? We're working on some really cool new content around headless services and the best digital products to watch in 2023. Sign up to our newsletter to receive a monthly summary directly to your inbox.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitHow to find inspiration for your websiteThe best way we’ve found to research cutting-edge, conversion-focused design trends is to analyze what the top User Experience (UX) agencies are doing with their websites. These companies aren’t just focused on building impressive websites. They also put a lot of thought into how users interact with the design.Finding the top UX agencies across the globe is pretty straightforward. Almost every digital marketing, web design and software development agency worth its salt has a listing on Clutch. So all you need to do is Google “Clutch top UX design agencies”.You now have access to thousands of UX-focused companies that have spent hundreds of hours refining their website designs. The first few results showcase tight animations, minimalistic designs, clean typography and creative styles.Here are a few examples from the top 10 UX companies on Clutch:Research tip - focus on featuresOne tip we can share from researching dozens, if not hundreds of websites, is to focus on features. Picking an overall style is relatively straightforward, but if you’re anything like us, the conversation will become more granular, and you’ll want to focus on feature styles.You don’t need to find inspiration for every single feature, but it’s worth digging into the big stuff like: * Navigation * Hero * Call to action * Primary content areas * Testimonials * Case studies * FAQ * Latest article showcase * Awards & recognition * FooterDepending on what elements your team identified during the Website Roadmapping process, this list will be different. <<link to article>>Time to designFinally, it’s time to put the design together. This is when we hand the reins over to Patryk, our senior web designer.I won’t go into too much detail about the actual nuts and bolts of how he designs websites, except two things; the tools we use and the CSS framework we adhere to.ToolsWe’re completely committed to Figma as our design tool. Rarely, we’ll need to bring in an Adobe product like After Effects to create a video or to show how an animation will come together. But for the most part, we stick entirely to Figma.Are there other tools on the market that do a similar job? Sure, but they’re not as good as Figma, especially for collaboration. This may change now that Adobe has purchased Figma, but for the immediate future, we’ll keep using it.CSS FrameworkWe build a range of websites and applications using different technologies. Becoming proficient in new technology is time-consuming, and where possible, we try to use the same tools and frameworks.Almost everything we build has a user interface and requires CSS. We use a framework called Tailwind CSS.Tailwind preached particular design standards around colours, naming conventions, and global properties like font sizes. While it’s a framework for writing CSS, it can be implemented during the design stage. Creating classes in Figma to match the intended CSS classes is a massive time saver and ensures that the developed product is consistent with the design.The resultsHere’s a high-level look at the results of the design process.What you can’t see from these screenshots is the dozens of comments we’ve littered across the design. This part is made easier by Figma. Each page has gone through several rounds of revision to get it as close as possible to “perfect”.If you’re keen to see the final results, simply browse around our site. There are still some polishing touches to build in, but it’s 95% done!Wrapping upThat’s it for the high-fidelity design part of our rebranding process. We’re nearing the end of the journey. All we need to figure out our tech stack and then get it developed!If you’ve got questions, please leave them in the comments section below."
  },
  {
    "title": "Choosing The Best Website Framework & Headless CMS",
    "plaintext": "The final step in our rebranding process was determining the best tooling for our new website.Here are all the steps in our rebranding process in case you want to read through the other stages: * Step 1: 🏀 Defining Rebranding Goals & Brand Strategy - A Complete Guide * Step 2: 🚚 How To Pick Your Niche - How My Software Agency Solved This Problem * Step 3: 🎡 Finding A Branding Freelancer - How To Hire An Expert On A Budget * Step 4: 💳 Building Our New Branding - The Process To Follow * Step 5: 🗺️ Website Roadmapping - Planning To Maximize Conversions * Step 6: 🖊️ How To Write Great Website Copy - Sharing Our Process * Step 7: 🎨 High Fidelity Design - Prepare And Execute Like An Agency * Step 8: 😶‍ Choosing The Best Website Framework & Headless CMSOur original site was built with Gatsby, which at the time was the hot new thing (2018). It was around the time when Next.js started to make waves but hadn’t quite emerged as the React-based static site generator race leader.Since then, Next.js has become the incumbent for innovative companies as the website framework of choice. But Gatsby is still a completely viable choice, and it’s packed with a bunch of great plugins. So our first mission was to decide what framework to build with.The next decision was to figure out which CMS we were going to use. We’re official partners of a number of headless CMSs (Storyblok, Prismic, Crystallize, and Contentful), and have played around with most of the popular options (Strapi, Ghost, Netlify CMS), so this wasn’t an easy choice.Picking the best tech stack is a challenge most businesses struggle with. We get asked blunt questions from our clients along the lines of “what headless CMS is the best” all the time. The answer for us might not be the answer for other companies, but I wanted to walk through our decision-making process and the options we considered.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitChoosing the best frameworkThe top framework options for 2023 are; * WordPress * Next.js * GatsbyThis opinion might sit poorly with some people, but unless your business has a super unique use case, one of these frameworks is going to do an excellent job. The only exceptions are eCommerce businesses that have a different stack to choose from or enterprise companies that feel like they need to overpay for Adobe products.WordPressWordPress is pretty old in terms of technology, but it has a huge community and ecosystem of plugins. A ton of companies have been born in an effort to provide services that make WordPress sites faster and more efficient. As a result, a small WP site can run pretty efficiently and satisfy Google’s CWV.Next.jsNext.js is our React framework of choice for building headless eCommerce stores, websites requiring advanced functionality, and MACH applications. It’s a great, powerful framework, but it’s also technically a backend framework because it’s underpinned by Node.js.GatsbyGatsby is moving towards React in terms of functionality and rendering techniques, but it’s a pure frontend framework. There are some problems that Gatsby is still the best at solving (like image optimation), and its ecosystem of plugins makes life easy for simpler use cases.Gatsby was our choiceOur team spend their days working with Next.js, so it seems logical to adopt it as our development framework. However, our old website was built with Gatsby, and we’ve built the best part of a dozen websites with Gatsby. We’ve even created an open-source page builder starter for Gatsby and Netlify CMS that allows landing pages to be created from “blocks” that can be rearranged.We’ve written articles comparing Next.js and Gatsby, and there are some legitimate factors separating the two frameworks. Our suggestion on which framework is the “best” always boils down to context. What do you want to do with your site? Do you need server-side rendering? If you don’t, and there’s no need to manage a server, then Gatsby is going to be the right choice.Our new site only needed to display a handful of static landing pages and provide a nice experience for new blog content. Gatsby was a good fit for this requirement, which leads nicely into how we picked our CMS.Enjoying this post? Get more delivered to your inbox!Enter your email to get a monthly round up of technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitChoosing our headless CMSMost headless CMS platforms have a generous free tier that works nicely for brochure websites. That doesn’t make the decision easier, though. We could literally pick from any CMS to integrate with our site.Our requirements were: * Can be configured as a page-builder library * Lightweight * Gallery * Value for money * Good SEO features (separating Facebook, Twitter, Instagram descriptions and images, hints for excerpt length, etc)Unfortunately, these features don’t all exist in one system, so we decided to use two! That’s the benefit of adopting a modular architecture.For our brochure content management, we decided to go with Netlify CMS. Once the content is set up, it won’t change too much so we didn’t need complicated features. I’ll spin up a new landing page or two every month, change a few details, but that’s about it.The blog management system, however, needed to be packed with great SEO features. We were using Netlify CMS for our old site, and it was great for small updates but a massive pain for publishing 5 blog articles a week.After playing around with a bunch of the available options, we settled on Ghost. It’s got a great name as a direct WordPress replacement. We decided to integrate it with Gatsby, so some native features were forfeited, but it comes with more than enough features to make the content writing experience really nice.One example is using slash commands to bring up a context menu with all the various modules that can be inserted into article contentAnother is the handy post settings menu that provides a ton of configuration options for metadata and how the content is published.Wrapping upI've skipped over the part where we actually developed the site, but that's a larger topic that goes a bit too deep for a series of articles about rebranding.Picking a website frame and CMS is tricky because there are so many options, and the internet is full of people shouting about what they believe to be best. Hopefully, if your use case is close to ours, you can follow our decision-making process and end up with a solution that works nicely!Rebranding finishedThat's it for our rebranding series. We've covered all the major activities we went through in order to build our new brand.We would love to hear your thoughts and feedback on the process, especially if you read through the entire thing. Drop our team a comment below, or send us a message with your thoughts."
  },
  {
    "title": "Who Creates Tasks in Scrum?",
    "plaintext": "Scrum is a widely-used Agile methodology for software development. It relies heavily on the concept of tasks, which are essentially small, manageable chunks of work that contribute to the delivery of a product increment.Our team uses Scrum for most projects. Anything where the client requirements aren't set in stone (like a small headless website project) is a great candidate for Scrum. However, it's not always clear who should be creating the tasks. Should it be the project manager who doesn't have the same technical knowledge as the developers? Or should the developers write the tasks even though they don't understand the design or QA processes?It’s important to understand who creates these tasks in Scrum since it ensures the effective functioning of a Scrum team and the successful delivery of a product on time and on budget.The answer isn't black and white. In this article, we'll explain who should be responsible for creating tasks, the role of the development team in creating tasks in Scrum, as well as the relationship between the development team and the product owner in this process.Understanding the role of the development teamThe entire development team is responsible for creating tasks in Scrum. The job doesn't fall to one person.To clarify, a development team is essentially a group of people who are working on a software project. There doesn't need to be a tighter definition than this. A project team can technically be a single person, but it's usually a handful of specialists working together.In our case, the Scrum team comprises one or two web designers, frontend developers, backend developers, and project managers.One of the key features of the development team in Scrum is that its autonomous. This means that it’s self-organizing and self-managing. The team is responsible for determining how best to turn the product backlog into a releasable product increment.Usually, how this happens is the team is presented with a set of requirements. They have a chance to think through how they'll build what's required, then get together and discuss the ideas. They talk through what's needed from the other roles (i.e. frontend dev needs a new button from the designer and API from the backend developer), and these needs turn into tasks.This level of autonomy allows the development team to be highly engaged and motivated. It also means the team is in the driver's seat, lending their expertise to how the project should get done, rather than simply tasking order.Task decompositionBefore the requirements are written up, the team starts by breaking down the work outlined in the product backlog into smaller, manageable chunks that can be completed during a sprint. This process is known as task decomposition and it's crucial for ensuring that the team can deliver a releasable product increment at the end of each sprint.Task decomposition with the team involves: * Reviewing the product backlog items and identifying the tasks that need to be completed to deliver the item. * Breaking down these tasks into smaller, more manageable chunks of work. This typically involves breaking down larger user stories into smaller, more actionable tasks that can be completed within a sprint. * Ensuring each task is well-defined, actionable, and clear by defining acceptance criteria for each task, which outlines the conditions that must be met for the task to be considered complete. * Writing acceptance that are measurable, testable, and verifiable way, which helps the team understand what needs to be done and how to do it. * Assigning story points to each task to help estimate the effort required to complete the task. In turn, this helps the team to save time by prioritizing important tasks while ensuring that the team is committing to tasks that can be completed within a sprint. * Accounting for dependencies between tasks and making sure that tasks are structured logically.Task decomposition is an iterative and dynamic process. The development team should continuously review and refine their task decomposition practices to ensure they are meeting the needs of the team and the product. This includes regularly reviewing the sprint backlog and making adjustments as necessary to ensure that the team is on track to deliver a releasable product increment.Enjoying this post? Get more like this delivered to your inboxEnter your email to receive monthly roundup of technology tips & articles.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe product owner and the product backlogThe product owner represents the stakeholders' interests, including the end-users, customers, and the business.They are also supposed to maintain the product backlog, a prioritized list of all the work that needs to be done on the product. You can also think of it as a dynamic document, constantly updated and refined throughout the product development cycle.The product owner has to ensure the product backlog is well-defined, actionable, and clear and that the items in the backlog are prioritized based on their value to the stakeholders.In our experience, there's a strong overlap between the project manager, or technical manager, and the product owner. Most clients have their own jobs to worry about and don't have the capacity or experience to sit down and review a Jira backlog. The project manager does this on their behalf and relays the changes in a weekly meeting.Regardless of who is is actually wearing the \"Product Owner\" hat, this is what their responsibilities boil down to: * Identifying the needs and requirements of the stakeholders, including the end-users, customers, and the business. * Translating needs and requirements into user stories, which are short descriptions of a feature or requirement that will be implemented in the product. * Prioritizing the user stories based on their value to the stakeholders and their alignment with the overall goals and objectives of the product. * Continuously reviewing and refining the product backlog to ensure that it is meeting the needs of the stakeholders and that it is aligned with the overall goals and objectives of the product. * Working closely with the development team to ensure that the backlog is well-defined, actionable, and clear and that the items in the backlog are prioritized based on their value to the stakeholders. * Ensuring that the development team understands the items in the backlog and that they are aware of any dependencies or constraints that may impact their ability to deliver a releasable product increment at the end of each sprint.Ultimately, the product owner is responsible for ensuring that the development team works on the most valuable items and works closely with the development team to ensure that the product backlog is always in a releasable state. With this approach, the development team can work efficiently, knowing they are working on the most important tasks at any given time.It's important to note how the development team uses this information to plan and execute their work. With that in mind, let’s delve into the relationship between the product backlog and the sprint backlog and how it forms the foundation for the development team's task decomposition and commitment during sprints.Product backlog & Sprint backlogThe difference between the product backlog and sprint backlog is worth noting.The product backlog is a prioritized list of features, requirements, and bug fixes that need to be implemented in the product. It serves as the primary source of requirements for the development team and is maintained and prioritized by the product owner.On the other hand, the sprint backlog is a list of items from the product backlog that the Development Team commits to completing during the upcoming sprint.The relationship between the two is the development team selects items from the product backlog to be included in the sprint backlog based on the priorities set by the product owner.During the sprint planning meeting, the development team and the product owner work together to identify the most important items in the product backlog that need to be completed during the upcoming sprint.The development team then commits to completing a set of items from the product backlog, and these items are added to the sprint backlog.During the sprint, the development team works on the items in the sprint backlog and makes progress towards completing them. As the development team completes items, they are removed from the sprint backlog and new items are added to the sprint backlog (as needed).At the end of the sprint, the development team holds a review meeting to demonstrate the completed items to the stakeholders and the product owner. The product owner then updates the product backlog with any new requirements or changes based on feedback from the stakeholders.Managing and Tracking TasksWithout some careful maintenance, the tasks required to complete the project can become complete chaos. Under Scrum, tasks are manager and tracked in order to keep the project moving forward.One popular technique for managing tasks is a task board, which is usually something that looks like this (illustrated below).A task board visualizes the display of tasks.Task boards are commonly divided into columns, such as \"to-do\", \"in progress\", and \"done\", and can be used to organize and prioritize tasks, assign responsibilities, and track progress.Best Practices for effective task management in ScrumWhen it's done well, Scrum can solve a lot of the management headaches complicated software projects present. Without trying to complicate the approach, these are the \"best practices\" your team should consider. 1. Set clear and achievable goals for each task. This helps to ensure that all members of the development team are working towards the same objective and are aware of what needs to be accomplished. 2. Assign clear roles and responsibilities to each team member. This can help to streamline communication and increase efficiency. 3. Regular communication, such as through stand-up meetings, is crucial in order to stay on track and address any issues that may arise. 4. Break down large tasks into smaller, more manageable chunks. This can help to keep the development team focused and motivated and also makes it easier to track progress. 5. Use task boards and user stories as effective tools for organizing and prioritizing tasks. These can also be used to assign responsibilities and track progress. 6. Be flexible and adaptable when it comes to task management. Unexpected obstacles and changes may arise, and being able to handle these in a timely and efficient manner is crucial for success. 7. Continuously evaluate and improve task management practices in order to ensure long-term success in project delivery.Frequently asked questions1. Who is responsible for creating tasks in Scrum?The Development Team is responsible for creating tasks in Scrum. Each team member is assigned specific roles and responsibilities, and they work together to break down the project into smaller, more manageable chunks.2. How are tasks organized and prioritized in Scrum?Tasks in Scrum are organized and prioritized using tools such as task boards and user stories. These tools allow the Development Team to assign responsibilities, track progress, and make adjustments as necessary.3. What are some best practices for effective task management in Scrum?Some best practices for effective task management in Scrum include setting clear and achievable goals, assigning clear roles and responsibilities, regular communication, breaking down large tasks into smaller chunks, using task boards and user stories, being flexible and adaptable, continuously evaluating and improving practices, and reading articles, books or videos on the topic.Wrapping UpScrum is a powerful framework for managing tasks and projects in the tech industry. By breaking down work into smaller, more manageable chunks, the Development Team is able to effectively prioritize and complete tasks. The Product Backlog and Sprint Backlog provide a clear framework for organizing and tracking progress, while tools such as task boards and user stories help the team to effectively assign responsibilities and make adjustments as needed. With the right approach and best practices in place, teams can work together more effectively and efficiently to achieve their goals.However, it is important to remember that Scrum is an iterative process, and it will require continuous improvement, learning and adaptation to the changing requirements and context. It is also important to remember that Scrum is not a silver bullet; it is a framework that may not be suitable for all types of projects and teams and may require customization and adaptation to the specific context."
  },
  {
    "title": "Are Microservices Distributed Systems?",
    "plaintext": "A distributed system comprises independent nodes that communicate with each other to accomplish a common goal. The short answer to whether microservices are a distributed system is yes.Microservices are a type of distributed system,s since the architecture entails decoupling a large application into a suite of small services. These services communicate with each other, often through APIs and are designed to be deployed independently. This approach allows for flexibility, scalability, and ease of maintenance and testing of individual services.Not all distributed systems are microservices, and there’s a distinct difference between the two architectural concepts. To better understand how microservices are related to distributed systems, we’ll define each and provide some examples you’ll recognize.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitThe Fundamentals of Distributed Systems: A Deep DiveThere are a few key concepts that are essential to understanding how distributed systems work. At a high level, they are a network of computers that coordinate to perform a common task. The key idea behind a distributed system is to spread the workload across multiple nodes in the network. By distributing the workload, the system becomes more fault-tolerant, as the failure of one node does not necessarily lead to the failure of the entire system.Some of the characteristics of distributed systems include: * Concurrent processingMultiple nodes in the network can process data or perform tasks simultaneously. The system can take advantage of the processing power of multiple machines, achieving more efficient use of resources. * Shared dataIn a distributed system, data can be stored and accessed by multiple nodes in the network. This allows for flexibility regarding where data is stored and how it is accessed. However, it also introduces new challenges related to data consistency and coordination. * TransparencyThe system should hide the complexity of the underlying network and present a simple, unified view to the user. The user is not aware of the underlying complexity of a distributed system.Examples of distributed systems include: * Cloud computing platforms like Amazon Web Services, Microsoft Azure, and Google Cloud Platform * Peer-to-peer networks like BitTorrent * Distributed databases like MongoDB and Cassandra * Cluster computing frameworks like Apache Hadoop and Apache SparkThe fundamentals of MicroservicesMicroservices are a way of structuring an application as a collection of small, independently deployable services that communicate with each other over a network. This is different from the traditional monolithic architecture, where all components of the application are tightly coupled and run as a single unit.These are the primary characteristics of a microservice: * FlexibilityMicroservices architecture allows individual services to be developed, deployed, and scaled independently, allowing faster development and deployment. In contrast, in a monolithic architecture, changes to the codebase require the entire application to be rebuilt and redeployed, which can be time-consuming and complex. * ScalabilityIn microservices architecture, each service can be deployed on different machines or locations, allowing for horizontal scaling. This means that as the load on the system increases, more resources can be added to individual services to handle the load rather than having to scale the entire application. * Isolated maintenanceMicroservices architecture allows for better isolation of bugs and easier troubleshooting. If a bug is found in one service, it can be fixed and deployed without having to deploy changes to the entire application.Drawbacks of microservices: * Increased complexityMicroservices architecture involves breaking down a monolithic application into smaller, independent services. While this can provide many benefits, it also increases the overall complexity of the system as a whole. This can make it more difficult to understand and maintain, as well as to troubleshoot and debug issues that may arise. * Security concernsMicroservices architecture may introduce new security risks, as each service may have its own set of vulnerabilities that must be managed. Additionally, services may need to communicate sensitive information with each other, which can introduce security risks if not properly secured. * Data consistencyIn a microservices architecture, different services may store and manage parts of the application's data. This can make it more difficult to maintain data consistency across the system, as there may be multiple sources of truth for the same data. This can lead to data inconsistencies, conflicts, and other issues.Distributed monolithsAlthough distributed systems are often associated with microservices, it's possible to have a distributed monolith. Usually, this happens when attempting to build a microservice-based app without taking into account microservices architectural principles.Building microservices is more than simply splitting an application into several entities and implementing CRUD operations using APIs. Each microservice should be able to handle instances independently and synchronously communicate with each other.You can think of a distributed monolith as a system which resembles a microservice architecture but operates under the principles of monolith architecture.You know you have distributed monolith if your services: * It cannot be deployed independently and scale * Their communication is affected by high latency * They share the same database or any other resource * A change in one service collapses the entire systemTo avoid ending up with a distributed monolithic, let’s look at how best to implement microservice architecture.Implementing microservicesHere are some best practices to keep in mind when implementing microservices:Choose the right technologies for communication and coordinationMicroservices communicate with each other through APIs, so it's important to choose technologies that are well-suited for building and consuming APIs. This includes technologies such as REST and gRPC. When deciding on the technology stack, it is important to consider the language, framework, and libraries that are best suited for the problem at hand. Also, consider the scalability of the chosen technologies.Establish a consistent and reliable service registryA service registry is a central location where services can register themselves and discover other services. This allows for easy communication between services and allows for service discovery and load balancing. A service registry should be built with reliability and scalability in mind. A clear and consistent naming convention for services is important to keep the architecture organized and easy to work with.Implement service discovery and load balancingService discovery allows services to find and communicate with each other, while load balancing ensures that traffic is distributed evenly among all available instances of a service. This helps ensure the system remains available and responsive even under heavy load. Different load-balancing algorithms can be used depending on the specific use case. For example, Round-robin and Least-connections are some of the popular algorithms.Monitor and log everythingMonitoring and logging are essential for understanding how your system is behaving and identifying issues when they arise. Use monitoring tools such as Prometheus and Grafana for metrics, and log aggregation tools like Elasticsearch and Kibana for logs. Furthermore, it is important to have a centralized monitoring and logging system to have a centralized view of the entire system.Implement a circuit breaker patternMicroservices are distributed systems, and communication between them can fail. A circuit breaker pattern can be implemented to prevent cascading failures by halting communication with a service that is not responding. This pattern can be implemented using libraries like Hystrix and Resilience4j.Monolith decomposition strategiesWhen it comes to decomposing a monolithic architecture into a microservices architecture, several strategies can be employed to make the process more manageable. Two popular strategies are the Strangler Fig pattern and Branch by Abstraction.Strangler fig patternThe Strangler Fig pattern is a technique for gradually migrating a monolithic application to a microservices architecture. The idea is to create new microservices that gradually \"strangle\" the functionality of the existing monolithic application. This is done by creating new services that handle specific functionality and gradually routing more and more traffic to the new services until the monolith is no longer needed.This approach minimizes the risk of disrupting the existing system. This pattern is best used when there is a need to decompose a legacy system and introduce new services incrementally.Branch by abstractionBranch by abstraction involves creating an abstraction layer within the monolithic application to allow new services to be developed and deployed independently of the existing system.The abstraction layer allows the existing monolithic application to continue running while new services are implemented. This pattern is best used when there is a need to introduce new functionalities to the system, but the monolithic architecture doesn't allow for it.Service decompositionService decomposition is a strategy for decomposing a monolithic architecture into a microservices architecture. The process starts by identifying the core business capabilities of the system and grouping them into individual services. Each service should be responsible for specific functionality and should have a clear and well-defined interface for communication with other services. This approach allows for better separation of concerns, making the system more maintainable and easier to understand.One important aspect of service decomposition is to ensure that the services are loosely coupled, meaning that changes to one service should not have a ripple effect on other services.While decomposing a monolith architecture, it's a good idea to observe these best practices: * Identify the boundaries:The first step is to identify the boundaries of the different services. This is done by analyzing the functionalities of the application and looking for natural groupings of related functionality. * Start smallDecomposing a monolithic architecture can be a daunting task, so it's important to start small. Begin by identifying a single service that can be extracted from the monolith and focus on that service first. Once that service is up and running, you can move on to the next service. * Use feature flagsFeature flags allow you to deploy new functionality to a small set of users while keeping the functionality hidden from the majority of users. This allows you to test new functionality in a production environment without the risk of disrupting the entire system. * Use a phased approachDecomposing a monolithic architecture can be a complex and time-consuming process, so it's important to take a phased approach. Start by extracting a small number of services, then gradually increase the number of services over time. * Re-architect as necessaryDecomposing a monolithic architecture often requires re-architecting the system. This may include changes to the data model, the application's infrastructure, and the application's runtime environment. * Emphasize communication and collaborationThe process of decomposing a monolithic architecture can be challenging, so it's important to emphasize communication and collaboration between the different teams involved in the process. This includes not only the development team but also the operations, testing and security teams.Frequently Asked QuestionsQ: What is microservices architecture?A microservices architecture is a way of building software applications as a collection of small, independently deployable services. Each service is responsible for a specific functionality and communicates with other services through APIs.Q: Can microservices architecture be used for small projects?Microservices architecture can be used for projects of any size, but it may be overkill for small projects. It's important to consider the complexity of the project and the resources available before deciding on an architecture. Microservices may be more appropriate for larger, more complex projects that require high scalability and fault tolerance.Key TakeawaysMicroservices are a type of distributed system. They are an architectural pattern in which an application is broken down into small, independently deployable services that communicate with each other over a network. Each microservice is responsible for a specific business function and can be developed, deployed, and scaled independently. This allows for greater flexibility and scalability compared to a monolithic architecture.However, implementing microservices also comes with its own set of challenges such as increased complexity, increased operational overhead and increased security risk. To overcome these challenges, it's important to have a good understanding of the best practices for designing and managing microservices in a distributed system."
  },
  {
    "title": "What is Vite, And Why Is It Awesome?",
    "plaintext": "In recent years, the frontend development ecosystem has seen an explosion of new tools and frameworks designed to improve the developer experience. Among these is Vite, a relatively new entrant that has quickly gained popularity due to its impressive performance and speed. It was developed by Evan You, the creator of Vue.js framework, to provide a fast development experience for modern web projects. The best thing about Vite is that it's platform-agnostic, meaning it can be used to develop JavaScript/Typescript applications.In this article, we’ll provide a comprehensive overview of Vite, including its key features, advantages, and how it can be integrated into existing development environments.Before we get started, join our monthly newsletter. We summarize our articles so you can read ~10 paragraphs of super valueable technology-related content in a tl;dr format.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitKey feature of ViteFast compilation and hot module replacementVite uses native ES modules and modern browser APIs to compile your code on the fly, providing fast build times and instant updates in the browser. This approach eliminates the need for a bundler during development, which can significantly reduce the time spent on building and deploying your applications. The built-in development server in Vite is optimized for fast reloading and hot module replacement, allowing developers to see the changes they make to their code in real-time without the need for a full page refresh.Lazy loading of modulesVite implements lazy-loading of modules, which means that code is only loaded when it is actually needed. This results in smaller bundle sizes and improved performance, especially for larger applications. Lazy loading also allows for faster initial load times for your users, as the code for non-critical parts of your application is only loaded when required.Tree-shaking and code splittingVite’s tree-shaking and code splitting are optimization techniques that help reduce the size of your code and improve performance. Tree-shaking removes unused code from your application, while code splitting allows you to divide your code into smaller, more manageable chunks loaded on demand. These features work together to ensure that your users only download the code necessary for the current page, resulting in faster load times and improved overall performance.Built-in development serverVite includes a built-in development server optimized for fast reloading and hot module replacement. This server makes it easy to develop and test your application and allows you to see the changes you make to your code in real-time without the need for a full page refresh. The development server also supports automatic reloading of your code, so you can quickly iterate on your changes without the need for manual reloading.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages of ViteImproved development workflowVite's innovative approach to frontend development results in a more streamlined development experience for developers. The fast build times, instant updates in the browser, and built-in development server with hot module replacement capabilities, provide an improved development workflow, reducing the time spent on manual testing and allowing developers to focus on writing code.Faster build timesOne of the primary advantages of using Vite is the significant improvement in build times. The innovative approach of Vite eliminates the need for a bundler during development, resulting in fast build times and instant updates in the browser. This can save developers significant amounts of time, especially for larger projects, and enable them to focus on delivering high-quality code.Optimized code sizesThe use of Vite can also result in optimized code sizes, thanks to its lazy loading of modules and tree-shaking features. These features allow developers to reduce the size of their code, resulting in improved performance for their users. This can be especially beneficial for larger projects and applications with a large number of modules.Increased productivityThe faster build times, improved development experience, and optimized code sizes in Vite can lead to increased productivity for developers. This can result in a faster time to market and a more efficient development process, enabling your team to deliver high-quality applications more quickly.Supports modern web standardsVite is designed to utilize native ES modules and modern browser APIs, making it an ideal choice for developers who are looking to leverage the latest standards in frontend development. This ensures that your projects are built using modern, maintainable, and scalable code, reducing the need for future updates and making it easier to maintain your applications over time.Disadvantages of ViteDespite its many benefits, Vite also has some drawbacks that are worth considering before choosing to use it for your project. Some of the main cons of Vite include the following:Smaller communityVite is a relatively new frontend tool, and as a result, its user community is smaller compared to more established tools such as Create React App or Webpack. This can make it harder to find support or solutions to problems that may arise during development.Limited browser compatibilityVite uses modern JavaScript features that are not yet supported by all browsers. This means that some users may not be able to use your application without updating their browser or using a polyfill.Vite vs Create React AppIt's worth comparing Vite with Create React App (CRA), since they share some overlap, and one of the main reasons developers move to Vite is to get away from CRA.Create React App is a popular frontend tool used to build web applications using the React JavaScript library. It provides a streamlined and efficient way to get started with developing React applications, offering a simple command-line interface for creating and managing projects, as well as a development server for live-reloading during development.While Vite and CRA have similarities, there are several key differences to consider when choosing between Vite and CRA. * Build systemOne of the main differences between Vite and CRA is their build systems. CRA uses Webpack to compile and optimize your code for production, while Vite uses native ES modules and rollup to create a highly optimized build. This results in faster build times and smaller bundle sizes with Vite. * PerformanceVite uses a faster build process and a unique approach to code splitting, which results in faster build times and faster load times for the end-user. In contrast, CRA focuses more on simplicity and ease of use, with a less optimized build process. * ToolingAnother key difference between Vite and CRA is the level of customization and tooling available. Vite is designed to be flexible and easily extendable, allowing developers to add and modify plugins and configurations as needed. CRA, on the other hand, is more opinionated, offering a set of pre-configured tools and dependencies with limited customization options. * Development experienceVite provides a fast and lightweight development server that enables you to see your changes in real-time as you write code. In comparison, CRA can be slower and requires a full reload of the page to see changes. * Learning curveBoth Vite and CRA have a relatively low learning curve, but Vite may have a slightly steeper curve due to its focus on performance and customization. This means that developers may need to spend more time learning how to configure and optimize their applications with Vite. * Ecosystem compatibilityCRA has a larger and more established ecosystem, which means that there are more plugins, components, and libraries available for use with the tool. Vite, on the other hand, is designed to work seamlessly with modern web development tools and technologies, such as ES6 and Vue.js.Migrating from Create React App to ViteIf you are already using Create React App (CRA) for your frontend development, you may be wondering if it is worth migrating to Vite. Here are the steps you can follow to migrate from CRA to Vite: 1. Set up a new projectTo start, you will need to create a new project using Vite. This can be done by following the instructions provided in the Vite documentation.2. Transfer your codeNext, you will need to transfer your code from your existing CRA project to your new Vite project. This will likely involve copying over your components, styles, and other assets.3. Update your dependenciesVite has different dependencies than CRA, so you need to update your package.json file to reflect these changes. This may involve adding new dependencies or updating existing ones.4. Configure your environmentVite uses a different build system than CRA, so you will need to configure your environment accordingly. This may involve updating your .babelrc file or adding a rollup.config.js file.5. Test your codeOnce you have completed these steps, you will need to test your code to make sure everything is working as expected. This may involve running your tests or simply verifying that your application is working as expected in the browser.Best Practices for Migrating to ViteMigrating to a new frontend tool can be a complex and time-consuming process, especially if you have an existing project with a large codebase. However, by following these best practices, you can ensure a smooth and successful migration to Vite: * Plan aheadBefore starting the migration, it's essential to thoroughly plan and assess the scope of the migration, including the impact on your existing project, resources required, and timeline. * Start smallConsider starting with a small, non-critical project to get familiar with Vite and test its capabilities before attempting a larger migration. * Evaluate library compatibilityVite uses modern JavaScript features, so it's important to evaluate the compatibility of your existing libraries and plugins before migrating. If necessary, you may need to modify or replace certain libraries to work with Vite. * Automate processesConsider using tools and scripts to automate repetitive tasks and simplify the migration process, such as converting your existing code to ES modules, or updating your build scripts to work with Vite. * Test thoroughlyAfter migrating, it's important to thoroughly test your project to ensure that everything works as expected and that there are no regressions or compatibility issues.Frequently asked questionsQ: What is Vite?A: Vite is a frontend tool that is used for building fast and optimized web applications. It uses a modern build system and a fast development server to provide a streamlined and efficient development experience.Q: How does Vite work?A: Vite uses native ES modules and rollup to compile and optimize your code for production, resulting in faster build times and smaller bundle sizes. It also provides a fast and lightweight development server that enables you to see changes in real-time as you write code.Q: Can I use Vite with other frontend technologies, such as React or Vue.js?A: Yes, Vite is designed to work seamlessly with modern web development tools and technologies, including React and Vue.js.Q: What is the difference between Vite and Create React App?A: The main differences between Vite and Create React App include their build systems, development servers, and ecosystem compatibility. Vite uses a faster and more efficient build system and provides a faster and more efficient development server, while Create React App has a larger and more established ecosystem.Wrapping upVite is a modern frontend tool that offers several advantages over traditional build tools, including faster development times, smaller bundle sizes, and improved developer experience. Its key features, such as hot module replacement and native ES module support, make it an excellent choice for developers looking to create high-performance applications. In addition, its extensive plugin compatibility makes it easy to integrate with a variety of tools and technologies. Whether you are starting a new project or migrating from an existing one, Vite is a valuable tool to have in your frontend development arsenal."
  },
  {
    "title": "PWA vs Electron - Which Architecture Wins?",
    "plaintext": "When building a cross-platform web application, the choice of technology used can make or break the success of your project. Two popular architectures for building cross-platform applications are Progressive Web Apps (PWAs) and Electron.While PWAs and Electron share a similar technology stack, they’re used for different purposes. PWAs are web applications that operate in a browser, meaning they don’t need to be installed. Electron, on the other hand is a framework for building desktop applications using web technologies. Electron applications are installed on your desktop and can interface with parts of your machine that a PWA can’t.Both technologies have their strengths it can be difficult to determine which one is best suited for a particular project, especially if you're unsure whether a web or desktop application is the best approach.In this article, we will take a deep dive into the world of PWAs and Electron and compare the two technologies in terms of their key features, advantages, and disadvantages. The goal here is to give you an insight into which technology is more suited for your next cross-platform project.Get a 'too long, didn't read' summary of our latest articlesOnce a month, we compile and distribute a tl;dr summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitWhat is PWA?A Progressive Web App (PWA) is a web standard that uses the latest web technologies to offer a native-like experience on desktop and mobile devices. The concept is backed by Google and was designed to help businesses increase conversion rates and improve customer experience. Today, the concept has been implemented by some popular companies in building cross platform apps such as Twitter Lite, Pinterest, Tinder, Spotify, and Trivago.At its core, a PWA is essentially a website-like application built with HTML, CSS, and JavaScript. It can be indexed by search engines, making it accessible and discoverable. But unlike standard websites, it works offline and can be installed in a user’s device to offer a native user experience, such as sending push notifications.How Do PWAs Work?The key to PWAs functionality is the use of service workers. They are background scripts that run in the browser and allow PWAs to work offline by using the cache API to store assets and data locally, enabling PWAs to work offline. They can also intercept network requests, serve responses from the cache when there is no network connection, and update the cache as new data becomes available.The best way to understand the concept of a service worker is to think of them as a proxy between the web app and the network, controlling how network requests are handled.In addition to offline functionality, service workers enable other PWA features, such as push notifications and background syncing. The service worker listens for push events, which are sent by a server, and can display notifications to users even when the web app is not in the foreground.To implement a service worker in a PWA, you need to write the service worker code and register it in the main JavaScript file of the web app. Here’s how to do it:if ('serviceWorker' in navigator) {    window.addEventListener('load', function() {      navigator.serviceWorker.register('/sw.js').then(function(registration) {        console.log('Service Worker registered:', registration.scope);      }, function(err) {        console.log('Service Worker registration failed:', err);      });    });  }Here's an example of a service worker that logs all requested URLs in the console and leverages the browser's Cache Storage to cache all responses that haven't been previously cached:  // Register an event listener for the 'fetch' event on the service workerself.addEventListener('fetch', function(event) {     // Log the URL of the requested resource to the console    console.log('URL requested: ', event.request.url);        // Use the 'respondWith' method to handle the fetch event    event.respondWith(      // Open the cache named 'my-cache'      caches.open('my-cache').then(function(cache) {        // Try to find a match for the requested resource in the cache        return cache.match(event.request).then(function(response) {          // If a match is found in the cache          if (response) {            // Log that the response was retrieved from the cache            console.log('Response retrieved from cache: ', event.request.url);            // Return the cached response            return response;          } else {            // If no match is found in the cache, fetch the resource from the network            return fetch(event.request).then(function(networkResponse) {              // Add the network response to the cache              cache.put(event.request, networkResponse.clone());              // Log that the response was added to the cache              console.log('Response added to cache: ', event.request.url);              // Return the network response              return networkResponse;            });          }        });      })    );  });Advantages of PWAs for businessesSome of the key benefits of PWAs for businesses include:Short-time to marketDeveloping and deploying a PWA can be done much faster than traditional native apps, making them an attractive option for businesses that need to get their product to market quickly. This is because PWAs can be developed using the same web technologies that are used for traditional web apps, reducing the need for separate development for iOS and Android platforms.Affordable to buildPWAs are usually less expensive to develop and maintain compared to native apps. This is because PWAs are built using web technologies and can run on a browser, eliminating the need for separate development for different operating systems. Additionally, PWAs can be updated instantly without going through the app store approval process, reducing the time and effort needed to maintain the app.Improved SEOPWAs are more easily discoverable by search engines than traditional web apps because they are built using standard web technologies, making it easier for search engines to crawl and index them. This leads to improved search engine rankings and increased web traffic, making it easier for businesses to reach their target audience through the web.Improved Customer Experience and EngagementPWAs provide a more seamless and engaging experience for users compared to traditional web apps. With features like offline functionality, push notifications, and fast loading times, PWAs are designed to keep users engaged and coming back for more. Additionally, PWAs can be installed on the home screen of a user's device, making them feel more like a native app than a traditional web app.High PerformancePWAs are designed to be fast and responsive, providing a smooth and satisfying experience for users. They minimize data usage, minimize loading times, and optimize performance even on low-end devices. This is made possible through the use of Service Workers, which run in the background, allowing PWAs to cache assets and improve performance even when the network is slow or unavailable.Disadvantages of PWAsPWAs aren't perfect. They're a great mid-way solution but have some downsides:Limited adoptionPWAs are still a relatively new technology, and adoption among users and businesses is limited. This can make it more difficult for businesses to find developers who are familiar with PWAs, or to find users who are looking for PWAs. Additionally, some users may still prefer native apps over PWAs, which can limit the reach and impact of PWAs.Compatibility issuesPWAs rely on modern browser technologies, and not all browsers support these technologies equally. This can result in compatibility issues, with some users being unable to access the full functionality of the PWA on their device. This can limit the reach of the PWA and reduce its effectiveness as a solution.No push notifications on iOS - Wait!It's finally happened. Apple has delivered push notifications to iOS in 16.4. They're still a little janky, but this is a great step forward.We've had the lack of push notifications in iOS as a disadvantage in this article for the past six months, but it's time to strike it off the list.What is Electron?Electron is a popular framework for building cross-platform desktop applications using web technologies such as HTML, CSS, and JavaScript. It provides a runtime environment for executing these technologies in a desktop environment and offers a comprehensive set of APIs for accessing native operating system functionalities such as system notifications, and file system access.How does Electron work?Electron operates on the principle of creating a web view, which acts as a container for your application's web pages. It then runs a Chromium browser instance within this web view, providing you with a fully functional web browser environment. This means that Electron applications have the full capabilities of a browser and can access web APIs, execute JavaScript, and render HTML and CSS, just like a web page in a browser window.The main process in Electron is responsible for creating the web view and running the Chromium browser instance. It also provides the main window for your application and handles interactions between the user and your application.In addition to the main process, Electron supports creating additional renderer processes, which run your application's web pages. These renderer processes run in separate threads and can interact with the main process through inter-process communication (IPC).The IPC is implemented using a simple message-passing mechanism. The main process and renderer processes can send messages to one another using the ipcRenderer and ipcMain modules, respectively.Here's an example of using IPC in Electron:// Main Processconst { ipcMain } = require('electron');ipcMain.on('message-from-render-process', (event, arg) => {  console.log(arg);  // prints \"ping\"  // send a reply message to the render process  event.reply('message-from-main-process', 'pong');});// Render Processconst { ipcRenderer } = require('electron');// send a message to the main processipcRenderer.send('message-from-render-process', 'ping');// listen for messages from the main processipcRenderer.on('message-from-main-process', (event, arg) => {  console.log(arg);  // prints \"pong\"});In this example, the renderer sends an asynchronous message ‘ping’ to the main process using the ipcRenderer.send method. The main process listens for this message using the ipcMain.on method and logs the message to the console. The main process sends a reply \"pong\" to the renderer process using the event.reply method. The renderer process listens for this reply using the ipcRenderer.on method and logs the reply to the console.Let's look into the advantages of ElectronAdvantages of Electron for businessesCross-platform developmentElectron allows developers to create cross-platform applications that run seamlessly on multiple platforms such as Windows, Mac, and Linux, making it a cost-effective solution for businesses that want to reach a wide audience.Strong community supportElectron has a large and active open-source community that continuously works towards improving the framework. This community support enables businesses to easily find solutions to any challenges they face during the development process.Robust development environmentElectron provides a comprehensive development environment, including a complete set of APIs and a powerful renderer engine. This makes it easier for businesses to develop feature-rich applications with a high level of performance and stability.Access to a wide range of librariesElectron enables developers to utilize a wide range of libraries and frameworks, making it easier for businesses to add the features and functionality they need to their applications.Reusable codebaseThe codebase developed using Electron can be reused across multiple platforms, reducing development time and effort and enabling businesses to focus on delivering the best possible user experience.Integration with existing technologiesElectron enables seamless integration with existing technologies and platforms, making it easier for businesses to leverage their existing infrastructure and tools.PWA vs Electron: ComparisonThe only way to work out if PWA or Electron is the right choice for your project is to think through your requirements and see which technology ticks more boxes.Below is a comparison between PWA and Electron based on four criteria:PerformanceDoes your application need to be lightning quick? Will you lose user interest or engagement if your applications becomes even slightly lagged? Or are a big proportion of your intended audience operating on slow networks (i.e. 3G)? Then PWA is probably the right choice.PWAs have the edge over Electron in terms of performance. This is partly because much of the JavaScript overhead is transferred to the service workers, which run in the background and do not require a main UI thread. This means that PWAs can provide fast and smooth user experiences, even with limited network connectivity or on low-end devices.Since PWAs rely on the browser to handle much of the heavy lifting, they can take advantage of browser optimizations and are less resource-intensive than Electron apps. As a result, PWAs often load faster and consume less memory, leading to better overall performance and a more seamless user experience.SecurityIf your application handles highly sensitive data (i.e. financial or medical transactions), then PWA probably gets the nod of approval.In terms of security, PWAs are \"relatively\" secure, as they rely on browser-based security features, such as Same-Origin Policy and Content Security Policy, to prevent cross-site scripting attacks and other security vulnerabilities.Applications built with Electron can be more vulnerable to security threats, such as zero-day exploits since they run on a platform independent of the underlying operating system.Mobile friendlyWill your application need to be available to users on mobile devices and tablets? Then, once again, PWA is going to be the right choice.Ideally, you want your app to be accessible to your potential customers on multiple platforms - desktop and mobile devices. PWAs have the upper hand here since they work on all devices, including desktops, tablets, and smartphones.Desktop friendlyOn the flip side to the last requirement, does your application have a specific use case where it needs to operate as an installable desktop program? If the answer is yes, then Electron is a perfect choice.Good examples of this use case are Slack, Microsoft Teams and VS Code. There are times when using these applications in the browser makes sense, like when the user is jumping between machines. But most of the time, having a dedicated desktop application is going to allow for a more immersive and user friendly experience.Updates and integrationsAs for updates and integrations, PWAs can be updated seamlessly, delivering changes directly to users' devices. Electron applications, on the other hand, require manual installation of updates, and their integration with existing technologies and platforms can be more complex.By now, it's evident PWAs are the winner in most of the categories. However, it's worth noting that it depends with your project goals.PWA vs Electron use casesPWAs are a good fit for businesses that need to offer their customers a fast and accessible experience without requiring them to install an app. PWAs are designed to work offline, have fast loading times, and are accessible through a browser, making them ideal for content-based websites and web apps that require low-level hardware access.Electron is an excellent option for businesses that need to build desktop applications with a native look and feel. Electron provides access to native operating system APIs, allowing developers to build high-performance desktop applications with the same technologies they use for web development. Electron is also a good choice for businesses that need to integrate their apps with the native desktop environment, such as file systems and system notifications.Frequently asked questionsQ: Which is better for businesses, PWAs or Electron?The choice between PWAs and Electron depends on the specific requirements and goals of the business. PWAs are well-suited for businesses that prioritize a quick time to market, affordability, and high performance, while Electron is a better fit for businesses that require a full-fledged native desktop application.Q: What are the best tools for developing PWAs and Electron apps?PWAs can be developed using standard web development tools such as HTML, CSS, and JavaScript. Some popular frameworks and libraries for building PWAs include React, Angular, and Vue.js.Electron apps, on the other hand, require knowledge of Node.js and JavaScript to develop. Some popular tools for building Electron apps include Visual Studio Code, Atom, and Electron Forge.Q: Can I convert my existing web app into a Progressive Web App or Electron App?You can convert your existing web app into a Progressive Web App (PWA) or an Electron App. Converting to a PWA involves updating your app to meet PWA standards and utilizing service workers to add offline functionality and improve performance. Converting to an Electron App involves wrapping your web app in an Electron shell to give it the functionality of a native desktop app. This process involves using Node.js and Chromium to create a standalone app.Key TakeawayProgressive Web Apps and Electron are two powerful technologies that have their own unique strengths and limitations. PWAs offer a fast, affordable, and secure solution for businesses looking to improve customer experience and engagement.At the same time, Electron provides the best solution for businesses that need to create native-like desktop applications. The choice between the two ultimately depends on the specific needs of your business, so it is important to consider the trade-offs between PWAs and Electron. With the right technology and implementation, businesses can leverage the benefits of both to create powerful, engaging, and user-friendly applications that drive growth and success."
  },
  {
    "title": "Commercetools vs Hybris: The Battle For Enterprise eCommerce",
    "plaintext": "There aren’t a whole ton of high-quality articles written about Commercetools and Hybris. Not when you look at the number of articles comparing Shopify and WooCommerce.This trend makes sense, given anyone can spin up a Shopify or WooCommerce store with little help and budget. So every man and his dog has taken a stab at writing a comparison piece.However, it’s a much more difficult assignment to write about the next tier of eCommerce solutions that are suited to businesses that have grown in size and complexity. This is the “band” of solutions that includes headless stores, and eCommerce backends like Commercelayer and Crystallize.These tools are aimed at businesses grossing between $10 - $100 million in sales annually and require custom development just to get up and running.So it figures that the next step up again, enterprise-focused solutions like Commercetools and Hybris aren’t well covered. They can only really be assessed by content writers with a software background who have used the tools or done some kind of deep research.Our team started going down the path of becoming Commercetools partners, which requires a technical exam and comes with a decently large fee. We’ve also crossed paths with Hybris a few times during our travels.The target market of these tools is eCommerce giants that need to process extreme volumes of transactions. Commercetools admits that their ideal customer is paying between $50,000 to $80,000 as a monthly subscription fee.Both these solutions are designed to integrate into sophisticated architectures and a big part of their business model is providing expert resources to assist with development. They carry sophisticated and comprehensive service level agreements to guarantee uptime and quick turnaround of issues.In this article, we will compare the two platforms, highlighting their key features, pros and cons, and the industries they are best suited for. The goal here is to provide a comprehensive overview of both platforms and help you determine if one of these tools is the fit for your company.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitCommercetools overviewCommercetools is a highly scalable, cloud-native platform that provides a comprehensive suite of eCommerce functionality. This platform leverages microservices architecture to deliver a modular, flexible, and customizable solution that can be tailored to meet the unique requirements of each business.Commercetools is a member of the MACH alliance and one of the driving forces behind modern, modular commerce. They boast some large clients like Audi, Lego and Burberry just to name a few of the better known companies.Features of CommercetoolsProduct Information Management (PIM) SystemAt the core of Commercetools is a robust product information management (PIM) system that enables merchants to manage their products, prices, and inventory in real time. Unlike systems like Shopify, where product information is standardized, Commercetools provides flexibility to model the product information however is required.Order Management System (OMS)The OMS provides real-time order processing and fulfillment capabilities. This enables merchants to manage their orders, shipments, and returns efficiently, ensuring customers receive their orders quickly and without issue.Shopping cart and checkout systemCommercetools provides a robust set of APIs to build dynamic shopping carts and checkout systems. Like everything else in the Commercetools engine, the cart and checkout offers deep customization for things like applying tax rules, calculating shipping, discounts, rounding values, duplicating carts and a whole range of other features.Payment processing systemCommercetools doesn’t have its own payment engine. Rather, it integrates with any payment gateway that can be called by API like Stripe and Adyen. The payment system works by specifying the interface (i.e. gateway) and provides a set of endpoints to trigger actions.Customer management system (CRM)The platform has flexible tooling for managing customers' accounts, profiles and connected orders.Commerce APIsArguably the most important feature of Commercetools is it’s extensive and robust set of APIs that can be used to perform any imaginable eCommerce activity.Advantages of CommercetoolsCommercetools is an excellent platform for medium to large businesses because it can handle large volumes of transactions and has tools designed specifically for businesses that operate at scale.However, since we’re comparing Commercetools to Hybris, these are the points of difference that rule in Commercetool’s favour:Microservice architectureCommercetools is designed to work on its own as an isolated service which communicates by API. This holds a ton of appeal for businesses that don’t want to leverage functionality and bring it into their existing architecture, rather than rebuilding everything to work inside a new monolithic application like Hybris.API-firstHybris also has a mature API, but Commercetools is API-first. The design of the entire platform was built around serving functionality over API. This approach lends itself to modern frontend tooling like Angular, React and Vue.CostCommercetools isn’t exactly cheap, but for medium to large businesses that have budgeted hundreds of thousands to millions of dollars in annual software expenses, it comes out significantly cheaper than Hyrbis.CustomizationThis point could probably be argued because Hyrbis can be modified to meet most uses cases. However, the decoupled nature of Commercetool’s service makes it easier to customize its implementation.CommunityCommercetools has a growing community of early adopters. Community engagement is high and finding support is simple. While the community isn’t as large as Hybris, the focus is on bringing modern solutions to existing problems.Hybris overviewHybris is one of the incumbents in the enterprise eCommerce market. It provides medium to large businesses with a range of tools and features for creating and managing online stores. Hybris is designed to help businesses sell their products and services online, manage customers and orders, and provide a personalized shopping experience.Hybris is known for its range of customization options, including custom integrations and the ability to build custom extensions.It’s a mature platform that has been around since 1997 (making it ancient in the tech world) and has a large and established community of developers and users. This can make it easier to find support and resources but has rendered it a less agile solution for solving modern problems when compared with Commercetools.Features of HybrisHybris has similar features as Commercetools. They includeProduct Information Management (PIM) systemThe Hybris PIM system is designed to help businesses manage product information, including product data, images, and attributes, and distribute this information across multiple channels and touchpoints.Order Management System (OMS)Hybris' OMS system handles order processing and fulfillment, order tracking returns and cancellations including refunds and customer communication, inventory management and customer service tooling.Shopping cart and checkout systemThe Hybris shopping cart and checkout system provides customers with an easy and convenient way to purchase products and services online, and it is designed to help businesses increase sales and conversion rates.Payment processingHybris doesn’t have its own payment processor. Instead, it integrates with a range of payment processors, including PayPal, Stripe, and others, making it possible for businesses to accept payments from customers using a variety of payment methods.  Customer management toolsThe Hybris platform has all the functionality to manage customers including individual and aggregated customer records, sophisticated customer segmentation, customer engagement tools, loyalty programs and analytics.Advantages of HybrisHybris is a more comprehensive approach to mid-market and enterprise eCommerce. Unlike Commercetools, there’s no need to build a separate frontend. Hybris comes with its own templates, theme and components, as well as a JavaScript framework called SAP Hybris Commerce.Given that it operates as a single entity, Hybris offers some unique features and benefits:Multi-channel capabilitiesThe multi-channel capabilities allow businesses to reach customers through multiple channels, including eCommerce websites, mobile apps, and physical stores. Since the eCommerce operations are managed from a single system, Hybris offers a way for businesses to create a seamless and consistent customer experience.Extensive customizationOne of the key customization options provided by Hybris is the ability to create custom extensions to the platform using Java. Hybris provides a comprehensive Java development kit (SDK) that makes it easy to create custom extensions, including new features and functionalities, and to integrate the platform with other systems and technologies.Hybris also provides a range of APIs that enable businesses to access and manipulate data stored within the platform, including product information, customer data, and order history.Integration optionsHybris provides a range of integrations with leading e-commerce platforms, such as Magento, Shopify, and Salesforce, as well as with a range of payment providers, such as PayPal, Stripe, and Adyen. These integrations make it easy to connect Hybris with other systems and to extend the platform with new functionalities and capabilities.Robust ArchitectureThe robust architecture of Hybris allows businesses to scale up or down as needed, providing the flexibility to accommodate changes in business needs over time.Large EcosystemHybris has a large ecosystem of partners and developers, providing businesses with access to a wealth of resources and expertise.Mature User CommunityHybris has a mature user community, providing businesses with access to a wealth of knowledge and support.Let's compare the two platforms by identifying their similarities and differences.Commercetools vs. Hybris: ComparisonSimilarities between Commercetools and Hybris:Omnichannel commerceBoth platforms provide a comprehensive solution for selling across different channels, such as online stores, marketplaces, physical stores, and mobile applications, and provide a centralized platform for managing all sales channels from a single location.Scaling for enterprise volumeGiven the target market for both platforms is enterprise business, they’re both designed to handle huge volumes of traffic and data. Both platforms offer highly robust service level agreements stipulating that they’ll maintain almost-perfect uptimes or pay exorbitant fees.CustomizationBoth platforms offer a high degree of customization, allowing businesses to tailor their commerce solution to their specific needs and requirements.Product managementBoth platforms provide robust product management features, including product catalogue management, pricing, and inventory management.Order managementBoth platforms offer comprehensive order management capabilities, including order processing, tracking, and returns management.Differences between Commercetools and HybrisCustomizationThe customization options in Commercetools and Hybris differ in terms of approach and tools offered.Commercetools provides a high degree of customization through its APIs, allowing businesses to build custom solutions that fit their specific needs and requirements. The platform's headless architecture means that businesses can easily integrate with other systems and technologies to build custom commerce experiences. Additionally, Commercetools provides a wide range of documentation and support for developers looking to build custom solutions.Hybris also provides customization options, but its approach is more focused on providing a wide range of tools and extensions for building custom solutions. Hybris has an extensive library of pre-built integrations and offers a comprehensive set of tools and extensions for customizing its platform. This makes it easier for businesses to build custom solutions without writing a lot of code.CostCommercetools is more cost-effective than Hybris, particularly for smaller businesses and those looking for a more flexible and scalable commerce platform. The platform charges based on the number of API calls made, and the amount of storage used, making it easier for businesses to control costs.On the other hand, Hybris can be more expensive than Commercetools, particularly for larger businesses and those requiring a comprehensive commerce platform with a wide range of features and integrations. Also, Hybris typically requires a larger upfront investment, and businesses must factor in the cost of licenses, maintenance, and support when budgeting for their commerce platform.IntegrationsBoth Commercetools and Hybris provide integration options with other systems and technologies. However, the former relies on its growing ecosystem of third-party integrations that work well with its headless architecture. Conversely, Hybris offers an extensive library of pre-built integrations for various systems and technologies.Factors to consider when choosing an eCommerce solutionWhen considering a commerce platform, consider the following factors:Scalability: It is imperative to assess the platform's ability to handle increasing traffic levels, data, and transactions as your business grows. A scalable commerce platform will allow for smooth growth and expansion without requiring frequent upgrades or replacements.CustomizationThe level of customization required will vary from business to business. Some may require a highly flexible platform that can be tailored to their specific needs, while others may prefer a platform with pre-built components and integrations. It is crucial to determine the level of customization your business requires and whether the platform can provide those capabilities.IntegrationThe ability to integrate with other systems and technologies is critical to consider when choosing a commerce platform. Consider the systems and technologies your business uses and ensure that the platform provides the necessary integrations and APIs.PerformanceThe commerce platform must handle high volumes of traffic and transactions while maintaining fast and reliable performance. This is crucial for delivering a positive customer experience and ensuring the smooth operation of your business.CostThe cost of the platform, including setup, customization, and ongoing maintenance and support, should be evaluated to determine whether it fits within your budget. It is essential to consider the long-term cost of the platform and whether it provides good value for money.SecurityThe security of your data and transactions is paramount, and the commerce platform must meet industry security standards and regulations. Ensure that the platform provides robust security features and has a proven track record of protecting customer and business data.Frequently asked questionsQ: Who should use Commercetools?Commercetools is a good choice for businesses that find Shopify Plus too inflexible and have pushed it to its limits. They're at the point that they need guarnateed uptime and higher infrastructure resourcing to meet their transactional demands.Similarly, Commercetools is a great platform for an established application or website that wants to introduce eCommerce capacities and needs flexibility in the implementation.Q: Who should use Hybris?Hybris is a good choice for businesses that want a more traditional, all-in-one eCommerce solution with a wide range of features and capabilities available right out of the box. Keeping in mind that Hybris is an expensive platform that most medium sized businesses wouldn't be comfortable paying for.Key TakeawayOverall, both Commercetools and Hybris are powerful eCommerce platforms that offer a range of features and capabilities to help businesses manage their online stores and sell their products and services online. While both platforms have their unique strengths and weaknesses, Commercetools is an ideal option for businesses looking for an affordable, flexible, and scalable eCommerce solution. Whether you're a small startup or a large enterprise, Commercetools provides the tools you need to succeed in the rapidly evolving world of eCommerce."
  },
  {
    "title": "Node.js vs Next.js: Runtime Environment vs Framework",
    "plaintext": "Node.js and Next.js are two of the hottest JavaScript tools to build applications. If you're researching Node and Next to figure out if they'll be a good fit for your project, then you're in the right spot.The first thing to point out is that comparing Next.js with Node.js is like comparing oranges with apples.  While they're both great technologies to build applications and both JavaScript based, they're completely different and used for very different situations.Node.js is a JavaScript runtime environment built on Chrome's V8 JavaScript engine. It's called a \"runtime\" and not a language or framework because it's an environment for executing JavaScript on a specific platform - in this case a server. Node provides a set of resources and services, such as memory management, input/output handling, and network communication, that allow to it to execute operations and perform functions.Next.js is a framework for building server-rendered or statically-exported applications. It comes packaged with Node, which handles its server-side rendering, but it also has a React-based templating engine. Next is known as a React framework, but you could argue it's also a Node framework.Since Next.js comes with Node, it complicated the comparison of the two technologies, but we're going to run through it anyway!14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitNode.js overviewNode.js is a runtime environment for executing JavaScript code on the server side. It was first released in 2009 and has become one of the most popular choices for building scalable and efficient web applications.Node uses an event-driven, non-blocking I/O model that makes it particularly well-suited for real-time, data-intensive applications. Being built on top of the V8 JavaScript engine developed by Google makes Node.js a fast and efficient option for building web applications. Additionally, it uses a single-threaded model, allowing it to handle many concurrent connections without the overhead of traditional multi-threaded servers.Apart from being a legitimately good choice for writing backend code, Node's popularity can be attributed to the fact that it uses JavaScript. Teams already writing their frontend code with React, Angular, or Vue can build their backend with the same language (JavaScript). This approach streamlines everything. There's no need to jump between a different backend language like Ruby, PHP or Python, and means that full stack developers can work on both parts of the application.Features of Node.jsHere are some of the most important features of Node.js:Event-driven, non-blocking I/O modelNode.js uses an event-driven, non-blocking I/O model that allows it to handle a large number of concurrent connections efficiently. This model is designed to handle input/output operations in an asynchronous manner, which means that the system can continue processing other requests while it is waiting for a response from a slow I/O operation.Modular DesignNode.js uses a modular design that allows developers to reuse and share code between different parts of their application. This makes it easier to develop and maintain large-scale applications and also reduces the amount of code that needs to be written, resulting in faster development times.Built on Google's V8 JavaScript engineNode.js is built on Google's high-performance V8 JavaScript engine, which provides fast and efficient JavaScript execution. This engine was designed to support large-scale web applications and can execute JavaScript code at high speeds, making Node.js a good choice for building performance-critical applications.Built-in debugging toolsNode.js includes built-in debugging tools that easily identify and fix problems in your code. The tools include an interactive debugger and support for console logging, which can help you quickly identify and resolve issues.Cross-platform CompatibilityNode.js is compatible with a wide range of operating systems, including Windows, Mac OS X, and Linux. This makes it easy to develop and deploy applications on different platforms and also provides greater flexibility for developers who need to build applications that run on multiple operating systems.Advantages of Node.jsHigh PerformanceNode.js uses Google's V8 JavaScript engine, which is known for its high performance and speed.ScalableNode.js uses an event-driven, non-blocking I/O model that allows it to handle a large number of concurrent connections efficiently. This makes it an ideal choice for building scalable, real-time applications that need to handle a large number of requests.Improves productivityNode.js supports asynchronous programming, which allows developers to write fast, responsive code that can handle multiple requests concurrently. This results in faster development times and reduced resource usage, which can help improve overall productivity.Robust community supportNode.js has a large and active community of developers who have created a vast number of libraries and tools that are available through the npm package manager. This makes it easy to add new functionality to your application and helps to reduce development time.Excellent frameworksThere are a handful of mature frameworks that speed up the development process and offer advanced tooling for creating server side applications and APIs. The frameworks worth mentioning are Express, Koa, Meteor, NestJS, and Hapi.Limitations of using Node.jsWhile Node.js is an excellent tool for creating backend functionality, it's also JavaScript that's been modified to run on a server. It's by no means perfect. Here are some of the most important limitations of using Node.js:Single-threadedAlthough Node.js is designed to handle multiple requests concurrently, it uses a single-threaded model. This can make it more difficult to handle CPU-bound tasks and can also lead to performance bottlenecks in applications that require heavy computation.Limited database supportNode.js was initially designed to support web applications, and as a result, it has limited support for databases other than MongoDB. This can make it more difficult to integrate Node.js with existing databases and can also limit the types of applications that can be built using Node.js.Callback HellNode.js relies heavily on callbacks, making it difficult to write clean, maintainable code. This is particularly true for complex applications that require multiple asynchronous operations. This problem is commonly referred to as \"callback hell.Memory leaksNode.js applications are susceptible to memory leaks, leading to performance problems and stability issues. This is because Node.js relies on a garbage collector to manage memory, and the garbage collector may not always reclaim memory quickly.Next.js overviewNext.js is a free, open-source framework for building server-rendered or statically exported React applications. It was developed by Vercel and provides a comprehensive set of tools and features for building high-performance, scalable, and optimized web applications.Next was created to make life easier for developers to build fast and efficient web applications. It provides a set of conventions and best practices for organizing and structuring code, simplifying the development and maintenance of sophisticated applications.Next is unique in that it supports pretty much every rendering technique. Since it runs on top of Node, content can be rendered on the server, or it can be statically pre-rendered. This flexibility allows for super fast applications to and websites to be developed that also support backend functionality.Vercel have also developed a cloud-based hosting environment specifically for Next.js websites and applications. Right now, Vercel arguably offers the most advanced set of hosting functions, such as The Edge, Middleware and Incremental Static Regeneration.  Features of Next.jsNext.js is packed with great features. Since it's built on top of Node and React, its baseline features are already very robust.Server-side renderingOne of the key features of Next.js is its support for server-side rendering, which means that the HTML for a web page is generated on the server and sent to the client, rather than being generated on the client using JavaScript. This provides several benefits, including faster initial load times, improved search engine optimization (SEO), and better accessibility for users.Static site generationNext.js also provides support for static site generation, which means that web pages can be pre-generated and served as static HTML files. This provides several benefits, including faster load times, reduced server load, and improved security.Automatic code splittingNext.js uses automatic code splitting to ensure that the size of the JavaScript and CSS files that are loaded by a web page are as small as possible. This helps to improve page load times and make it possible to build fast and efficient web applications.RoutingNext.js provides a powerful and flexible routing system that makes it easy to define and manage the routes for your web application. This includes support for dynamic routes, which makes it possible to build applications with dynamic URLs that can change based on the data being displayed.Built-in support for APIsNext.js also provides built-in support for APIs, making it easy to build serverless applications that run entirely on the client. This is achieved using a combination of GraphQL and the Apollo Client, which allow developers to easily query and manipulate data in a flexible and efficient manner.Advantages of Next.jsBlazing fast performanceNext.js provides several features that help to improve the performance of web applications, including server-side rendering, static site generation, and automatic code splitting. These features help to ensure that pages load quickly and provide a smooth user experience.Unrivaled Search Engine OptimizationNext.js supports server-side rendering, which can help to improve the search engine optimization (SEO) of web applications. This is because search engines can easily index the HTML generated on the server, rather than having to rely on JavaScript to generate the content.AccessibilityNext.js's support for server-side rendering also helps to improve the accessibility of web applications. This is because users with assistive technologies, such as screen readers, can access the content of the web pages more easily.Friendly developer experienceNext.js provides several features and tools to help simplify the development process, including a flexible and powerful routing system, an optimized build system, and a large ecosystem of resources, tools, and libraries.Reusable componentsNext.js is built on top of React, which benefits from React's component-based architecture. This makes it easier to build and reuse components across multiple pages and applications, helping to improve the maintainability and scalability of your code.Improved SecurityNext.js's support for static site generation helps to improve the security of web applications. This is because the content is pre-generated and served as static HTML files, reducing the risk of security vulnerabilities and attacks.Limitations of using Next.jsWhile Next.js is a highly popular and effective framework for building web applications, it does have some limitations that developers should be aware of before deciding to use it for their projects. Here are some of the key limitations of using Next.js: * Complexity - While Next.js provides many useful features and tools for building web applications, the framework can be complex to set up and configure, especially for developers who are new to it. This can make it difficult for teams to get started quickly and lead to longer development times. * Browser compatibility - Next.js is built using modern JavaScript features that may not be supported by older browsers. Developers may need to consider the target audience of their applications and ensure that they are compatible with the browsers their users are likely to be using. * Dependency on React - Next.js is built on top of React and requires a deep understanding of the React framework to use it effectively. This can be a challenge for developers who are new to React or have limited experience with it.Comparison between Node.js and Next.jsTo gain a clear understanding on which technology to use between, Node.js and Next.js, we have to compare them based on the following criteria:PerformanceNode.js is known for its fast and efficient performance, especially when handling many requests and real-time data streams. Node.js is built on top of the V8 JavaScript engine and utilizes an event-driven, non-blocking I/O model that allows it to process multiple requests concurrently, improving overall performance and scalability.Next.js, on the other hand, is designed for server-side rendering (SSR), which can significantly improve the performance of web applications by reducing the amount of JavaScript that needs to be processed by the client's browser. However, SSR can also have a performance impact on the server, especially for complex and data-intensive applications.ScalabilityNode.js is highly scalable and can handle many concurrent connections and requests. Node.js applications can easily be scaled horizontally by adding more nodes to the system, which allows for increased performance and capacity.Next.js is also highly scalable and offers built-in support for server-side rendering, which makes it easier to scale web applications. However, the scalability of Next.js applications can also be limited by the performance of the underlying server hardware and infrastructure, and developers may need to carefully consider the architecture of their applications to ensure that they can handle increased loads over time.Development speedNode.js is known for its fast development times and its ability to handle a wide range of use cases and applications. With a large and active community of developers and a wealth of open-source libraries and tools, Node.js developers can quickly and easily build, test, and deploy applications.Next.js offers many powerful features and tools that can greatly speed up the development process, including built-in support for server-side rendering, automatic code splitting, and built-in CSS support. However, Next.js can also be complex to set up and configure, and developers may need to learn the framework and its features before they can effectively use it for their projects.Community supportNode.js has a large and active community of developers and is one of the most widely-used JavaScript frameworks. With its popularity and widespread use, Node.js developers can easily find help and support and quickly access a wealth of open-source libraries and tools.Despite being a relatively new framework, Next.js boasts a significant community of developers from the well-established React community. So, there are plenty of resources and support available for Next.js.Frequently asked questionsQ: What is Node.js?A: Node.js is a cross-platform, open-source runtime environment for server-side and networking applications built on the JavaScript programming language. It allows developers to build fast and scalable applications using JavaScript on the server side.Q: What is Next.js?A: Next.js is a React-based framework for building server-side rendered (SSR) web applications. It provides tools and features to help developers build fast, scalable, high-performing web applications with React.Q: Which is better for building real-time applications, Node.js or Next.js?A: Both Node.js and Next.js can be used for building real-time applications, but each has its own unique strengths and limitations. Node.js is known for its fast performance and scalability, making it a popular choice for real-time applications. Next.js, on the other hand, provides built-in support for server-side rendering and can greatly improve the performance of web applications. Developers should carefully evaluate their specific needs and requirements before deciding which framework is best for their real-time applications.Key TakeawayNode.js and Next.js are both powerful technologies that offer their own set of benefits and limitations for building web applications. Node.js is ideal for fast and scalable server-side and networking applications, while Next.js provides a robust framework for building high-performing React-based web applications with server-side rendering. Ultimately, the best option for your next web project will depend on your specific needs and requirements. Whether you choose Node.js or Next.js, carefully evaluate your options and choose the technology that best meets your project's goals and objectives."
  },
  {
    "title": "Is Bootstrap a Framework?",
    "plaintext": "Yes, Bootstrap is a CSS framework that helps speed up user interface (UI) development. A CSS framework is a code library containing ready-to-use components that can be tweaked to create a customized UI.Bootstrap was created by Twitter in 2011 to make designing and building websites easier and more consistent. The framework provides a set of CSS and JavaScript components, such as navigation bars, buttons, forms, and modals, that can be easily integrated into web pages. It also includes a responsive grid system for designing layouts, making it easier for developers to create mobile-friendly pages without manually adjusting their designs for different screen sizes.In this post, we'll take a closer look at Bootstrap, exploring its features, advantages, and use cases. We'll also compare Bootstrap to other front-end frameworks and discuss its limitations and potential drawbacks. This will help you understand Bootstrap and whether it's the right choice for your next project.💡Here's a quick plug before you read the rest of the article!Why not join our newsletter? We send out a monthly \"too long, didn't read\" summary of our content. There's no selling or spam. It's simply a relationship building mechanism grounded in old fashion, good quality content 👍.Hey! Join our community and get the latest tech insights.Once a month, we compile and distribute a \"too long, didn't read\" summary of our articles so you get the good stuff quickly.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFeatures of BootstrapBootstrap is a comprehensive front-end development framework that provides a wide range of features for creating responsive and visually appealing web designs. Some of the key features of Bootstrap include:ResponsivenessOne of the key features of Bootstrap is its responsiveness, which means that designs created with Bootstrap will automatically adjust to different screen sizes and devices. This makes it easy to create great designs on desktop computers, laptops, tablets, and smartphones.Consistency in designBootstrap includes a set of pre-designed UI components and CSS classes that help ensure a consistent look and feel across different pages and components of a website. This makes it easier to maintain the design and branding of a website, even as it grows and evolves over time.Pre-designed UI components and CSS classesBootstrap includes various pre-designed UI components, including buttons, forms, navigation menus, modals, and more. These components are fully customizable and can be styled to match the look and feel of a website. Bootstrap also includes a set of CSS classes for common design elements, such as typography, colors, and spacing, making it easy to create cohesive and visually appealing designs.Support for CSS pre-processorsBootstrap supports CSS pre-processors such as Sass, making it easy for developers to create custom styles and designs. This allows developers to take advantage of the power and flexibility of CSS pre-processors while still benefiting from the convenience and consistency of Bootstrap's pre-designed components and classes.JavaScript plugins for adding interactive componentsBootstrap is packed with several JavaScript plugins for adding interactive components to a website, such as modals, carousels, and popovers. These plugins are easy to use and can be customized to match the look and feel of a website.Advantages of using BootstrapHere are some of the key advantages of using Bootstrap:Easy to get startedBootstrap is designed to be easy to use, even for developers with limited front-end development experience. The framework provides clear documentation and plenty of examples, making it simple to build responsive, modern web applications.Saves time in developmentOne of the biggest advantages of Bootstrap is that it saves time in development. With its pre-built UI components, developers can quickly and easily add common elements like buttons, forms, and navigation menus to their applications without having to write all the HTML and CSS from scratch. This can be a huge time-saver, especially for developers working on tight deadlines.Consistent design across multiple devicesBootstrap is designed to provide a consistent look and feel across all platforms and devices. This is achieved through the use of a responsive grid system and a consistent set of UI components. This consistency makes it much easier to build applications that look great and function well on all devices, from smartphones to desktop computers.Large community for support and customization optionsBootstrap has a large and active community of developers, which makes it easy to find support and customization options when needed. Whether you need help troubleshooting a problem or want to customize the look and feel of your application, the Bootstrap community is there to help. Additionally, there are many third-party plugins and add-ons available for Bootstrap, which can further enhance the framework's capabilities and make it even more versatile and powerful.Disadvantages of using BootstrapDespite its advantages, there are some limitations to using Bootstrap. These include:Performance - Bootstrap can add a significant amount of code to a project, impacting its performance, particularly on slower or older devices. This can be a problem for projects that need to be optimized for performance. The size of the bootstrap library depends on the version and the components included, but a typical bootstrap CSS file is around 6 to 7 MB, and the JavaScript file is around 3 MB.Dependence on JavaScript - Bootstrap relies heavily on JavaScript to provide its UI components, which can make it a less suitable choice for projects that need to be optimized for accessibility or devices that have limited JavaScript support.Dependence on pre-built components - Bootstrap's component-based design philosophy means that developers are often limited to using pre-built UI components rather than creating their own custom components. This can result in a uniform look and feel across projects, which may not be suitable for all applications.Lack of browser compatibility - Bootstrap is built to support modern web browsers, but it may not work properly on older browsers or devices. This can be a problem for projects that need to support a wider range of browsers and devices.Large file size - Bootstrap has a large file size, which can impact the performance of projects and make them slower to load, particularly on slower or older devices.Overuse - Bootstrap solved a real problem for developers back in the day. It eliminated the need to be a good designer. As a result, millions of sites and applications adopted bootstrap and created a homogenized \"look\" that is instantly recognizable and quite bland.  How Bootstrap differs from other CSS frameworksLet’s compare Bootstrap to some of the most popular CSS frameworksTailwind CSSTailwind CSS (what our team uses!) and Bootstrap are both front-end frameworks that provide UI components and a responsive grid system for building web applications. However, there are some critical differences between the two that may make one more suitable for a particular project:Design philosophyTailwind CSS is a utility-first framework, which means it provides low-level utility classes that can be used to build complex UI components. Bootstrap, on the other hand, is a component-based framework which provides pre-built UI components that can be easily customized.CustomizationTailwind CSS provides more control over the look and feel of a project compared to Bootstrap, but it also requires more CSS writing and customization. Bootstrap, on the other hand, provides a more straightforward approach to UI development but has less control over the final output.File sizeThe great thing about Tailwind CSS is that it comes with a configuration file that specifies the variants and components required. Everything else is excluded from the library, keeping its file size light.Speed of developmentTailwind CSS is faster to work with, resulting in faster deployment, as it provides low-level utility classes that can be used to quickly create complex UI components. Bootstrap, on the other hand, requires more customization but provides pre-built UI components that can speed up the development process.MaterializeMaterialize is a front-end framework based on Google's Material Design guidelines, which provides a consistent look and feel across all devices. Materialize provides a wide range of UI components, pre-built templates, and a responsive grid system, making it a good choice for developers who want to create modern, Material Design-inspired applications. The framework is different from Bootstrap in the following ways:Design philosophyMaterialize is based on Google's Material Design guidelines, which provides a more modern and aesthetically pleasing look and feel compared to Bootstrap's flat design. Materialize also provides a range of pre-built UI components that are designed to work together, while Bootstrap provides a more modular approach to UI development.CustomizationMaterialize provides a more limited range of customization options compared to Bootstrap, but it also provides a more straightforward approach to UI development. Bootstrap, on the other hand, provides more control over the look and feel of a project but also requires more CSS writing and customization.File sizeMaterialize is generally larger in file size compared to Bootstrap, making it a less suitable choice for projects that need to be optimized for performance.SpeedBootstrap can be faster in terms of development time, as it provides a more modular approach to UI development and a wider range of customization options. Materialize, on the other hand, provides a more straightforward approach to UI development, but requires more time to create a customized look and feel.Foundation CSSFoundation is a responsive front-end framework that provides a comprehensive set of CSS, JavaScript, and design guidelines to help developers create effective and visually appealing web applications. The framework is designed to be flexible, customizable, and easy to use, making it a popular choice for web developers and designers.Design PhilosophyBootstrap follows a \"mobile-first\" design approach, meaning it prioritizes the design of mobile interfaces first and then adapts to larger screens. Foundation, on the other hand, uses a \"responsive-first\" approach, which means it starts with a flexible grid system and adjusts to various screen sizes.Grid systemBoth Bootstrap and Foundation have grid systems, but there are some differences in the way they are implemented. Bootstrap uses a 12-column grid system, while Foundation uses a flexible grid system that can be customized to fit different design requirements. Additionally, Bootstrap includes predefined classes for columns and rows, while Foundation provides a more flexible, semantic approach to creating a grid.ComponentsBootstrap has a bunch of pre-built components, including forms, navigation, and icons. In contrast, Foundation has a more limited set of components focusing on a clean and minimal design. However, Foundation does provide a set of powerful plugins, such as its Interchange plugin, which allows developers to easily swap out content based on screen size.CustomizationBootstrap provides extensive customization options through its SASS variables and mixins, allowing developers to easily adjust the look and feel of their applications. Foundation also provides customization options, but it has a more limited set of tools and focuses on a clean and minimal design.JavaScript pluginsBoth frameworks include a set of JavaScript plugins for common UI features like modals, tooltips, and sliders, but Bootstrap's plugins tend to be more feature-rich and configurable. Foundation also provides a set of powerful JavaScript plugins, such as its Motion UI plugin, for creating complex animations and transitions.Frequently asked questionsQ: What is Bootstrap?Bootstrap is a free, open-source front-end framework for building web applications. It provides a basic structure and design for web pages, a wide range of pre-built UI components and a responsive grid system.Q: What are the benefits of using Bootstrap?The benefits of using Bootstrap include faster development times, a consistent design across multiple devices, a large community for support and customization options, and ease to get started.Q: Is Bootstrap better than Tailwind CSS?It depends on the project you’re working on. If you’re working on a large project, you’re better off using Tailwind CSS, given its smaller stylesheet size and development speed.Wrapping upBootstrap is a popular front-end framework that provides a basic structure and design for web applications. It offers a fast, efficient, and consistent approach to UI development, making it a popular choice among developers and designers.While Bootstrap has limitations and may not be the best option for every project, it remains a versatile and powerful tool for creating responsive, accessible, and high-quality web pages. Whether you're starting a new project or looking for a way to improve your existing work, Bootstrap is definitely worth considering."
  },
  {
    "title": "What is API-First Development & Why Is It Worth The Hype?",
    "plaintext": "API-first is a modern software development approach where an Application Programming Interface (API), is designed before the user interface and other parts of an application. This means the API is treated as a discrete product rather than an afterthought integration.The API-first approach enables developers to focus on the core functionality and data of the application, as well as the structure and logic of the API, before designing and developing the UI and visual features. This approach also encourages modularity, scalability, and reusability of an application’s components since products are designed around an API from the ground up.API-first is commonly used for building web applications and services under the principles of a microservices architecture. With this approach, developers can create flexible and decoupled applications well-suited to handling complex and evolving business requirements.For many entrepreneurs and business owners, the concept of designing an API first is tricky to understand and implement. You’re leaving the comfort of looking at a Figma design and suggesting visual changes and moving into data relationships and conceptual functionality. It’s not something to shy away from but it requires a shift in how you prepare requirements and coordinate with your dev team.In this article, we will explore the concept of API-first development, its benefits, best practices, and common challenges.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitCore principles of API-first developmentAPI comes first, then implementationIn API-First Development, the API is designed and developed before any other application components. This approach allows developers to define the core functionality and data of the application in the API, making it easier to create user interfaces and other components that work seamlessly with the API.By focusing on the API first, the dev team can create more modular and reusable software architectures that can be easily integrated with other applications and services.API-first prioritizes testing early and oftenBy prioritizing testing early and often, developers can ensure that the API is functioning as expected and meets the needs of the business and the end-users.Under an API-first approach, testing should be integrated into the development process, with automated testing tools used to test the API regularly.A good supporting methodology is Test-Driven Development. We've written on this topic in a separate article, so we won't rehash too much content, but the idea is that tests come first, followed by development. This approach plays nicely with API-first because the test is written for what the API should do, the API is developed, and when it passes, the next feature moves into focus.API design should be based on business requirementsWhen designing APIs, it is important to start with a clear understanding of the business requirements of the application. The API should be designed to meet the needs of the business, such as supporting specific use cases, data flows, and integrations. By aligning the API design with the business requirements, developers can create a system that is both functional and effective.In our experience, gathering requirements that are defined well enough to execute API first development is rare. In order to build the API, the dev team need to know the objects, their properties and their relationships.We're big advocates for Product Roadmapping, which can help your team get 95% of the way to having this information, but there still needs to be a point where you sit down and build a good old-fashion Univeral Modelling Language diagram (pictured below) that thoroughly lists the details that will inform API development.APIs should be designed to be modular, scalable, and reusableAPI-First Development emphasizes the importance of creating APIs that are modular, scalable, and reusable. Modularity allows APIs to be broken down into smaller, more manageable components that can be reused across multiple applications and services. Scalability ensures that APIs can handle increasing data and traffic as the application grows. Reusability makes it easier to maintain and update the system over time.APIs should be well-documented and easy to useWell-documented APIs are essential to ensuring that developers can quickly and easily integrate with the API. Documentation should be clear and concise, with examples and use cases demonstrating how the API works. Additionally, the API should be easy to use, with a consistent interface and error handling that provides developers with the information they need to debug issues.The image above is a great example of the documentation we're maintaining for a rather complex MACH (Microservices, API-first, Cloud-native, and Headless) project. Each endpoint has its own set of documented specifications, and the docs allow the methods to be tested.Prioritizes security and performanceSecurity and performance are critical considerations when designing APIs. Security measures should be implemented to protect sensitive data and prevent unauthorized access. Performance should be optimized to ensure that the API can handle high traffic volumes and respond quickly to requests.Iteration and collaborationAPI-First development is a collaborative process that involves input from multiple stakeholders, including developers, business analysts, product owners, and users. Feedback from these stakeholders should be incorporated into the API design to ensure that it meets the needs of the business and the end users. This iterative process helps to ensure that the API is designed correctly from the outset, reducing the need for expensive and time-consuming rework later on.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitBenefits of API-first approachAPI-First design is a response to problems that arise following a traditional linear development approach. It's no golden bullet, but it does have some concrete benefits.Reducing the \"gotchas\"The challenge in designing API-first is there's a lot of careful thought required to create a list of all the endpoints and what they'll expose. It's less intuitive than visual planning. However, the benefit is that it quickly exposes potential problems across the system.Depending on what your system looks like, a lot of the time, the API planning will revolve around what the frontend needs from the backend to accomplish its goal. Planning to have a search feature? We'll need an endpoint for that. But what if we need to order the data? And what data should be available for searching?There are tons of questions that need to be answered along the way, but making sure everything fits together, and the backend functionality is correctly exposed catches a lot of those \"gotchas\" before they arrive.Improving velocityAPI-first design takes all guesswork out of building connections between the decoupled components. It's a detailed plan for the flow of information between systems that requires a list of data required from each endpoint.Creating a detailed plan like this takes a decent amount of effort and forward-thinking. But it's quicker to think deeply about what needs to happen for an hour than it is to try and build a new feature for four hours, only to find the frontend is blocked by something missing in an API endpoint.Mentally mapping the dependencies and API requirements out helps improve velocity by removing those annoying blockers.Adds structure to complexitySoftware developers constantly wrestle with complexity and how to handle conceptually difficult problems. For repeatable problems, the typical approach is to figure out a good way to bring organization to the chaos and then refine that method into a framework.API-first design is exactly this. It's a framework for adding structure to complex architectures. Some features requiring data from several different APIs can practically too difficult to figure out without spending some time planning how everything connects together.  Promotes collaborationAPI-First development promotes collaboration by involving all key players in the development process early on. Developers get to work closely with other teams, such as product managers and user experience (UX) designers, to design the API that will be used to build the product or service. This approach helps to align the development process with the overall goals of the business, and ensure that the end result meets the needs of the end-users.The approach further promotes collaboration among developers since it involves establishing clear API documentation and design principles. This way, the development team works under a shared language and framework; thereby ensuring that they work towards a common goal and easily communicate with each other about how the API will be used.Improves developer experienceIn API-first development, APIs serve as the building blocks of an application. As such, the APIs often come with comprehensive documentation and easy-to-use tooling. This makes it easier for developers to get started and build on top of the API, reducing the learning curve and improving productivity.Also, by designing the API first, developers can create modular and reusable components that can be shared across different parts of the system. This not only helps to reduce redundant code but also allows developers to test and debug the API separately from other components, consequently saving time and improving the overall development experience.Enhances scalabilityAPIs designed with an API-First approach are often more scalable than other APIs, as they can be easily extended or modified to accommodate growth and changes in the system. This allows businesses to build applications that can adapt to changing market conditions and user needs, without requiring costly and time-consuming rewrites.Drawbacks of API-first developmentAlthough API-first development can provide significant benefits, it also comes with some drawbacks.Here are some of the common challenges of adoption the API-first development:Design complexityOne of the challenges of API-First Development is the complexity of designing an API that meets the needs of both the business and the end-users. API design requires a deep understanding of the business requirements, the system architecture, and the needs of the end-users. It can be difficult to strike the right balance between flexibility, functionality, and simplicity.Integration complexityAnother challenge of API-First Development is integrating the API with existing systems or services. The API needs to be compatible with a wide range of systems, which can be challenging to achieve. Additionally, there may be security, compliance, or performance issues that need to be addressed during the integration process.Testing complexityTesting an API can be more complex than testing other components of the system. The API needs to be tested in isolation as well as in combination with other components. Additionally, testing the API requires a deep understanding of the API design and functionality, which can be time-consuming and require specialized skills.Governance and managementAPI-First Development requires a strong governance and management framework to ensure that the APIs are designed and used in a consistent and secure manner. This can be challenging to achieve, especially in large organizations with many developers and teams.API-first best practicesWe use the concept of API-first daily as we build large headless eCommerce sites and decoupled applications. Here are our tips on best practice: 1. Start with a clear API strategyStart by defining your API design guidelines like security, testing, and maintenance. Figure out your naming conventions for endpoints, parameters, and response codes. Keep them clear and consistent.2. Desing your APIBefore writing any code, design your API using a tool such as OpenAPI, RAML, or Swagger. This will help you to define the API's endpoints, data models, and operations and ensure that it is well-documented and easy to use.3. Use a consistent data modelA consistent data model should be used across all APIs to ensure that they are interoperable and can be easily integrated with other systems. This can be achieved through the use of common data structures and data formats.4. Use HTTP verbs appropriatelyUse the appropriate HTTP verbs (GET, POST, PUT, DELETE) for each operation to ensure your API is RESTful and easy to use.5. Use versioningUse versioning to maintain backward compatibility and avoid breaking changes. Use URL or header-based versioning to allow clients to specify which version of the API they want to use.6. Document comprehensivelyComprehensive documentation is critical to the success of an API-first development project. Documentation should include information on how to use the API, its features and limitations, data formats, use endpoints, handle errors and any authentication or authorization requirements.Documentation should be regularly updated and made available to developers through a developer portal or other centralized location. This helps to reduce confusion and ensure that developers have the information they need to integrate with the API effectively.Providing comprehensive documentation can also help to promote the adoption of the API by external developers and foster a sense of trust and credibility in the organization offering the API.7. Test your APITest your API thoroughly using automated testing tools to ensure that it is working correctly and handling errors appropriately.8. Implement authentication and authorizationAPIs are usually accessed by external and internal users, meaning that you have to maintain high-security standards to prevent unauthorized access to sensitive data. Enterprises, therefore, must implement strong authentication and authorization mechanisms to ensure that only authorized users and systems can access the API.One of the most common methods is to use API keys, which are unique identifiers that are provided to authorized users. API keys can authenticate requests and determine which actions a user is authorized to perform.Another method is to use OAuth, which is an open standard for authentication and authorization. OAuth is commonly used by web-based APIs and allows users to grant permission to third-party applications to access their data without revealing their passwords.9. Monitor API usageMonitoring API usage involves tracking and analyzing API usage data. This helps developers gain insights into how the API is being used, which features are popular, and which endpoints are being accessed the most. This information can be used to optimize the API's performance, identify potential issues or bottlenecks, and make informed decisions about future development efforts.It can also help reveal potential security threats, allowing developers to respond early enough to prevent losses.Frequently asked questionsQ: What is API-First Development?A: API-First Development is an approach to software development that prioritizes the creation of a well-designed API before implementing the backend and frontend of an application. This approach allows for greater collaboration between development teams and can result in a more streamlined and efficient development process.Q: How does API-First fit into the MACH architecture?A: API-First is a key component of the MACH architecture, which emphasizes the use of modular, API-driven solutions for building digital experiences. An API-First approach can help organizations better integrate new technologies and respond quickly to changing market demands.Q: Can API-first development be used for all types of software projects?A: API-first development is generally best suited for complex software projects that involve multiple teams or systems. It is particularly useful for projects that require flexibility and scalability, as well as those that rely heavily on integration with external services or data sources. However, smaller or simpler projects may not benefit as much from an API-first approach, and it may be more efficient to develop the UI and API in tandem.Wrapping upIn today's fast-paced technological landscape, API-first development has become a key factor in building robust and scalable applications. As more companies adopt this approach, developers need to stay up-to-date with the latest tools and techniques. By embracing API-first development, businesses can enhance their competitive advantage, innovate more quickly, and provide better user experiences. With the right planning, tools, and practices, API-first development can be a game-changer for any organization looking to build powerful and flexible software solutions."
  },
  {
    "title": "Single Page Application (SPA) vs Multi Page Application (MPA): Which Is The Best?",
    "plaintext": "There are two main architecture options for building web applications: single page applications (SPAs) and multi-page applications (MPAs). Single page applications work within a single browser session and allow users to jump between parts of the system without requiring the entire page to reload. On the other hand, multi-page applications require a new page to be loaded every time the user interacts with the application. It's important to note that SPAs are typically faster and provide a more seamless user experience, while MPAs may be more suitable for certain types of content, such as blogs or news websites.SPAs started to become popular around the mid 2010’s with the arrival of frameworks like React, Angular and Vue. The reason they took off boiled down to one thing; removing the clunky page load event.Think of how Facebook, Twitter and Instagram allow users to continually scroll through a main feed. This is the magic behind SPAs. If these platforms operated as a multi-page application, users would need to refresh their page every time the feed ran out, interrupting the experience.Even though the big social media companies have thrown their weight behind SPA architecture, it’s not a magic bullet that is a great fit for every application. There’s plenty of massive companies that run multi-page applications because it makes more sense.In this post, we will look in-depth at the difference between SPAs and MPAs. Our goal is to provide a comprehensive comparison of these two approaches and provide practical advice for choosing the right architecture for your web application.Understanding single page applicationsSPAs are web applications that dynamically update their content as users interact with it. They don’t require page reloads thanks to AJAX (Asynchronous JavaScript and XML) which allows web applications to communicate with a server in the background without interfering with the behavior of the page. When a user interacts with a SPA, only the required component will be modified and not the entire page/application. As a result, SPAs offer high performance and a nice user experience.The best way to understand the concept of a SPA is to contrast it against how traditional web applications. Each time a user interacts with the application, the browser sends a request to the server. The server then sends back a new HTML page.With SPAs, the browser loads a single HTML page and then leverages JavaScript to dynamically update the content of that page as the user interacts with it.As a result, SPAs provide a seamless user experience as they appear to load faster and offer better performance. Some of the most popular SPAs include; Google Maps, Gmail, Trello, Twitter, and Facebook.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages of SPAsBelow are some of the key benefits of SPAs:Faster loading timesSPAs only load the necessary components once, and subsequent page updates are made dynamically without requiring a full page reload. This results in faster page loading times and a smoother user experience.Great user experienceSPAs provide a more responsive and interactive user experience, with no lag or interruptions when navigating between pages or sections. The dynamic updating of the page elements makes for a seamless experience.This kind of experience has become expected in some applications (like social media), and it's honestly pretty great. It's not always practical, but from a user perspective, it's a winner.Easier to maintain and scaleSPAs are easier to maintain because they use a modular design, where each component is responsible for its functionality. This makes it easier to modify or replace components without impacting other parts of the application. Additionally, SPAs can be scaled more efficiently by adding more servers to handle the load.Offline functionalityOffline functionality in SPAs is achieved by implementing service workers. These are basically scripts that run in the background of the user's browser, intercepting and caching network requests. When the user is offline, the SPA can display a cached version of the website so that the user can continue to use the application even when there is no internet connection. When the user goes back online, the service worker can sync any changes made while offline with the server.This benefit verges into the Progressive Web Application territory, which we've written about extensively, so we don't repeat too much of the content.Offline functionality helps improve user experience by allowing users to continue working with the application even when they lose their internet connection.Reduced server loadServer requests are minimized because the application uses APIs to retrieve data from the server rather than requiring the server to generate an entire page for each request.Decoupled frontend and backendSPAs are designed to work with APIs that facilitate communication between the backend and frontend. This decoupling allows developers to change one without impacting the other, resulting in a more modular, flexible, and maintainable codebase.Decoupling the backend and frontend also allows for better collaboration between developers working on different parts of the application. For example, the backend developers can work on the API, while the frontend developers can work on the user interface, without interfering with each other.Disadvantages of SPAsDespite their advantages, SPAs have their own fair share of disadvantages. These include:Initial load timeSince SPAs load all their content simultaneously, they can take longer to load initially. This can be a problem for users with slow internet connections or older devices.Offer poor SEOTraditionally, SPAs have been difficult to optimize for search engines because they typically have only one URL and limited content on the initial page load, which affects their search engine ranking.We've thrown this disadvantage into the list even though it's becoming moot in 2023. Every day Google becomes smarter and it's well-known that its engine can index SPAs. Despite this, it's probably safe to argue that MPAs are quicker to index than SPAs when new.Browser compatibility issuesSPAs may not be compatible with older browsers or devices, which can limit the potential user base.This is another half-hearted disadvantage. Internet Explorer is no longer supported, and it was one of the problem browsers that struggled with SPAs. Older versions of Safari as also hit-and-miss, but the percentage of users that actively use this browser version is low.Memory leaksSecurity leaks are a potential disadvantage of Single Page Applications (SPAs) due to the heavy reliance on JavaScript. Because most application logic is executed on the client side, it can be more vulnerable to certain types of attacks like cross-site scripting (XSS) or cross-site request forgery (CSRF) attacks.XSS attacks occur when an attacker injects malicious code into the SPA, which is then executed on the user's browser. This can lead to the theft of sensitive information like user credentials or session tokens. To prevent XSS attacks, it's important to properly validate and sanitize user input, as well as implement other security measures like Content Security Policy (CSP) and Cross-Site Request Forgery (CSRF) protection.Understanding multi-page applicationsAs the name suggests, multi-page applications are web applications that consist of a large number of HTML pages. Each page displays different content that has to be refreshed each time a user interacts with it.MPAs have been around since the early days of the web and are still widely used today. They are especially common in content-heavy websites, such as news sites or e-commerce sites, where each page represents a different piece of content or product.Some of the most popular MPAs include; Amazon, The New York Times, Wikipedia, and eBay.Advantages of MPAsHere are some of the advantages of MPAs:Better for SEOMPAs tend to rank well in search engine results since each page has a unique URL and can be indexed separately. This means that each page in an MPA can rank independently in search results, potentially driving more traffic to the site.As we mentioned in the SPA section, this is more of an issue for young applications. Once a SPA receives hundreds of thousands of views a month, it becomes irrelevant because Google will prioritize the reindexing of the app.SecureSince MPAs send separate requests for each page, it is easier to implement security measures such as authentication and authorization. In contrast, SPAs can be more vulnerable to security threats since much of the content is loaded dynamically and may not be subject to the same security checks as traditional web pages.Faster initial load timeWhile SPAs offer better performance once the initial page has loaded, the initial load time of an MPA is often faster since the browser only needs to load the content for the current page rather than all the content for the entire application.Compatible with older browsersMPA is a classic way of building web pages, so it's compatible with most older browsers and legacy systems. This compatibility is important in situations where users may be accessing the application from a variety of devices or platforms.Disadvantages of MPAsHere are some of the disadvantages of MPAs:Outperformed by SPAsSince MPAs require a full page reload when a user interacts with the app, they offer poor performance, which negatively impacts the user experience.Complex to develop and maintainMPAs are larger than SPAs and as such, take more time to develop since they consist of multiple pages. Also, MPAs require more complex server-side logic compared to SPAs, as each page needs to be designed and developed separately. This can result in more code to maintain and a higher risk of bugs and errors.Higher server loadMPAs require the server to handle more requests, as each page requires a separate request to load. This can lead to higher server load and slower response times, especially for applications with a large number of users.SPAs vs MPAs: Which one should you choose?Ideally, SPAs are used to build dynamic platforms with small data volumes, while MPAs are best suited for large applications with high-volume data. But there’s more to choosing between the two than just considering the amount of data your app will handle.  Here are some more crucial factors to keep in mind:Complexity of your applicationSPAs are well-suited for complex applications that require a high level of interactivity and real-time updates. They can be particularly useful for applications with a lot of user input or content that needs to be updated frequently. With a SPA, users can interact with the application without needing page refreshes, providing a more seamless experience.On the other hand, MPAs may be a better choice for simpler applications that do not require as much client-side processing. In an MPA, each page is separate, which can make it easier to manage and navigate for smaller applications. If your application is relatively simple and does not require a high degree of interactivity or real-time updates, then an MPA may be a better choice.Performance requirementsIf performance is a top priority for your application, then SPAs may be the way to go. SPAs are designed to load content dynamically without requiring a full page refresh. This means that users can interact with the application more quickly and efficiently. Additionally, SPAs can reduce server load, which can improve overall performance.However, MPAs may be better suited for applications that require fast initial load times, as well as applications that rely heavily on caching to improve performance. Each page in an MPA is separate, which means that they can be cached independently. This can help to improve load times and reduce server load, particularly for static content.SEO requirementsAs a business owner, you probably want your app to rank high on search engines to increase brand visibility and conversion rate. You can achieve this with an MPA since each page has its own unique URL, title, and metadata, making it easier for search engines to index the content and rank it accordingly.Nonetheless, SPAs can be optimized for search engines. But it requires additional effort and knowledge of SEO best practices, such as using hashbang URLs, implementing server-side rendering, and making use of metadata tags. If you are willing to put in the extra effort, then a SPA can still be an excellent choice for an application that requires SEO.Time to marketSPAs are easier and faster to build and as such, enable businesses to launch their products faster. MPAs tend to take a lot of time and even cost more since they involve building multiple pages. However, SPAs rely heavily on advanced JavaScript frameworks and tools, so you might have a problem finding the right talent to build your SPA.Frequently asked questionsQ: What exactly is a single page application (SPA)?A: A single page application (SPA) is a web application that loads a single HTML page and dynamically updates the content as the user interacts with the application. SPAs typically rely heavily on JavaScript frameworks such as React, Angular, and Vue to manage the application state and user interface.Q: What is a multi page application (MPA) and how does it differ from an SPA?A: A multi page application (MPA) is a traditional web application that loads multiple HTML pages as the user navigates through the application. Unlike a SPA, each page in an MPA is separate and requires a full page refresh to update the content.Q: Can SPAs be used for any type of website or application?A: While SPAs can be used for any type of website or application, they are best suited for applications that require a high degree of interactivity and real-time updates, such as social media platforms or productivity tools.Key TakeawayUltimately, the choice between a SPA and an MPA should be based on the specific needs and requirements of your application. If your application requires a high degree of interactivity and real-time updates, then a SPA may be the better choice despite the added complexity. However, if your application is relatively simple and does not require a lot of client-side processing, then an MPA may be the simpler and more practical choice."
  },
  {
    "title": "What is Cloud-Native? A Comprehensive Breakdown",
    "plaintext": "Cloud-native is a software development approach which leverages cloud computing infrastructure to build, deploy and manage applications. This development approach allows modern businesses to build modular, scalable, and resilient applications that meet dynamic customer needs.Once upon a time, companies that developed their own software would run it on a server in their basement. This made sense because the specialists that helped develop their complex applications were already on-site.This approach was limited for a reason reasons. Firstly, it’s hard to scale globally if your team is required to be on-site at each server location. Secondly, there’s a financial barrier to entry for creating an application. Not only do you need software developers, but also system engineers and the hardware to run the application.There are more reasons behind the rise of cloud computing, but these are the big two. Cloud-native has taken off over the past decade and it’s given rise to a whole new economy of services. It’s even given rise to a category of “serverless” products like Hasura and Fauna that remove the need to configure a server completely and provide databases on a pay-per-use basis.I’m personally old enough to have worked with on-site servers at my first agency, but the rest of our team has known nothing but the cloud. We like to stay abreast of the advancements in this area, and focus on MACH (Microservice, API-first, Cloud-native and Headless) technologies. This is why we’re laying down some of our knowledge around the question of what is cloud-native and how it works.In this post, we’ll explore cloud-native applications including their characteristics, and development process, as well their advantages and disadvantages.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitPrinciples of cloud-nativeCloud-native development approach is based on a set of key components that enable the development and deployment of highly scalable, resilient, and flexible applications in the cloud. These components include:MicroservicesIn cloud-native development, an application is designed based on microservice architecture, which breaks down the application into smaller, modular services that can be developed, tested, and deployed independently. Each microservice handles a specific functionality and communicates with other microservices using lightweight protocols such as REST.This architecture differs from the traditional monolithic architecture where the business logic, user interface, and database are bundled into one deployable unit. As a result, it becomes almost impossible for a business to iterate its application without downtime.ContainerizationContainerization is a way of packaging and deploying applications that allows them to run consistently across different environments. It's an important concept in cloud-native since an application is built using a microservices architecture, which breaks down the application into smaller, modular services that can be developed, tested, and deployed independently. Each microservice is packaged as a container, which contains the application code, runtime, and dependencies. Containers provide a consistent runtime environment for each microservice, making it easier to deploy and manage the application across different infrastructure platforms.Containerization also provides a more secure and isolated runtime environment, which reduces the risk of conflicts between applications and dependencies. Each container is isolated from other containers running on the same host, providing an additional layer of security and reducing the attack surface of the application.Additionally, containerization allows for higher levels of resource utilization, as multiple containers can be run on the same host, reducing infrastructure costs and improving operational efficiency.Automation and orchestrationIn a cloud-native environment, applications are composed of smaller, independent services that communicate with each other through APIs, making them more dynamic and complex.Automation and orchestration tools, such as Kubernetes, provide a way to manage this complexity by automating the deployment, scaling, and management of cloud-native applications. These tools enable organizations to manage complex and dynamic application environments, ensuring high availability and reliability. Kubernetes in particular provides a declarative way of describing the desired state of an application, and automatically manages the deployment, scaling, and monitoring of containers to achieve that state. It also provides features such as self-healing, rolling updates, and load balancing, which enables organizations to achieve high levels of availability and scalability.DevOpsDevOps is a set of practices and tools that enable organizations to deliver software faster, more reliably, and at a lower cost. It focuses on creating a culture of collaboration, automation, and continuous improvement between the development and operations teams.In a cloud-native environment, DevOps enables faster time-to-market by automating the application deployment pipeline and providing a way to continuously deliver and deploy applications. DevOps tools and practices enable organizations to achieve faster feedback cycles, reduce manual intervention, and improve operational efficiency.Also, by integrating testing and deployment activities, DevOps practices enable organizations to find and fix issues early in the development cycle, reducing the risk of production failures. It also enables organizations to achieve higher levels of availability and scalability by providing tools and practices for automating scaling, self-healing, and monitoring of applications.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitAdvantages of cloud-native for businessesCloud-native applications offer several advantages over traditional monolithic applications. Here are some of the key benefits of adopting a cloud-native approach:Agility and flexibilityCloud-native applications are designed to be modular meaning that each component of an application runs in its own container. This design allows developers to quickly and easily add new features or modify existing ones, without having to make changes to the entire application. The flexibility allows businesses to adapt to changing business needs.Scalability and resilienceScalability refers to an application's ability to handle large amounts of traffic and user requests without downtime. While resilience refers to an application's ability to withstand failures and continue functioning without interruption.Cloud-native applications are designed to be highly scalable and resilient, thanks to their microservices architecture and containerization. Services like DigitalOcean and AWS are great examples of this. With a few clicks and 5 minutes, a hosting environment can have more memory and CPUs added, giving it more power to handle the traffic.Microservices architecture also enables applications to be broken down into smaller, independent components, where each service can be scaled up or down.Containerization, on the other hand, enables applications to be deployed in lightweight, isolated containers, which can be quickly spun up or down to match changes in demand.On a less technical note, cloud-native means businesses can choose to spin up new servers in different locations across the globe. This is a huge benefit to scaleability for any business that transcends international borders, especially eCommerce. Black Friday sales coming up in the U.S. ? No problem, just spin up a few new servers in different data centers across the country and a load-balancer to distribute the traffic accordingly. There's no way to emulate this level of scaleability without the cloud.Faster time-to-marketCloud-native applications leverage automation throughout the development and deployment pipeline. This includes using automated testing, continuous integration, and continuous delivery tools to quickly build, test, and deploy new features and updates. This reduces the time and effort required for manual testing and deployment and helps to speed up the overall development cycle.When building a cloud-native app developers can work independently on different components of the application without having to coordinate with other teams or wait for changes to be made to the entire application. This means that new features and updates can be developed and deployed faster, reducing the overall time to market for the application.This benefit is in complete contrast to non-cloud infrastructure where an engineer needs to connect to a computer on the same network as the server (in the same office), copy the files over, and re-run the application.Reduced infrastructure costTraditionally, building and maintaining on-premise infrastructure to run applications can be costly, time-consuming, and require specialized skills. However, cloud-native applications are designed to run in the cloud, which means businesses don't have to pay someone to manage the physical hardware.The cost savings from cloud-infrastructure still make complete sense to most businesses, but there is a trend of larger companies recognizing that there's a threshold where it's actually cheaper to buy a few servers and pay to keep them running.Basecamp publicly announced they were leaving the cloud after receiving a $3,200,000 monthly hosting invoice. The point to take away here is that for most businesses, the cloud is going to bring hosting costs down, but once you're as big as Basecamp, it might be time to re-examine the savings.Improved security and complianceCloud-native applications are designed with security in mind from the ground up. They are built using secure coding practices and are typically deployed in a containerized environment that provides an extra layer of security. With the use of automation tools, security measures can be built into the application development lifecycle, making security a top priority throughout the entire process.Containerization provides a level of isolation between applications and services, making it easier to identify and isolate potential security breaches. Since each microservice is in a separate container, any security vulnerabilities can be easily contained and addressed without impacting other services or the entire application.The security standards are further strengthened by cloud-native apps’ ability to implement disaster recovery and business continuity strategies. This comes from the fact that cloud-native applications are designed to run in distributed environments, and as such, they can be easily replicated across multiple geographic locations. This provides redundancy and failover capabilities that can help businesses recover quickly from an outage or disaster.As for compliance, cloud providers often offer compliance certifications together with their services, such as HIPAA for healthcare data, PCI DSS for payment card data, and GDPR for personal data.Challenges of cloud-native adoptionDespite the many benefits of cloud-native applications, there are also several challenges that organizations may face when adopting this approach. Here are some of the most common challenges:Limited skills and expertiseCloud-native applications require specialized knowledge and skills to develop, deploy and maintain. Developers must understand containerization, microservices, and distributed systems to create cloud-native applications.It's not unheard of for developers to be comfortable configuring infrastructure, but it's more common for them to suggest finding a DevOps engineer to help out. Writing software is already a highly complex challenge with infinite learning paths, there's no need to add another thing to learn.DevOps specialists are tricky to track down and often don't work like freelancer engineers, because their engagements are much quicker. It doesn't take that long to configure or maintain simple cloud hosting environments.Compatibility with legacy systems and applicationsMany organizations have legacy systems and applications that were not designed for cloud-native architectures. These systems may be difficult to migrate to a cloud-native environment, or they may require significant re-architecting to be compatible with modern cloud-native architectures.Expensive to implementWhile cloud-native applications can offer significant benefits, such as improved scalability, resilience, and security, they also require significant investments in infrastructure, skills, and tools. Organizations must carefully weigh the costs and benefits of adopting a cloud-native approach to ensure that they can achieve a positive return on investment (ROI).Cultural and organizational shiftAdopting a cloud-native approach may require significant cultural and organizational changes. It may require organizations to shift from traditional hierarchical structures to more flexible, team-based structures that enable collaboration and rapid iteration. It may also require changes to existing processes, policies, and workflows.That said, if you’re looking to move your traditional systems to cloud-native, there are some implementation strategies you should consider.Cloud-native implementation strategiesCloud-native implementation strategies involve various approaches to migrating applications to the cloud-native architecture. We've already written a fairly detailed guide to modernizing legacy systems and all the things you should consider, so we'll just touch on the highlights.Here are some of the most common cloud-native implementation strategies:Lift and shiftThis strategy involves moving existing applications to the cloud without making any significant changes to the application architecture or code. The application is essentially \"lifted\" from its existing environment and \"shifted\" to the cloud. While this strategy can be a quick way to move applications to the cloud, it does not take advantage of the benefits of cloud-native architectures.ReplatformingReplatforming involves making some changes to the application architecture or code to make it more compatible with cloud-native architectures. For example, an organization may move an existing monolithic application to a cloud-based platform such as Kubernetes, which allows for better scaling and resilience. While this strategy can offer some benefits of cloud-native architectures, it may not fully leverage the capabilities of the cloud.RefactoringRefactoring involves making significant changes to the application architecture or code to make it more compatible with cloud-native architectures. This strategy involves breaking down monolithic applications into smaller, more manageable microservices and deploying them in containers. This approach allows organizations to take full advantage of the scalability, resilience, and flexibility of cloud-native architectures.Build from scratchBuilding from scratch allows organizations to fully leverage the capabilities of the cloud and develop applications that are highly scalable, resilient, and flexible. However, this strategy requires a significant investment in skills and expertise in cloud-native architectures and tools.Best practices for cloud-nativeOnce you have adopted a cloud-native development approach, you need to implement a few practices to fully leverage its benefits. These practices include:Design for resilience and fault toleranceCloud-native applications are designed to be highly available and resilient. This means that they can withstand failures and continue to operate even if some components fail. To achieve this, organizations must design their applications to be fault-tolerant and resilient. This involves using techniques such as redundancy, replication, and load balancing.Implement continuous delivery and integrationCloud-native development requires organizations to adopt a continuous delivery and integration approach to software development. This approach involves automating the build, testing, and deployment processes, allowing organizations to release new features and updates quickly and efficiently. This approach also helps to ensure that software is reliable and stable.Regular monitoringCloud-native applications are highly distributed, and it can be challenging to identify issues and troubleshoot problems. To address this, organizations must implement robust monitoring and logging solutions. This involves collecting and analyzing data from various components of the application and using this data to identify issues and improve performance.Frequently asked questionsQ: What is the difference between cloud-native and traditional application development?A: Cloud-native development is an approach to software development that leverages the scalability, flexibility, and agility of the cloud. Traditional application development typically involves building and deploying applications on local servers or data centers.Q: How can organizations get started with cloud-native development?A: Organizations can get started with cloud-native development by identifying the most critical applications and services that can benefit from the cloud, building a strong foundation in cloud-native architecture, and implementing best practices for software development and deployment.Q: What are the benefits of cloud-native development?A: Cloud-native development offers several benefits, including improved scalability, resilience, security, and cost savings. It also enables organizations to release new features and updates quickly and efficiently.Wrapping upCloud-native development offers many benefits for organizations looking to stay competitive in today's fast-paced digital landscape. It leverages cloud infrastructure, microservices, containerization, automation, and DevOps practices, which helps businesses achieve greater scalability, resilience, security, and cost efficiency, while also accelerating time-to-market and improving the customer experience. However, cloud-native adoption can also present challenges which must be accounted for before implementation."
  },
  {
    "title": "Headless CMS vs WordPress - Which One Is Better?",
    "plaintext": "Content management systems (CMS) were built to simplify the process of creating, managing, and publishing digital content, such as text, images, videos, and audio files on websites. The idea was to avoid having to make changes directly to the HTML, CSS and JavaScript (and upload the changes via FTP), which is time-consuming and challenging for non-technical users.The rise of CMSs only became possible due to the invention of dynamic server-side scripting languages like PHP and ASP in the mid-’90s. These backend languages allowed for content to be generated dynamically based on CMS inputs. i.e creating a new page through the CMS triggers a function on the backend that does all the work to add a new page on the server.There were a bunch of now-forgotten CMSs back when server-side languages were in their infancy, such as Interwoven, FileNet, Vignette StoryServer, BroadVision and FutureTense. This wave of pioneering CMSs wasn’t particularly easy to use. While they were a step in the right direction, they weren’t flexible enough to gain mass adoption.This all changed in 2003 with the arrival of WordPress. This new content management system was user-friendly, flexible, open-source, scaleable and designed for blogging, which was starting to take off at the time. While there were alternatives, like Drupal, WordPress completely dominated the market and became synonymous with creating a website.WordPress has a traditional, monolithic architecture meaning its front-end and content database are coupled into a singular unit. It’s built on top of PHP and since its inception in 2003, has accumulated a mind-boggling collection of themes, plugins, and extensions.Plenty of competitors have tried to challenge WordPress’s ascendency over the past twenty years, but none of them has solved the problem any better than WP does. This is, until recently.A new type of CMS has entered the market, the headless CMS. Unlike WordPress, headless CMSs separate the presentation layer from the backend. This allows for greater flexibility and customization, especially for businesses looking to build complex websites.WordPress has been pushed to do everything under the sun; run membership sites, power eCommerce, operate social networks, and function as a bespoke application. The problem is it’s opinionated in the way it forces developers to write code.Headless CMSs offer an alternative; use WordPress (or other great CMSs like Contentful, Prismic or Strapi) as a content management system but not a frontend framework for building websites.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitThis might sound counterintuitive. Why bother using a CMS if you can’t build new pages? The answer is that you can, but there are other things required; namely a frontend framework like Next.js or Gatsby. By removing the dynamic server-side PHP part of WordPress, we can use the nice interface for triggering changes in applications, managing eCommerce, or membership sites, but build these sites using an efficient custom codebase.It also means we can remove servers from the equation and pre-generate static assets for blazing-fast load times. This is a benefit that generates a lot of attention from large website owners. If you’ve got 50,000 articles and your site is grinding to a halt, a headless CMS would allow your site’s performance to become supercharged.There are some caveats to this equation and it helps to understand some of the technical theories. In this article, we’ll explore the key differences between headless CMS and WordPress and give some suggestions on when each approach is “the right choice”.What is WordPress?WordPress is an open-source CMS that was created in 2003. It was initially launched as a blogging tool but has now evolved into a full-fledged CMS offering a user-friendly interface and an extensive library of themes and plugins, making it easy for users to customize their websites to their liking. It also offers an administration panel from which you can add or delete content and manage permissions.The platform uses PHP for its backend and HTML, CSS, and JavaScript for its frontend. It stores content in a MySQL database and allows users to create and manage content through a visual editor or the WordPress API.Advantages of WordPressHere are some of the advantages  of WordPress:User-friendlyWordPress is designed to be easy to use especially for beginners without any technical expertise. It has a simple initiative interface that supports content creation and editing using a WYSIWYG (what you see is what you get) editor. This editor allows you to preview changes in real-time.The platform also offers built-in media management tools that allow users to upload and manage their media files. You can add text, images, videos, and other media to their website with just a few clicks.WordPress isn’t the most useable platform but by and large, it’s easy to figure out. It’s also so universal that most people who have had anything to do with the web are familiar with WP’s interface.CustomizableWordPress is highly customizable thanks to its built-in themes and plugins.Since its inception in 2003, every developer under the sun has built a theme or plugin for WordPress. As a result, users have a mind-boggling range of choices for how they can customize the look and feel, and function of their site.To put it in context, there are over 60,000 free plugins that can be used to extend WordPress functionality, and 8,000 free themes in the official WordPress theme repository alone.Beyond themes and plugins, WordPress is open source so it’s possible for developers to make changes directly to the content management system.SEO-friendlyWordPress sites include several built features that make them SEO-friendly. These include a clean permalink structure, which allows users to set a URL that includes the title of their content, making it easy for search engines to understand what the page is about. Automatic site map creation, which helps search engines to crawl and index all the pages on the site.WordPress also offers several SEO plugins, such as Yoast SEO and All in One SEO Pack, which provide users with tools to optimize their content for search engines. These plugins allow users to conduct keyword analysis, generate meta tags, and create XML sitemaps. They also provide suggestions for improving content and structure to improve search engine rankings.Mobile-responsiveWordPress themes are designed to be mobile-responsive, meaning they will adjust to fit the screen size of any device. This is important in today's mobile-first world, as more and more people are accessing the internet using their smartphones and tablets. A mobile-responsive website not only provides a better user experience, but also improves search engine rankings.Multi-user capabilitiesWordPress allows multiple users to access and contribute to a website. Users can be assigned different roles, such as administrator, editor, or author, with different levels of access and permissions.Disadvantages of WordPress CMSAlthough WordPress is a popular and widely used CMS, it’s not without its quirks and headaches. Here are some of the most notable disadvantages:Security risksWordPress security risks stem from using outdated versions of the CMS or plugins. In other words, failure to keep up with updates can cause security vulnerabilities.This is compounded by the fact that a third of all sites on the internet run on WordPress, so the bad guys are specifically targeting WordPress vulnerabilities because they’re the easiest to find.Limited flexibilityThe WordPress backend is tightly coupled with its presentation layer. Customizing the content delivery requires customizing the theme or plugin, which can be time-consuming.For most use cases, this isn’t a problem. But for situations where you’re trying to push WordPress to do things outside of simple blogging, it can be a blocker.Plugin compatibilityWordPress plugins are really just a bunch of code that can be added to the CMS. Not all teams spend the time ensuring their code is going to be perfectly bug-free, especially between updates.As a result, WordPress plugins can cause compatibility issues with other plugins, themes, or even the WordPress core. This can result in broken functionality or errors on the website.There’s nothing worse than being prompted to upgrade your plugin, checking your site and seeing a nasty PHP error preventing the page from loading.Performance issuesVanilla WordPress is pretty performant. The problems come from installing plugins and heavy themes (looking at you Divvy and Elementor). These third-party extensions typically call in third-party libraries that can completely tank the site’s performance.Even experienced WordPress users fall victim to adding plugins to their sites without really knowing the impact on their site’s performance.What is a headless CMS?A headless CMS is a type of content management system that separates the content layer from the presentation layer/frontend. This means that the content can be accessed and delivered to any front-end device or platform, such as mobile apps, websites, and smart devices, without being tied to a specific website or design.This type of CMS is suited to a modern business that needs an “omnichannel experience”, which is a fancy term for reaching customers on a range of different devices while keeping the experience consistent.Content is stored in a centralized repository, usually in the cloud, and made available through API. This API can be used by developers to access the content and deliver it to any front-end application, without being constrained by the limitations of a specific CMS or website design. This makes headless CMSs highly flexible, scalable, and adaptable to changing business requirements and customer needs.A good, but kind of extreme example of using a headless CMS is displaying the same notifications on a smart fridge and mobile phone. The traditional way of doing this would be to create a fridge application and a phone application and send messages through each. Headless CMSs on the other hand, allow a message to be written once and distributed to both systems via API.Advantages of headless CMSSome of the benefits of using a headless CMS include:Performance & SEOPerformance is the thing that sets headless CMSs apart from regular WordPress. By separating the backend code that dynamically generates pages from the frontend UI, headless CMSs can leverage a static site-generating framework like Gatsby or Next.js.Without getting too deep into the technical weeds, these platforms pre-generate all the assets that will be displayed on browsers. There’s no need for a server to figure out what the page should look like because the decision has already been made. As a result, the performance is the site becomes blazing fast, regardless if it’s made of 1000 pages or 150,000.The trickle-on effect of having a faster site is being elevated up the search engine result rankings. Google has come out with a list of assessments called the Core Web Vitals (CWV) websites must past to avoid being penalized. The frontend frameworks used in combination with headless CMSs have specifically addressed the CWV standards and made it easier for developers to get a passing grade.Use of modern technologies and toolsHeadless CMSs are really just a controller for managing content. They’re not involved in building the pages or driving any of the website’s functionality. That comes from the frontend framework (i.e. Gatsby, Next.js, Nuxt, etc).These frameworks have been designed to incorporate modern development standards and tooling. They make life quicker and easier for developers and plug nicely into sophisticated libraries and packages that can quickly add functionality to a new website.Multi-lingual supportTraditional WordPress can support multilingual translations, but it’s a complete headache to manage and becomes almost unusable from an administrative perspective once four or five different language translations have been added.Headless CMSs on the other hand can be configured with custom post types dedicated to language translations. This is supported by features like Next’s internationalization routing that will automatically detect where a visitor is entering from and route them to the correct version of the site.Adding to this, Next.js runs on “The Edge”, which is a fancy name for a content distribution network that can also execute scripts. The Edge allows an almost instant translated version of the website to be distributed to overseas visitors, so the site’s performance will be exceptional no matter where in the world a visitor is located.Tailored to the team’s use caseHeadless CMSs are a ton more flexible than their monolithic counterpart. If your team has a unique way of doing business that doesn’t fit regular CMSs, then going headless can be a great alternative.The WordPress UI can be modified to match your team’s operations. Only need a couple of navigation items? No worries, they can all be removed. Need to trigger a series of events across your systems with a single button click? Easily done.Omni-channelThe advantage of omnichannel is a little oversold in the headless world. There aren’t that many companies publishing content across IoT devices like smartwatches, mobile phones, and smart fridges at the same time.For those companies that are, or have custom applications that require content updates simultaneously with their marketing website, then headless CMSs are winners because they allow these updates to be made once from a single location.Easily swappedBuilding a website on any kind of monolithic platform locks your business to that technology. The logic is tied up with the presentation layer, and separating them means rebuilding everything.While there’s still considerable effort required to configure a headless CMS, it’s easier to swap in a new headless CMS if the need arises. The logic is built into the frontend framework.This benefit touches in MACH (Microservices, API-first, Cloud-native and Headless) architecture, which is a topic we’ve written on in detail. It’s a growth play and well-suited to larger companies that need performance and flexibility.Improved securityHeadless websites that take advantage of static site generation significantly cut down their exposure to malicious attacks. By removing the server from the customer interaction, there is less attack surface to work with.This advantage isn’t specifically related to headless CMSs, but it’s worth mentioning.Future-proofBy separating the backend from the frontend, headless CMSs enable businesses to adapt to new technologies and trends without having to redesign the entire website or application. This approach ensures that the website or application is always up-to-date with the latest trends and technologies, which can improve the user experience and keep the business competitive.Disadvantages of headless CMSBefore adopting headless CMSs, it’s important to consider its disadvantages. These include:Expensive to implementImplementing a headless CMS is resource intensive as you might be forced to pay for third-party services or tools to implement certain features and functionalities. It also requires highly skilled developers to implement successfully and run regular maintenance routines which consequently adds up to the overall cost.Content preview limitationsA headless CMS architecture separates content management from presentation, which means that content editors cannot preview how their content will appear on the frontend before publishing it. This limitation can be frustrating for content editors who may need to make multiple edits before the content is published.Lack of out-of-the-box featuresHeadless CMSs provide a lot of flexibility, but they lack the out-of-the-box features and functionality that traditional CMSs provide. Businesses may need to implement custom solutions or integrate third-party services to add the features and functionality they need, which can be time-consuming and costly.When to choose Headless CMS vs When to choose WordPressChoosing between headless CMS and WordPress generally boils down to your business requirement and the type of content you need to manage. Below are some considerations for choosing between the two platforms:Performance & SEOIf you asked most businesses that have made the switch to a headless CMS why they did it, they’ll probably say for performance and SEO. These are businesses that have thousands or even tens of thousands of posts and pages. They pay decently large server bills and find that when their traffic spikes, the website’s performance can tank.Big traffic sites that are trying to generate advertising revenue are a perfect example of where a headless CMS is the right choice. They need a fast and clean customer experience to avoid increasing bounce rates.Smaller websites can still benefit from a headless CMS, but it’s not going to be a major factor in the site’s performance until a baseline of ~20,000 visitors are arriving each month.BudgetThis factor is simple. If your business doesn’t have $20k+ to invest in a website, then don’t choose a headless CMS. Heading down this path is expensive because it’s a custom option designed to solve problems that the monolithic system can’t.If your business has money to invest and you’re scouting out growth plays that will boost your conversion rates, traffic and SEO performance, then a headless CMS might be a good choice.Experience with custom softwareDoes your team use Divvy or Elementor? Do you lean towards visual page builders and try to make your own website design changes? Then you’re not well suited to a headless CMS.There are options that replicate the visual page builder experience, especially Builder.io, but you will need to constantly lean on a developer for changes and extensions to the site.Headless CMSs provide a little different experience for content creators too. There’s a 5 - 10 minute delay between hitting the “publish” button in your CMS and seeing the content on the site. This can be further complicated by the kind of rendering technique being used across your site, caching, and a few other factors.If your team isn’t used to custom development, then it can be a painful learning curve and one to avoid.Unique requirementsFrequently asked questionsQ: What is the difference between Headless CMS and WordPress?A: Headless CMS and WordPress are both content management systems, but they differ in how they handle content delivery. WordPress is a traditional CMS that handles both content management and content delivery, while Headless CMS separates content management from content delivery, allowing for more flexibility and customization.Q: Which platform is better, Headless CMS, or WordPress?A: There is no one-size-fits-all answer to this question, as the best platform depends on the specific needs of the business. WordPress is an excellent platform for businesses that require a simple, out-of-the-box content management and delivery system, while Headless CMS is ideal for businesses that require a more customized, flexible solution.Q: Can I use WordPress and Headless CMS together?A: Yes, it is possible to use WordPress and Headless CMS together in a hybrid approach, where WordPress is used for content management, and the Headless CMS is used for content delivery.Wrapping upUltimately, choosing between Headless CMS and WordPress ultimately comes down to the specific needs of your business. WordPress is a reliable, easy-to-use platform that works well for small to medium-sized businesses with basic content management and delivery requirements. On the other hand, Headless CMS offers greater flexibility, faster development, improved content management, and future-proofing, making it ideal for businesses that require more customized solutions.While there are disadvantages to both platforms, it's essential to weigh the pros and cons and determine which features are most important for your business needs. Hybrid approaches, which combine WordPress and Headless CMS, can also be a viable option for businesses that require both content management and delivery flexibility."
  },
  {
    "title": "What's The Difference Between Tight And Loose Coupling?",
    "plaintext": "Tight and loose coupling are terms used to describe the relationship between components of an application. In tight coupling, the components of a system are highly dependent on each other. If one component fails, it will also affect the others and eventually bring down the entire system. This creates inflexibility issues since any modifications to one component may require modifications to others. This can make the system difficult to scale and maintain.  In a loosely coupled system, the components are independent of each other. Each component has its own well-defined interface and communicates with other components through standardized protocols. Changes to one component do not require changes to other components, making the system more flexible and easier to maintain. The only caveat here is the increased complexity of handling multiple resources especially for a large application. Loose coupling is increasingly becoming popular with the rise of modern technologies such as microservices, containers, and APIs.Let’s delve deeper into these concepts by exploring how each works.How tight coupling worksTight coupling has been the standard way of building applications until around the mid-2010s when Single Page Applications came into vogue. Tight coupling is synonymous with monolithic architecture where all components are bundled up into a single deployable unit.Tightly coupled systems are characterized by high interdependence among the components, which makes it difficult to replace or modify one component without affecting the rest.For example, consider a software system that has a database, a user interface (UI), and a business logic component. In a tightly coupled system, the business logic component may directly access the database and the user interface component. Tight coupling means that any changes made to the database or UI could potentially introduce bugs to the business logic component.Advantages of tight couplingMonolithic architecture and tight coupling between components is the incumbent for more new software. It’s initially simpler to build and maintain. And since most new applications are looking to “fail quickly”, this approach makes sense.There are several other advantages to tight coupling that make it an ideal solution in some cases:Faster developmentIt's easier to and fast to build a tightly coupled system as it takes less resources and time than loose coupling. This can allow for rapid prototyping and iteration, which can be beneficial in situations where speed is a high priority.Greater control over the systemTight coupling can provide more control over the behavior of a system since the interdependencies between components are well understood. This makes it easier to predict how the system will behave under different conditions.In addition, great control makes it easier to enforce consistency across a system. Since all components are tightly integrated with one another, you can ensure that they are all following the same rules and standards. This can be particularly important in situations where strict adherence to standards or regulations is required.High performanceDespite making the entire system difficult to scale, the high interdependence between components allows for more efficient communication between components without the need for additional layers of abstraction or communication protocols. This can lead to reduced overhead and improved performance, particularly in situations where high throughput or low latency is important.Simpler to maintainTightly coupled applications don’t need to account for maintenance to ensure the front and backend are passing the correct data and functions. Since they’re part of the same codebase, this in inherently built into the application. By contrast, a decoupled application with a frontend and backend that communicate via API would each require maintenance, and the connection between the two would also require ongoing attention.Disadvantages of tight couplingThere’s rarely an approach in software development that is “the best” for all situations. There are always tradeoffs. These are the disadvantages of tight coupling.Can be difficult to scaleTightly coupled systems can be challenging to scale because adding new components or increasing the size of existing components may require significant changes to other parts of the system.Code duplicationTightly coupled systems may have more code duplication than loosely coupled systems because components need to communicate with each other more frequently. This can make it more challenging to maintain and update the system over time.High dependencyTightly coupled systems are highly interdependent since their components are connected to each other. As a result, changes to one component in a may require changes to other components, making it difficult to modify the system without causing unintended consequences. This can lead to a lack of flexibility, making it harder to respond to changing requirements or evolving business needs.High coordinationTightly coupled systems that grow in size and complexity end up requiring a high level of coordination among developers to ensure that changes made to one component do not have negative effects on other components.What tends to happen, especially for applications that grow from under-funded MVPs, is that new parts of the application are built without proper documentation or code standards. AsHow loose coupling worksLoose coupling is a design pattern in software engineering that involves reducing the interdependencies between components in a system. In a loosely coupled system, each component is designed to operate independently of the others, with minimal reliance on shared resources or communication protocols.At a high level, a loosely coupled system works by using standardized interfaces to allow components to communicate with one another in a flexible and modular way. Each component is responsible for its own behavior and state and communicates with other components using well-defined APIs or other forms of standardized communication.One common approach to implementing loose coupling is to use a message-passing architecture, where components communicate with one another by sending messages through a central message broker or other intermediaries. This can allow components to communicate in a decoupled way, without relying on direct connections or shared resources.Another approach to loose coupling is to use microservices architecture, which involves breaking a larger system into smaller, independently deployable services that communicate with one another using standardized APIs or protocols.Features of loose couplingHere are some key characteristics or features of loosely coupled systems:ModularityLoose coupling often involves breaking a system down into smaller, independently deployable modules that can be developed and maintained separately. This makes it easier to manage the complexity of a system, as developers can focus on developing and maintaining individual modules without worrying about how they fit into the larger system. It also allows for greater flexibility in terms of development and deployment, as individual modules can be updated or replaced without affecting the rest of the system.In addition, modularity can also promote code reuse, as individual modules can be designed to be used in multiple parts of the system or even in different systems altogether. This can lead to more efficient development processes and reduce the risk of errors or bugs in the system.Standardized interfacesIn order to communicate with other components in the system, each module in a loosely coupled system typically uses standardized interfaces, such as RESTful APIs or message brokers. This allows for components to be added, removed, or replaced without affecting other components in the system, as long as they adhere to the same interface standards.Standardized interfaces also promote interoperability between different systems or components. For example, if two systems use the same interface to communicate, they can easily exchange data or functionality without requiring significant custom integration work.Decoupled communicationDecoupled communication is another important feature of loosely coupled systems. In a loosely coupled system, communication between components is typically designed to be asynchronous and decoupled, which means that components can communicate with each other without needing to be aware of each other's specific implementation details or internal workings.This is typically achieved through the use of messaging systems or event-driven architectures, where components publish events or messages to a central hub or message broker, and other components can subscribe to these events or messages and respond accordingly.For example, consider a logistics application that consists of multiple components, including a shipment tracking system, a warehouse management system, and a delivery management system. In a tightly coupled system, these components may be tightly integrated, requiring each component to be aware of the specific implementation details of the other components.ScalabilityLoose coupling can make it easier to scale a system horizontally by adding additional modules or services as needed.For example consider a web-based e-commerce application that consists of multiple components, including a web server, a database server, and a payment gateway. In a tightly coupled system, these components may be tightly integrated, making it difficult to scale them independently. However, in a loosely coupled system, each component can be scaled independently, based on its specific needs.For instance, if the database server is experiencing a high volume of traffic, additional resources can be added to the database server to handle the increased load, without affecting the web server or the payment gateway. Similarly, if the payment gateway needs to handle a large number of transactions, additional resources can be added to the payment gateway, without impacting the other components.Advantages of loose couplingSome of the advantages of using loose coupling in software design include:InteroperabilityLoose coupling can make it easier to integrate different systems or components since each component can be designed to use standardized interfaces or APIs to communicate with other components.Less complex to maintainLoose coupling can improve maintainability by reducing the impact of changes to one component on the other components. This makes it easier to isolate and fix bugs, add new features, or make other modifications to the system without causing unintended consequences in other parts of the system.However, it also means more maintenance because the components and the way they connect need to be maintained.Cost-effectiveLoose coupling is more cost-effective as it reduces the need for costly system-wide upgrades or rewrites. Instead, businesses can make incremental changes to individual components as needed, which can be less expensive and less disruptive than making system-wide changes.AgilityLoose coupling can improve agility by allowing businesses to quickly and easily make changes to their software systems in response to changing business requirements or market conditions. This can help businesses stay ahead of the competition and respond more effectively to changing customer needs.Frequently asked questionsQ: What is the difference between tight and loose coupling?A: Tight coupling refers to a situation where two or more software components are closely connected and depend on each other to function properly. Loose coupling, on the other hand, means that the components are less dependent on each other and can operate more independently.Q: Which is better, tight or loose coupling?A: As with everything else in software development, there’s not an approach that is “better”. Generally, loose coupling is preferred for larger or more complex systems, where flexibility, scalability, and maintainability are more important, while tight coupling is better suited for simpler systems, where the goal is to keep complexity low.Q: Is it possible to move from a tightly coupled system to a loosely coupled one?Yes, it is possible to move from a tightly coupled system to a loosely coupled one, although it may require significant effort and resources. This may involve refactoring existing code, redesigning system architecture, and implementing new communication protocols and interfaces. The benefits of a more loosely coupled system, such as greater flexibility and scalability, may make the effort worthwhile.Key takeawayThe level of coupling between software components has a significant impact on the flexibility, scalability, and maintainability of a system. While tight coupling may offer certain advantages such as performance and control, a more loosely coupled architecture is better suited to modern software development and can provide benefits such as modularity, standardized interfaces, and decoupled communication. That said, choosing the right level of coupling depends on the specific needs and requirements of the system in question."
  },
  {
    "title": "Saleor vs Shopify - Choosing The Best eCommerce Platform",
    "plaintext": "Given the influx of e-commerce platforms in the market, it’s tricky for businesses to choose the platform closest to “perfect” for their use case. Two options we often get asked to compare by our clients are Shopify and Saleor. Saleor is a relatively small, “up and coming” open-source, Python/Django-based eCommerce framework, while Shopify is a proprietary, closed-source eCommerce platform considered incumbent for any new online store.Saleor and Shopify have a decent amount of overlap, especially since Shopify has a mature API available for Shopify Plus users. Picking the right platform for your user case isn't straight forward, so in this article, we'll provide an in-depth comparison of Saleor and Shopify to help you decide which platform is the best fit for your business needs.Picking the right tech option💡If you're researching options to help solve your store's problems, you're not alone. We've prepared a list of 14 businesses that had different performance struggles, used a technology change to pivot and saw huge growth. Check it out below.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitSaleor overviewSaleor is an open-source, Python/Django-based e-commerce framework that provides extensive customization and flexibility for businesses. It describes itself as headless and GraphQL-first, which gives you an idea about the level of customization it enables.The platform is also designed to handle high volumes of traffic and large product catalogues, making it an excellent choice for businesses that anticipate rapid growth.Saleor fills an interesting gap in the market. The traditional eCommerce model is suited to retail products like clothes and books. Shopify has this part of the market completely stitched up. However, there are a huge number of businesses that sell niche products that don’t fit Shopify’s model. These businesses have been forced to use other less awesome solutions like WooCommerce, which means getting tangled in WordPress and just accepting that your solution is a bit clunky.This is where Saleor enters the picture. They’re best suited to businesses that aren’t getting everything they need from Shopify. As an API-first platform, Saleor encourages integration with any other API-rich platform, including the most popular Enterprise Resource Planning Systems (ERPs), headless Content Management Systems (CMSs), Product Information Management systems (PIM) and Point of Sale systems (POS).The biggest difference between Saleor and Shopify is that Saleor doesn’t provide a templating engine to build a frontend. When you start a new store, you can’t automatically check out what your homepage looks like. There’s no automatic theme that’s assigned to create a graphical UI. Rather, it provides all the administrative backend eCommerce functionality and a rich API to pull data into a custom frontend that your friendly neighbour developer would build.Let’s look in more detail at some of the features that make Saleor stand out.Saleor featuresSaleor's features are designed to enhance the e-commerce experience for both customers and merchants. Key features of Saleor include:CustomizabilitySaleor provides a customizable storefront framework that allows developers to build their own unique frontends using modern web technologies such as React and GraphQL. While this requires more technical expertise and time to build, it provides greater flexibility and control over the design and functionality of the online store. Additionally, the platform’s API-based architecture allows for easy integration with third-party services such as Adyen and Mollie payment gateways.ScalabilitySaleor is designed to handle high volumes of traffic and large product catalogues, making it an excellent choice for businesses that anticipate rapid growth. It does this through a modern architecture with built-in caching capabilities to improve website performance and reduce server load.Saleor integrates with Elasticsearch, a search engine that can handle large amounts of data and provide fast search results. This ensures that even as a store grows, it can continue to provide a fast and responsive shopping experience for customers.SEO optimizationSaleor's SEO optimization features are designed to help merchants improve their store's visibility and attract more customers. Saleor's URL structure is optimized for search engines, making it easier for customers to find the products they want. Saleor also provides tools for optimizing meta descriptions, which can improve click-through rates from search engine results pages. Customizable page titles allow businesses to target specific keywords and improve search engine rankings.The platform offers strong SEO optimization capabilities due to its compatibility with Gatsby and Next.js. The two are popular frameworks for building fast, SEO-optimized websites. When paired with Saleor, businesses can create a custom frontend using these frameworks and integrate it with Saleor's backend, resulting in a fast and SEO-friendly online store. This integration also allows for features such as server-side rendering, which can improve site speed and performance and ultimately improve search engine rankings.SecuritySecurity is a priority for eCommerce platforms, given how much sensitive customer data they handle. Saleor understands the importance of security takes, so it offers a wide range of security features such as SSL/TLS and Two-factor authentication to help protect customer and business data. SSL/TLS is an encryption standard that helps to protect sensitive data transmitted between customers and the store. Two-factor authentication adds an extra layer of security, preventing unauthorized access to the store's admin panel. Saleor is also compliant with the Payment Card Industry Data Security Standard (PCI DSS), which is required for businesses that accept credit card payments. These security features help to ensure that a store's data is kept safe and secure at all times.In addition, Saleor's decoupled architecture improves security by following battle-tested security processes for backend and frontend communication, decreasing the attack surface by not directly connecting the backend to the frontend. This helps prevent vulnerabilities in the frontend from affecting the backend. The platform uses HTTPS encryption for all data transmissions and is regularly audited for security updates.API-based architectureAt its core, Saleor is built as a set of APIs (Application Programming Interfaces) that allow developers to interact with the platform and build custom applications on top of it. Businesses using Saleor can easily integrate with third-party services, such as payment gateways, shipping providers, and marketing tools. The GraphQL APIs provide a standardized interface for these integrations, making it easy for developers to connect Saleor with other services without writing custom code.Besides third-party integrations, Saleor's API-based architecture also allows businesses to build custom storefronts and applications tailored to their specific needs. For example, a business may want to build a mobile application that integrates with Saleor's backend to provide a seamless shopping experience for customers.Having understood the features and general architecture of Saleor, let's look at its strengths and weaknesses:Pros of SaleorSaleor is a headless eCommerce engine, so it makes short work of some things most monolithic platforms can’t handle. These are the benefits of.FlexibilitySaleor is highly flexible and customizable, making it well-suited to the needs of modern businesses. With its powerful API-based architecture, businesses can easily integrate Saleor with third-party services and build custom applications that meet their unique requirements.For instance, a business may have a highly customized order fulfilment process that involves twenty different steps and integrations with various shipping carriers, inventory management systems and third-party logistics providers. A Business like this could leverage Saleor’s functionality through their flexible API to build a custom application to streamline their order fulfilment process. By comparison, this would be almost impossible with any off-the-shelf functionality because the requirements are too complex and specific.Multi-language and multi-currency supportSaleor is built with multi-language and multi-currency support in mind, allowing businesses to easily expand their reach to global markets. Saleor supports multiple languages out of the box, including English, Spanish, French, and German, and businesses can easily add new languages using Saleor's translation tools. Saleor also supports multiple currencies, allowing businesses to sell to customers in their local currency.The multi-language and multi-currency support helps businesses expand into new markets and sell to customers around the world, and improve the overall shopping experience.Saleor consSaleor requires effort to set up. It doesn’t come packaged with a default template like Shopify, WooCommerce or BigCommerce. It requires effort from a designer and developer to create the UI. As a result, it’s slower to get up and running, but there are other “cons” of adopting Saleor:Expensive to setup and runOne of the most significant disadvantages of Saleor is that it can be time-consuming and expensive to set up and run, especially for businesses that do not have the technical expertise in-house. Saleor requires a significant amount of technical knowledge and experience to customize and deploy, as it is a self-hosted platform built using modern technologies such as Django and GraphQL. This means that businesses may need to hire developers and designers with specific skill sets to work on the platform, which can be costly.Lack of pre-built integrationsUnlike most eCommerce platforms, Saleor doesn't have a large library of pre-built integrations with third-party services. This means that businesses may need to build custom integrations or work with developers to connect Saleor with the services they need.Community sizeSaleor has a relatively small community size compared to other eCommerce platforms like Shopify. As such, fewer resources are available for users who need help or want to learn more about the platform. It also means that there are fewer third-party plugins and integrations available for Saleor, which can limit its functionality for some businesses.A smaller community can also mean slower development and updates for the platform, as fewer people are working on it and contributing to its growth. This can result in longer wait times for bug fixes and new features, which may concern businesses with specific needs.European-focused CompanyThey have a Poland and Netherlands office but no US, African, or APAC presence, which could be a problem for businesses in these areas that want support during their business hours.Shopify overviewShopify is an all-in-one eCommerce platform that provides businesses with everything they need to build, manage, and grow their online stores. It's a hosted platform, meaning businesses don't need to worry about the technical details of running a website, such as running a server or managing security protocols. Shopify handles everything from infrastructure maintenance to technology updates, allowing businesses to focus on growing their sales.Shopify runs over 6,000,000 stores globally and owns around 19% of global eCommerce. It’s the incumbent for new stores because even non-technical folk can get a store running in less than an hour. The ecosystem of apps, plugins and extensions is second only to WordPress, which gives businesses the option to pick and choose mature functionality extensions for their site without dumping tens of thousands of dollars into custom development.Shopify featuresSome of the key features of Shopify include:Website builderShopify's website builder allows businesses to create a professional-looking online store with ease. The website builder is designed to be user-friendly and does not require any coding knowledge or web development experience.It has a drag-and-drop interface allowing users to select elements such as product images, videos, and text boxes and place them anywhere on the page. Shopify offers a variety of customizable templates that can be used as a starting point for businesses, or businesses can choose to design their website from scratch.One of the advantages of the website builder is that it allows businesses to create a website that matches their brand. Businesses can customize the color scheme, font, and layout of their website to match their existing marketing materials. This is important because having a consistent brand image helps build trust with customers and can increase conversions.Payment processing systemShopify includes its own payment processing system (powered by Stripe), which makes it easy for businesses to accept payments from customers. With this feature, businesses don't have to worry about setting up separate payment gateways, and can instead use Shopify's built-in system. This not only saves time and effort, but it also eliminates the need to pay for additional third-party payment gateway services.Shopify's payment processing system supports a wide range of payment methods, including credit cards, debit cards, PayPal, and Apple Pay. This makes it easy for customers to pay using their preferred method, which can help increase conversions and customer satisfaction.It’s also possible to integrate other payment processors like Stripe directly into Shopify, but it comes at an additional cost. Shopify’s base transaction cost for their Basic plan is 1.75%. That figure jumps up to 2.75% if you want to bring your own payment processor along for whatever reason.Shipping integrationsShipping integrations are a valuable feature in Shopify that helps businesses streamline their shipping and fulfilment processes. With Shopify's built-in shipping integrations, businesses can easily manage and track their shipments from within the platform.The system integrates with major shipping carriers such as USPS, FedEx, and DHL to provide businesses with a range of shipping options. This integration makes it easy to generate shipping labels, calculate shipping costs, and track packages directly from the Shopify platform. Additionally, businesses can automate shipping notifications to customers to keep them updated on the status of their orders.Shopify app storeShopify's App Store is a robust marketplace that offers a vast selection of third-party apps and integrations. The App Store makes it easy for businesses to add new features and functionality to their online stores without building them from scratch.The apps cover various categories, including marketing, sales, shipping, and customer service. Some of the most popular app categories include upselling and cross-selling tools, abandoned cart recovery, email marketing, and social media integration.Saleor vs Shopify: Which one should you chooseWe wanted to offer a quick overview of which platform we considered to be the winner in a handful of categories.Please note: This is a tricky comparison because Shopify has its own API-focused product, Shopify Plus. Realistically, most businesses using Saleor won't look to modify the codebase because it's unnecessary and means updates from the core product team may introduce issues. So Shopify Plus will be able to match most of the benefits that Saleor claims.For the sake of comparisons, we're comparing a monolithic Shopify architecture with Salero.Ease of useWinner: ShopifySaleor and Shopify offer very different user experiences. Saleor's open-source framework requires more technical knowledge and experience to set up and customize, while Shopify's hosted platform is designed to be user-friendly and intuitive. Shopify offers a drag-and-drop website builder that makes it easy for businesses to create an online store without any coding knowledge. On the other hand, Saleor provides a more flexible and customizable interface, which can be overwhelming for beginners but offers greater control and customization options for experienced users.Catering to unique use casesWinner: SaleorSaleor's open-source platform provides unparalleled customization and flexibility, allowing businesses to tailor their online store to their specifications. The platform’s API-based architecture allows easy integration with third-party tools and services, while its modular structure enables developers to add new functionality as needed.Shopify also offers a wide range of customization options, but they are more limited than Saleor's due to its hosted platform. Shopify's App Store provides many third-party integrations and tools, but customization is limited to what's available within the platform.Performance and scalabilityWinner: SaleorSaleor is built on a modern, API-based architecture that allows for the efficient handling of large amounts of data and traffic. This makes it a good option for businesses with complex product catalogues and high traffic levels. However, Saleor requires more technical expertise to set up and maintain, which can impact its overall performance.Shopify, on the other hand, is a hosted platform that is designed to handle large volumes of traffic without any additional setup or maintenance required. While Shopify can handle complex product catalogues, its performance may be impacted if a store uses too many apps or customizations.In terms of scalability, both platforms can add additional resources and features as needed to accommodate growing businesses. However, Saleor's open-source nature makes it more customizable and scalable in the long run, while Shopify's scalability is limited to the features and resources provided by the platform.Security and supportWinner: TieSaleor and Shopify both provide secure and reliable eCommerce platforms, but there are some differences in terms of security and support.Saleor is an open-source platform, which means that users have access to the source code and can make modifications to the software. This gives users more control over the security of their online stores, but it also means that they are responsible for keeping the platform up-to-date with security patches and updates.Shopify, on the other hand, is a hosted platform that handles security and updates for its users. Shopify has a team of security experts who monitor the platform for vulnerabilities and respond quickly to any security issues that arise.In terms of support, Shopify offers 24/7 customer support via phone, email, and live chat. Shopify also provides a comprehensive knowledge base and community forums to help users find answers to their questions.Saleor, being an open-source platform, does not offer the same level of support as Shopify. However, Saleor has an active community of developers who contribute to the platform and provide support through forums and other channels.Affordability & time to marketWinner: ShopifyTaking the initial setup costs out of the equation, both Shopify and Saleor can be affordable options. Both platforms offer a basic pricing tier that's similar; Shopify for $39/month and Saleor for $45/month.Saleor jumps up significantly to the next tiers ($1,295/month for Pro and $6,795 for enterprise) where as Shopify is a bit more gradual ($105/month for Shopify, $399/month for Pro and $2,000/month for Shopify Plus).The biggest difference is the processing fees. Shopify runs it's own payment processes that's powered by Stripe. As a result, they can offer fees as low as 1.4% per transaction + $0.30. Since Salor doesn't provide a payment processor, you'll need to bring your own (probably Stripe), leaving you to pay 1.6% transaction fees + $0.15.SEOWinner: SaleorShopify isn’t bad for SEO, but Saleor integrates seamlessly with Next.js and Gatsby, so it can leverage the power of static site generation and easily pass core web vitals, no matter how many products a store sells.Frequently asked questionsQ: What is the main difference between Saleor and Shopify?A: Saleor is an open-source eCommerce platform built with Python and Django, while Shopify is a hosted platform that allows businesses to create an online store without worrying about the technical aspects of hosting and development. Saleor offers more customization options and flexibility but requires more technical expertise, while Shopify offers ease of use and a wide range of pre-built integrations.Q: Can I migrate my store from Shopify to Saleor or vice versa?A: Yes, both Saleor and Shopify offer tools and resources to help businesses migrate their online stores from one platform to another. However, the process can be complicated and time-consuming, so it's recommended to seek professional help or follow detailed instructions to avoid any issues.Q: Is Saleor or Shopify better for SEO optimization?A: Both Saleor and Shopify offer a range of SEO tools and features to help businesses improve their search engine rankings. Saleor's API-based architecture allows for more granular control over SEO elements, while Shopify's built-in SEO features, such as customizable meta tags and page titles, can also be effective.Key TakeawaySaleor and Shopify are both strong eCommerce platforms, each with its own strengths and weaknesses. Saleor offers greater flexibility and customizability but requires more technical expertise and lacks pre-built integrations. Shopify, on the other hand, offers a more user-friendly experience with an extensive app store and built-in features, but customization options may be limited. When choosing an eCommerce platform, businesses should consider their specific needs, budget, and technical expertise to determine which platform will best support their goals."
  },
  {
    "title": "Importance of Software Maintenance in Software Engineering",
    "plaintext": "At its core, software maintenance involves modifying and updating existing software products to ensure they continue to function as intended and meet the changing needs of the user. The process involves bug fixing, performance optimization, and feature enhancements.Think of it as an ongoing process and not a one-time activity because software applications are not static; they are constantly evolving. New bugs may emerge, user requirements may change, and the underlying technology may become outdated. Software maintenance is required to keep the software up-to-date and functioning optimally. Neglecting maintenance can lead to decreased performance, system failures, and security vulnerabilities.Let’s delve deeper to reveal and understand the importance of software maintenance in software engineering and provide insights into best practices for effective maintenance.Importance of software maintenanceImproves reliability and stabilityOne of the primary benefits of software maintenance is that it improves the reliability and stability of software products. Through regular maintenance, bugs, and errors can be identified and fixed, preventing them from causing system failures or other issues that can negatively impact user experience. This results in a more stable and reliable software product that users can depend on.Improves performanceSoftware maintenance helps to improve the performance of the software by addressing issues that affect speed and efficiency. Performance issues can arise due to a variety of reasons, including inefficient code, memory leaks, and hardware limitations. By regularly monitoring and optimizing the software, developers can identify and fix these issues, resulting in faster and more efficient software. Optimized software is typically received better by users because they spend less time waiting around, which keeps them happy, as well as reduces the likelihood of downtime and disruptions to business operations.Improves securitySecurity threats are constantly evolving, and software systems must be able to adapt to these changes. Software maintenance is critical in ensuring that the software remains secure and protected against potential vulnerabilities. Regular security updates and patches can help to address security flaws, while security audits and assessments can identify potential areas of weakness that require attention.Reduces downtime and disruptionSoftware maintenance can help to reduce downtime and ensure that software remains available. Downtime can occur due to a variety of reasons, including system failures, bugs, and security breaches. Regular maintenance helps to identify and address these issues, minimizing the likelihood of downtime and ensuring that the software remains available for use. This can help to maintain productivity, minimize disruptions, and ensure that users have access to the software when they need it.Adapt to changing technology trendsAs technology persistently progresses, it is crucial to regularly update and maintain software in order to sustain its significance and competitiveness in the industry. Software maintenance allows developers to adapt to changing technology trends by adding new features and functionality, improving compatibility with new hardware and software, and optimizing performance for new platforms and devices. This helps to ensure that the software remains useful and valuable for users, and can help to attract and retain customers over the long term.Types of software maintenanceSoftware maintenance can be classified into four types, namely corrective, adaptive, perfective, and preventive maintenance. Let's take a closer look at each of these types.Corrective maintenanceCorrective maintenance is a type of software maintenance that focuses on identifying and fixing defects or bugs in a software product. These defects or bugs can be identified through various means, such as user feedback, monitoring, or testing.Once the bugs have been identified, the necessary changes are made to the code, and testing is carried out to ensure that the issue has been resolved.Adaptive maintenanceThis type of maintenance is usually done when the environment of your software changes. The primary objective of adaptive maintenance is to ensure that the software product remains compatible with the changing environment and continues to function as intended.The maintenance involves modifying the source code, updating the database, and testing. For example, if a new version of an operating system is released, the development team may need to modify the software product's code to ensure that it continues to work correctly on the new operating system. Similarly, if new regulations are introduced that affect the software product's functionality, the development team may need to modify the software product to comply with the new regulations.Performative maintenancePerformative maintenance involves making changes to the software to improve its performance, functionality, or usability. It aims to enhance the software's features and capabilities to meet the changing needs of users and businesses. For example, a software developer may improve the search function in an application by adding advanced search options, improving search speed, or enhancing search results.Performative maintenance can also involve optimization of existing code to make it more efficient and faster. This can be done by identifying and eliminating unnecessary code, reducing redundancy, and improving the software's overall architecture.Preventive maintenanceAs the name implies, preventive maintenance is done to prevent potential system vulnerabilities. Essentially, it involves identifying and fixing potential issues before they become critical and cause downtime or other disruptions to business operations.Preventive maintenance is all about taking a proactive approach to finding and fixing possible software issues before they turn into major headaches. It includes keeping a close eye on the system, running tests to make sure everything's running smoothly, and updating components such as plugins, libraries, and dependencies. By staying on top of these tasks, developers can ensure the software stays in tip-top shape, reducing the chance of downtime or other disruptions that could hinder business operations.During this procedure, teams can perform various tasks such as system monitoring, and testing to ensure that the software is running smoothly and efficiently. Others include updating software components, such as plugins, libraries, and dependencies, to ensure that they are up-to-date and compatible with the latest technology trends.Software maintenance can be a complex and challenging process, making it difficult to perform as frequently as required.Challenges in software maintenanceIn today's rapidly evolving technological landscape, software maintenance is more crucial than ever. Ensuring that your software remains relevant, efficient, and secure is a continuous task that demands vigilance and expertise. Here are some of the most common challenges in software maintenance:Lack of documentationJumping into a new project without any documentation can be a developer's worst nightmare. It's like starting a new job and needing to ask questions about every little thing just to get by. This can make it difficult for developers to understand how the software works and identify the root cause of problems or issues. Inadequate documentation can also hinder new developers from learning about the software and contributing to its upkeep and growth.Legacy codeLegacy code refers to code that was written using outdated programming languages, frameworks, or technologies. As new technology emerges, it can be difficult to maintain legacy code and keep it up to date with the latest software standards. This usage of older technologies can make it challenging for developers to maintain and update the software, as they may need to make significant changes to the codebase to keep it functional and compatible with new technology trends.Limited resourcesSoftware maintenance requires a significant investment of time, money, and resources. When resources are limited, it can be challenging to maintain and update the software. This shortage can result in delayed updates, reduced quality, and increased risk of security breaches and other issues.Scope creepScope creep refers to software functionality expanding beyond its original scope. As new features and capabilities are added to the software, it can become more complex and challenging to maintain. This complexity can result in higher maintenance costs, longer development times, and an increased risk of bugs and errors.Best practices for software maintenanceNavigating the world of software maintenance can be a complex and overwhelming task, but adhering to industry best practices can streamline the process and keep your software in optimal condition.  To ensure a smooth software maintenance procedure, consider the following practices:Maintain proper documentationComprehensive documentation is essential for the maintenance of software applications. Efficient software documentation should include information about the software's architecture, design, and codebase. Developers should regularly update their documentation to ensure it is current and accurate.Regular software testingRegular testing is essential to identify and address bugs and software issues before they escalate into significant problems. By incorporating automation and integrating testing within the deployment process, the efficiency of these evaluations can be significantly enhanced, ensuring a proactive approach to mitigating potential issues.Frequently asked questionsQ: What is software maintenance?A: Software maintenance refers to the process of modifying or updating existing software products to ensure that they continue to function as intended.Q: How often should software maintenance be performed?A: The frequency of software maintenance depends on several factors, such as the complexity of the software product, the environment it operates in, and user feedback. Generally, software maintenance should be performed on a regular basis, such as weekly, monthly, or quarterly. However, more frequent maintenance may be required for critical software products or in rapidly changing environments.Q: How can businesses address the challenges in software maintenance?A: Businesses can address the challenges by implementing effective knowledge management practices, prioritizing software maintenance issues based on their impact, and investing in training and development for their developers. It's also essential to stay up-to-date with the latest industry trends and technologies to ensure that software products remain effective and relevant over time.Wrapping upSoftware maintenance is an essential aspect of programming that ensures that software remains effective, secure, and reliable over time. By understanding the different types of software maintenance and addressing common challenges, organizations can ensure that their software products continue to meet user needs and contribute to their business success. As technology continues to evolve, software maintenance will only become more critical, and organizations that prioritize it will be better positioned to succeed in a rapidly changing marketplace."
  },
  {
    "title": "Everything You Need To Know About Integration Testing",
    "plaintext": "Integration testing or integration and testing (I&T) is a software testing procedure that involves evaluating the behavior of a software system as a whole by testing its components, modules, or units. Note that these components are tested together as a group unlike unit testing, which focuses on testing individual software components in isolation from the rest of the system. That’s why integration testing comes after unit testing as it ensures that the individual units can work together.The goal of I&T is to detect problems that may arise when software modules are combined and interact with each other in a larger system. This helps teams resolve issues early in the development cycle, which ultimately leads to a more stable and reliable product.In this article, we will explore everything you need to know about integration testing, including its importance, types, process, best practices, common challenges, and tools and technologies.Why you should perform integration testingBesides early detection of defects, there are several other reasons why performing integration testing is essential. These include:Ensure software system reliabilityIntegration testing helps ensure that the software system works correctly as a whole and that its individual components work together as intended. By testing the software system in its entirety, integration testing can identify potential issues that may arise from the interaction between different modules. This identification can help ensure the reliability of the software system.Verify requirementsIntegration testing can help verify that the software system meets the specified requirements. By testing the interactions between different software modules, integration testing can ensure that the software system behaves by meeting the user's requirements.Reduce risksIntegration testing can help reduce risks associated with software development. By testing the interactions between different software modules, integration testing can identify potential issues that may affect the overall performance of the software system. This can help reduce risks associated with software failure, data loss, and security breaches.Types of integration testingThere are several types of integration testing approaches that software development teams can use to test the interaction between different software components. Let’s explore some of the most common types of integration testing and explain how they work.Top-down approachAs the name suggests, “top-down” is an approach to integration testing in which the highest-level modules of a software are tested first, and testing proceeds down to the lower-level components. This approach starts with the system's main module, which is then tested with its submodules. After the submodules are tested, the sub-submodules are tested, and so on, until all the components of the software system have been tested.Top-down integration testing is often used when the software system's structure is hierarchical, with a clear division between higher-level and lower-level modules. This approach allows developers to test critical components of the system first, ensuring that they function as expected before moving on to the lower-level modules.One of the advantages of top-down integration testing is that it enables developers to identify defects in critical components of the software system early in the development cycle. This can help reduce the overall development time and costs by identifying issues before the lower-level modules are developed.However, on the downside, lower-level modules may not be tested until later in the development cycle, which can make it difficult to isolate defects that arise from interactions between these components. Also, in complex software systems, the top-down integration testing approach may be less efficient as it may require significant resources to test the critical components thoroughly.Bottom-up approachThis approach is the inverse of the “top-down” one, and as such, the lower-level software components are tested first. The tested modules are then used to facilitate the testing of higher-level modules. This approach is an incremental method where the most fundamental components are combined and tested first, before gradually advancing to the main modules.Bottom-up integration testing is often used when the software system's structure is not hierarchical or when there is no clear division between higher-level and lower-level modules. This approach allows developers to identify defects in lower-level modules early, which can help reduce the overall resources investment.The main disadvantage of this approach is that higher-level modules may not be tested until later in the development cycle, which can make it difficult to identify issues that arise from interactions between these components.Sandwich/Hybrid approachThe hybrid approach also known as the sandwich approach is a perfect blend of the top-down and bottomapproachesoach creating a more comprehensive and efficient testing process. As such, it helps cancel out the disadvantages of the two approaches mentioned earlier, while leveraging their strengths.In a hybrid integration testing approach, the software system is divided into subsystems, and each subsystem is tested using a combination of top-down and bottom-up integration testing techniques. The top-down approach is used to test critical subsystems first, while the bottom-up approach is used to test the individual modules that make up each subsystem.The advantage of this approach is that it allows developers to detect critical issues early in the development cycle while also testing lower-level modules. By testing the critical components first, developers can ensure their function as expected before moving on to the lower-level modules. At the same time, by testing the lower-level modules, developers can pinpoint issues early into development.On the downside, the hybrid approach requires significant resources to test both component levels thoroughly. Additionally, it can be time-consuming to integrate and test all the software modules using this approach.Big-bang approachThis approach involves combining all the software components into a single system and testing the system as a whol e. The individual components are not tested in isolation. Instead, they are integrated and tested together in a single step. This approach requires a lot of coordination between the developers and testers, as any defects discovered during testing may be difficult to isolate and fix.The big-bang approach can be faster and less expensive than other approaches because the development team does not need to spend time on incremental testing. Also, this approach may be suitable for smaller software systems that do not have complex dependencies between components.However, this approach is considered high-risk because if there is a defect in any of the software components, it can cause a cascading effect on other components, leading to system failure. Additionally, this approach makes it challenging to identify the source of a defect since all components are integrated simultaneously.How to go about integration testingIntegration testing is a critical phase of software development that ensures the smooth functioning of all the individual software components when integrated into a complete system. So, you want to do it diligently.Here is how to go about it:Integration test planThe first step in integration testing is to create an “integration test plan”. The test plan outlines the strategy and approach the development team will use to integrate and evaluate the software components. The test plan should also specify the tools, resources, and timelines required for integration testing.Integration test environmentAfter the integration test plan is developed, the next step is to set up the integration test environment. The integration test environment should simulate the production environment as closely as possible to ensure the results are accurate. The integration test environment should include hardware, software, and network configurations that are similar to the production environment.Test cases and scenariosOnce the integration test environment is set up, the development team needs to work on test cases and scenarios. These test cases and scenarios should cover all the possible interactions between the software components. The development team should also ensure that the test cases are realistic and representative of the actual usage of the software system.Executing integration testsAfter the test cases and scenarios, the development team can execute integration tests. The integration tests should be run in a controlled environment to minimize the risk of impacting production systems. During integration testing, the development team should also validate the behavior of the software components when integrated into the larger system.Defect tracking and reportingLastly, the team should track defects and report them during integration testing. They should also prioritize and address the critical defects first to minimize the impact on the overall system. Defect tracking and reporting enable the development team to identify the root cause of important issues and take corrective actions to prevent their repetition.Best practices for integration testingIntegration testing is key to achieving smooth cooperation between software components. To make the most of this crucial process, it's important to follow best practices. Here are some of them :Collaborative team approachIntegration testing involves multiple teams, including developers, testers, and other stakeholders. It is essential to adopt a team-player approach to ensure that all members work together towards the desired results. Collaboration encourages teams to share knowledge and expertise, leading to better integration testing outcomes.Continuous IntegrationContinuous integration is a development practice that involves integrating code changes into a shared repository regularly. It enables developers to detect and resolve integration issues early in the development cycle, making integration testing more efficient. It also enables teams to identify integration issues as soon as they arise, reducing the time required to tackle them.Early and frequent testingIntegration testing should be performed early and frequently to ensure that any issues are identified and resolved as soon as possible. Early and frequent testing allows the development team to fix integration issues before they escalate into bigger problems that are harder to resolve. It also reduces the time required tosingle outt any problem, leading to a faster time-to-market.Tools and technologies for integration testingIntegration testing can be complex and time-consuming, but using the right tools can help streamline the process and improve testing outcomes. Here are some tools and technologies that can be used for integration testing:Integration testing frameworksIntegration testing frameworks are software tools that provide a framework for testing software components and their interactions. Some popular integration testing frameworks include JUnit, NUnit, TestNG, and Selenium.Test management toolsTest management tools are software tools that help manage the testing process, including test case management, test planning, test execution, and defect tracking. Some popular test management tools include Jira, HP ALM, and TestRail.Continuous integration and deployment toolsContinuous integration and deployment tools are software tools that automate the integration, testing, and deployment of software components. Some popular continuous integration and deployment tools include Jenkins, Travis CI, and CircleCI.Frequently asked questionsQ: What are the benefits of integration testing?Integration testing can help detect defects early in the development cycle, reducing the cost and effort required to fix them. It can also help ensure that the software system is stable and functioning correctly before release.Q: What types of defects can be identified through integration testing?Integration testing can help identify defects related to the interaction between software components, such as data flow, control flow, and exception handling.Q: What is the best approach for integration testing?There is no one-size-fits-all approach to integration testing. The best approach depends on the software system's complexity, size, and other factors. However, a collaborative team approach, continuous integration, early and frequent testing, and automated testing are some best practices that can improve integration testing outcomes.Q: How is integration testing different from unit testing?Unit testing focuses on testing individual software components, while integration testing focuses on testing how the software components interact with each other. Integration testing is performed after unit testing and before system testing.Q: What are some tools and technologies available for integration testing?Integration testing frameworks such as JUnit and NUnit, test management tools such as Jira and TestRail, and continuous integration and deployment tools such as Jenkins and Travis CI.Wrapping upIntegration testing is a crucial step in the software testing process that helps ensure the proper functioning of software components when they interact with each other. By identifying and addressing defects early in the development process, integration testing ensures the reliability and stability of software systems. Understanding the types of integration testing, following best practices, and leveraging appropriate tools and technologies can help streamline the integration testing process and improve outcomes."
  },
  {
    "title": "Choosing the Right CMS for Your Enterprise: A Comparison of Contentful and WordPress",
    "plaintext": "WordPress is a widely known content management system with a user base and developer community that has contributed to its success for over two decades. Its functionality can be extended and its appearance customized with a variety of plugins and themes created by the community. Additionally, its built-in themes make it accessible to non-technical users, enabling them to create a functional website quickly.Once upon a time, static sites were the primary way of creating online content, but they were clunky and hard to use, which is why traditional CMSs like WordPress thrived when introduced to the market. But today with the rise of new mediums such as smartphones, smartwatches, and IoT devices, a modern CMS such as Contentful is better suited to deliver content across all channels.As a headless CMS, contentful offers a personalized user experience while maintaining consistency on all devices. This consistency gives businesses the flexibility of not only offering customer experiences across all channels but also the ability to respond to quickly changing customer needs.To clearly see what sets the two content management systems apart, this article will analyze each and compare their features.What is Contentful?Contentful is a headless CMS that was launched in 2013. A headless CMS means that the platform separates the content layer from the presentation layer. This allows businesses to customize their front end, enabling their customers to consume content across multiple devices such as smartphones, smartwatches, etc.Essentially, the content is managed and stored in a centralized hub/repository, on the cloud,  which makes up the backend or the ‘body’. The content is then accessed and presented to any front end or the ‘head’ via an API. This structure makes Contentful highly flexible and adaptable to different content needs.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitFeatures of ContentfulNow we know what Contentful is, let’s have a look at what it can do.Here are some of the key features of Contentful as a headless CMS :API-first architectureContentful API provides businesses with a set of RESTful endpoints and GraphQL queries that they can use to retrieve, update, and manage their content programmatically. This means that businesses can integrate their content into any application or channel, whether that's a website, mobile app, chatbot, or IoT device.The platform’s API is designed to be developer-friendly, with comprehensive documentation, SDKs for various programming languages, and a powerful developer portal that provides access to a variety of tools and resources.Multi-channel deliveryMulti-Channel delivery refers to the ability to deliver content across multiple channels and devices.With Contentful, businesses can create and manage their content in a centralized hub, and then use APIs to deliver that content to any channel or device. This makes it easier for businesses to reach their target audience on their preferred platform.Multichannel delivery also allows businesses to repurpose and reuse their content which can save time and resources. For example, a business can create a piece of content, such as a blog post, and then use Contentful to deliver that content to its website, social media channels, and email marketing campaigns.ScalabilityContentful is designed to be highly scalable thanks to its cloud-based infrastructure. This enables businesses to scale their content output as their needs grow without having to worry about technical aspects such as server capacity, network bandwidth, or other constraints.Also, thanks to its modular architecture and API-first approach, Contentful makes it easier for businesses to share their content across multiple channels and devices, while still maintaining consistency and control over it.What is WordPress?WordPress is an open-source CMS platform that was launched in 2003 as a blogging platform. However, it has since evolved into a full-fledged CMS that allows businesses to create, manage, and publish content. The CMS is built on the PHP programming language and uses a MySQL database to store content and other website data.Unlike Contentful -a headless CMS- WordPress has a monolithic architecture meaning that its backend and frontend are coupled into a single unit. As such, once the content has been published it’s already in its final state.Features of WordPressOne of the things that make WordPress so versatile is its wide range of features. In this section, we'll explore some of the key features of WordPress and how they can benefit you.Templates and pluginsWordPress offers a wide range of templates (or themes) and plugins that allow users to customize the look and functionality of their website. Templates provide pre-designed layouts and styles for websites, which can be easily applied to a WordPress site without needing to have coding skills. Plugins, on the other hand, offer additional features and functionalities, such as social media integration, SEO optimization, e-commerce capabilities, and more.Monolithic architectureWordPress is a traditional or monolithic CMS, which means that it combines both the content management and presentation layer into a single platform. This architecture makes it easy for non-technical users to create and manage content, as everything is integrated into one system. However, it can also limit flexibility and scalability, as the content is tied to the presentation layer.WYSIWYGThe WYSIWYG (What You See Is What You Get) editor in WordPress allows users to create and edit content visually, without needing to have coding skills or knowledge of HTML. The editor offers a range of formatting and styling options and also allows users to add media, such as images and videos, directly into their content.SEO-friendlyWordPress is designed with search engine optimization (SEO) in mind, and offers a range of SEO tools to improve website visibility in search engine results in pages. Some of these tools include meta descriptions, XML sitemaps, social media integration, and more. WordPress also allows users to create SEO-friendly URLs, and offers built-in optimization for images and other media.Contentful vs WordPress: Head-to-headLet’s look at the differences between the two platforms based on the following criteriaEase of usewinner: WordPressContentful is designed to be a developer-friendly CMS, with a focus on providing a flexible platform for building and managing content. While the user interface is clean and intuitive, non-technical users may find it more challenging to use than WordPress, as it requires some technical knowledge to set up and customize.WordPress, on the other hand, is designed to be user-friendly, even for non-technical users. It's easy to set up a free account and publish your site in no time even without any technical experience. Also, with its WYSIWYG editor and drag-and-drop interface you can create and manage content. The platform also has an extensive library of plugins and themes that make it easy to customize your website.Security featuresWinner: TieWhen it comes to security features, both platforms offer a range of security features, including HTTPS encryption, role-based access controls, and two-factor authentication.Contentful, as a headless CMS, take a different approach to security than traditional CMS platforms like WordPress. Its API-first architecture allows users to control access to their content through token-based authentication, and it uses industry-standard encryption and secure storage practices to protect user data.WordPress also offers a range of security features, including regular software updates, a secure authentication process, and plugin/theme validation. The platform’s active developer community also engages in security issues and offers guidance on best practices.ScalabilityWinner: ContentfulContentful is designed as a headless CMS, which means that it is highly scalable and flexible. Its API-first architecture allows it to be easily integrated with other services, making it an ideal choice for businesses that need to manage their content across multiple platforms. The CMS is also designed to handle large amounts of content and traffic, with built-in caching and content delivery network (CDN) support.WordPress, on the other hand, is a traditional monolithic CMS, which means that it can become more challenging to scale as a site grows in complexity and traffic. However, you can still scale your WordPress site by choosing premium caching plugins, content delivery networks (CDNs), and cloud hosting services.SEOWinner: WordPressWordPress offers SEO out-of-the-box such as Yoast SEO, and All in One SEO Pack, among others. On the other hand, Contentful is a headless CMS designed to be more extensible, focusing on multichannel delivery and integration with other technologies. While Contentful does offer SEO-friendly features like customizable URLs and metadata fields, it is typically used by larger enterprises and organizations that have more complex needs.PricingWinner: WordPressContentful has three pricing plans - =free, basic, and premium. The free plan is ideal for individual projects or anyone experimenting with the platform just to see if it's a good fit. It has limited capabilities and can support five users only. The basic plan starts at $300/month and supports up to twenty users. It’s ideal for small businesses or teams anticipating growth. The premium plan is priced based on the resources used such as the number of users, API requests, and storage space.As for WordPress, it's free to use making it ideal for absolute beginners who want to set up a site real quick. However, as a business, you may have to pay for web hosting services, premium themes, and plugins to add additional functionality to your website. Note that the free version storage is capped at 1GB. If you want more storage capacity, you’ll have to purchase a premium plan ranging from $5 - $45 and an enterprise plan for customized storage that goes for $25,000/year. Based on its pricing plans, WordPress is more affordable than Contentful.Frequently asked questionsQ: Which CMS is easier to use, Contentful or WordPress?WordPress may be easier to use for non-technical users, while Contentful may be more suitable for developers and content creators who want more flexibility and control over their content.Q: Can I use WordPress as a headless CMS like Contentful?Yes, WordPress can be used as a headless CMS by using a plugin such as WP REST API or the new WordPress REST API. However, WordPress's monolithic architecture may make it less suitable for complex, multi-channel content delivery.Q: Can I switch from WordPress to Contentful (or vice versa)?Yes, it's possible to switch from one platform to the other. However, it may require some effort to migrate content and restructure the website's architecture. It's important to carefully evaluate the needs of the business and the capabilities of each platform before making a switch.Key TakeawayBoth Contentful and WordPress offer unique features and benefits as content management systems. Contentful is a flexible and scalable headless CMS that excels in managing content for multi-channel delivery, while WordPress is a traditional CMS with a user-friendly interface making it ideal for businesses that need a website with basic content management features and e-commerce capabilities."
  },
  {
    "title": "Breaking Down the Differences: Commercetools vs. Magento",
    "plaintext": "Commercetools and Magento are two of the mature options for driving eCommerce in the world of enterprise companies. If you’re a representative of a large organization looking to make a long-term investment in an e-commerce platform, choosing the right solution is critical.In this article, we'll compare the strengths and weaknesses of these platforms to help you make an informed decision that aligns with your organization's needs. We'll analyze key features, pricing models, customization options, performance, integrations, and community backing.Commercetools overviewCommercetools is a German-based eCommerce platform founded in 2006. It’s a modern, cloud-based eCommerce platform that offers a flexible and scalable solution for businesses. The platform leverages a microservices architecture, allowing for greater flexibility and scalability. This architecture approach also allows for a decoupled backend and frontend, which gives more freedom to customize your presentation layer.Now that you have an idea of what Commercetools is, let’s have a look at its key features:Headless architectureCommercetools' headless architecture stands out as a key feature for modern eCommerce solutions. This approach allows businesses to separate their frontend and backend systems, offering diverse flexibility options for their presentation layer. By leveraging a headless architecture, enterprises can adapt to ever-changing consumer demands, ensuring a seamless, future-proof online shopping experience for their customers.API-drivenCommercetools is an API-driven platform meaning that it provides RESTful APIs that allow developers to build custom e-commerce experiences using any programming language or technology stack. This API is designed to be easy to use and flexible, with a clear separation of concerns between the client (such as a web or mobile app) and the server (Commercetools).Cloud-nativeCommercetools is built as a cloud-native platform that runs inherently on the cloud. This allows businesses to leverage the scalability, reliability, and cost-effectiveness of cloud environments. As such, a business can handle changes in traffic and respond better to consumer demands, without requiring any additional hardware or infrastructure.Also, the cloud-native design improves accessibility since it relies on a global network of data centers which provides low-latency access around the world.Microservice basedCommercetools is designed as a collection of loosely-coupled, independently deployable microservices that work together as a powerful e-commerce platform. With this architecture, businesses can easily modify or add new functionality to the platform without impacting other parts of the system.Additionally, because the microservices are independent, it allows businesses to be more fault tolerant and scalable than a traditional monolithic application. If one service fails, it does not impact the overall functionality of the platform.Multi-tenant SaasMulti-tenant SaaS is a software delivery model where a single instance of the software is shared by multiple customers, also known as tenants. In this model, each tenant accesses the software using their own unique account. Data is stored separately for each tenant.Commercetools is a multi-tenant SaaS e-commerce platform, meaning that it provides a single instance of its software that can be accessed by multiple customers. Each customer has their own account and can customize their storefront, products, pricing, and other features according to their specific business needs. Additionally, Commercetools ensures that the data of each customer is isolated and kept confidential.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitCustomizable data modelCommercetools’ customizable data model enables businesses to store and manage data in a way that is specific to their needs and e-commerce strategies. This feature is based on an extensible JSON data model, which can be customized by adding, modifying, or deleting data fields and objects to match the unique requirements of individual businesses. Companies can create custom objects, properties, and relationships between objects to fit their specific needs.Omnichannel commerceAn omnichannel experience is a key feature of modern e-commerce platforms as it enables businesses to provide a consistent customer experience across all channels. Commercetools achieves this through its cloud-native, API-driven, and microservices-based architecture, which enables businesses to easily integrate their e-commerce platform with different systems and channels. As a result, it provides a unified view of customer data, orders, inventory, and pricing across all channels, which allows businesses to offer personalized and contextualized experiences to their customersAI-driven personalizationCommercetools leverages artificial intelligence and machine learning to provide personalized experiences to customers. This feature enables businesses to analyze visitor behavior, preferences, and purchase history to offer tailored content to each individual customer.Integration and APISince Commercetools is built around an API-first approach, that allows for easy integration with existing infrastructures coupled with a high degree of customization. The platform’s integration capabilities also enable businesses to connect with popular e-commerce tools such as third-party customer relationship management (CRM) tools to further enhance customer management options.Magento OverviewMagento is an open-source e-commerce platform that allows businesses to build and manage their online stores. It was first released in 2008 and has since become one of the most popular e-commerce platforms, powering over 100,000 online stores worldwide.Magento offers a range of features and tools to help businesses create and manage their online stores. It allows for creating custom product catalogs, shopping carts, and checkout processes. The platform also offers a range of marketing tools such as email marketing, SEO optimization, and product recommendations to help businesses attract and retain customers.Commercetools vs Magento: Head-to-head comparisonHaving established a foundational understanding of the two platforms and their features, let's compare them based on several relevant criteria.Performance and scalabilityWinner: CommercetoolsCommercetools is well-suited to handle high volumes of traffic and can scale dynamically to meet changing demands. This is because the platform is built on the principles of MACH (Microservices, API-first, Cloud-native, headless) architecture which allowsbusinessess to scale up or down, without having to re-architect the entire system.Magento, on the other hand, is built on a more traditional monolithic architecture, which can make it more challenging to scale and optimize performance.Both platforms offer a range of scalability options, such as load balancing and auto-scaling, to help businesses manage traffic spikes and ensure optimal performance.  However, Commercetools generally performs better than Magento because it’s built using modern technologies and is designed to be highly modular. It can deliver fast and responsive experiences to customers, even under heavy loads.Magento, while still capable of delivering fast load times and page speeds, runs as a monolithic architecture and can’t scale its components to the same level that Commercetools can.Integration and APIsWinner: MagentoCommercetools offers a variety of integration options, including pre-built integrations with popular tools such as Salesforce and Shopify, as well as custom integrations through its RESTful API. The platform also offers developer tools such as SDKs and other code libraries to simplify the integration process. Additionally, commerce tools has a marketplace with a range of third-party apps and plugins that can be easily integrated into the platform.On the other hand, Magento has an extensive library of pre-built integrations, including popular tools such as PayPal, Google Analytics, and Amazon Marketplace. It also offers a wide range of APIs, including its own Magento APIs, REST APIs, SOAP APIs, and GraphQL APIs. Developers can use the platform's open-source codebase to create custom integrations or pre-built extensions from the Magento Marketplace.In terms of third-party app and plugin availability, both Commercetools and Magento have a large ecosystem of developers creating add-ons and extensions. However, due to its larger user base, Magento has a wider range of third-party options available.Design and CustomizationWinner: CommercetoolsDesign and customization are important considerations for businesses looking to create a unique and engaging online shopping experience for their customers. Both Commercetools and Magento offer a range of design and customization options, but with different approaches.One of the key design features of Commercetools is its headless architecture. This means that the platform's front-end presentation layer is decoupled from its back-end e-commerce functionality, which allows businesses to use any front-end technology or framework they choose. This gives businesses complete control over the look and feel of their e-commerce site, and allows them to create custom designs that are unique to their brand.Commercetools also provides a range of customization options for its back-end e-commerce functionality. The platform is built using microservices, which allows businesses to break down their e-commerce functionality into smaller, more manageable components. This means that businesses can easily customize and extend the platform to meet their specific needs, without having to make changes to the entire system.Magento, on the other hand, offers a range of out-of-the-box design and customization options, including a sizable collection of free marketplace themes. But you may have to budget for custom themes or involve a developer to build one for you. That said, Commercetools has a decoupled front and back end, which offers more freedom to customize your website’s appearance. This makes it a better choice for modern businesses.PricingWinner: MagentoMagento offers three main pricing plans - Magento Open Source, Magento Commerce, and Magento Commerce Cloud. The Magento Open Source is free to use though it comes with limited features. Despite being free, it comes with associated costs such as web hosting, domain name, PCI compliance, and other general website upkeeps. As for Magento/Adobe Commerce and Commerce Cloud, their pricing is based on tiered order value/revenue. Usually, the price ranges from $22,000 - 125,000 for Adobe Commerce and $40,000 - 180,000 for Commerce Cloud. Note that these prices are just estimates, for accurate quotes, you have to contact a Magento sales rep.That said, just like Magento Open Source, Magento Commerce is a self-hosted edition. So, you’ll have to pay for web hosting. For the Commerce Cloud, the hosting is already taken care of - it comes with the license.Commercetools, on the other hand, offers a subscription-based pricing model that is based on usage, which can make it more supple for businesses. The costs can add up quickly depending on the number of API calls, users, and integrations needed. Essentially, the annual fee is proportional to your revenue rate.If you’ve just launched your business, Magento free open-source plan is more suitable. The best thing is that the platform is structured in a way that grows with your business. So, you can start on the free plan, move to Magento commerce once your business gains traction, and eventually upgrade to Magento Cloud.Support and communityWinner: evenBoth Commercetools and Magento offer support options to their users, including documentation, customer support, and community resources. Commercetools provides 24/7 support to its users through its global customer support team. In addition, the company offers a range of resources, including developer documentation, user guides, and training programs.Magento offers customer support through its help center, which includes a knowledge base, community forum, and ticket submission system. The company also provides access to developer documentation and resources to help users build and customize their stores.As for the community size, Magento is more popular and has a larger community of users than its counterpart.Frequently asked questionsQ: Can I migrate my existing online store to either Commercetools or Magento?Yes, both platforms offer migration options for businesses looking to switch from another e-commerce solution. However, the complexity and cost of the migration may vary depending on the size and complexity of the existing store.Q: Is Commercetools more expensive than Magento?Commercetools and Magento both offer various pricing options depending on the size and needs of your business. However, commercetools is generally considered a more expensive option, as it is a cloud-based platform that offers more advanced features and capabilities than Magento.Q: Which platform is better for large-scale ecommerce businesses?Commercetools is generally considered better suited for large-scale e-commerce businesses due to its cloud-based architecture and scalable infrastructure, which can handle high volumes of traffic and transactions. However, Magento can also be a good option for large businesses due to its robust features and customizable options.Key TakeawayBoth Commercetools and Magento offer a range of powerful features and customization options for businesses looking to create or enhance their eCommerce presence. Commercetoolss stands out with its API-first approach, headless architecture, and focus on flexibility and scalability. Magento, on the other hand, offers a more traditional monolithic architecture and a larger user base, with a wide range of themes, plugins, and integrations available."
  },
  {
    "title": "Mastering API Design Patterns: Best Practices and Common Patterns",
    "plaintext": "Application Programming Interfaces (APIs) allow different applications to communicate with each other and share data, enabling developers to create complex systems that work together seamlessly. However, building APIs that are reliable, scalable, and easy to use can be a complex task.  Fortunately, it doesn’t have to be a hustle, thanks to API design patterns.These patterns provide a set of pre-established solutions to common API development problems, helping developers to build robust APIs faster. Think of them as a blueprint or a set of reusable solutions that can be applied to solve common problems encountered when designing APIs. Just like software, design pattern refers to a particular system structure that can be reused to solve commonly occurring software problems.In this article, we will explore the benefits of using API design patterns, common patterns used in API development, and best practices for implementing API design patterns.Benefits of adopting API design patternsWhy would you want to use API design patterns in the first place? Besides, you understand your business and its technical problems better. While this might be true, designing a good API requires more than domain expertise.By following established design patterns, developers can create APIs that adhere to industry best practices, making it easier for other developers to understand and use the API. Secondly, API design patterns help to reduce errors and inconsistencies in API development, making it easier to maintain and troubleshoot APIs.Further, API design patterns help to improve the security and scalability of APIs. Developers can use API design patterns to implement authentication and authorization mechanisms that protect APIs from unauthorized access. API design patterns also help to improve the scalability of APIs by allowing developers to implement caching mechanisms that reduce the load on backend systems.Common API design patternsHere are some of the most common design patterns for APIs:VersioningThe Versioning design pattern is used to manage changes to an API over time. As APIs evolve, new features may be added, existing features may be modified, and old features may be removed. Clients of the API may also need to be updated to use the new or modified features.By versioning an API, clients can continue to use an older version of the API while newer versions are developed. This allows clients to gradually migrate to the new version of the API without breaking existing functionality.There are several approaches to implementing API versioning, including: * URL-based versioning: In this approach, the version number is included in the URL of the API endpoint. For example, to access version 2 of an API, the client would use the URL:https://api.example.com/v2/resource. * Query parameter-based versioning: In this approach, the version number is included as a query parameter in the API request. For example, to access version 2 of an API, the client would use the URL:https://api.example.com/resource?version=2. * Header-based versioning: In this approach, the version number is included as a custom HTTP header in the API request. For example, the client would include the header X-API-Version: 2 in the API request.CachingCaching is an important design pattern in API development that improves the speed and efficiency of an API. Whenever a client sends a request to an API, the API processes the request and returns a response. This process can sometimes take a considerable amount of time if the API has to perform complex database queries or execute resource-intensive operations. Caching helps to speed up this process by storing frequently accessed resources in a cache.API caching can be done on client-side, server-side, and distributed. On client-side caching, the client stores the response from the API in its own cache. When the same request is made again, the client can return the cached response instead of making the request again. Conversely, server-side caching, the server stores the response and makes it available when the request is made again instead of forwarding the request to the backend system. Distributed caching is similar to server-side caching, only the response is stored in a distributed cache that is shared across multiple servers. This way, any server can return the cached response, reducing the load on the backend system.// API endpoint that supports cachingGET /api/resource// Example of caching headers that can be included in the API responseHTTP/1.1 200 OKContent-Type: application/jsonCache-Control: max-age=3600, publicETag: \"12345\"{\"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}In this example, the API response includes the Cache-Control header, which specifies that the response can be cached for up to 1 hour (max-age=3600). The ETag header provides a way for clients to check if the cached response is still valid. If the client makes the same request again within the caching period and the ETag value is the same, the cached response can be returned instead of making the request again.PaginationPagination is used to split a large set of results into smaller, more manageable pages. This api design pattern allows the client to request a subset of the data, reducing the amount of data transferred and improving the overall performance of the API. It’s implemented using query parameters in the API request. For example, the client may include parameters such as \"page\" and \"pageSize\" in the API request to indicate the desired page and number of items per page. So, the URI will look like this:GET /api/users?page=2&pageSize=10This request would retrieve the second page of users, with 10 users per page. The API response would include a list of users, as well as metadata about the total number of users and the current page number.Rate limitingRate limiting is used to control the rate at which clients can make requests to an API. It's a common way to prevent clients from overloading an API with too many requests, which can cause it to slow down or even crash. The requests are limited to a certain number per second, minute, or hour. If a client exceeds the limit, the API returns an error, preventing abuse of the system.To achieve this, a token bucket algorithm is used to store tokens that represent the number of requests a client can make. When a client makes a request, a token is removed from the bucket. If the bucket is empty, the client must wait until a token is added back to the bucket, which happens at a fixed rate.Here's an example of rate limiting in an API using HTTP headers:// Request to an API that supports rate limitingGET /api/resource// Example of HTTP headers used for rate limitingAuthorization: Bearer <access_token>X-RateLimit-Limit: 1000X-RateLimit-Remaining: 999X-RateLimit-Reset: 1630694271The API response includes three headers related to rate limiting: X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset.X-RateLimit-Limit specifies the maximum number of requests a client can make in a given time period.X-RateLimit-Remaining specifies the number of requests a client has left before it reaches the limit.X-RateLimit-Reset specifies the time when the rate limit will reset, in Unix timestamp format.Circuit-breakerThe Circuit Breaker is a design pattern used to handle errors and faults in distributed systems. It acts as a protection mechanism against cascading failures, which can occur when one service fails and causes other services that depend on it to also fail.The Circuit Breaker works by monitoring the state of a service and opening the circuit when the service is unavailable or unresponsive. When the circuit is open, requests to the service are short-circuited and returned with an error response, without attempting to execute the request.Publish-subscribeThe Publish-subscribe pattern is commonly used in APIs that involve event-driven architectures and messaging systems. The publishers send messages to a topic, and subscribers receive those messages. The pattern is particularly useful in scenarios where there are multiple subscribers interested in the same topic, and the publishers do not need to know the identities of the subscribers. This decoupling of publishers and subscribers makes the pattern particularly useful in distributed systems where services need to communicate with each other in a loosely coupled way.Authentication and authorizationAuthentication is the process of verifying the identity of a user or system. In API design, authentication is used to ensure that only authorized users or systems can access the API. This is typically done by requiring users to provide some form of credentials, such as a username and password, an access token, or a digital certificate. Once the user's identity has been verified, the API can grant access to the requested resource.Authorization is the process of determining what level of access a user or system should have to a particular resource. In API design, authorization is used to ensure that users can only access the resources that they are authorized to access. This is typically done by defining roles and permissions that specify what actions a user is allowed to perform on a particular resource.Authentication and authorization are used in many different types of APIs, including REST APIs, GraphQL APIs, and SOAP APIs. The specific implementation of this pattern can vary depending on the technology and the requirements of the API, but there are some common best practices that are followed in most cases.For example, one common approach is to use OAuth 2.0 for authentication and authorization. OAuth 2.0 is an open standard for token-based authentication and authorization that is widely used in modern APIs. Another approach is to use JSON Web Tokens (JWTs) which provide a compact and secure way to transmit data between the client and the server.Best practices for API developmentAPIs are widely used for connecting applications and systems, and for this reason, it's important to follow best practices to ensure that they are easy to use and maintain. These include:Consistent resource namingConsistent resource naming means that resources should be named consistently across the API to make it easy for developers to understand and use them. For example, if an API uses the term \"customer\" to refer to a user, it should use this term consistently across all resources.Consistent error responsesAPIs should have consistent error responses that provide useful information to developers. This includes clear error messages that explain what went wrong, as well as error codes that help developers identify the issue quickly. Also, use consistent data formats and response structures throughout the API to make it easier for developers to work with the API.Consistent response codesAPIs should use consistent response codes to indicate the status of a request. For example, a response code of 200 indicates that the request was successful, while a response code of 404 indicates that the requested resource was not found.DocumentationAPI documentation is critical for developers to understand how to use an API. It provides guidance on how to make requests, what to expect in response, and how to handle errors. The documentation should be clear, concise, and easy to navigate. It should provide examples and code snippets to help developers get started quickly. Additionally, documentation should be kept up-to-date with any changes to the API, to ensure that developers always have the most accurate information.Continuously improve and evolve the API based on feedback and changing needsContinuously monitor and improve the API based on feedback from developers and changing requirements or use cases.Test the API thoroughlyBefore deployment, test the API thoroughly to ensure that it is working as expected and that there are no bugs or issues.Frequently asked questionsQ: Why is versioning important in API design?Versioning is important in API design because it allows you to make changes to your API without breaking existing clients. By versioning your API, you can ensure that clients are always using the correct version of the API, and can phase out older versions as needed.Q: How does rate limiting help improve API performance?Rate limiting helps improve API performance by limiting the number of requests a client can make to an API in a given time period. This prevents clients from overwhelming the API with requests and helps to ensure that the API is responsive for all clients.Q: Why is consistency important in API design?Consistency is important in API design because it helps to make APIs more intuitive, predictable, and easy to use and maintain. Consistent resource naming, error responses, and response codes can reduce confusion and errors, while consistent documentation can improve understanding and adoption.Q: What is the best way to document an API?The best way to document an API is to provide clear and concise documentation that includes examples of how to use the API, descriptions of all resources and endpoints, and any required authentication or authorization information. Good API documentation should also be easy to navigate, with a clear table of contents and a search function.Wrapping upAPI design patterns are a powerful tool for creating effective, scalable, and secure APIs. By following best practices such as using HTTP methods and resource URIs, implementing authentication and rate limiting, and providing clear documentation and support, developers can create APIs that are easy to use, maintain, and evolve over time. Whether building RPC, REST, or GraphQL APIs, understanding and applying API design patterns can help developers create high-quality APIs that meet the needs of their users and organizations."
  },
  {
    "title": "Prototype vs MVP: Which one is the right choice?",
    "plaintext": "Everyone knows the success stories of small SaaS companies that were founded in a basement and went on to become multi-billion dollar companies. For every one of these stories, there are thousands of other products that were conceptually just as good but lacked the careful planning and execution to get where they needed to be.Knowing that there’s a high rate of failure in developing a new product shouldn’t put you off. However, you should consider it a lesson given by thousands of others to avoid rushing into the process.There are tons of challenges you, the entrepreneur, will face in trying to get your product off the ground. Arguably the biggest is figuring out how to meet the needs and demands of your customers. The development process can be costly, time-consuming, and resource-intensive, which is why it is essential to have a solid plan in place before starting.Two essential strategies that you can utilize to reduce risks and uncertainties during the product development process are prototyping and MVP (Minimum Viable Product).In this article, we’ll explore the concept of prototypes and MVPs, their benefits and drawbacks, and when to use one over the other.Why bother building a prototype or MVP?When you boil it down, prototypes and MVPs save time and money by finding the “gotchas” while the project is still fast and fluid.By taking this half-step towards building your product, you can validate an idea, experiment with functionality, and gather feedback from the people who will ultimately be giving you money.Solving your customer’s problem should always be at the top of the priority list. Prototypes and MVPs are the quickest and lowest-cost methods to make this happen. Along the way, you also hopefully figure out what an optimal user experience looks like and avoid some of the costly errors that plague every software project.If you’re thinking of pitching investors on your idea, having a lightweight prototype or simple MVP to present makes conversations a lot easier.Finally, if you need help building your MVP or final product and want to work with an agency like Clean Commit, having a well-thought-out prototype or MVP is going to save us a ton of time and you a bunch of money. We love it when our clients spend the time figuring this out!What does a prototype look like in 2023?Prototyping involves creating a preliminary version of your product that can be tested and evaluated before finalizing the design. For most web agencies like us, that means building a bunch of static frames in Figma and then connecting them together. The result is a clickable model that looks like a finished desktop or mobile application and allows the user to interact with some elements like buttons, dropdowns, and fields.The challenge to creating a good prototype is moving quickly while thoroughly capturing the product’s functionality. It can be easy to fall into the trap of spending too much time designing something beautiful that doesn’t do everything it’s supposed to.What does an MVP look like in 2023?An MVP (Minimum Viable Product) involves building the most basic version of your product with the smallest number of features required to meet the customer's needs. It should focus on delivering the “unique sell proposition” or the thing that makes it different from every other product.MVPs take considerably more effort than prototypes, and if the idea is good enough, they can start making money straight away. However, they come with significantly more challenges. Like prototyping, it can be easy to stray from the “leanest path”.As the product’s mastermind, it can be easy to start adding more features than necessary in order to make it the “best viable product”. However, it doesn’t matter how many features you add to a product that’s going to fail.There’s no unified answer to what an MVP looks like in 2023. The trend of no-code has taken off, and for many ideas, this is a great approach to move quickly. Other MVPs will need to be developed as small web apps. Luckily, there are plenty of great full-stack frameworks (like Next.js!) that streamline this process.Pros and Cons of PrototypingPrototypes and MVPs are both super useful, but there are times when one trumps the other. Here’s a quick list of the pros and cons of prototyping.Pro: * Identifies design flaws and issues before the final product launch.      Complex ideas require sophisticated designs which can hide problems. Prototyping is a good way to expose these potential show-stoppers.       * Rapid experimentation and iteration      Since prototyping doesn’t require any coding or even any intricate design work, it’s easy to iterate and cycle through ideas quickly.    * Low effort and low cost Most decent UI/UX designers can whip up a prototype in a matter of days. * Easy to capture and record feedbackUsing a design tool like Figma to create and display a prototype means that feedback can be made directly on the prototype. When a dozen different people are providing feedback, this helps streamline the process and points out areas where the most people thought changes were needed.Cons of Prototyping: * Feedback can be influenced by the “look and feel”Unfortunately, not everyone can look past the fact that a prototype isn’t a finished product, and that’s where they focus their feedback. * Anyone can make a poorly designed prototypeThere’s no barrier to entry in prototyping. The disadvantage here is that a poorly thought out and designed prototype can lay unrealistic expectations. It’s hard to change a client’s mind when they decide something has to happen, even if it’s not technically feasible. * It’s not fully functionalPrototyping provides a focal point for conversation, but it can’t actually do anything.Pros and Cons of MVPsMVPs do a handful of things really well, but like everything in software development, they’re no silver bullet. Here are the pros and cons of building an MVP.Pros of MVP: * Cash generationMVPs cost money to build, unless you’re building it yourself. Once it’s built, if you’ve correctly hit on a pain point for customers, then you can start bringing in revenue to fund the rest of your product’s development. * Functional instead of conceptualThere’s nothing quite like showing off something that actually works to potential customers, investors, or important stakeholders. It vindicates the fact that you’re committed to the idea and have laid the foundation for something to happen. * Building an MVP exposes more of the “gotchas”Prototypes can only help you think through so many of the challenges behind your idea. The rest will be hiding in the logic of your product’s interactivity. The only way to find them is to build an MVP.Cons of MVP: * Exposure to fast-moving copycatsThis disadvantage of MVPs sucks, but software development is a competitive landscape. If you launch an MVP that is seeing success, there’s a chance someone else will race you to build the fully-featured version. * It’s an expensive way to test an ideaSkipping the prototyping stage and building an MVP only to find out customers don’t want it can be expensive. Unless you built the MVP yourself with a no-code platform, you’re looking at northward of $10k. * It’s easy to build a “Best viable product”Losing discipline and allowing the scope to creep on an MVP is incredibly common. It’s hard not to do when you want to see your product succeed, but it costs time and money with no promise of any greater return.Alternatives to prototypes and MVPsWhile prototypes and MVPs are the favorite tools for validating ideas, they’re not the only options available. Some other techniques and tools worth paying attention to are: * No-code: We’ve mentioned this approach a few times, and it’s worth considering. There are platforms like Bubble that let non-technical folk build full applications. These applications can end up turning into real products without ever seeing a line of code. * Full product development: Kind of goes without saying, but if you believe strongly in your product then you can skip the testing phase and go straight for the kill. This approach is more costly and time-consuming, but it allows you to create a more comprehensive product.   Prototype vs MVP: which one winsHere’s a quick head-to-head between the two product testing methodologies: * Cost - winner: prototypingPrototypes take days, and MVPs take weeks or months. There’s really no comparison here. Even using a no-code platform to build an MVP will be significantly more expensive than prototyping using a free tool like Figma. * Time to market - winner: MVPPrototyping has a quicker turnaround time for gathering customer feedback, but it doesn’t get you any closer to building a product. MVPs are the foundation of a real product, and you could argue they are “on the market”. * Collecting feedback - winner: TieBoth formats provide excellent vehicles for collecting feedback. MVPs are more realistic implementations of ideas, but prototypes can be built to be closer to the fully featured product.There are too many variables to give a black-and-white answer to whether you should build a prototype or MVP. In most cases, it pays off to do both.Prototypes can be used to collect feedback from people closer to the idea, like colleagues. Then your MVP can be sent to customers.ConclusionPrototype Features and MVPs are valuable techniques for businesses looking to develop successful products. By testing the most important features and getting feedback from potential customers, businesses can minimize costs and risks while improving their chances of success in the market.However, it's important for business owners to consider the pros and cons of these approaches and to choose the best one based on their specific needs. Whether it's cost, time to market, customer feedback, or complexity, there is an approach that can work for every business.By carefully evaluating the options and making informed decisions, businesses can create successful products that meet the needs of their customers and help them achieve their goals."
  },
  {
    "title": "Where Did Shogun FrontEnd Go?",
    "plaintext": "Shogun is a SaaS company that builds interface creation products for Shopify and BigCommerce. Their general philosophy is to allow users to create a customized online store without the need for coding or web development experience.As an agency that specializes in headless eCommerce, we like to keep an eye on all the great products out there. Shogun may not seem like it falls under the “headless” blanket, but it actually does, or more accurately, it did, until March of 2023. Shogun had two products; their most popular Page Builder and a more sophisticated FrontEnd.Businesses that reach out to us for advice on going headless have often brought up Shogun’s FrontEnd products, asking how it works and whether it’s worth looking into. Even though the product has been sunsetted, we still get these questions, so we figured it would be worth writing an article to address them.In this piece, we’re going to give you a broader take on Shogun’s products and then expand a little more on the FrontEnd product.Shogun’s Page BuilderShogun's flagship product is a website-building interface that plugs into the two most popular monolithic eCommerce platforms; Shopify and BigCommerce. It’s designed to be user-friendly and intuitive, with a drag-and-drop interface that lets you easily add and customize various elements of their website. The platform offers a wide range of pre-built blocks and templates, allowing users to create a website that meets their unique requirements.Page builders are the natural enemy of developers, so we don’t want to give this topic too much oxygen. Generally speaking, they carry a ton of overhead and cause crappy user experiences because of the unnecessary code that is required to build a UI.And to no one’s surprise, running a lighthouse test on the first three sites listed under the Shogun case studies, they all have garbage performance and provide a mediocre user experience.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitWho is Shogun Page Builder aimed at?The platform is suited for small and medium-sized businesses that are still finding their way in the world. These businesses can save some coin by building their own store pretty quickly and end up with a half-decent result.Most of these companies will never reach the level of maturity where they need to consider optimizing their page speed, creating a unique brand, or building innovative frontend features, so using the Page Builder makes complete sense.However, any online retailer turning over $10M annually is probably going to spend some time figuring out if their store can be better. Can they provide quicker page load times? Can they run more complex A/B tests? Should they implement a new innovative look for their cart to improve conversions?The need to “be better” than Shogun’s Page Builder was the reason they created FrontEnd.What was Shogun FrontEnd?FrontEnd, as its name suggests, was a decoupled front-end product that let users assemble a user interface.I’ve specifically used the term “assemble” instead of build or design, because the way it worked was to pick pre-styled blocks from a library, lay them out, and fill in the content.This approach is exactly how we build our headless websites, except Shogun had built the equivalent of a headless content management system and slapped their name on everything.This diagram from the Shogun docs does an excellent job of explaining the architecture.If you look at how they’ve depicted a normal headless system compared to their FrontEnd, the two are the same. The difference is that if you work with an agency like Clean Commit to build your headless system, you aren’t locked into one technology - and we won’t charge you $15,000 a month for the system.FrontEnd pulled all the Shopify data into the frontend by API where it could be styled according to the pre-built blocks.We’ve written extensively on headless eCommerce and how it works, and don’t want to rehash too much of that story.Pros of Shogun’s FrontEndAt its height, PageBuilder had over 50 clients, which is pretty impressive given headless eCommerce is still in its early adoption stage.These were the advantages of Shogun’s FrontEnd:1. Quicker time to market than an agencyThis was arguably the biggest benefit of FrontEnd. There was no need to work with a software agency to build the Shopify or BigCommerce API connection from scratch.We’ve done this a bunch of times, and each time it becomes faster, but since we’re working with completely custom designs and functionality each time, it takes several hundred hours of development (i.e. it’s expensive).FrontEnd came loaded with a bunch of pre-styled blocks, and the blocks were pretty universal to eCommerce, like banners, product carousels, calls to action, etc. Spinning up a new site could take weeks instead of months.2. Better performance and flexibility than PageBuilderThe whole reason Shogun created FrontEnd was to offer a solution for companies that cared about their performance and wanted to do things on their front end that wasn’t supported by the PageBuilder.Headless stores that leverage static site generation through a framework like Next.js or Shopify Hydogen provide the absolute best performance the internet has to offer. Customers don’t have to wait for pages to load, and that has a tangible impact on their purchasing patterns.3. Safety in numbersAny company worth its salt steers away from risk, even when they’re blazing new trails. Shogun offered some assurance of stability and support with FrontEnd because it was a product with a dedicated support team.There were other users subscribed to the platform, and that fact alone is reassurance for many organizations.Cons of Shogun’s FrontEndFrontEnd was sunsetted for a reason, and it carried a handful of pretty tangible downsides.1. High ongoing costsA business owner approached us after speaking with Shogun to get a quote for going headless. He was a little vague on his budget after being spooked by the cost of Shogun.The FrontEnd account reps quoted him over $20,000 a month, with a lengthy lock-in period to keep his store afloat. This guy was looking in the wrong places because his store had virtually no traffic and was really at the beginning of its journey.Plenty of eCommerce companies would see $20k a month as an unbelievable bargain for supporting their store, but keep in mind that the pricing scales according to your revenue.As a point of comparison, the cost of hiring our team to build a headless store would be absorbed in the first year of paying for Shogun, and then the costs are insignificant (less than $500/month).2. It’s “almost” customThe videos and resources the Shogun team shared to support FrontEnd are full of customers complaining that they can’t build pricing tables or asking how to make a button have a particular CSS effect.These comments highlight the fact that FrontEnd was “almost” custom but mostly an extension of a pre-styled library. If your store needed a crazy new innovative feature that didn’t fit within the library, it needed to go through the development pipeline like everyone else.This is the scenario when you don’t want to be just another number.The alternative to this approach is working with an agency to figure out exactly how your design should be implemented from the get-go. Even if you change your mind and need new features, the process is in place, and things happen quickly.3. You’re locked inComposable commerce is a big deal these days. The idea is to separate the services that make up your store so they can run on their own infrastructure rather than being clumped together.If one service isn’t cutting the mustard, it’s not a big deal to find a new one and stitch it into place.Using FrontEnd took this opportunity away. There was no way to change CMS or add a new AI-driven product recommendation suite. You had to accept what you were given. If you decided that your stack needed to change, the only option would be to completely rebuild from scratch.In this sense, FrontEnd was halfway to being a proper headless eCommerce solution. It sped the initial build-up and removed the tricky developer relationship but at the cost of a bunch of flexibility and technical freedom.Are There Alternatives to Shogun’s FrontEnd?There probably are other solutions out there, but we wouldn’t recommend them. If you want to be able to “own” your store and have full control over the customer journey, the best way is to partner up with an experienced agency like Clean Commit and build a store.Simply throwing the switch and moving to a headless solution isn’t a silver bullet. It is an architecture that allows you to move quicker, build more, and expand your business internationally.If you’re keen to see how some other businesses have made it work, we're been building a case study of companies that have grown their revenue and improved conversion rates through an upgrade to headless architecture. The case study is still in progress, but if you sign up for our newsletter, we'll let you know when it's available!Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFrequently asked questionsQ: Can I use Shogun with my existing e-commerce platform?Yes, Shogun integrates with popular e-commerce platforms such as Shopify, BigCommerce, and Magento, allowing businesses to manage their products, orders, and customer data from within their existing platform while taking advantage of Shogun's customization and design features.Q: Does Shogun offer support and resources for users?Yes, Shogun offers a range of support and resources for users, including a knowledge base, video tutorials, and live chat support. Users can also access a community forum where they can ask questions, share ideas, and connect with other users.Q: Does Shogun offer support for mobile devices?Yes, Shogun is designed to be highly responsive and optimized for performance on various devices, including desktops, tablets, and smartphones.Wrapping upShogun FrontEnd disappeared because it was Shogun’s less profitable and more effort-intensive product. Even though it was a “product”, it was halfway to a fully customizable solution and would have been costly to keep running. If you’ve been looking for an alternative, reach out to our team and we’ll help you plan a more cost-effective and better-fitting solution."
  },
  {
    "title": "Why Are Legacy Systems Still Used?",
    "plaintext": "In the fast-paced world of technology, businesses often strive to stay ahead of the curve by adopting the latest technology standards and systems. In fact, adopting a new technological trend in your business model often sounds ‘cool’ in marketing materials and may actually attract investors and customers. But despite the allure of the shiny new tech trends/systems, many businesses continue to rely on legacy systems that have been in place for decades. Some even switch back to the traditional systems they had forsaken for the new ones.In this article, we will explore the reasons why legacy systems are still being used, the challenges associated with them, and strategies for dealing with them. Technology leaders need to understand the reasons for legacy system usage to make informed decisions about modernizing or replacing these systems in their organizations.Reasons for using legacy systemsLegacy systems are technology systems, software applications, or hardware infrastructure that have been in use for a long time and are generally considered obsolete. These systems are often critical to the operations of an organization, but they are outdated and lack modern features and capabilities. They may also be difficult to integrate with newer technology or software applications.Despite their limitations, many organizations continue to use these systems primarily due to the following reasons:Cost of transitioningSwitching from your IT legacy system to a new and modern one is usually expensive and time-consuming. In the long haul, the modern system can save you more money than your traditional system. But its initial cost including installation/integration, backfilling, and training your employees on how to use the new solution can be challenging especially if you’re on a budget.Legacy systems still fulfill a needOne of the main reasons why organizations continue to use legacy systems is that these systems still fulfill a critical business need. These systems may have been developed to meet specific business requirements, and over time, they have become an integral part of the organization's technology infrastructure. Replacing them with newer systems can disrupt business operations. Besides, why shift to a new system while your existing systems work just fine and meet all your business needs?Ease of maintenanceIt's easy to maintain your existing system since your business has grown into it. Your internal team has already developed specialized skills and knowledge over time, making your employees highly efficient in resolving any issues that may arise with the legacy systems.In addition, as a business, you may have established relationships with third-party vendors that provide ongoing support for legacy systems. These vendors may offer maintenance, upgrades, and support services that enable your business to continue using their legacy systems without disruption.Customization and specific functionalityLegacy systems may have been designed to meet specific business needs and may have customized features that are not available in newer systems. This makes it difficult for a business to move away from them, particularly if their business processes are dependent on these unique features.InteroperabilityLegacy systems have been in use for a long time and have been integrated with various other systems, databases, and applications that are currently in use. These systems have been customized to work with specific hardware, software, and applications, and they may not be easily replaced without disrupting the existing ecosystem.Replacing legacy systems can also require significant investment in time, effort, and resources to ensure compatibility and interoperability with existing systems. In contrast, using legacy systems that are already integrated with the existing ecosystem can be a more cost-effective solution that reduces the risk of disruption to critical business operations.Challenges of using legacy systemsThe fact that legacy systems are outdated and lagging behind technological advances makes them vulnerable to a myriad of problems. Some of the potential risks associated with using legacy systems include:Maintenance and support challengesAs legacy systems age, the vendor may stop rolling out updates and offering support, and in some cases charge a premium for offering support for systems that are no longer part of their product offering.Security vulnerabilitiesLegacy systems are often built using outdated technology, making them more vulnerable to cyber-attacks. These systems may lack the necessary security features to protect against modern threats, leaving them exposed to potential data breaches and other security issues. In addition, legacy systems may not receive regular updates and patches to address security vulnerabilities, making them even more susceptible to cyber-attacks.Inefficient in the modern business landscapeLegacy systems may not be able to keep up with the dynamic customer needs. So, they may fail to handle the increased demands of modern business operations. As organizations grow and expand, legacy systems may become a bottleneck, limiting their ability to process data or handle increased traffic. This can lead to decreased efficiency and productivity, as well as potential disruptions in business operations.Compliance challengesAs regulators continue to formulate new laws to keep up with modern technologies, legacy systems may not be compliant with modern regulations and standards. This may attract legal and financial risks for a business. In addition, legacy systems may not be able to generate the necessary reports and documentation required to comply with regulations, making it difficult for businesses to demonstrate compliance.Strategies for dealing with legacy systemsWhile some businesses may choose to continue using legacy systems, others may find it necessary to modernize or replace these systems to avoid potential risks and limitations. Here are some common strategies that businesses can use to deal with legacy systems:Evaluation of risks and benefitsBefore choosing to adopt modern systems or keep the existing ones, you must first evaluate the risk and benefits of both systems. In most cases, upgrading to a modern system will likely streamline your business operations and even improve customer experience. However, these benefits come at a cost as you have to incur a significant expense of integrating the new system. Keeping the old system denies you a competitive advantage in the business landscape in addition to other risks such as security vulnerabilities and lack of scalability. In consultation with your internal team, you should weigh both systems to get a sense of which one aligns best with your business needs.Modernization through updating or replacementModernizing legacy systems by updating or replacing them can help businesses overcome the limitations associated with older technology and stay competitive in today's fast-paced business environment. Upgrading legacy systems can involve replacing outdated hardware, software, and other components to improve functionality, security, and scalability.This update can be done incrementally in a phased approach rather than overhauling the entire system at once. This approach can help businesses manage costs and minimize disruptions to business operationsHybrid solutionsHybrid solutions involve using a combination of legacy systems and newer technologies. You get to enjoy the perks of both systems. For example, businesses may choose to keep critical legacy applications in place while using cloud-based systems to support other aspects of their operations. This approach can help businesses leverage the benefits of both legacy systems and modern technology while minimizing disruptions to business operations.The Future of legacy systemsAs technology continues to advance, the future of legacy systems may seem uncertain. However, it doesn’t mean that these systems will suddenly disappear into oblivion. They have been a critical part of the technology landscape for decades, and they are likely to continue to play an important role as a bridge between old and new technologies. This can be achieved in these ways:Data integrationLegacy systems can be used to integrate data from older technologies with newer systems. For example, a company may use a legacy database to store customer data and then integrate that data with a newer CRM system to provide a more comprehensive view of customer activity.Application programming interfaces (APIs)APIs can be used to connect legacy systems with newer systems, allowing them to exchange data and information. This can be especially useful for businesses that need to maintain legacy systems for other reasons but still want to take advantage of the latest technologies.Web servicesLegacy systems can be exposed as web services, which can then be used by newer technologies. This approach can help to extend the life of legacy systems and make them more compatible with newer technologies.System orchestrationSystem orchestration refers to the process of coordinating the flow of data and workflows between different systems. In the context of legacy systems, this can involve using a legacy system to act as a central hub that manages and synchronizes data between different systems, including newer technologies/systems.Frequently asked questionsQ: What is a legacy system?A legacy system is an outdated technology or software that is still in use by an organization. It is typically a system that has been in place for many years and may no longer be supported by the original vendor.Q: Why do businesses still use legacy systems?Businesses still use legacy systems for a variety of reasons, including the high cost of replacement, the need for specialized functionality, and the fear of disrupting critical business operations.Q: How can businesses determine if it's time to modernize their legacy systems?Businesses can determine if it's time to modernize their legacy systems by evaluating the costs and benefits of modernization, assessing the risks associated with their current systems, and identifying opportunities for improvement.Key takeawayLegacy systems remain an important part of many businesses, even in the face of modern technologies. While they may present certain challenges and risks, there are also many reasons why businesses continue to use them, such as their reliability and specialized functionality. By understanding the pitfalls of legacy systems and exploring strategies for modernization, businesses can continue to leverage the benefits of these systems while also staying competitive in today's fast-paced business environment."
  },
  {
    "title": "The Benefits and Frustrations of Using Storybook",
    "plaintext": "Components provide an easy way of building interfaces as they allow you to organize, reuse and test your user interface code. However, when working on a large project, it can be difficult to manage all the components within your application. This is where Storybook comes in.Essentially, Storybook is an open-source tool for developing UI components in isolation. It provides a development environment outside your main application where you can design, build, and test components in isolation, making it easier to develop and maintain complex user interfaces. The components are organized into stories, which are small, self-contained examples that showcase the different states and variations of a component. Each story is a simple visual representation of the component, along with its associated data and behavior, making it easier to document, reuse, test, and debug components in an environment outside your main application.Storybook is commonly used in combination with popular front-end frameworks like React, Vue, and Angular. It's particularly useful for large projects with many components, as it allows developers to work on components independently without disrupting the rest of the application. Additionally, Storybook has a rich ecosystem of add-ons and plugins, making it easy to extend and customize its functionality.Benefits of using StorybookStorybook offers numerous benefits to developers working on large-scale projects. These benefits include:Isolation of componentsStorybook allows developers to build and test UI components in isolation, meaning that they can work on each component individually, without affecting the rest of the application. This not only speeds up development but also ensures that each component works as intended, making it easier to identify and fix issues.Facilitates faster and more efficient developmentBecause developers can work on each component separately, they can develop faster and more efficiently. They can also easily test different variations and states of each component, making it easier to ensure that each one is working as intended. This can be especially useful when working on larger projects with many components, as it can help to prevent delays and ensure that development stays on schedule.Ease access to all componentsBy providing a centralized location for all components, Storybook allows developers to easily navigate and manage their components. They can see a visual representation of each component, along with its associated code and any relevant documentation or comments. This makes it easy to understand each component's purpose and functionality and to modify it as needed.Additionally, Storybook allows developers to easily search and filter components based on specific criteria, such as name, tag, or category. This can be especially helpful for larger projects with many components, as it makes it easier to find and modify specific components.Facilitates collaboration between designers and developersStorybook provides a visual representation of each component, which can help to bridge the gap between designers and developers. Designers can easily view and provide feedback on each component, ensuring that it meets the design specifications and that the final product looks and behaves as intended, while developers can ensure that the design is properly implemented and ensuring consistency and reducing the risk of errors.Allows for easy customization and extension with addonsStorybook has a rich ecosystem of add-ons and plugins that developers can use to customize and extend its functionality. This makes it possible to add new features and functionality to Storybook, making it even more useful for specific needs.For example, Storybook addons can be used to add additional functionality to Storybook, such as new viewports, accessibility testing tools, or even custom components. This allows developers to tailor Storybook to their specific needs and workflows, and to integrate it more seamlessly into their development process.The tool also allows developers to contribute to the Storybook ecosystem themselves by creating and publishing their own add-ons and plugins, making it easier for others to benefit from their work. This can also help to improve the overall quality and functionality of Storybook, as developers can work together to create new tools and features.Simplifies testing and debugging of componentsBy providing a dedicated environment for testing and debugging, Storybook makes it easier to identify and fix UI components bugs. It also allows developers to easily test each component in different scenarios, making it easier to catch issues early on in development. Most importantly, developers don't have to navigate the entire application looking for errors.Storybook also provides a range of testing tools and features that can simplify the testing and debugging process.Despite its advantages, Storybook has its downsides too.Frustrations of StorybookHere are some of the drawbacks of Storybook:Initial setup and configuration can be complexAlthough Storybook helps manage components for large projects, it’s usually time-consuming and complicated to set it up, especially if it's your first time.  You need to configure various settings, install dependencies, and create a folder structure that works with Storybook. Once set up, maintaining and updating Storybook can also be time-consuming. For example, as the project evolves and new components are added, developers may need to update Storybook to ensure that it remains accurate and up-to-date. This can be a tedious and time-consuming process, especially for larger projects with many components. This initial setup process can be frustrating for developers who are new to the tool. For this reason, Storybook tend to have a steep learning curve before you can use it efficiently.Managing a large number of stories can be difficultAs the number of components and stories in a project grows, it can become more difficult to manage and organize them effectively. For example, developers may need to spend time organizing and categorizing their stories to make them easier to find and navigate. This can be frustrating for developers who are working on large and complex projects.Limited support for certain frameworks and technologiesWhile Storybook is compatible with many popular frontend frameworks and technologies, there may be limitations or issues with certain ones. For example, developers using less popular or newer frameworks may encounter issues or limitations when using Storybook, as support may not yet be fully developed or documented.Best practices for using StorybookKeep stories organized and maintainableAs the number of stories in your project grows, it's important to keep them organized and maintainable. One best practice is to group stories by feature or functionality and use descriptive names to make them easy to find. Use a descriptive and consistent naming convention for your stories, and consider organizing them into folders or categories based on their purpose or functionality. This can make it easier to find and manage your stories over time. You can also use comments and annotations to provide additional context and make it easier for other developers to understand how the component works.Use add-ons and plugins to extend functionalityStorybook has a rich ecosystem of add-ons and plugins that can be used to extend its functionality. Take advantage of these tools to add new features and capabilities to your Storybook setup, such as improved documentation, additional testing tools, and more.Integrate with testing frameworksIntegrating Storybook with a testing framework such as Jest or Cypress, you can easily create automated tests for UI components and ensure that they meet the project's requirements and standards.For example, Jest can be used to test React components, and by integrating Jest with Storybook, you can create snapshot tests that compare the current state of a component with a saved snapshot. This can help to identify regressions and ensure that components behave as expected across different versions and scenarios.Update regularlyBe sure to update Storybook regularly to ensure that it remains accurate and up-to-date. The updates usually come with bug fixes, security patches, and performance improvements that can improve the overall stability and reliability of Storybook. The updates also ensure that the dependencies are up to date and the tool remains compatible with the other libraries and frameworks that are being used in the project.Frequently asked questionsQ: What is Storybook in software development?Storybook is a development environment for UI components that allows developers to view and test components in isolation.Q: Is Storybook only for React applications?No, Storybook can be used with a variety of UI libraries and frameworks, including React, Angular, Vue, and other front-end technologies.Q: Can Storybook be used for production code?While Storybook is primarily intended as a development tool, it can also be used to create and maintain a library of production-ready UI components. However, it's important to ensure that components developed in Storybook are thoroughly tested and integrated into the larger application before being deployed to productionQ: Are there any downsides to using Storybook?While Storybook can be a powerful tool for developing and testing UI components, it can also be time-consuming to set up and maintain. Additionally, some developers may find it difficult to use Storybook effectively without a strong understanding of UI design principles and best practices.Wrapping upStorybook is a development environment for UI components that has numerous benefits including faster development, simplified testing and debugging, and ease of access to all components. However, it can also be frustrating to use at times due to its steep learning curve, difficulties with integration, and documentation issues. By following best practices such as integrating with testing frameworks and updating regularly, developers can optimize their use of Storybook and maximize its potential."
  },
  {
    "title": "Are Microservices Dead?",
    "plaintext": "No, microservices are not dead. In fact, they remain a popular architectural style for building software systems, particularly large and complex systems. This is due to microservices’ emphasis on agility, scalability, and high fault tolerance.However, with the rise of new technologies such as serverless computing and Kubernetes, some in the tech community have begun to question whether microservices are still relevant. The question of whether microservices are dead is therefore an important one for organizations considering how to structure their software architecture.In this blog post, we'll explore both the case for and against microservices and consider the potential impact of emerging technologies on the future of this approach.The case for microservicesMicroservices is a software architecture approach that involves building applications as a collection of small, independently deployable services. These services are organized around business capabilities and communicate with each other via APIs. This makes it ideal for designing enterprise systems. The key benefits of this architecture include:ScalabilityMicroservices are designed to be independently deployable and scalable, which means that organizations can easily add or remove instances of individual services as needed to handle changes in traffic or demand.With a monolithic architecture, scaling an application often requires scaling the entire application, which can be costly and inefficient. With microservices, however, organizations can scale individual services independently, which allows them to optimize resources and reduce costs.FlexibilityBy breaking down applications into smaller services, teams can work on individual services independently, which makes it easier to introduce new features and make changes without affecting the entire application. The ability to work on individual services independently also allows teams to adopt an agile approach to software development. Teams can work on smaller, more focused features, and release them to production more quickly. This makes organizations competitive by allowing them to respond quickly to customer needs.High reliabilityBecause microservices are designed to be independent, a failure in one service won't necessarily bring down the entire application. This means that organizations can build more resilient applications that can withstand failures in individual services.In contrast, in a monolithic architecture, a single point of failure can bring down the entire application. For example, if the database crashes, the entire application may become unavailable. With microservices, however, each service can have its own database or data store, which reduces the impact of a failure in any single service.Fault isolationMicroservices consist of modular services and as such organizations can arrange services around specific business capabilities, making it easier to understand how each service contributes to the overall application.This modularity can improve the maintainability of the application, as developers can easily identify and fix issues. For example, if a bug is found in a specific service, developers can isolate the service and work on it without affecting the rest of the application. This can help organizations deliver solutions quickly, without disrupting the overall application.ReusabilitySince each service is independent in a microservice architecture,  organizations can easily reuse individual services across multiple applications and use cases. For example, consider something like user authentication. This service could be developed as a separate microservice that handles user authentication and authorization and can be used across many services. Thanks to its reusability, developers don't need to build authentication functionality from scratch for each application, saving time and resources. This may consequently result in faster time-to-market.Reusing services also help ensure consistency and standardization across different applications and use cases. This can help organizations avoid duplicating functionality and reduce the risk of errors and inconsistencies.While microservices architecture may not be the right approach for every organization, it remains a powerful tool for building scalable, reliable, and flexible applications to help organizations stay competitive. As more organizations adopt DevOps practices and move toward cloud-native architectures, microservices architecture is becoming even more appealing since it complements the principles of cloud-native architecture.The case against microservicesWhile microservices architecture has many benefits, it's important to acknowledge that there are also some criticisms of this approach. Here are some arguments against microservices architecture:ComplexityMicroservices architecture can be more complex to design, build, and operate than monolithic architectures. Managing multiple services, APIs, and data stores can require additional tooling and operational overhead, increasing the overall cost of running a system.Conversely, monoliths are easier to build and maintain. The architecture is simpler and exists as a single cohesive unit, meaning developers can work on the entire application as a single codebase.LatencyLatency refers to the delay that occurs when data is transmitted over a network or between different components of a system. In the context of microservices architecture, latency can be a disadvantage because of the additional network communication required between the different services.In a monolithic architecture, all components of the application are contained within a single process, and communication between them occurs via in-memory function calls. This means that the latency is low, as data doesn’t travel over a network.In a microservices architecture, however, each service is typically deployed independently and communicates with other services over the network. This can introduce additional latency and overhead, as data needs to be transmitted over the network and processed by each service. This can result in slower response times and reduced performance.Integration challengesIntegrating multiple services can be more challenging in microservices architecture, especially when dealing with legacy systems or services that don't support modern APIs and protocols. This can require additional integration infrastructure and tooling, which can increase complexity and cost.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitThe Future of microservicesThe future of microservices is likely to be shaped by several emerging technologies and trends, particularly serverless computing. Serverless computing is a cloud computing model in which the cloud provider manages the infrastructure and automatically allocates resources as needed.It's an event driven-architecture whereby developers write code in the form of functions, which are triggered by events and executed in a stateless environment. By being event-driven, serverless computing is therefore focused on code efficiency which ensures applications consume only the required amount of computing resources. However, this comes at the cost of higher cold start times.  On the other hand, Microservices are typically deployed on containers or virtual machines and require a certain level of infrastructure management. They’re more suited to run long-running processes since each service can run continuously even without an event trigger, making the architecture an ideal long-term solution for businesses looking to scale.Other notable differences between the two architectures include:IT operation managementMicroservices require an in-house team for deployment, monitoring, and maintenance. In a serverless architecture, the maintenance operations are handled by the vendor, for example, AWS Lambda or Microsoft Azure. This can reduce the overall cost of the project, as the organization does not need to invest in hiring or training a team of experts to manage the infrastructure. However, it also means that you may have less control over the infrastructure, and may be subject to vendor lock-in.DevelopmentIn serverless computing, developers write code in the form of functions, which can simplify the development process. However, each function has a limited runtime as provisioned by the vendor. So, this type of architecture may not be suitable for long-running processes.  As for Microservices, they require more planning and design work upfront, as well as more management overhead for deployment, monitoring, and maintenance. On the bright side, this architecture does not have a limited runtime; each service can run for as long as required, making them ideal for complex long-term processes.ScalabilityServerless computing can handle high loads and scale automatically, making it easier to manage sudden spikes in traffic. Microservices can also be scalable but require more manual intervention to manage load balancing, clustering, and other scalability concerns.Note that the two architectures aren't mutually exclusive, and organizations may choose to use one or even both approaches depending on their needs. When combined, microservices are used to break down the application into smaller manageable components, while serverless technology is used to manage the execution and scaling of these components.Combining microservices and serverless computing  One common approach to combining microservices and serverless is to use a serverless function as a microservice endpoint. In this approach, the serverless function is responsible for handling requests to the microservice and can be triggered by a variety of events, such as HTTP requests or changes to a database. This way, developers can take advantage of the scalability and cost savings of serverless computing, while still maintaining the benefits of microservices.Keep in mind that there are limits to combining the two. For example, if a microservice requires long-running processes or requires a dedicated set of resources, then a serverless function may not be the best option. In these cases, it may be better to use a traditional microservice architecture or a container-based approach.Frequently asked questionsQ: Are microservices suitable for all types of applications?A: While microservices can offer many benefits, they may not be the best approach for all applications. For smaller applications, using the microservice architecture is an overkill. A simple monolithic will do, as it doesn't require the additional complexity and maintenance overhead that microservices can introduce.Q: What role do emerging technologies like serverless computing and Kubernetes play in the future of microservices?A: Emerging technologies like serverless computing and Kubernetes can offer new options for deploying and managing microservices, and can help organizations reduce operational costs and improve scalability. However, they may also introduce additional complexity and require new skills and expertise from development teams.Q: Are microservices still relevant in modern software development?Answer: Yes, microservices are still very much relevant in modern software development. While they may not be the best approach for every organization, microservices architecture has many benefits, including scalability, flexibility, and modularity. With the rise of cloud-native technologies and the need for rapid application development, microservices have become increasingly popular.Wrapping upUltimately, microservices are not dead, and they continue to be a viable approach for many businesses. However, besides their benefits, you also should consider the architecture’s drawbacks and the type of project you’re working on before making your decision. Emerging technologies such as serverless computing and Kubernetes may impact the future of microservices, and organizations should stay informed about these developments to make informed decisions about their system architecture strategy."
  },
  {
    "title": "Why go headless? Real reasons businesses go headless",
    "plaintext": "There are plenty of theoretical “pros and cons” of moving to a headless architecture like page load speed, frontend flexibility and scalability.But these benefits don’t really capture the reason most businesses decide to make the move to a headless architecture.There’s usually a strong financial motivator behind the move, a problem that needs to be fixed or an opportunity waiting to be explored.My team are in a unique position to share some of these reasons. We specialize in helping businesses make the transition to headless, and we’ve heard a number of legitimate reasons for wanting to make a move.So, without any further ado, here are some of the reasons why headless would make sense. It’s worth noting that most of these examples came from eCommerce companies.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitUnderperforming marketing content is putting pressure on paid contentArguably, the biggest impact on increasing website traffic comes from content velocity. Assuming your team is writing useful, SEO-focused content, writing more will drive more traffic.Going headless means your store can adopt a CMS like Sanity or Ghost designed for efficient content writing.A decoupled CMS means your team can focus on producing content without worrying about how it will be presented on different platforms. Content creators, editors, designers, and developers can work simultaneously without getting in each other’s way, speeding up content delivery.When content has been written and all the fields completed, it’s ready to be shared on the web, social media and via email. The excerpts and meta descriptions that usually require double handling are already completed.Reducing the number of break points in the content writing process means your writers can pump out articles that feed directly into a distribution pipeline.New promotions take weeks to implementBuilding an impressive promotional campaign means designing and developing banners, adjusting products, setting up new cart logic, and testing.It also means queuing your designers, developers and marketing team to work in sequence so you can achieve a kind of production line.Headless eCommerce systems create shortcuts through this process.When you go headless, the frontend of your store needs to be rebuilt, and most businesses will use the opportunity to prepare a fresh design simultaneously. While the new look and feel are being created, the atomic design components can be prepared into a design system.The design system manages buttons, fields, fonts, forms, notifications and banners.When it comes time for a sale, rather than sitting down to figure out what design changes should be imagined, it becomes a case of pulling existing assets from the design system.Storybook comes in handy here. It’s a powerful open-source tool for managing individual components in isolation. Rather than waiting for your developer to rebuild a promotional banner in a testing environment, you can view it directly in the isolation of Storybook.When it comes time to develop the new promotional assets, the visual frontend can be built quickly without running the risk of breaking something in the eCommerce backend.The frontend (Next.js / Hydrogen) and the backend (Shopify / Commerce Layer) communicate through API, so even if something breaks, the problem will be contained to either the front or backend, or the transfer of data.These problems are quick to fix, unlike the tangled complications that can arise in regular Shopify stores.The headless eCommerce workflow for implementing new promotions reduces the turnaround time from weeks to days.Your site’s design diminishes the value of your product instead of enhancing itThere’s only so much you can do to make your products look attractive on traditional eCommerce platforms. How your site presents products to potential customers can make you feel like it’s not doing everything possible to convey your product’s value.This can feel a little restrictive, especially when you know other stores are super innovative and unique in allowing customers to interact with their products.You may have seen other stores implement dynamic product carousels that showcase products based on user history and preference.Or maybe you’ve seen competitors using interactive product visualization to showcase 360-degree views of their products.You might have even come across stores that use augmented reality to allow customers to try on products from their own homes virtually.These innovations typically aren’t available to regular eCommerce stores, and it was only a few years ago that they were exclusive to mobile applications.But thanks to the rising popularity of Progressive Web Applications (PWAs), these innovations can be adopted by any web application that supports this architecture.And you can probably gather where this is going. Headless eCommerce and PWAs go hand in hand.Not only can your store benefit from a fantastic native-app-like mobile experience, but you can add a level of interactivity to how customers shop for products.Slow developer velocity wasting your team’s energy and innovationsAs regular eCommerce sites grow, they become more sophisticated and complex. Custom code is added to drive new functionality; plugins are slapped on the side, and scripts, tracking and events are built into the UI.Eventually, making simple changes takes a big chunk of time.The risk of breaking something is high, and one person on the team usually knows how to keep that from happening. They become bottleneck and development velocity tanks.This is a big problem for businesses that want to stay relevant and keep growing.There are usually plenty of good money-making ideas being thrown around by the management and marketing teams, but a throttled pipeline to implement the ideas.The biggest benefit of switching to a headless architecture is escaping this situation and adopting modern, efficient development practices.Building your store on a framework like Next.js helps developers maintain a clean codebase supported by automated testing, branching, and version control. New features can be implemented simultaneously with significantly less risk of anything breaking.If your team finds a new service, like an AI-powered product recommendation engine, it can be integrated with the store’s frontend via API. This process still involves development effort, but it would take a day or two to set up and test in most cases.Suddenly, your store feels like a complete system that can grow and evolve rather than a precarious balance of short-term connections and hotfixes.Lots of plugins and extensions that break and cause customer-facing bugsThere’s only one cost-effective way to extend your monolithic site’s functionality: adding plugins.What tends to happen to eCommerce companies as they grow is more apps and plugins make their way into the site’s codebase.There are times when plugins and extensions conflict with each other. Throw into this equation core software updates, and suddenly, your team is spending half their development hours reactively trying to fix unexpected outages and broken functionality.Headless eCommerce answers this problem by calling data and functionality from specialized services through API. This approach is standardised, and while it takes more work to set up, it’s less exposed to updates and deprecation.On top of this, because the codebase is still entirely open for your developers to manage (unless it contains a lot of closed-source plugins), they can set up a suite of automated tests with a framework like Playwright to catch bugs before they reach production.Finally, since the front and backend of a headless store aren’t coupled, the core updates to Shopify, BigCommerce, or WordPress won’t cause breaking changes.Page load times are struggling and influencing business decisionsIf your product catalogue has grown so large, the number of pages across your website and the volume of scripts is so heavy that it’s affecting your customers, then swapping to a headless architecture will be an immediate relief.Fast page load times are probably the thing headless eCommerce is best known for. Frameworks like Next.js allow pages to be statically generated, preparing them for delivery before the customer’s browser requests them from the server.The benefit of static site generation and some of the modern rendering techniques offered by Next.js and Shopify Hydrogen is scalability. Even if your site is running 10,000,000 products with its own pages, each page will be served as quickly as a site with 100 products.Headless architectures lean on “composable commerce”, where each distinct service is self-contained and connected by API. For example, images live in a Content Distribution Network (CDN) like Cloudinary, scripts live on Cloudflare, Algolia handles search and video is streamed from Bunny. Don’t stress if you’re unfamiliar with any of this terminology. They’re all the things happening behind the scenes when a website loads.Separating each service avoids resource bottlenecks, keeping your store’s performance snappy.Confidence that your site will load quickly and provide customers with a great user experience means you can return to making big moves.Making big interface changes is too risky, and A/B testing has stopped altogetherA/B testing is one of the cornerstone techniques for improving a store’s performance. Every part of the user journey should be tested because it’s impossible to guess where conversion rates drop off.This simply isn’t practical for a lot of stores. For starters, many A/B testing solutions create a weird flickering issue or drag page load times down the sink.There’s little point in running a test if it negatively impacts your store’s selling ability.Headless eCommerce offers modern solutions to the traditional headache of A/B testing. A combination of lazy loading, code splitting, caching strategies, and leveraging “The Edge” (link to next paragraph) means tests can be served, and customers are unlikely to notice.The Edge is a series of global servers that can run the frontend of a headless store and execute some logic-based actions, like A/B tests. As a result, your headless store can test changes not only for domestic customers but also across the globe without your store slowing down.Since headless architecture decouples the front and backend, there’s little risk in making big interface changes, unlike a traditional store where changing how your cart looks could prevent customers from purchasing.Moving to a headless architecture could give your business the vehicle to fully commit to an aggressive testing strategy, resulting in a strong rise in conversion rate.International expansion is a future goal, but it seems unrealisticSelling overseas is a pipedream for many online retailers. But to make it happen, your store needs to know where users are entering from, deliver them a translated version of the site, handle currency conversions, and pass on the right logistics information.Then you need to think about the management overhead of maintaining different versions of your site’s content, which starts feeling unattainable.Luckily, headless eCommerce has taken a close look at this problem.Frontend frameworks like Next.js come loaded with the ability to detect where in the world a customer is entering so different versions of content can be delivered.Combine this with the operation of a global series of servers called “The Edge”, and your store is now achieving a customized experience for global customers without losing performance.In a more practical sense, headless eCommerce platforms like Sanity and Storyblok carry sophisticated localization features that allow translated content to be managed at either the field or document level.This feature is handy if you only want to translate a headline to make the product more relatable to another country or if the entire page needs to be translated into a new language.You’ve conceded that your customer experience will never be 100% awesome because the tools you’re using don’t allow itSome parts of the user experience are simply “out of bounds” with traditional eCommerce platforms.It’s impossible to control the entire user journey, which can be a frustrating limitation if you're a store owner or manager who often has creative ideas you believe would impact the bottom line.I like to use Butternut’s checkout process to illustrate what you can do with a headless store that’s not realistically possible with a regular store.These guys have removed the indecision customers feel when they’re unsure which product to purchase. An interactive checkout process walks the customer through questions about their pet and recommends a fully tailored diet achieved with the products sold in the store.When you move to a headless architecture, there’s no more “Shopify doesn’t work that way” or “WordPress can’t do that”. Your store has now entered the realm of custom software development, and there are few limitations.You know a large portion of your customers are browsing on their phones, and your mobile experience is outdatedFixing a poor mobile experience once your store is a few years down the line can be a massive headache, especially if you’re noticing performance issues.You may have even floated the idea of building a mobile application to drive more sales.Luckily, there’s no need to build a mobile app these days.Turning your website into a Progressive Web Application (PWA) is arguably a better customer experience. They don’t have to download a dedicated app, but they benefit from push notifications, lightning-quick page load times, and a “native app experience’.The most popular frontend frameworks used for headless eCommerce stores, like Next.js, come ready to turn your store into a PWA out of the box.You can prompt users to download a copy of your “app” onto their home screen, let them know when sales start through push notifications, and build an experience optimized specifically for phones.You want to leverage AI-related services but are struggling to integrate them with your current stackAI has arrived, and it’s being used in every facet of the eCommerce experience. From personalizing content based on user behavior, to “smart product recommendations”, virtual shopping assistants, and artificially generated FAQs, just to name a few implementations.Since services like ChatGPT have opened their APIs to external integration, the ways AI can be used are limitless.This is, of course, if your store’s architecture can keep up.Traditional monolithic stores make using sophisticated APIs tricky. The front and backend are tightly coupled, and the frameworks are heavily opinionated, forcing unreliable workarounds to connect with third-party APIs.By contrast, headless architecture is designed around consuming APIs. The frontend doesn’t store or manage its own data; it gets everything via APIs.Adding one more API is trivial. With some frontend integration, you can try an AI-driven service in a matter of hours (depending on your development team).On top of this, frameworks like Next.js come packaged with a Node backend. This allows your store to interface with the AI-driven API, and store and manipulate the data. As a result, you can build your own custom AI functionality directly into your store.Your business has unique needs that don’t fit nicely into a regular storeThe last big reason businesses turn to headless architecture is a resolution to the problem of “I simply can’t do what I want to with a regular store”.Achieving some unique requirements are simply “out of bounds” with traditional eCommerce platforms.This can be frustrating if your business doesn’t adhere to a typical eCommerce selling model. A standard Shopify Plus setup might get you 80% of the way but would require foundational changes to be a perfect fit.A good example of this situation is a store that sells a single product with many customizable variations, such as medical technology. Variations are fairly inflexible in traditional eCommerce frameworks, forcing clunky workarounds involving duplicate products.When you move to a headless architecture, there’s no more “Shopify doesn’t work that way” or “WordPress can’t do that”. Your store has now entered the realm of custom software development, and there are few limitations.There are even more flexible eCommerce engines than Shopify with integrated Product Information Management (PIM) tooling to solve the “variation problem” (we’ll dive into these tools over the next couple of emails!).Going headless means you can create an exceptional experience for your customers and a user-friendly process for your team designed around how your business operates.Wrapping upDid you find anything that resonated? It would be cool to know, especially if I haven’t covered what makes you research headless architecture. Drop me a comment below with your details."
  },
  {
    "title": "Shopify Hydrogen vs Next.js",
    "plaintext": "Shopify Hydrogen is an opinionated React-based framework for building custom headless storefronts. Back in 2022 Shopify decided to accelerate their new framework’s development by acquiring another React-based framework called Remix. The two platforms' integration was rolled out in Hydrogen’s most recent major update (version 2.0).Now that Hydrogen has made a significant jump in functionality, it has become an legitimate competitor to Next.js.We’re big Next.js fans and have written extensively about Next’s pros and cons. It’s our primary frontend framework for building applications and headless eCommerce stores.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHowever, as much as we love Next.js, Hydrogen is hard to ignore, especially when we work with eCommerce brands already running on Shopify and want to upgrade to a headless architecture. The big selling point for Hydrogen is that it comes with in-built components, utilities, and hooks tailored to provide a more streamlined Shopify development experience.Next.js, on the other hand, is a more general framework. It’s objectively more powerful and comes packed with better rendering techniques that significantly improve the administrative user’s experience. However, it doesn’t have a neat supported library of Shopify-specific components like Hydrogen.We wanted to compare how the two frameworks stack up for a couple of reasons. Firstly, this is what we do! We build headless eCommerce stores. We’re already researching these frameworks, so why not share the knowledge?Secondly, unless you’re comfortable downloading and spinning up a package from Github, you’ll have difficulty getting in to play around with Hydrogen. And even if this isn’t a problem, you might not have a baseline to make assessments.With all that said, let’s get into it.Shopify Hydrogen overviewBefore Hydrogen came along, the only option Shopify businesses had was Liquid, a Ruby-based templating language for building Shopify themes.Liquid is pretty handy and can do some cool stuff, especially in the latest versions of Shopify. However, it’s a server-side framework which means that the front and backend and tighly coupled. This also means that sometimes you have to do things “the Shopify way” instead of the way you might want to.There are many use cases where typical monolithic restrictions prevent an online retailer from doing what they want to, or restrict them from taking the next big step. We’ve even detailed a dozen of these scenarios and how a headless architecture solves these problems.Hydrogen was created to address these problems by providing a headless alternative to Liquid. From Shopify’s perspective, it’s a win because they keep their customers and can even upsell them onto Oxygen, the Hydrogen hosting platform. From a customer perspective, it’s a win because you don’t have to migrate off Shopify to get access to the modern tools that much bigger companies have used to their advantage over the past few years.Hydrogen featuresHere are some of Hydrogen’s main features and benefits:Custom Shopify components, hooks, and utilitiesHydrogen provides a set of performant React components, reusable functions, and utilities tailored for interacting with the Storefront API.These components include functionalities like: * Cart * Shop Pay * Analytics, which help simplify business logic, data processing, and state management.   Access to these components eliminates the need for your team to build these features from scratch. Anything that reduces the complexity and boilerplate code typically associated with e-commerce development is good!ViteHydrogen utilizes Vite as its build tool, which is based on Go. Vite is a fast and lightweight tool that offers features such as hot module replacement (HMR), code splitting, tree shaking, and efficient bundling using ESbuild. Vite seamlessly supports TypeScript, JSX, CSS modules, and other web development technologies out of the box.By integrating Vite as its build tool, Shopify Hydrogen provides faster build times, improved loading speeds, and an overall more efficient development workflow. It ensures compatibility with popular web development technologies, making it a big tick in most developers' books.Tailwind CSS IntegrationHydrogen comes with Tailwind CSS as its default styling solution. Tailwind CSS is a utility-first CSS framework that eliminates the need for writing custom CSS code. It provides a responsive grid system, a comprehensive set of utility classes, and a plugin system for extending functionality.Tailwind is our framework of choice for a couple of years now, and we’ve written extensively on how it’s improved our development velocity and streamlined our processes.Hydrogen’s Tailwind CSS integration lets you quickly create custom designs and styles for your storefronts without the overhead of managing large CSS files.Streaming SSR and React server componentsStreaming SSR is a powerful technique employed by Hydrogen that allows the browser to begin rendering the page before the server has completed sending all the data. This means that users can start seeing and interacting with the content even before the entire page has finished loading. The result is a faster initial render, reduced perceived latency, and an enhanced sense of responsiveness for the user.In addition to streaming SSR, Hydrogen leverages React server components to further optimize performance. With React server components, the server can send only the necessary data for each component rather than sending the entire component code and data.This targeted data delivery reduces the amount of code and data sent over the network, resulting in faster page loads and improved performance. By minimizing network overhead and focusing on essential data, Hydrogen helps storefronts operate efficiently and responsively.Oxygen hosting platformShopify’s Oxygen is a serverless platform that automatically scales to handle any amount of traffic and offers features such as edge caching, CDN delivery, security, and analytics.  It’s designed specifically to host headless Hydrogen Shopify storefronts.We’re still in the process of assessing Oxygen. It’s a little tricky to get a hold of because Shopify doesn’t expose a sandbox environment. To trial Oxygen, you either need to speak directly with a Shopify rep or have a Shopify Plus account where you can spin up a dedicated store for testing it out.Watch this space. We’ll release an in-depth review of Oxygen over the next week or two.Tailored for Shopify's ecosystemHydrogen is built explicitly for developing custom headless Shopify storefronts, providing seamless integration with Shopify's features, components, and Storefront API. It’s pretty straightforward to call data from the Shopify API onto the storefront using hooks like `useShopQuery`, which is fantastic if you’ve tried to do this through a different framework.Besides the API integration tooling, the next biggest benefit is the Shopify team is maintaining the components in the Hydrogen UI library. If there’s a cart component bug preventing it from talking to the Shopify API, your team don’t necessarily need to spend the time fixing it (unless it was your fault!).There’s no other headless solution on the market where part of you can push problems up the chain for someone else to fix, which is kind of neat.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitPros and Cons of Shopify HydrogenHere’s my take on the pros and cons of Shopify Hydrogen. The features I’ve listed above overlap pretty heavily in the “pros” list, so I’ve gone short and sweet with this summary.Pros * Hydrogen UI cuts down on development time and provides access to components that have been specifically designed for integration with Shopify’s API. * No need to migrate your products, history, or users from Shopify if you’re already using the platform. * Your environment is managed from the same place the rest of your tools are, and it integrates nicely with the rest of the Shopify analytics suite * Native Tailwind integration so you can jump straight into building your new storefront * Vite is actually a really great build tool * Comes with enough rendering techniques to build a performant and flexible store   Cons * You’re locked into Shopify, and turning your store into a fully composable build is harder if you want to swap out parts of Shopify’s solution * Hydrogen isn’t as mature as Next.js, and doesn’t provide the same range of rendering techniques, which is actually a pretty big deal. * Doesn’t support incremental static regeneration, which means your team will have to wait for the build to finish every time a change is published. This can mean 5, 10, 20 or even 30 minutes of waiting, depending on how large your catalogue is. * There’s a smaller community to reach out to if you get stuck and need support compared with Next.js * The documentation isn’t great, which is a strong sign that it’s an immature framework.Next.js overviewNext.js is an open-source JavaScript framework that enables developers to build server-rendered React applications easily. It was created by Vercel, and has gained popularity for its developer experience and performance optimization capabilities.I’ve mentioned a few times that our team love Next.js. Over the years, we’ve used straight React, Gatsby, Vue, Nuxt, and a bunch of other less popular frameworks. We’ve thrown all our chips behind Next.js because it does a better job than anything else on the market.I won’t go into the benefits and disadvantages of Next.js in this article because we’ve written pretty extensively on that topic. It’s one of our most popular articles, so please jump in and check it out by clicking that last link if you’re interested.Next.js FeaturesHere are the Next’s features that are worth paying attention to.Page-based routing systemNext.js offers a page-based routing system, where each page is treated as a separate entity. This approach simplifies the organization and navigation of the application by mapping URLs directly to corresponding files in the project structure. With Next.js, developers can easily create dynamic and static pages, define custom routes, and handle client-side and server-side rendering.Server-Side Rendering (SSR) and Static Site Generation (SSG)Next.js excels in server-side rendering, allowing you to pre-render pages on the server and send fully rendered HTML to the client. This approach improves performance, SEO, and user experience by delivering content faster. It also supports static site generation, where pages can be pre-built at build time and served as static files, reducing the need for server-side rendering on every request.Server-side rendering (SSR) and static site generation (SSG) capabilities are particularly advantageous for building a headless commerce store. SSR allows Next.js to fetch and render product data on the server, delivering fully rendered HTML pages to the client. This approach improves performance, SEO, and user experience by reducing the time required for the initial page load. The SSG feature enables the pre-generation of static pages at build time, which can be beneficial for showcasing product listings, product details, and other static content.React framework integrationNext.js seamlessly integrates with React (since it’s a framework built on top of the React library), providing a cohesive development experience for building web applications.It provides built-in support for React features like JSX, component-based architecture, and state management. JSX (JavaScript XML) allows developers to write HTML-like code within JavaScript, making creating and manipulating components easier.The component-based architecture enables you to build your application as a collection of reusable and composable components. You can create functional or class-based components that encapsulate specific functionalities and render them in a tree-like structure. This modular approach promotes code reusability, maintainability, and scalability.In terms of state management, Next.js provides built-in support for React's useState and useEffect hooks, which enable developers to manage component state and handle side effects. Additionally, Next.js is compatible with popular state management libraries like Redux, MobX, and Zustand, allowing developers to choose the solution that best fits their application's needs.Module Replacement (HMR)Next.js provides a fast refresh feature that enables instant updates to the code during development, making the development experience highly efficient. With fast refresh, any changes made to the code are instantly reflected in the application without the need for a full page reload.This rapid update process enhances productivity by providing immediate feedback and reducing the waiting time between code modifications and seeing the results. Developers can iterate quickly, making adjustments and fine-tuning the application's behavior and appearance in real-time.Hot Module Replacement (HMR) allows you to see changes reflected in the browser without the need to manually refresh the page. When a file is modified, HMR updates only the necessary components or modules, preserving the application's state and avoiding a full reload. This functionality enables a seamless development experience, as developers can instantly see the impact of their code changes, evaluate the results, and make further adjustments if needed. HMR improves development efficiency and reduces the time spent waiting for the application to reload after every code modification.SWC compilerNext.js leverages the SWC (Super-fast WebAssembly-based Compiler) to enhance build times and optimize JavaScript code. The SWC compiler provides faster transpilation, reducing development and build times. This optimization contributes to a more efficient development workflow, enabling developers to iterate quickly and deploy changes with minimal delay.Which one to pick? Shopify Hydrogen or Next.jsHydrogen, designed explicitly for Shopify eCommerce developers, offers a highly specialized development experience. It provides a comprehensive set of custom components, hooks, and utilities specifically tailored to integrate seamlessly with the Shopify ecosystem. These pre-built tools are designed to handle standard eCommerce functionalities, such as cart management, Shop Pay integration, and Shopify Analytics.It saves your development team time and effort often spent implementing core eCommerce features and writing a bunch of fairly “standard” code from scratch, accelerating the development process.On the other hand, Next.js is a general-purpose React framework that caters to a wide range of web development needs beyond e-commerce. It doesn't come with Shopify-specific features out of the box.In my opinion, the big drawcard for Shopify’s solution is Hydrogen UI. The thing is that it’s possible to use Hydrogen UI with Next.js. The only real downside of doing this is that as soon as you make changes to the components (to get them working with Next), they will be out of sync with the package, and you might run into issues if you try to update the UI library.Generally speaking, Hydrogen is an okay developer experience. The Vite configuration is pretty complicated and doesn’t feel smooth yet. There seem to be differences in the development and production environments which can cause some frustrating bug fixing, and it takes more time to do the stuff that’s straightforward in Next.js.At a guess, if Hydrogen remains on its current trajectory and it’s paired with Oxygen, it might be a decent developer experience in a year or two.Next makes life a bit easier right now. It’s got a much larger ecosystem of supported services, packages and libraries. Its documentation is excellent. Vercel’s hosting solution is elegant. It’s honestly hard to fault.Frequently asked questionsQ: Can I use Shopify Hydrogen for non-Shopify projects?No, Shopify Hydrogen is designed to develop custom headless Shopify storefronts and is tightly integrated with Shopify's ecosystem. If you are not working on a Shopify project, Next.js would be a more suitable choice.Q: Which framework offers a better developer experience, Hydrogen or Next.js?Next.js, hands down. Even though the two frameworks are based on React and share many similarities, Next is a more popular solution that has already ironed out a lot of the kinks Hydrogen is still struggling with.Q: Does Next.js offer any pre-built components for e-commerce functionalities?Next.js itself does not provide built-in components tailored explicitly for e-commerce functionalities. However, it offers Next.js Commerce which is a starter kit designed for building high-performance e-commerce websites. Next.js Commerce offers support for multiple backends, including integration with Shopify.Wrapping upBoth Shopify Hydrogen and Next.js are powerful frameworks for building web applications, but they cater to different needs and scenarios. Shopify Hydrogen offers a tailored development experience designed explicitly for Shopify eCommerce developers, with pre-built components and utilities that seamlessly integrate with the Shopify ecosystem. On the other hand, Next.js is a versatile React framework suitable for a wide range of projects, providing flexibility and extensive ecosystem support.Ultimately, the choice between Shopify Hydrogen and Next.js depends on your specific project requirements, familiarity with Shopify, and preference for either a tailored Shopify-centric experience or a more flexible general-purpose framework."
  },
  {
    "title": "13 Main Types Of Software Development - Explained",
    "plaintext": "Software development has become a blanket term for writing code. For people who live on the outside of the software world, this definition is clear enough. However, if you want to work with a developer or build an application, you’ll need to get a handle on the different types of software development.The software that lets a Tesla drive itself differs significantly from the code that lets you watch Netflix. It’s different again from the software on your mobile device, smart fridge, smartphone, and server that powers them all with data.Each software development category has languages and frameworks designed specifically for that cause. These all have nuances and complexities that take years to master. As a result, skilled developers tend to gravitate towards a particular kind of software development.This means that before you start shopping around for a technical partner, it’s worth figuring out roughly what kind of software development you’ll be committing to.Sometimes the answer to this question is pretty straightforward (i.e. developing an app for iPad), but even in these situations, there is often a need to separate the codebase into two parts; the visual stuff that interfaces with your device and the backend that runs on a server and manages data.This article aims to outline the major types of software development and expand on the types of languages and frameworks involved in everyday use cases.Front vs Back-EndFrontend development is the side of software engineering that gives life to the elements users directly interact with. Frontend development is most commonly associated with building websites or web products with HTML, CSS, and JavaScript. However, there are frontend frameworks developed explicitly for other devices.Consider the design of an online retail website. The arrangement of products, the choice of colors, the updating of the shopping cart - all outcomes of front-end development.Backend development, on the other hand, operates invisibly, handling server-side operations such as storing and retrieving information from the database and sending it to the front end.  The backend typically handles the resource and logic-intensive tasks. Pretty much anytime you hear “machine learning”, “algorithm”, or “artificial intelligence”, it’s handled by the backend.Front and backend development are the two most common types of software development. They’re the entry point for most professionals and are required for pretty much every project.Enjoying this post? Get more delivered straight to your inbox!Enter your email to receive technology tips and news.Sign me up!We won't send you spam. Unsubscribe at any time.Built with ConvertKitFull-Stack DevelopmentFull Stack Development is the combination of backend and frontend development. This sort of software development is necessary when working with monolithic platforms that don’t separate the codebase that drives the server and the browser. Examples of this are WordPress and Shopify. Both frameworks require code to be written for dynamic generation by the server and interpretation by the browser..The term “full stack development” is most strongly associated with developers themselves. Someone who is comfortable working with front or backend code will often don the title of “full stack developer”.Since full-stack development encapsulates most of the software development blanket, hundreds of languages and frameworks are associated with this kind of development. However, these are the most popular ones (according to Stack Overflow’s yearly survey). * HTML/CSS/JavaScript/TypeScript  for the frontend * Node.js/ Python/Java for the back-end * React.js/Vue.js/Angular for front-end frameworks * Django/ Express/Laravel for back-end frameworksApplication DevelopmentApplication development is creating a software program (or a set of them) designed to perform various tasks required by a business. It encompasses various activities, such as designing, coding, testing, and debugging software applications. Application development aims to automate processes, enhance user experience, and increase operational efficiency.There are several forms of application development, including web application development, mobile application development, and desktop application development. Each caters to different platforms and user needs. For instance, web applications are designed to run on web browsers, mobile apps are specifically designed for smartphones and tablets, while desktop applications are intended for personal computers.To illustrate, consider the development of a project management tool. This application would aim to facilitate project tracking, resource management, and team collaboration. The most popular languages for application development include Python, JavaScript, and Java, often used in conjunction with frameworks like React, Angular, Django, Flask, and Spring.Some of the most commonly used languages and frameworks in application development include: * JavaScript * Swift * Kotlin * Python * Java * React.js * Node.js * Django * Spring Boot (Java)API DevelopmentAPI, or Application Programming Interface, refers to a set of rules and protocols used for software interaction. APIs allow different software applications to communicate and interact with each other, extending software functionality and enhancing the overall user experience.They are particularly essential in integrating different software components, simplifying the development process, and reducing complexity. By leveraging APIs, developers can utilize existing functionality, eliminating the need to create everything from scratch. This fosters the creation of ecosystem platforms where various applications can interact, providing a more comprehensive and richer user experience.For instance, a weather application might use an API to access real-time data from a third-party weather service. The application sends a request to the weather service's API, which returns the requested data. This data is then displayed on the app, providing users with accurate, real-time weather information.API development can be performed using various programming languages, including, but not limited to: * JavaScript * Python * Java * Node.js for backend * Express.js for API frameworkData ScienceData Science is a cross-disciplinary field blending programming, statistical analysis, and specialist knowledge to draw valuable insights from data. It employs a variety of methods and theories from diverse fields, including mathematics, statistics, information science, and computer science.It revolves around the manipulation, analysis, and visualization of data to guide decision-making processes and build predictive models. It has a broad range of applications across sectors such as healthcare, finance, and marketing. As such, its real value lies in its capacity to unveil hidden patterns and insights, empowering businesses to make decisions based on data and refine their operations.For example, banks harness the power of data science to detect fraudulent activities. By identifying patterns in transactional data, data scientists can construct predictive models to spot potentially fraudulent transactions. When such transactions are identified, they can undergo a more rigorous review process, reducing fraud instances and enhancing the customers' trust.Data scientists work with a vast array of languages and frameworks: * Python * R * Java * Scala * Pandas for data manipulation * Scikit-learn for machine learning * TensorFlow for deep learning * Matplotlib for data visualizationMobile DevelopmentMobile development is the art of building software applications tailored for mobile devices, including smartphones and tablets. They leverage the unique characteristics of these devices, offering users a seamless and intuitive experience.There are various strategies for mobile development, such as native, hybrid, and web app development. Native apps are created for a specific platform (like iOS or Android), utilizing the respective platform's programming languages and development tools. Hybrid apps are crafted using web technologies and then packaged as native apps, enabling them to function on multiple platforms. Web apps, however, are websites that emulate the native apps' look and feel but are accessible via a web browser.Consider the development of a mobile fitness app. This involves creating features such as activity tracking, meal planning, and goal setting. Developers would need to ensure that the app functions smoothly across various devices and operating systems.Mobile developers often employ: * Swift, the language of choice for Apple applications * Kotlin, widely used for Android development * Flutter, bridging the divide between iOS and Android * React Native, a staple for cross-platform application developmentDesktop DevelopmentDesktop development involves designing software applications for desktop and laptop computers. These applications are engineered to operate on a desktop operating system, such as Windows, macOS, or Linux.Although there has been a noticeable shift towards web and mobile development in recent years, desktop applications continue to play a pivotal role in various sectors. They boast powerful computing capabilities, larger displays, and a rich user interface, often more intricate and feature-rich than what's feasible on mobile or web platforms.A video editing platform is a good example. It capitalizes on desktop computers' superior processing power and storage capacity to manage the demanding tasks associated with video editing.These developers often use: * C#, a go-to language for Windows applications * Java, a language known for its cross-platform capabilities * Python, favored for its extensive libraries * C++, used for high-performance software * The .NET framework, popular in Windows application development * Electron, helpful in creating cross-platform desktop applicationsSoftware Tools DevelopmentIn the sphere of software development, crafting software tools refers to designing and developing applications or systems that aid developers in their day-to-day work. These tools encompass a wide range, from straightforward coding libraries that simplify programming tasks to intricate systems such as Integrated Development Environments (IDEs) that streamline the entire development process.Take the design of an IDE as an illustrative example. It's an all-encompassing software suite that offers a range of development utilities, including a code editor, build automation mechanisms and a debugger.The choice of languages and frameworks for crafting software tools is diverse, but some commonly used ones include: * Python, favored for its readability and simplicity * Java, renowned for its universality * C++, appreciated for its performance capabilities * Eclipse, a popular open-source IDE * Visual Studio, Microsoft's comprehensive IDESecurity Software DevelopmentSecurity software development encompasses creating programs designed to protect computer systems and networks from threats and vulnerabilities. As cyber threats continue to evolve, the importance of cybersecurity becomes more pronounced.Professionals in this field, such as penetration testers, use their expertise to identify and exploit system vulnerabilities, mirroring the tactics of cybercriminals. This process helps to uncover security flaws and develop appropriate countermeasures. Antivirus, designed to scan and purge malicious software from a system, serves as a classic example of this type of security measure.The selection of languages for developing security software typically includes: * C and C++, known for their system-level access and control * Python, for its simplicity and extensive libraries * JavaScript, popular in web security * Tools like Metasploit and Wireshark for vulnerability and network analysisCloud Computing DevelopmentCloud computing development involves designing and implementing applications that are hosted on remote servers and delivered over the Internet. This type offers several benefits to businesses, such as cost savings, increased scalability, and improved data security.The market for cloud computing has been expanding rapidly. As of 2023, market research predicts a substantial growth trajectory as more businesses migrate their services to the cloud. An example of such is the creation of a cloud-based file storage system, allowing users to store and access their files from any device with an internet connection.Languages and frameworks commonly used in cloud computing development include: * Python and Java, for their robust libraries and scalability * AWS and Azure, industry leaders in cloud services * Docker and Kubernetes, for containerization and orchestration of applications.Video Game DevelopmentVideo game development is a process that involves the creation of compelling narratives, characters, and environments, as well as the implementation of game mechanics and controls. It ranges from developing simple mobile games to complex, immersive console and PC games.Video game development is a unique domain where different languages and frameworks have their own strengths: * C++ and Python, for their performance and simplicity * Unity and Unreal Engine, popular game development platforms * Blender and Maya, for 3D modeling and animation.Embedded Systems DevelopmentEmbedded systems development involves creating specialized computer systems designed to perform a few dedicated functions within larger mechanical or electrical systems. These systems can be found in a multitude of devices, from digital cameras to aeroplanes.Developers working with embedded systems often require expertise in middleware –the software layer that bridges the gap between the operating system and applications, enabling communication and data management in distributed applications.An example of embedded systems development is the creation of the software for a digital camera's system. It is created to control everything from capturing and processing images to operating the camera's user interface.When it comes to embedded systems development, these languages and tools tend to be popular: * C and C++, due to their low-level capabilities and efficiency * RTOS (Real-Time Operating System), a specialized operating system for embedded applications * ARM architecture is commonly used in the design of embedded systems.ConclusionHopefully, this gives you a round-up of the main types of software development. Each type has its own sub-sets, but this list should be enough to point you in the right direction!"
  },
  {
    "title": "Headless vs. Decoupled CMS - Architectures Compared and Explained",
    "plaintext": "Headless and decoupled architectures are often used interchangeably to mean the same thing when describing the architecture of websites. Fundamentally, they both involve separating the frontend presentation layer from the backend content management and delivery systems. However, they differ in the level of coupling between these components.Headless architecture completely separates the presentation layer (head) from the backend (body), allowing developers to leverage an API-based approach to deliver content and experiences across multiple channels. This approach allows for flexibility in providing content to various devices, such as websites, mobile apps, smart devices, and IoT devices.On the other hand, decoupled architecture maintains some level of coupling between the frontend and backend. While the frontend and backend are somewhat separated, they still have a closer relationship than the complete decoupling of headless architecture. The front and backend are often developed independently, allowing content creators a more tailored editing experience while still benefiting from the flexibility of choosing different technologies.Understanding headless architectureHeadless architecture represents a modern approach to building and delivering digital experiences by completely decoupling the frontend presentation layer from the backend content management and delivery systems. In the context of a CMS, think of headless as a backend-only solution that primarily allows users to focus on the content itself. After publishing, the content is available to all presentation layers using APIs.The main principle of headless architecture lies in its separation of concerns. Unlike traditional monolithic architectures, where the frontend and backend are tightly coupled, headless architecture emphasizes the division of responsibilities between the two layers. The backend focuses solely on managing and organizing content, while the frontend layer renders and displays that content to end-users.Some of the key advantages associated with this architectural approach include:Flexibility and agilityWith headless architecture, developers can choose the most appropriate technologies and frameworks for building the frontend layer. Whether it's a web application, mobile app, voice assistant, or any other digital channel, the content can be delivered seamlessly through APIs. This flexibility enables businesses to adapt quickly to evolving user expectations and emerging technologies.Omnichannel supportOne of the main reasons that makes headless architecture stand out as a future-proof solution is its omnichannel support. This enables businesses to deliver their content and user experiences across multiple channels, ensuring a consistent and cohesive brand presence throughout numerous modern touchpoints.To achieve the omnichannel experience, the headless architecture leverages APIs to expose the backend (CMS) content to various frontend applications or channels. This means that the same content can be delivered and tailored to different platforms, such as websites, mobile apps, IoT devices, VR headsets,  smartwatches, billboards, chatbots, and voice assistants, among others. This enables personalized interactions, delivering relevant content to users based on their preferences and behaviors.API-first approachHeadless architecture prioritizes APIs as the primary interface. This makes integration with third-party services easier. Businesses can incorporate specialized services or leverage external functionalities effortlessly. This expands the capabilities of applications without major architectural changes.The API-first approach also promotes content reusability. With the separation between content and presentation, you can fetch specific content elements or collections through APIs and utilize them across various frontend applications or channels. This promotes efficient content management, consistency in messaging and branding, and reduces redundancy.Understanding decoupled architectureIn a decoupled CMS architecture, the frontend and the backend are separated from each other. While this sounds similar to headless architecture, the difference is that a headless architecture exists as a backend solution/content repository completely cut off from the frontend or the ‘head’ hence the name headless.Decoupled architecture, on the other hand, exists as two separate solutions; the backend and frontend.The frontend interacts with the backend through defined interfaces or APIs, allowing for more independent development and flexibility. A decoupled CMS offers pre-defined templates and tools for efficient editing and publishing experience. It has the user-friendliness of traditional architecture and the flexibility of headless CMS.Note that the presentation layer is not tightly coupled to the backend. Instead, it interacts with the backend through defined interfaces or APIs, allowing for more independent development and flexibility.Decoupled architecture principlesTemplate-based frontendDecoupled architecture often employs predefined templates or frameworks on the frontend to structure content presentation. These templates provide a structured editing environment, enabling content creators to have more control over the layout and design of the frontend without requiring extensive coding knowledge.Backend-driven editingIn decoupled architecture, users primarily interact with the backend system for content editing and management. The backend provides an intuitive user interface or CMS that allows content creators to create, modify, and organize content without directly manipulating frontend code.Flexibility in frontend technologiesDevelopers have the freedom to select the most appropriate frameworks, libraries, and programming languages for implementing the frontend, enabling innovation and adaptation to specific project requirements.Enhanced performance and efficiencyDecoupled architecture often improves performance and efficiency compared to traditional monolithic systems. The separation of concerns allows for more efficient resource utilization and optimized content rendering. Caching mechanisms and content delivery networks (CDNs) can be leveraged to enhance performance further.Streamlined collaborationDecoupled architecture facilitates collaboration between frontend and backend teams. Content creators can focus on managing content and defining its presentation, while frontend developers can concentrate on implementing the user interface and interactions. This division of labor streamlines the development process and improves collaboration between team members.Comparing headless and decoupled architecturesTechnology stack and implementationIn headless architecture, developers have complete freedom to choose the frontend technologies and frameworks that best suit their project requirements. This includes popular JavaScript frameworks like React, Angular, or Vue.js, as well as static site generators such as Gatsby or Next.js. Similarly, decoupled architecture also allows flexibility in frontend technologies, but to a lesser extent than headless architecture. Predefined templates or frameworks are often utilized to structure the frontend presentation layer.Performance and user experienceHeadless architecture offers greater potential for performance optimization due to its decoupled nature. Content can be optimized and delivered efficiently across different channels and devices. With caching mechanisms and content delivery networks (CDNs), response times can be improved. Furthermore, headless architecture can deliver personalized and contextually relevant content, enhancing the overall user experience.Performance optimization in decoupled architecture may be more limited than headless architecture due to the closer coupling of front and backend. Content delivery is often more focused on web-based channels, which may require more flexibility in delivering tailored experiences to different platforms. However, decoupled architecture can still achieve satisfactory performance and user experience with well-structured templates and efficient backend systems.Team collaboration and workflowFor content management system (CMS) architectures, efficient team collaboration and streamlined workflows are vital for successful project development.Headless architecture promotes a more independent workflow between frontend and backend teams. Frontend developers focus on building and maintaining the frontend applications, while backend developers concentrate on the CMS and its integration with other services.This division facilitates better team collaboration, eliminating conflicts that can arise when multiple team members work on the same codebase simultaneously.Decoupled architecture takes a slightly different approach to team collaboration and workflow. While it still separates frontend and backend responsibilities, decoupled architecture maintains a closer relationship between the two components compared to headless architecture.Content creators and frontend developers collaborate more closely in shaping the frontend experience. The advantage of this close collaboration is that it allows content creators with minimal coding knowledge more control over the design and layout.How to pick the right architectureIt goes without saying that picking the right architecture boils down to figuring out which approach will best suit your project. These are the things we suggest you consider before committing to an approach:Project requirements and goalsConsider factors such as the number of channels and devices you need to support, the complexity of your content types, and the desired level of customization for your frontend presentation.Headless architecture offers more flexibility and scalability for projects with diverse channels and advanced content needs, while decoupled architecture can be a better fit for projects focused primarily on web-based channels and simplified content structures.Scalability and future growthScalability is a critical consideration when choosing an architecture. Assess the expected growth of your project and evaluate how well the architecture can accommodate increased traffic, content volume, and functionality.Headless architecture, with its decoupled nature, provides greater scalability as it allows you to scale frontend and backend systems independently. On the other hand, decoupled architecture may have limitations in terms of scaling the frontend as it remains more closely tied to the CMS.Development team expertise and preferencesConsider the expertise and preferences of your development team when making architectural decisions. Evaluate their proficiency in frontend technologies and their familiarity with CMS platforms.Headless architecture requires strong frontend development skills as the frontend applications are built and maintained separately. If your team has expertise in a specific frontend framework or programming language, headless architecture may be a favorable choice. Decoupled architecture, with its emphasis on predefined templates and frameworks, may be more suitable if your team has limited frontend expertise.Budget and time constraintsBudget and time constraints are practical considerations that can influence your architectural choice. Assess the available resources and budget for development, maintenance, and infrastructure.Headless architecture may require more development effort and expertise, potentially leading to higher costs. On the other hand, decoupled architecture, with its structured editing environment and predefined templates, can be more cost-effective and faster to implement. Consider your budget and project timelines when making your decision.Frequently asked questionsQ: What is the main difference between headless and decoupled CMS?A headless CMS is a back-end-only content management system. In a decoupled architecture, the front and back ends of the CMS are detached and housed independently from one another, effectively disconnecting the processes of creating and delivering the content. The CMS delivers content from the back end to the front end via an API, which can also be used to push content elsewhere. So while the head is detached, it’s still there as an option.Q: Which architecture is more suitable for businesses focused on multiple channels and devices?Headless architecture is particularly well-suited for businesses focused on multiple channels and devices. Its API-first approach enables seamless content delivery across various platforms, such as web, mobile apps, IoT devices, smart TVs, and more. With headless architecture, you can create tailored experiences for each channel without compromising efficiency or user experience. By leveraging APIs, you can serve content to different platforms with ease, ensuring consistent messaging and branding across all touchpoints. Decoupled architecture, while adaptable to different channels, may be more suitable for businesses primarily targeting web-based channels, where the predefined templates and frameworks provided by the CMS platform can be utilized effectively.Q: Which architecture provides more flexibility in choosing technologies?Headless architecture provides more flexibility in choosing technologies compared to decoupled architecture. In headless architecture, developers have the freedom to select their preferred frontend technologies, frameworks, and programming languages. They can leverage the latest innovations and best practices to create immersive user experiences. This flexibility allows for greater customization and adaptability to specific project requirements. In contrast, decoupled architecture, while still offering some flexibility, is often influenced by the CMS platform's predefined templates and frameworks. While there may be room for customization within these predefined options, the choices may be more limited compared to headless architecture.Wrapping upBoth headless and decoupled architectures offer distinct advantages for content management systems. Headless architecture provides flexibility and omnichannel support, while decoupled architecture offers simplicity and streamlined web-based functionality. The choice ultimately depends on specific project requirements, and careful consideration of scalability, team collaboration, technology stack, and budget is essential."
  },
  {
    "title": "A Comprehensive Guide to JavaScript Frontend Frameworks",
    "plaintext": "JavaScript is synonymous with the internet. It drives pretty much everything interactive you deal with when using a web browser. HTML and CSS are involved too, but JavaScript is the language that turns static content into something interactive and dynamic.JavaScript is great and has matured a million times since being created in 1995. However, like everything else in the software world, JavaScript has its quirks and inefficiencies. Being inefficient is the natural enemy of a software developer, and as a result, the development community has created frameworks to speed up and enhance the use of JavaScript.Think of these frameworks as a collection of technologies and best practices bundled together to streamline the creation of web applications. They abstract away the complexities of handling Document Object Model (DOM) manipulation, managing application state, routing, and handling user interactions. These terms may be unfamiliar if you’re not a developer, but in a nutshell, they’re the parts of frontend development that are complex, repetitive and time-consuming to handle in plain JavaScript.The thing about JavaScript frameworks is that there are tons of them, and not everyone agrees which one is the best. There’s React (made by Facebook), Angular (made by Google), Vue, Gatsby, Next.js, Nuxt.js, jQuery, Svelete, Remix, and the list goes on and on…If you’re jumping into a new web application project, chances are you’ll end up needing a frontend JavaScript framework to build a user interface for visitors to interact with. Picking the right framework can mean a better outcome for your application, but more importantly, it impacts how easy your app is to maintain in the future. A poorly supported framework is going to cost more time down the line.In this article, we’ll provide a comprehensive guide to JavaScript frontend frameworks by exploring the key features and advantages of popular JavaScript frameworks such as React, Angular, and Vue.js, while looking at use cases and considerations for choosing the right framework for your project.Advantages of using JavaScript frontend frameworksBefore we take a look at specific frameworks, it’s worth explaining the benefits to using a JavaScript framework. It’s not always necessary, especially for smaller projects, utilities and scripts. But sometimes, working without a framework simply doesn’t make sense.Without any further ado, these are the high-level advantages of using a frontend framework:Enhanced productivityFrontend frameworks provide a structured and organized approach to web development, which helps streamline the development process and improve productivity. They offer pre-built components, templates, and libraries, allowing developers to focus more on application logic rather than writing repetitive code from scratch (i.e. recreating the wheel).Reusability and modularityFrontend frameworks promote component-based architectures, where UI elements are encapsulated into reusable components. This modular approach makes reusing code straightforward, reducing the amount of duplicate code that needs to be written. Components can be easily maintained, tested, and shared across different parts of the application.Efficient Rendering and Performance OptimizationMany frameworks leverage techniques such as virtual DOM diffing and intelligent updates to optimize rendering performance. By minimizing unnecessary re-renders and efficiently updating the DOM, these frameworks enhance web applications' overall speed and responsiveness, providing a smoother user experience.Robust State ManagementFrontend frameworks often include state management solutions that help manage and synchronize application data. These state management libraries simplify handling complex data flows and make it easier to manage application state changes.Large and active communityMassive and dedicated communities support the most popular frontend frameworks like React, Vue and Angular. These networks go out of their way to build libraries, plugins, and tools that enhance the capabilities of their framework.These communities are also vigilant at providing ongoing support, frequent updates, and a wealth of learning resources.Rapid prototyping and iterationFrontend frameworks offer a way to rapidly prototype and iterate software. With a vast collection of ready-to-use components and tools and streamlined development workflows, a good framework can significantly reduce time-to-market for applications.Popular JavaScript frontend frameworksIt seems like a dozen new frontend frameworks appear every day. We won’t try to cover all of them, but we’ll touch on a handful of the most popular ones.ReactReleased in 2013, React has gained immense popularity in the frontend development landscape due to its simplicity, flexibility, and exceptional performance. It follows a component-based architecture and utilizes a virtual DOM for efficient rendering and updating of UI components. Its declarative syntax, JSX, allows developers to write JavaScript code closely resembling HTML, making it easier to understand and maintain.Key features of React include:JSXReact's JSX syntax allows developers to write JavaScript code that closely resembles HTML, making it easier to understand and maintain.Virtual DOMThe Virtual DOM is a concept used by React to optimize the updating and rendering process of UI components. It is a lightweight, in-memory representation of the actual browser DOM (Document Object Model) that React uses to perform efficient updates.When changes occur in a React component, instead of directly updating the real DOM, React first updates the Virtual DOM, which is a JavaScript representation of the UI. React then compares the previous Virtual DOM with the updated Virtual DOM to determine the minimal set of changes needed to be applied to the actual DOM.Reusable componentsReact promotes the creation of reusable components, enhancing code reusability and modularity.Unidirectional data flowReact follows a unidirectional data flow, which means that data in a React application flows in a single direction, typically from parent components to child components. In this approach, the parent component passes data to its child components as properties, also known as props. These props are immutable, meaning they cannot be modified by the child components. The child components receive the props and use them to render their respective portions of the UI.This promotes a more controlled and manageable data flow, leading to better application stability and maintainability.State managementReact provides a flexible approach to state management. While React itself doesn't enforce a specific state management solution, it can be combined with libraries like Redux or MobX to handle complex application state.React ecosystemThe React ecosystem offers diverse libraries and tools that cater to frontend development, including state management, routing, form handling, styling, testing, and more. The open-source community typically creates and maintains these resources, making them accessible to developers worldwide.The ecosystem also encompasses many learning resources, tutorials, blog articles, and community support. This enables developers to stay up-to-date with best practices, explore new techniques, and seek assistance from experienced developers when encountering challenges.Pros of React * High-performance and efficient rendering * Large and active community support * Extensive ecosystem of libraries and tools * Reusable component-based architecture * Flexible state management optionsCons of React * React is unopinionated, and there are tons of different ways it can be implemented. This can cause problems if you bring on various contractors, or work with multiple development teams.AngularAngular, developed and maintained by Google, is a comprehensive frontend framework for building complex web applications. It follows a complete MVC (Model-View-Controller) architecture and provides a range of features. Key features of Angular include:Angular CLIAngular CLI (Command Line Interface) is a powerful tool that helps developers scaffold, build, and maintain Angular projects. It provides a command-line interface to create project scaffolding, generate components, services, and modules, and run development servers and build processes. Angular CLI simplifies the project setup and provides an efficient development workflow.Forms handlingThe framework provides built-in support for handling forms, including form validation and data binding.Code splittingCode splitting in Angular involves breaking down the application codebase into smaller modules that can be loaded on-demand. This technique helps reduce the initial load time of the application by loading only the necessary code for the current page or feature. As a result, users experience faster load times and improved performance.RoutingAngular includes a robust router for managing application navigation and creating SPAs with multiple views.Testing InfrastructureAngular offers comprehensive testing support with tools like Jasmine and Karma, enabling developers to write unit tests, integration tests, and end-to-end tests for their applications.State ManagementAngular provides various options for state management, including local component state and integration with external libraries like NgRx for managing complex application state.Dependency InjectionAngular's dependency injection system simplifies managing dependencies and promotes testability and maintainability of code.Pros of Angular * Complete framework with all-in-one solutions * Strong emphasis on architecture and best practices * Excellent tooling and development experience * Well-documented and extensive testing capabilities * Angular CLI provides a streamlined project setup and development workflow   Cons of Angular * Larger bundle sizes compared to other frameworks * More complex setup and configuration process * Has fallen out of vogue over the past couple of yearsVue.jsVue.js, created by Evan You, has gained popularity for its simplicity and ease of integration. It provides a progressive framework that can be adopted gradually. Its notable features include:Easy integrationVue.js can be integrated into existing projects, making it an excellent choice for incremental adoption.Reactive data bindingVue.js provides a reactive data binding system that automatically updates the UI when data changes.Component-based architectureVue.js follows a component-based architecture, allowing for the creation of reusable and modular components.Lightweight and performantVue.js is lightweight and offers excellent performance, making it suitable for small to medium-sized applications.Vue router and VuexVue.js has its own router (Vue Router) and state management library (Vuex), providing a seamless development experience.Pros of Vue.js * Easy learning curve and gentle adoption process * Versatile and flexible for small to medium-sized projects * Great integration capabilities with existing projects * Excellent performance and efficient rendering   Cons of Vue.js * Limited ecosystem compared to React and Angular * Smaller community compared to React and Angular   Svelte OverviewSvelte is a modern JavaScript framework with a unique approach to building user interfaces. Unlike traditional frontend frameworks that rely on a virtual DOM and runtime libraries, Svelte shifts the heavy lifting to compile-time, resulting in highly efficient and performant code.  Svelte's main features are:Reactive component frameworkSvelte allows you to build reactive components using a simple syntax. It leverages a reactive declaration approach, where variables can be declared reactive and automatically update the DOM when their values change.Compiler-based approachSvelte's distinctive feature is its compiler, which analyzes the component code during the build process and generates optimized JavaScript code. This approach eliminates the need for a runtime library, resulting in smaller bundle sizes and faster initial rendering.Lightweight and efficientSvelte generates highly optimized code that directly manipulates the DOM, resulting in fast and efficient rendering. The absence of a virtual DOM and runtime overhead contributes to its lightweight nature, making it suitable for projects that prioritize performance.Component reusabilitySvelte supports component-based architecture, allowing you to create reusable UI elements. Components can encapsulate their logic and styling, enabling modular development and code reusability.Scoped CSSSvelte provides built-in support for scoped CSS, allowing you to encapsulate component styles and prevent CSS conflicts. This feature simplifies styling and improves the maintainability of your application.Pros of Svelte * High performance: * Small Bundle Sizes: The compiler analyzes and optimizes the code, resulting in smaller bundle sizes. This reduces the amount of data that needs to be transferred, leading to faster load times. * Reactive and easy-to-understand syntax * Growing Community:   Cons of Svelte * Relatively new and immature compared with React * Limited libraries and extensions, meaning more time is spent getting to work that would take virtually no time with React, Vue or Angular.Which is the best frontend framework?There isn’t a straightforward answer as to which is the best frontend framework. Every developer has their favorite, a strongly defends their allegiance.However, most developers and businesses tend to use React since it has a robust community of users and a large ecosystem of tools. It is also easy to learn and offers high performance.React also gave life to our favorite framework, Next.js. Even though we’re a technology-agnostic team, we choose Next ahead of any other framework when building applications. We’ve written extensively on the pros and cons of Next, so we won’t rehash the same content.That said, when choosing a frontend framework consider the following factors:Do you need a full framework or just a library?Frameworks like Angular and Next.js are great, but they’re opinionated and more involved. They expect your application to grow over time and provide tools to stay organized. If you’re creating a simple utility or static frontend that doesn’t need to do much, then a full framework can be overkill.In this situation, React is a great choice, since you can just use it to create some nice components to drive your frontend, without all the framework overhead.Do you need static content generation or different rendering techniques?Next.js can do things that straight React, Vue and Angular can’t. It allows content to be pre-generated and provides various rendering techniques.These options are super handy if you’re creating an application with a lot of content, like a headless eCommerce store.What is your team’s speciality?This point is often overlooked, but if your team’s developers are all Vue guys, there’s no point pushing them to pick up React or any React-based framework like Next or Gatsby.Even though the popular frontend frameworks are all pretty similar and experienced devs can figure things out, it takes time to learn the ins and outs. And you won’t hear this opinion often, but the popular frontend frameworks all do a good job, and your product won’t be significantly better if you choose Vue over React or vice versa.Frequently asked questionsQ: What is the difference between a frontend framework and a library?A frontend framework provides a comprehensive set of tools, conventions, and abstractions to build web applications. It offers a structured approach and handles various aspects of application development, such as routing, state management, and UI components. In contrast, a library focuses on providing specific functionality or features that developers can use in their projects without imposing a rigid structure or architecture.Q: How do frontend frameworks impact SEO (Search Engine Optimization)?A: Frontend frameworks can impact SEO depending on how they handle server-side rendering and the accessibility of the generated HTML. Some frameworks, like Next.js for React or Angular Universal for Angular, provide server-side rendering capabilities, which can improve SEO by ensuring that search engines can crawl and index the content.Q: Can I migrate an existing project to a different frontend framework?Yes. While it's possible to migrate, it's important to carefully evaluate the benefits and challenges of such a migration, including the impact on development time, resources, and potential disruption to the project.Key takeawaysIf you can’t decide which framework to use, you can never go wrong with React. It offers high performance and enjoys robust community support, meaning you’ll likely find solutions to problems encountered when using the framework. That said, consider other factors such as project requirements, learning curve, and integration with backend technologies when choosing a framework. Also, it helps to stay updated on the evolving frontend ecosystem to make informed decisions and leverage the best tools for your projects."
  },
  {
    "title": "What is a Legacy Server?",
    "plaintext": "IntroductionCompanies like to ignore their reliance on legacy systems that power critical business applications. Behind the cutting-edge appearance of many businesses lies a patchwork of ageing infrastructure; servers that have not been updated in years and software that hasn't seen a patch since the era of dial-up internet.Anecdotally, many businesses continue to operate their vital functions on platforms like Windows Server 2003 or 2008. Microsoft has long since classified these operating systems as 'end of life' and no longer provides vendor support.Archaic systems like these not only host but run software that, in today's cybersecurity landscape, is equivalent to leaving the doors to your data wide open.Thankfully, with browser companies raising the bar on security standards and phasing out support for outdated security protocols like older versions of TLS, some of these risks are mitigated.Understanding legacy servers, their limitations, and their risks is critically important for businesses that run their own software systems. In this article, we'll focus on how running older servers and operating systems can negatively impact your business and the practical alternatives.Features and Important DetailsIn the simplest terms, a legacy server refers to an older generation server that continues to be functional but has since fallen behind in the race for technological innovation. Think of it as an aged workhorse that still performs its job but lacks the agility and efficiency of its younger counterparts.Legacy servers typically exhibit a set of common characteristics: * They usually run on outdated hardware or software, often incompatible with newer technologies. Slower and less efficient, this may lead to potential bottlenecks in your IT infrastructure. * Legacy servers often lack vendor support, meaning security patches, updates, and technical help might no longer be available. This lack of support can leave the system vulnerable to security threats and make it harder to resolve any issues. * These servers are limited in their scalability, which can impede the growth of your business as it struggles to accommodate increasing traffic or data needs.Despite these shortcomings, businesses may still be tied to a legacy server. One common situation is the need to support older software that isn't compatible with more modern servers. In such cases, replacing the server would also require replacing or updating the software, which can be expensive and time-consuming.Cost is another reason. Transitioning to a new server is not just about the cost of new hardware and software but also includes the cost of data migration, potential downtime, and training expenses to acquaint staff with the new system.Assessing the Pros and Cons of Legacy ServersUnderstanding the advantages and disadvantages of legacy servers is crucial for businesses aiming to ensure optimal performance, security, and adaptability.Advantages of Legacy Servers: * Familiarity: Legacy systems have been part of the business landscape for a long time, resulting in proficient employees and smoother operations. * Initial Cost Savings: Legacy servers eliminate the immediate costs of new hardware, software, and installation services. * Specialized Utility: Legacy systems can be crucial for businesses relying on software incompatible with modern technology or specific functionalities. They support older software and specialized functions that may not be readily available with modern servers. * Stability: Legacy servers have usually been tried and tested over years of use, which can translate into stable and predictable performance.Disadvantages of Legacy Servers: * Decreased Performance: Outdated technology leads to slower operations and reduced efficiency compared to modern servers, resulting in potential delays and bottlenecks. * Higher Maintenance and Operational Costs: Aging servers are prone to breakdowns, requiring more maintenance and power and increasing operational expenses. * Limited Vendor Support: Lack of ongoing vendor support means businesses are mostly on their own when issues arise. Lacking the appropriate patches, security updates, and expert assistance can lead to extended downtime and loss of productivity. * Security Vulnerabilities: Without regular updates, legacy servers are susceptible to security breaches, making them attractive targets for hackers and putting sensitive business data at risk. * Limited Scalability and Compatibility: Legacy servers may struggle to accommodate business growth and be incompatible with newer technologies, hindering innovation and adaptability. * Business Continuity Risks: In a critical failure, finding replacement parts for older servers can be difficult and time-consuming, posing a significant risk to business continuity.Comparison With Modern AlternativesTo fully appreciate the implications of using legacy servers, it's crucial to contrast them with their modern counterparts. This comparison will primarily cover hardware capabilities, software compatibility, scalability, vendor support, and the potential to integrate with current technological trends like cloud computing. * Hardware Capabilities: Modern servers are equipped with the latest in computing hardware, offering higher processing power, larger memory capacity, and better energy efficiency. This results in faster operations, improved multitasking, and reduced operational costs compared to legacy servers. * Software Compatibility: Unlike legacy servers, modern servers are designed to be compatible with the latest software solutions. This allows businesses to leverage state-of-the-art tools and applications to streamline operations, enhance productivity, and stay competitive. * Scalability: One of the greatest advantages of modern servers is their scalability. They can be quickly and easily expanded to accommodate growing business needs, unlike legacy servers which often struggle to scale without extensive hardware upgrades or replacements. * Vendor Support: Modern servers come with robust vendor support, including regular security updates and patches, access to technical assistance, and warranties. This is in stark contrast to legacy servers, which are often unsupported and more challenging to maintain. * Integration with Modern Tech Trends: Perhaps the most significant difference is the potential of modern servers to integrate with current technological trends like cloud computing. Unlike legacy servers, modern servers can seamlessly interface with cloud platforms, enhancing data accessibility, storage capacity, and business continuity plans.Transitioning from a legacy server to a modern one is a strategic decision that requires careful consideration. In the following section, we guide you through the decision-making process.Advice for Decision Making 1. Conduct a Needs Assessment: Identify your current and future business needs. Consider how you handle data, the software applications you rely on, and any plans for adopting new technologies like cloud computing. 2. Perform a Security Risk Assessment: Understand the potential security threats of retaining a legacy server. Evaluate your system's vulnerability to cyber threats and the potential impact of a data breach. 3. Complete a Cost-Benefit Analysis: Look beyond the immediate costs and consider the long-term implications. Account for hidden costs like maintenance, decreased efficiency, and potential loss of revenue due to downtime. Weigh these against the initial investment and long-term benefits of a modern server. 4. Consider Compatibility: Check if your essential software applications are compatible with modern servers. If not, factor in the cost and effort of upgrading or replacing them. 5. Plan for the Future: Consider your business goals, such as expanding or embracing new technologies. A modern server with scalability and compatibility with current tech trends may be better suited to support your growth. 6. Seek Expert Advice: Don't hesitate to consult with IT professionals who can provide valuable insights and personalized recommendations. They can help you understand your situation better and guide you through the server migration process if that's the best path for your business.ConclusionThis exploration of legacy servers highlights the critical significance of understanding their role in today's business landscape. Carefully consider retaining an aging infrastructure or transitioning to newer technologies, as these decisions can shape business operations and financial outcomes.Although legacy servers may still serve specific niche requirements or provide a sense of familiarity, it's essential to acknowledge the rapid evolution of the technological landscape. Modern businesses must proactively assess their unique server needs, considering the advancements in server technologies and robust security protocols.By staying informed and embracing the opportunities presented by modern server solutions, businesses can position themselves for enhanced performance, improved security, and increased adaptability to meet the ever-changing demands of the digital age."
  },
  {
    "title": "Strapi vs. Ghost: Choosing the Ideal CMS for Your Website",
    "plaintext": "Most people who work in tech, online marketing, or have some contact with running a website have crossed paths with WordPress. Everyone seems to have their own personal gripe. So, when the new wave of headless Content Management Systems (CMSs) hit the market, it created a ton of hype.Most headless CMSs provide a significantly better and more flexible user experience. The problem is they're built for enterprise clients and cost an arm and a leg.This is where Strapi and Ghost enter the conversation.These two are the 'best' self-hosted content management systems available right now (note: this is obviously subjective). You can download these CMSs and install them on a server yourself, bypassing the bandwidth and per-user payment pressure that all the other headless CMSs are known for.Both CMSs go one step further since they're open-source. If you're comfortable playing around with JavaScrip (both Ghost and Strapi are built on Node) , you can change how they works, which is usually a privilege you pay delay for with other headless CMSs.Ghost is the CMS that was used to write this article! It's packed with a bunch of really nice SEO features.Strapi, on the other hand, is our go-to CMS when we're building an application or non-standard website for a client that needs a CMS that can be customized.There's more to say on both of these points. In this article, I'll compare features, advantages, and recommended use cases for the two CMSs.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitStrapi OverviewHere's a quick overview of why Strapi is unique and how it works.Strapi is a Node.js-based headless CMS that offers a highly customizable and scalable platform. Its API-first approach decouples the content management system from the presentation layer, enabling seamless content delivery across various devices and empowering businesses to provide omnichannel digital experiences.Unlike Ghost, there's no option to run Strapi by itself. It needs to be integrated with a frontend framework like Next.js, Nuxt, Vue, React, etc. That process isn't something you're able to tackle without some technical knowledge.Key Strapi Features:API-first approach: Strapi's API-first approach enables complete separation between the backend and the presentation layer. The front end can be customized using any tech stack that consumes data from Strapi's API. This approach simplifies integration with third-party services, facilitating seamless connection and interaction with external APIs, services, or databases.Flexible content modeling: Strapi provides a flexible content modeling system, allowing businesses to define and structure their content according to specific requirements. Complex content types, such as articles, products, events or other structured data, can be created and managed. Ensure data integrity and accuracy with custom validations.Role-based access control (RBAC): Strapi's RBAC feature allows administrators to create custom roles with specific permissions at different levels. This enhanced security and control over sensitive operations within the CMS ensures that only authorized users can perform content-related tasks, preserving data integrity, confidentiality, and privacy.Authentication and user management: Strapi supports various authentication methods, including traditional username/password authentication and JSON Web Tokens (JWT) for secure and stateless authentication processes. Integration with third-party authentication providers like OAuth and Google Sign-In streamlines user authentication. Strapi's built-in user management capabilities enable efficient administration of user-profiles and permissions within the CMS.Customization and extensibility: Strapi enables the creation of custom plugins to extend the platform's functionality, catering to specific business needs. A vibrant community has contributed a wide range of pre-built plugins, covering various aspects of CMS customization and integration. Strapi's API-first approach also supports seamless integration with third-party tools and services, facilitating integration with existing infrastructure and software applications.Ghost OverviewGhost is an open-source publishing platform designed specifically for bloggers and content creators. They specifically went after WordPress and targeted non-enterprise clients.Ghost's unique selling proposition is that it provides integrated features for running a membership site. This is something WordPress struggles with. If you've ever used Memberspress, you'll understand.However, Ghost has more to offer than that. I would argue it's the best option for spinning up a website if you're not technical and don't want to use WordPress. You can get started quickly, the UI is excellent, and it's packed with great SEO features. If you're a developer and an open-source solution for blogging, then Ghost is a the perfect option.Here's a breakdown of its features.Key Ghost Features:Markdown editor: Ghost utilizes a markdown editor, simplifying content creation and formatting using simple syntax without complex HTML coding. It offers a lightweight and intuitive way to add headings, lists, links, images, and more.Customization and themes: Ghost offers a diverse collection of themes and templates, providing users with options for visual customization. Themes vary in layout, typography, color schemes, and overall presentation. Users can easily switch between themes, previewing the effects on their website's appearance before settling on the perfect fit.Minimalist writing environment: Ghost emphasizes a clean and distraction-free writing environment for content creators. Its minimalist interface removes unnecessary menus, buttons, and widgets, allowing writers to focus solely on creating high-quality content.In-built SEO features: Ghost incorporates built-in SEO features to enhance search engine visibility. Users can customize meta tags, generate XML sitemaps, and optimize content for better search engine rankings. These features improve organic traffic and content discoverability.Integration and extension: Ghost offers a robust integration library, allowing users to connect their Ghost site with various third-party services and tools. It supports integrations with popular platforms like Zapier, Google Analytics, Mailchimp, and more. These integrations enable seamless workflows, such as automating email campaigns, tracking website analytics, and connecting with other productivity tools.Membership and subscription support: Ghost provides native support for membership and subscription-based content monetization. Users can create different membership tiers, offer premium content, and manage subscriber payments securely. This feature is beneficial for content creators who generate revenue from their work.Multi-user collaboration: Ghost supports multi-user collaboration, enabling teams to cooperate on content creation and management. It allows users to assign different roles and permissions to team members, ensuring controlled access to specific sections of the CMS. This collaborative environment promotes efficient content creation and streamlines editorial workflows.Content scheduling and publishing: Ghost includes a content scheduling feature that allows users to plan and automate the publication of their posts. With the ability to set specific dates and times for publishing, users can ensure a consistent content release schedule and engage their audience at optimal times.Analytics and insights: Ghost offers built-in analytics that provides valuable insights into website performance, audience engagement, and content metrics. Users can track key metrics like page views, traffic sources, and social media shares, helping them understand their audience and refine their content strategy accordingly.Developer-friendly: Ghost caters to non-technical users and provides a developer-friendly environment. It offers a robust API and extensive documentation, allowing developers to extend the platform's functionality and build custom integrations.Strapi vs. Ghost: A Detailed ComparisonHere we'll consider the essential factors to help you choose the CMS that aligns with your needs.Content Management ApproachStrapi takes an API-first approach, providing developers with a highly flexible and customizable content management system. By decoupling the backend from the presentation layer, Strapi enables users to define their data structures, relationships, and validations. Businesses can create complex content types and build applications beyond content-driven websites.On the other hand, Ghost follows an integrated approach, providing a streamlined experience for bloggers and content creators. It delivers a minimalist writing environment that eliminates distractions and enables authors to concentrate solely on creating high-quality content. While Ghost can handle other types of content, its core strength lies in its simplicity and effectiveness as a blogging platform.Pricing and PlansOne of the reasons Ghost and Strapi are two of our preferred headless CMS providers is that they're both open source. You can spin up a new instance on a $5/month DigitalOcean droplet without being held to ransom by the (sometimes outrageous) pricing mechanisms of headless CMSs. If you're uncomfortable running a virtual private server or working with the command line, both providers have cloud-based subscriptions where their teams will manage the infrastructure. Strapi charges $99/month*, which reflects that they're targeting established businesses. Ghost is focused more on the blogging community as a direct alternative to WordPress, and their entry plan starts at $11/month*.*Prices correct as at June 2023Customization and ExtensibilityBoth Strapi and Ghost provide distinct options for customization and extensibility.Ghost offers a wide array of themes and templates to customize the visual appearance of your website. The Ghost marketplace features a diverse selection of free and paid themes, catering to various styles and preferences. Users can easily switch between themes and experiment with designs without extensive technical knowledge. In addition, Ghost allows customization through code modification and theme-specific settings, providing flexibility to match your branding and user experience.Strapi delivers customization and extensibility through its powerful plugin system. With Strapi, developers can create custom plugins to extend the core functionality based on their specific requirements. This capability allows businesses to tailor their content management system precisely to their needs and workflows. Additionally, Strapi benefits from a development community that has contributed numerous plugins, covering various aspects of CMS customization and integration. This extensibility makes Strapi a highly adaptable CMS capable of supporting multiple applications and workflows.Frequently Asked QuestionsQ: Can I use Strapi or Ghost for my blog?A: Yes, both Strapi and Ghost are suitable for blogs. Ghost specializes in blogging and offers a streamlined writing experience, while Strapi provides more flexibility and customization options for content management. Choose Ghost if you prioritize a dedicated blogging platform and Strapi if you require one that caters to more complex content management and omnichannel experiences.Q: Can I migrate my content from WordPress to Ghost?A: You can easily migrate your content from WordPress to Ghost. Ghost provides an official WordPress plugin that allows you to export your WordPress content and import it into Ghost. This migration process ensures a smooth transition while preserving your existing content, making switching to Ghost as your preferred publishing platform easier.Q: Do Strapi and Ghost have built-in SEO features?A: Strapi and Ghost each offer built-in SEO features to enhance search engine visibility. Strapi allows you to define custom meta tags, generate automatic XML sitemaps, and set canonical URLs for optimized content. Similarly, Ghost provides similar features, enabling customization of meta tags, sitemap generation, and content optimization for improved search engine rankings. Leveraging these built-in SEO capabilities can help enhance organic traffic and improve the discoverability of your website.Make your choice based on your business caseStrapi and Ghost are robust CMS solutions that cater to different use cases and user preferences. Strapi's strength lies in its flexibility, scalability, and extensive customization options, making it an excellent choice for businesses that require a highly tailored API-first CMS. On the other hand, Ghost provides a user-friendly and streamlined experience specifically for bloggers and content creators, with features like the markdown editor, minimalist writing environment, and built-in SEO.When choosing between Strapi and Ghost, consider your specific requirements, technical expertise, and the nature of your content. Evaluate whether you need a highly customizable API-driven CMS (Strapi) or a user-friendly publishing platform focused on blogging and content creation (Ghost). Both options offer unique features that can enhance your content management and publishing experience."
  },
  {
    "title": "Headless APIs: Empowering Modern App Development",
    "plaintext": "Headless APIs have emerged as a powerful tool for developers, enabling them to access back-end services and resources without predefined user interface components.What is a Headless API?A headless API is an Application Programming Interface that allows developers to interact with an application's back-end services independently of any predefined user interface. Headless APIs promote flexibility and innovation by decoupling these components, unlike traditional architectures, which tightly couple the front and back ends. Developers can leverage various front-end frameworks and back-end technologies to create tailored user experiences across platforms.Driving Innovation and Flexibility in Application DevelopmentFlexibility and Independence in Front-end Development: Headless APIs allow businesses to choose suitable technologies for front-end development, resulting in highly customizable user interfaces that align perfectly with branding and functionality goals.Improved Performance and Scalability: Headless APIs enhance application performance, response times, and scalability by separating UI rendering from back-end services. Techniques like caching and optimized data transfer formats further improve efficiency and reduce server load.Seamless Integration with Multiple Platforms and Devices: Headless APIs enable consistent data access and functionality across various platforms, including web browsers, mobile apps, smart TVs, wearables, and IoT devices. This versatility allows businesses to reach users on their preferred channels without duplicating efforts.Faster Development Time: The decoupled nature of headless APIs facilitates faster time-to-market by reusing back-end logic across multiple front-end applications, streamlining development efforts and empowering businesses to focus on customizing front-end experiences.Future-Proof Adaptability: Headless APIs enable businesses to adapt and evolve their user interfaces based on changing user expectations and behaviors. This adaptability ensures that applications remain relevant in a rapidly changing digital landscape.Streamlined Maintenance and Updates: Decoupling front-end and back-end components simplifies maintenance and updates. Front-end and back-end teams can work concurrently without disrupting each other.Addressing Challenges in Implementing Headless APIsIncreased Complexity: Implementing a headless architecture introduces additional complexity compared to traditional monolithic systems. Developers must handle multiple front-end technologies and API integrations and ensure seamless communication between front-end and back-end components.Steep Learning Curve: Headless APIs require developers to understand APIs and back-end systems. This learning curve can be challenging, particularly for front-end developers with limited experience in back-end technologies.Resource Intensive Back-end: Headless APIs may require additional back-end resources compared to traditional architectures. Since the front-end relies heavily on API calls, the back-end must handle a potentially higher volume of requests. The result? Increased server costs or more robust infrastructure to ensure optimal performance.Potential Performance Bottlenecks: Headless APIs may introduce performance bottlenecks. The frequent API calls between the front-end and back-end can introduce latency, especially when the network connection is slow or unstable. Careful optimization and caching strategies are necessary to mitigate these performance challenges.Cross-team Coordination: Headless architectures require close collaboration and coordination between front-end and back-end development teams. Ensuring effective communication and alignment between teams becomes crucial to avoid misinterpretations, discrepancies, or conflicting decisions that can hinder project progress.Specialized Skill Sets: Developing and maintaining headless APIs may require specialized skill sets, particularly API design, integration, and management. It's essential to have experienced developers who understand the intricacies of building and maintaining decoupled architectures to ensure successful implementation.Practical Use Cases for Leveraging Headless APIsE-commerce PlatformsHeadless APIs empower e-commerce platforms to create highly customizable front-end experiences while relying on a robust back-end API for managing product data, inventory, and payment transactions.Single-Page Applications (SPAs) and Dynamic Web ExperiencesHeadless APIs are crucial in developing SPAs, leveraging real-time data fetching to deliver seamless user interactions without page reloads.Content Management Systems (CMS)Headless CMSs utilize APIs to manage and deliver content across various channels, ensuring consistent user experiences on websites, mobile apps, digital signage, and voice assistants.Mobile Application Back-endsHeadless APIs enable the creation of reusable back-end services accessible by mobile apps developed in different programming languages or frameworks, ensuring consistent data access and functionality.IoT (Internet of Things) ApplicationsHeadless APIs facilitate communication between connected devices and back-end systems, enabling control, data exchange, and interaction with services in IoT applications.Implementing Headless APIsOverall System ArchitectureMicroservices and serverless computing architectures are beneficial for building scalable and flexible headless APIs. Emphasizing well-defined API contracts ensures clarity and alignment between front-end and back-end teams.Technologies Commonly Used in Headless APIs * GraphQL - provides flexible and efficient querying and data manipulation * RESTful APIs - standardizes API structure and interactions * JSON - a simple and well-supported data exchange formatAPI Design Principles for Headless APIsDesigning for scalability, implementing versioning, providing comprehensive documentation, and considering performance optimization techniques are essential for building effective and maintainable headless APIs.Frequently Asked QuestionsQ: What are the benefits of using a headless API?A: Headless APIs offer flexibility in front-end development, code reusability, scalability, and seamless integration with multiple platforms, among other benefits.Q: What are some best practices for building and consuming headless APIs?A: Best practices include designing for scalability, implementing versioning, providing clear documentation, and employing security measures like authentication, authorization, secure communication protocols, and input validation.Q: What are the security considerations for headless APIs?A: Security considerations include implementing robust authentication and authorization mechanisms, secure communication protocols, and input validation to prevent common security vulnerabilities.Headless APIs Enable Business Growth and InnovationHeadless APIs provide the flexibility, scalability, and innovation required to deliver personalized and seamless user experiences across various platforms and devices. While they introduce complexity, the advantages - customization, improved performance, and future-proof adaptability - make headless APIs a compelling solution for modern application development. Adopting a headless architecture and adhering to best practices can unlock new opportunities for growth and user engagement in the digital landscape."
  },
  {
    "title": "The Roles of UI Designers and Front-end Developers in Digital Success",
    "plaintext": "Front-end developers and UI designers tend to work closely together, and their responsibilities sometimes overlap. They're both involved in building websites and applications.We've heard the terms mixed up plenty of times and want to distinguish between the two roles clearly.What is UI Design?UI design focuses on creating user-friendly and visually appealing digital spaces. Like interior decorators who create a welcoming environment, UI designers aim to craft intuitive and aesthetically pleasing digital experiences. Take the example of Spotify, the renowned music streaming service. Its clean, sleek design, easy-to-find features, and attractive color scheme owe their appeal to skilled UI designers.What is Front-end Development?Front-end development forms the backbone that brings UI designs to life. It involves transforming a designer's vision into a functional structure. Front-end developers employ tools like HTML (for webpage structure), CSS (for design and style), and JavaScript (for interactivity). The dynamic features on the Google homepage, including interactive doodles and instant search suggestions, exemplify the work of proficient front-end developers.Differences Between UI Designers and Front-end DevelopersWhile UI designers and front-end developers collaborate closely, their primary focuses within a project differ. UI designers determine the placement and aesthetics of features, such as buttons and visual elements. On the other hand, front-end developers ensure that these elements function as intended, enabling seamless user interactions. Their distinct roles converge harmoniously, resembling a well-coordinated team that strives to ensure customer satisfaction.The Importance of Both Roles for BusinessesUI designers and front-end developers enhance customer satisfaction and reinforce a brand's image. A visually appealing and user-friendly digital store is the result of effective UI design. Simultaneously, the seamless functioning of the store relies on the expertise of front-end developers. Notably, companies like Netflix attribute their high user retention rates to the successful fusion of engaging design and intuitive user experiences, underscoring the significance of both roles.Invest in Skilled UI Designers and Front-end DevelopersIn today's ever-evolving digital marketplace, UI designers and front-end developers are indispensable assets for successful online ventures. Through their collaborative efforts, they shape the digital customer experience. Therefore, investing in skilled UI designers and front-end developers becomes imperative for businesses seeking to remain competitive. A well-designed, user-friendly, and seamlessly functioning digital store fosters customer loyalty and drives repeat visits."
  },
  {
    "title": "Choosing Python for eCommerce!?",
    "plaintext": "In today's dynamic eCommerce landscape, choosing the right technology to power your online business is crucial. Python, renowned for its adaptability and scalability, has emerged as a formidable player in the eCommerce realm. This article aims to provide a comprehensive and trustworthy overview of Python's role in eCommerce, shedding light on its features, advantages, potential challenges, and comparisons with other popular solutions. By delving into the details, we empower business owners to make informed decisions aligned with their objectives and market expectations.A Brief OverviewPython, a versatile language well-known in various software development domains, has seen a surprising rise in eCommerce. Despite the dominance of platforms like Shopify (built on Ruby/Liquid) and WordPress/WooCommerce (powered by PHP), Python's unique capabilities and evolving frameworks have become increasingly popular. Among the notable frameworks, Django and Flask have become the go-to for Python-based eCommerce development. Additionally, the Pyramid framework is recognized for its power and flexibility, further expanding the possibilities for eCommerce solutions.Trust in Python eCommercePython has high adoption among significant tech giants. Industry leaders such as Google, Facebook, Amazon, and Stripe rely on Python for various back-end functions, including aspects of eCommerce. Platforms like Instagram and Spotify, which handle high traffic loads, rely upon Python's robustness and scalability. Python is used to support mission-critical eCommerce operations.The Emergence of Python in eCommerceWhile Python has existed since the early '90s, its prominence in eCommerce is more recent. As businesses increasingly demand scalable, secure, and customizable eCommerce solutions, Python has risen to the challenge. The advent of frameworks like Django Oscar and Saleor has further propelled Python's usage, enabling businesses to harness its strengths in building feature-rich eCommerce platforms. With the inclusion of the Pyramid framework, Python's ecosystem becomes even more diverse, catering to a wide range of eCommerce requirements.💡If you're looking for technologies that can help fix your store's issues, you're not alone. We've prepared a case study below of businesses in your position.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitPython eCommerce Market ShareWhile precise market share data for Python in eCommerce is elusive, the language's overall usage is noteworthy. From recent available data, over 110,000 live websites leverage Python. Many of these are eCommerce platforms, indicating Python's growing presence and challenging the dominance of traditional providers such as Shopify and WooCommerce.What Sets Python eCommerce Apart?Extensive Libraries and Frameworks: A comprehensive ecosystem of Python libraries and frameworks empowers developers in the eCommerce domain. Libraries like TensorFlow for AI and NumPy for numerical computations enable the implementation of complex functionalities without starting from scratch. Alongside these libraries, Django, Flask, and Pyramid provide potent frameworks for efficient web development tailored to eCommerce requirements. These pre-existing modules and frameworks expedite development, reduce costs, and ensure a seamless, high-performing user experience.Effective Database Management: Efficient management of vast amounts of data is crucial for any eCommerce platform. Python simplifies database management, enabling personalized and user-friendly experiences that enhance customer engagement and improve conversion rates. With Python's capabilities and frameworks like Django and Pyramid, handling customer profiles, product catalogs, and transaction records becomes streamlined and efficient.Built-in Shipping Integration: While Python doesn't inherently offer built-in shipping integration, specific Python-based eCommerce platforms bridge this gap. For instance, Saleor, constructed with Python and Django, provides an impressive suite of built-in shipping integrations, seamlessly synchronizing with various carriers. Such platforms ultimately contribute to a positive eCommerce experience by ensuring operational efficiency and enhancing customer satisfaction.User-friendly Interfaces: Python's prowess extends beyond back-end development. By leveraging specific libraries and frameworks, Python enables the creation of sleek, user-friendly interfaces that enrich the customer's shopping journey. When combined with powerful frameworks like Django, Flask, and Pyramid, Python allows developers to craft highly intuitive interfaces that reduce cart abandonment rates and drive overall sales.Potential ChallengesMemory ManagementAs a high-level language, Python may consume more memory than lower-level languages. When handling large transaction volumes, this can challenge eCommerce platforms. Adopting efficient coding practices focused on memory management and leveraging suitable cloud hosting solutions can mitigate this impact.Mastery of Python's Feature-rich EnvironmentPython's \"batteries-included\" philosophy means it offers many features and functionalities. While this is undoubtedly advantageous, developers must fully understand and effectively utilize these features. Teams that must become more familiar with the language may find this challenging. Adequate training and resources can help overcome this challenge and harness the full potential of Python.Python eCommerce vs. Other LanguagesWhen considering adopting Python for eCommerce, it's crucial to consider its advantages and compare them with other popular languages and platforms.Python vs. PHP: PHP-based platforms like Magento and WooCommerce have a well-established presence in the eCommerce market, offering plug-and-play convenience and rich ecosystems of plugins and themes. Python-based solutions may require more initial setup and ongoing maintenance, but they provide streamlined workflows, cleaner code, and extensive customization capabilities. Python and PHP can scale effectively, and their cost-effectiveness depends on the project's scale, complexity, and the development team's expertise.Python vs. Liquid: Liquid, the in-house language of Shopify, provides a user-friendly experience for non-technical users. While known for its simplicity among developers, Python may require more technical setup and maintenance. However, Python's vast libraries and frameworks allow infinite customization, offering more control over functionality and appearance. Shopify's scalability suits small to mid-sized businesses, while Python caters to more extensive applications, especially with frameworks like Django and Pyramid. Regarding cost-effectiveness, Shopify has clear-cut pricing with monthly fees. At the same time, Python's open-source nature may prove more cost-effective in the long run, especially for large-scale, custom applications.Factors to Consider When Choosing Python for Your eCommerce VentureChoosing the right technology for your eCommerce platform is a critical decision that will impact your business in the long term. When considering Python, assessing your specific business needs, available resources, and growth plans is essential. Python excels when a high degree of customization and control over your site is required, particularly for businesses anticipating rapid scaling. However, suppose you're a small business owner seeking a quick, user-friendly solution or heavily invested in another ecosystem. In that case, alternative platforms like Shopify or WordPress/WooCommerce are more suitable.Python Could Be Your Key to eCommerce SuccessPython has emerged as a powerful and trustworthy tool in the ever-evolving eCommerce landscape, offering security, scalability, and flexibility. However, selecting the right technology requires aligning it with your business needs, available resources, and growth plans. Python's robust libraries and frameworks, including Django, Flask, and Pyramid, enable the creation of tailored eCommerce solutions. Businesses can make informed decisions and partner with the right technology to drive online success by understanding the advantages, potential challenges, and comparisons with other languages."
  },
  {
    "title": "Content Modeling: Optimizing Digital Content Management",
    "plaintext": "Content modeling is vital in efficiently organizing and structuring digital content within a content management system (CMS). It involves strategically defining content types, their attributes, and their relationships. Businesses can optimize how content is stored, managed, and presented to their audiences by creating a cohesive content structure. This discussion explores the significance of content modeling in e-commerce and its potential to streamline content management practices.Understanding Content ModelingContent modeling is a blueprint for systematically organizing digital content and fostering a consistent framework across websites or applications. It defines the organization of different pieces of content, the information they contain, and their interrelationships. This foundation enables businesses to establish uniformity, coherence, and seamless content presentation throughout their digital platforms.Implementing Content ModelingModern CMS platforms often provide built-in content modeling capabilities, empowering businesses to define custom content types that align with their specific needs. These types can encompass articles, products, events, portfolios, or other structured data relevant to the business. Furthermore, custom fields can capture diverse information within each content type, such as text, numbers, dates, images, and files. By leveraging these capabilities, businesses can create a well-structured and manageable content framework that enhances the presentation of their websites.Prominent CMS Platforms for Content ModelingSeveral noteworthy CMS platforms offer robust content modeling features.WordPress, a widely-used CMS, provides flexibility through custom post types, taxonomies, and fields. It offers plugins like Advanced Custom Fields and Toolset that elevate content modeling capabilities.Drupal, known for its flexibility, empowers users to define custom content types, fields, and relationships through its powerful entity system. Drupal's entity reference and taxonomy modules enhance content modeling options by establishing connections between different content types, creating custom vocabularies and classifying content through tags or categories.Contentful, a headless CMS designed explicitly for content modeling and delivery via APIs, offers a user-friendly interface for defining content types, fields, and relationships, simplifying the creation of complex content models.The Benefits of Content ModelingContent modeling offers a range of advantages for businesses seeking to optimize their content management practices and maximize the value of their digital assets. These benefits include: 1. Enhanced Customer Experience: Through content modeling, businesses establish a structured framework that improves content organization, making it easier for customers to navigate and comprehend the presented information. A consistent content structure fosters familiarity, reinforces brand identity, and positively impacts customer interactions. Additionally, content maintenance and updates become streamlined as creators adhere to predefined guidelines and standards, facilitating efficient modifications or additions. 2. Flexibility and Scalability: As customer needs evolve, businesses must be agile in adapting to dynamic market demands. Content modeling accommodates changing content requirements and evolving business needs. A well-designed content model allows for easy expansion, modification, and the introduction of new content types, attributes, or relationships without disrupting the overall content management system. This flexibility ensures businesses can scale their content efforts and stay current with emerging trends and technologies. 3. Content Reusability and Repurposing: With content modeling's modular and granular structure, businesses can identify and extract relevant content pieces for reuse. Businesses save time and effort by repurposing content created for one platform or channel, such as transforming articles into social media posts, email newsletters, or mobile app snippets. This approach promotes efficiency and widens the reach of valuable content.Best Practices for Effective Content ModelingA successful content modeling initiative must adhere to best practices that foster simplicity, flexibility, scalability, and collaboration. Here are essential considerations for effective content modeling: 1. Keeping content models simple and intuitive: Strive for simplicity and intuitiveness in content models to facilitate content creation, management, and usability. Avoid unnecessary complexity and aim for a model that aligns logically with your content goals and user needs. 2. Continuous improvement and refinement: Content modeling is an iterative process requiring constant improvement and refinement. Regularly evaluate the effectiveness of the content model, gather feedback from stakeholders, and identify areas for enhancement. This approach ensures the content structure remains optimized and aligned with evolving business needs. 3. Aligning with business objectives: Content models should align with business objectives to achieve desired outcomes. Collaborate with content teams to identify specific content attributes and relationships that contribute most effectively to business goals. Tailor the content model to deliver the desired results, such as driving conversions, improving user experience, or enhancing content discoverability. 4. Involving stakeholders and content creators: Effective content models involve stakeholders and content creators during the modeling process. Solicit input and feedback and encourage open communication and collaboration throughout the process to ensure that the content model reflects collective knowledge and requirements, leading to a more robust and user-centric content management system.Frequently Asked QuestionsQ: What is content modeling, and why is it necessary for my business? A: Content modeling involves structuring and organizing content within a content management system (CMS). It is necessary for businesses because it provides a consistent and standardized framework for organizing and managing content. This framework ensures a seamless user experience, improves content maintenance and updates, facilitates content reuse, and enables scalability for future content needs.Q: How does content modeling benefit my business?A: Content modeling offers several benefits to businesses. It improves organization and structure, enabling efficient content storage, retrieval, and presentation. It allows for content reuse and repurposing, facilitating multi-channel publishing and dynamic content delivery. Additionally, content modeling provides flexibility and scalability, allowing businesses to adapt to changing content needs and accommodate future enhancements and integrations.Q: Can I implement content modeling in my existing content management system (CMS)?A: Some CMSs offer built-in content modeling capabilities, allowing you to define custom content types, attributes, and relationships within the system. In a CMS that does not have native content modeling features, apply content modeling principles by leveraging custom fields, taxonomies, or plugins/extensions provided by the CMS or third-party tools.Q: What level of technical expertise is required to implement content modeling?A: Implementing content modeling requires technical expertise in understanding data structures and relationships. However, business owners and developers with basic technical knowledge can successfully implement content modeling with user-friendly CMS platforms and content modelling tools. Collaboration between business owners and developers is crucial to bridge the gap and ensure the content model aligns with business objectives and user needs.Advance Content Management Practices with Content Modeling StrategiesContent modeling empowers businesses to manage and present their digital content efficiently. By adopting a structured approach, enterprises can enhance content organization, improve customer experiences, facilitate content reuse, and accommodate future growth. Following best practices and involving stakeholders throughout the modeling process ensures the successful implementation of content modeling initiatives. With the appropriate knowledge and tools, businesses can harness the potential of content modeling, enhancing their content management capabilities and delivering exceptional user experiences."
  },
  {
    "title": "Atomic Web Design: A Quick Rundown",
    "plaintext": "Atomic web design is transforming the approach to website design. Its systematic approach and five-stage process enable the efficient, flexible, and scalable creation of web interfaces. As your website serves as the first point of contact for potential customers, it is crucial to reflect your brand, offer seamless navigation, and provide an exceptional user experience. Atomic web design helps achieve these goals by systematically developing and testing individual components, ensuring every element of your website functions flawlessly before integration.Understanding Atomic Web DesignAtomic web design is a \"bottom-up\" website or application construction approach. It begins with the most fundamental components, \"atoms\". These atoms are progressively combined to form larger, more complex structures. This methodology encourages the creation of consistent, reusable elements, which, when assembled, build complete web interfaces. Atomic web design streamlines the design and development stages by promoting reusability and modularity. Additionally, it simplifies website maintenance and updates, as changes made at the atomic level propagate seamlessly throughout the larger structures.Hierarchy of ComponentsIn atomic web design, we classify components into five levels: atoms, molecules, organisms, templates, and pages.Atoms are the most minute, indivisible components, such as buttons, input fields, or paragraphs. Molecules are groups of atoms functioning together as a unit, like a search form comprising a label, input field, and button. Organisms are more complex components composed of groups of molecules and atoms, such as a website header with a logo, primary navigation, search form, and social media icons. Templates provide the layout where these organisms, molecules, and atoms reside, illustrating their function and relationship within the page's structure. Finally, pages represent specific instances of templates, demonstrating the final user interface with actual content.Benefits of Atomic Web DesignAtomic web design offers several advantages for businesses: 1. Increased Efficiency: By employing predefined components, designers and developers can rapidly create website pages, similar to using a toolkit or building blocks. Once atoms, molecules, and organisms are defined, creating new web interfaces becomes faster and more efficient. 2. Reusability: Atomic design promotes the reuse of components. A constructed atom or molecule can be used in multiple contexts, saving time and effort in creating new pages and ensuring a consistent user experience throughout the website. 3. Consistency: Atomic web design provides an excellent approach to maintaining a consistent brand identity and user experience. By reusing atoms and molecules, you establish a unified look and feel across your entire web presence. 4. Maintainability: Atomic design simplifies website maintenance and updates. Changes made to an atom automatically propagate to all molecules, organisms, templates, and pages that incorporate it. This systematic propagation enables easy site-wide updates, ensuring consistency across your web presence.Drawbacks of Atomic Web DesignWhile atomic web design offers significant benefits, there are potential drawbacks: 1. Initial Setup Time: Establishing the basic atomic structure can be time-consuming. It requires careful planning and execution to define all the atoms, molecules, and organisms. However, the investment in upfront setup time pays off with increased efficiency in the long run. 2. Need for Disciplined Coding Practices: A disciplined approach to coding is necessary. Inconsistent or sloppy coding practices can lead to deviations from the original design, causing inconsistencies and unpredictability. 3. Potential Over-complication for Simple Projects: For smaller, more straightforward web projects, the rigorous structure of atomic web design may be excessive. In such cases, it is crucial to balance granularity and practicality, adapting the methodology to suit the specific project's needs.Comparison with Other Design MethodologiesAtomic web design differentiates itself from traditional monolithic approaches by focusing on component-based development. Methodologies like Object-Oriented UX and Modular Design share similarities with atomic web design, though they differ in their specific methods and emphasis on component reusability and hierarchy. Evaluating the strengths and weaknesses of each methodology is essential to selecting the most suitable approach for your business.Critical Considerations Before Adopting Atomic Web Design 1. Embrace the Value of Reusability and Consistency: Recognize the importance of breaking components down to their simplest forms and maintaining a style guide or pattern library to ensure consistency throughout your web design process. 2. Choose the Right Tools: Select software and frameworks that align with atomic design principles, enabling component-based construction and effective management of your design system. Consider collaborative tools and version control capabilities for smoother workflows. 3. Handle Exceptions Effectively: Understand that unique design elements and exceptions may not fit neatly into the atomic design system. Develop strategies to manage these exceptions while maintaining the integrity of your design, such as creating unique components or modifying existing ones. 4. Strike a Balance in Granularity: While breaking components into atoms is fundamental, avoid creating an overly complicated system. Find a balance where parts are only as small as needed, ensuring a manageable and efficient design system. 5. Integrate with Existing Workflows: Atomic design principles can complement and enhance existing workflows rather than replace them entirely. Integrate atomic web design into your current processes to maximize benefits while minimizing disruption.Atomic Web Design Helps You Build a Strong Online PresenceConsidering the impact of your website on your business's success, it's crucial to adopt an efficient, consistent, and scalable design approach. Atomic web design offers a structured and systematic methodology that helps streamline the website creation process, enhance reusability, and maintain a cohesive user experience. By investing in upfront planning and leveraging atomic design principles, your business can establish a robust online presence that effectively represents your brand, engages visitors, and drives conversions."
  },
  {
    "title": "Comparing Headless CMS, Traditional CMS, Hybrid CMS, and Static Site Generators for Business Websites",
    "plaintext": "Choosing the right content management system (CMS) is crucial for businesses looking to manage and deliver content online effectively. In this article, we will explore the differences between headless CMS, traditional CMS, hybrid CMS, and static site generators, helping you make an informed decision based on your specific business needs.Headless CMS: Content Flexibility for the Full Omnichannel ExperienceHeadless CMS has gained popularity due to its ability to solve the limitations of traditional CMS. In a traditional CMS, content creation, management, and presentation occur within the same system, primarily designed for a single platform, like a website. However, a headless CMS separates content management from the content display. The API serves content as raw data to multiple destinations, including websites, mobile apps, and IoT devices. This flexibility allows businesses to reach their audience across various platforms and devices.Spotify provides a seamless and personalized music experience across multiple platforms, including web, mobile, smart speakers, and smart TVs. A headless CMS allows Spotify to manage and deliver content efficiently, tailoring the user experience for each platform.Nike uses a headless CMS to power its digital presence across websites, mobile apps, and in-store digital displays. With the flexibility of a headless CMS, Nike can manage and deliver content to different channels while maintaining a consistent brand experience.Traditional CMS: All-in-One ConvenienceTraditional CMS, built on a monolithic architecture, integrates content creation, management, and presentation within a single package. With predefined themes and layouts, it offers an intuitive interface for non-technical users to write, edit, and organize content while controlling its appearance on a website. While traditional CMS excels in website management, it may not perform as well in personalizing user experiences and delivering content to non-web platforms.WordPress is a widely used traditional CMS that powers over 40% of websites on the internet. Businesses of all sizes, from individual blogs to large e-commerce sites, rely on WordPress for its user-friendly interface, extensive plugin ecosystem, and customizable themes. With WordPress, businesses can create, manage, and present content seamlessly, making it a popular choice for content-rich websites.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitHybrid CMS: Bridging the GapHybrid CMS combines the strengths of traditional and headless CMS approaches, offering a middle ground for content management and delivery. It allows for seamless communication between the back-end and front-end while providing flexibility in adapting to various platforms.Like traditional CMS, Hybrid CMS provides an integrated content creation, management, and real-time editing solution, making it user-friendly and efficient for non-technical users to handle website content.Where a headless CMS offers complete control over website design, there may be limitations in making significant design changes in a hybrid CMS.While Hybrid CMS supports multi-channel content delivery to a certain extent, it may not be as robust as a pure headless CMS, potentially lacking the seamless integration and scalability needed for delivering content to a wide range of platforms beyond traditional websites.Static Site Generators: Fast and Secure Content PublishingStatic site generators, such as Jekyll, Gatsby, or Hugo, offer an alternative approach to CMS. They generate static HTML files during the build process, eliminating the need for database queries and dynamic rendering. This results in faster page loading times, enhanced security, and simplified hosting. Static site generators may only suit some business requirements, excelling in scenarios where content updates are infrequent and sites focus on content consumption rather than complex interactive functionality.Choosing the Right CMS for Your BusinessTechnical CapacityTraditional CMS platforms are generally user-friendly, while headless CMS and static site generators require advanced technical knowledge.A skilled development team will want complete control over the front-end implementation. A headless CMS empowers developers to leverage modern frameworks and technologies to build custom front-end applications. It provides the freedom to design and develop the user interface independently of the content management system.Non-technical users or content editors who prefer a user-friendly interface for content creation and management will find a more intuitive and familiar environment in a traditional or hybrid CMS.Static site generators often require technical knowledge or familiarity with command-line tools for content authors and editors. The lack of a user-friendly interface for content management can make it challenging for non-technical team members to contribute and update content across multiple channels.Multi-platform PublishingIf you need to deliver content across multiple platforms, headless CMS, hybrid CMS, or static site generators are better suited as they offer flexibility in content delivery beyond websites.A headless CMS offers the best omnichannel experience. It allows centralized content management and structure while utilizing APIs to push content to various front-end applications.Hybrid CMS provide a certain level of omnichannel support. The predefined structure of a hybrid CMS may limit the flexibility and adaptability needed to accommodate the unique requirements of each channel.Limitations regarding the technologies, frameworks, and presentation layer capabilities can restrict the ability to create platform-specific experiences and optimize content for different media.Hybrid CMS platforms often provide built-in integrations and modules for specific channels, such as e-commerce or marketing automation. While these integrations can be convenient, they may only cover some platforms and technologies required for a comprehensive omnichannel experience.Static site generators generate HTML files that can be delivered quickly to various channels, ensuring scalability, security, and a seamless user experience. Serving static content, they are less well suited to sites providing real-time or frequently changing content and are not inherently capable of dynamic interactions or user-generated content.BudgetConsider your budgetary constraints. Traditional CMS platforms often have lower initial development costs due to pre-designed themes and built-in functionalities. However, headless CMS or hybrid CMS may provide better long-term value, notably if multi-platform content delivery generates additional revenue.Future Growth and Scaling PlansIf you anticipate significant growth and expansion of your digital presence, headless CMS, hybrid CMS, or static site generators offer more flexibility and scalability than traditional CMS.Balancing Flexibility, Scalability, and User ExperienceSelecting the suitable CMS is a crucial decision that impacts your business's online presence. Traditional CMS offers convenience and cost-effectiveness for straightforward website management. Headless CMS provides flexibility for multi-platform content delivery. Hybrid CMS is the halfway point between traditional and headless CMS. Static site generators offer simplicity and speed for content-focused websites. By understanding the differences and assessing your business needs, you can make an informed choice and establish a successful online presence."
  },
  {
    "title": "Choosing the Right CMS Architecture: Headless vs. Decoupled",
    "plaintext": "In CMS architecture, headless and decoupled are frequently used when discussing website architectures. However, they represent two distinct approaches to content management and delivery. This article will assess headless and decoupled CMS architectures, highlighting their similarities, differences, and fundamental business considerations.Understanding Headless ArchitectureHeadless architecture involves separating the front-end presentation layer from the back-end content management and delivery systems, allowing for independent development and maintenance of each component. Businesses can focus on content creation, and the content is delivered through APIs to the presentation layer, enabling seamless distribution across various channels and devices, such as websites, mobile apps, smart devices, and IoT devices.Advantages of Headless ArchitectureHeadless architecture offers several advantages. Firstly, it provides flexibility and agility by enabling developers to choose the most appropriate technologies and frameworks for the front-end layer. This adaptability allows businesses to meet evolving user expectations and leverage emerging technologies.Additionally, a headless architecture ensures omnichannel support, allowing businesses to deliver content and user experiences consistently across various channels. Through APIs, content can be personalized and tailored to different platforms, providing relevant interactions based on user preferences and behaviors.The API-first approach of headless architecture simplifies integration with third-party services and expands application capabilities without significant architectural changes.The combination of the API-first approach, which prioritizes APIs as the primary interface, and the headless architecture, with its separation of content and presentation, promote content reusability, efficient content management, consistency in messaging and branding, and reduces redundancy.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitUnderstanding Decoupled ArchitectureIn decoupled architecture, the front-end and back-end are separated but remain interconnected. The front-end interacts with the back-end through defined interfaces or APIs, allowing for more coordinated development and flexibility. Content creators benefit from predefined templates or frameworks on the front-end, giving them more control over the layout and design without extensive coding knowledge.Decoupled architecture balances independence and collaboration, unlike headless architecture, where the front and back ends operate independently. While maintaining separation, the front-end and back-end teams work more closely together, shaping the front-end experience in collaboration with content creators. This collaborative approach allows content creators more control over the design and layout while leveraging the flexibility of a decoupled architecture.Decoupled architecture streamlines the content creation and editing process by offering a structured editing environment and predefined front-end tools. Content creators primarily interact with the back-end system for content management through an intuitive user interface or CMS, empowering them to create, modify, and organize content without directly manipulating front-end code.Decoupled architecture offers flexibility in the choice of front-end technologies and enhances performance and efficiency through optimized content rendering.Comparing Headless and Decoupled ArchitecturesTechnology Stack and ImplementationHeadless architecture provides complete freedom in selecting front-end technologies and frameworks, such as popular JavaScript frameworks or static site generators. Decoupled architecture, while still offering flexibility, is influenced by predefined templates and frameworks that structure the front-end presentation layer.Performance and User ExperienceHeadless architecture excels in performance optimization, delivering content efficiently across channels and devices. Caching mechanisms and content delivery networks (CDNs) improve response times, enhancing user experiences. Decoupled architecture, while focused on web-based channels, can achieve satisfactory performance and user experience with well-structured templates and efficient back-end systems.Team Collaboration and WorkflowHeadless architecture promotes independent workflows between front-end and back-end teams, eliminating conflicts that arise from simultaneous codebase modifications. Decoupled architecture maintains a closer relationship between front-end and back-end components, allowing content creators and front-end developers to collaborate closely in shaping the front-end experience.Choosing the Right ArchitectureTo select the most suitable architecture, consider project requirements, scalability, team expertise, and budget constraints. Headless architecture is ideal for projects focused on multiple channels, diverse content types, and advanced customization. Decoupled architecture is well-suited for projects primarily targeting web-based channels and more straightforward content structures.Frequently Asked Questions (FAQ)Q: Which architecture is better for SEO optimization?A: Both headless and decoupled architectures can achieve SEO optimization. However, headless architecture offers more flexibility in implementing SEO best practices, as developers have direct control over the front-end code and can optimize it for search engines.Q: Does headless architecture require advanced programming knowledge?A: Headless architecture does require developers with expertise in front-end technologies and APIs. However, by utilizing popular frameworks and tools, development teams can streamline the process and leverage existing knowledge.Q: Can a CMS with decoupled architecture be upgraded to headless architecture?A: It is possible to transition from a decoupled architecture to a headless one. The process typically involves separating the front-end presentation layer from the back-end system and implementing APIs for content delivery.Q: Which architecture suits businesses focused on multiple channels and devices?A: Headless architecture is well-suited for businesses needing to deliver content to multiple channels and devices. Its flexibility allows for seamless content delivery and tailored user experiences across various platforms, including websites, mobile apps, smart devices, and IoT devices.Q: Which architecture is more cost-effective?A: The cost-effectiveness of each architecture depends on project requirements, scalability needs, and team expertise. While headless architecture may require more upfront investment due to its flexibility, decoupled architecture can be more cost-effective for more straightforward projects with fewer channels.Finding the Perfect Fit for Your ProjectUnderstanding the differences between headless and decoupled CMS architectures is crucial for businesses seeking optimal content management and delivery solutions. Headless architecture offers flexibility, omnichannel support, and an API-first approach, while decoupled architecture provides simplicity, streamlined web-based functionality, and structured editing environments. Businesses can make informed decisions when selecting the most appropriate architecture by considering project requirements and organizational capabilities."
  },
  {
    "title": "JavaScript Frameworks: Enhance Your Web Development",
    "plaintext": "JavaScript has become synonymous with the internet, driving interactivity and dynamism in web browsers. While HTML and CSS play essential roles, JavaScript is the language that transforms static content into interactive and dynamic experiences. As JavaScript has evolved over the years since its creation in 1995, the development community has created frameworks to enhance and expedite JavaScript usage.JavaScript frameworks are collections of technologies and best practices bundled together to streamline web application development. They abstract away the complexities of handling Document Object Model (DOM) manipulation, managing application state, routing, and user interactions. By utilizing frameworks, developers can focus more on application logic and reduce the repetitive code they need to write.Advantages of Using JavaScript Front-end FrameworksBefore diving into specific frameworks, it's necessary to understand the reasons for using front-end frameworks. While only sometimes essential for smaller projects, utilities, or scripts, there are instances where working without a framework becomes impractical. Here are the key advantages of using front-end frameworks: 1. Enhanced Productivity: Front-end frameworks provide a structured and organized approach to web development, improving productivity. They offer pre-built components, templates, and libraries that eliminate the need to write repetitive code from scratch, allowing developers to focus on application logic. 2. Reusability and Modularity: Front-end frameworks promote a component-based architecture, encapsulating UI elements into reusable components. This modular approach enables code reusability, reducing duplicate code and facilitating easier application maintenance, testing, and sharing. 3. Efficient Rendering and Performance Optimization: Many frameworks leverage techniques such as virtual DOM diffing and intelligent updates to optimize rendering performance. By minimizing unnecessary re-renders and efficiently updating the DOM, these frameworks enhance the speed and responsiveness of web applications, providing a smoother user experience. 4. Robust State Management: Front-end frameworks often include state management solutions that simplify handling complex data flows and facilitate easier management of application state changes. 5. Large and Active Community: Popular front-end frameworks like React, Vue, and Angular have dedicated communities that provide ongoing support, frequent updates, and a wealth of learning resources. These communities also develop libraries, plugins, and tools that enhance the capabilities of their respective frameworks. 6. Rapid Prototyping and Iteration: Front-end frameworks offer rapid prototyping and iteration capabilities. With a vast collection of ready-to-use components and streamlined development workflows, frameworks significantly reduce application time-to-market.Popular JavaScript Front-end FrameworksThere is an abundance of JavaScript front-end frameworks available, but here we focus on some of the most popular:ReactReleased in 2013, React has gained popularity due to its simplicity, flexibility, and performance. It follows a component-based architecture and utilizes a virtual DOM for efficient rendering and updating of UI components. The main features of React include: * JSX: React's JSX syntax allows developers to write JavaScript code closely resembling HTML, making it easier to understand and maintain. * Virtual DOM: React uses a lightweight, in-memory representation of the browser DOM to perform efficient updates, improving rendering performance. * Reusable Components: React promotes the creation of reusable components, enhancing code reusability and modularity. * Unidirectional Data Flow: React follows a unidirectional data flow, allowing for a more controlled and manageable data flow, leading to better application stability and maintainability. * State Management: While React doesn't enforce a specific state management solution, it can handle complex application states combined with Redux or MobX libraries.The React ecosystem offers diverse libraries and tools that complement its core functionality, such as React Router for routing, Redux for state management, and Next.js for server-side rendering.AngularAngular, developed by Google, is a full-featured and opinionated framework that aims to provide an end-to-end solution for large-scale applications. Released in 2010, Angular has evolved significantly and is known for its comprehensive tooling, robustness, and extensive feature set. Core functionalities of Angular include: * Component-based Architecture: Angular follows a component-based architecture, allowing developers to build modular and reusable UI components. This approach promotes code organization, separation of concerns, and reusability. * Two-Way Data Binding: Angular's two-way data binding allows automatic data synchronization between the model and the view. Reducing the need for manual data manipulation, this simplifies the development process. * Dependency Injection: Dependency Injection (DI) is a core feature of Angular that helps manage the dependencies of different components. It allows for easier testing, modular development, and scalability. * Templating and Directives: Angular's templating engine and directives provide rich tools for creating dynamic and interactive user interfaces. Directives allow you to extend HTML with custom attributes and behaviors, enabling the creation of reusable UI components. * Forms Handling: Angular provides a comprehensive set of tools and APIs to manage form inputs, perform validation checks, and handle form submissions. * Code Splitting: Code splitting is an Angular feature that allows developers to split the application code into smaller chunks. Loading only the required code for each page or part improves performance. * RxJS: Angular extensively uses RxJS, a reactive programming library, to handle asynchronous operations and manage application state. * Testing Infrastructure: Angular's testing infrastructure facilitates unit, integration, and end-to-end testing. It provides tools and utilities to write tests for components, services, and other application modules, improving the reliability and quality of the codebase.Angular's ecosystem includes libraries like Angular Material for UI components, NgRx for state management, and Angular Universal for server-side rendering.VueVue, introduced in 2014, combines the best aspects of React and Angular, providing a progressive and incrementally adoptable framework. It offers an intuitive and flexible syntax that makes learning and integrating with existing projects easy. Key features of Vue include: * Reactive Data Binding: Vue leverages reactive data binding, allowing developers to define relationships between data and UI elements declaratively. * Component-Based Architecture: Vue promotes building applications as a composition of reusable components, facilitating code reusability and maintainability. * Directives: Vue provides built-in directives that extend HTML with additional functionalities, enabling powerful declarative rendering and interactivity. * Vue Router: The official routing library for Vue, Vue Router, offers a comprehensive routing solution for single-page applications. * Vuex: Vue's official state management library, Vuex, simplifies managing application state and enables centralized data management.Vue's ecosystem includes numerous plugins and libraries like Vuetify for material design components, Nuxt.js for server-side rendering, and Vue CLI for scaffolding projects.SvelteSvelte is a relatively new JavaScript framework that has gained popularity among developers for its unique approach to building user interfaces. It distinguishes itself from other frameworks by taking a different compilation approach that shifts a significant portion of the work from the browser runtime to the build-time. Principal aspects of Svelte include: 1. Simplicity and Minimalism: Svelte embraces a minimalist philosophy, aiming to keep things simple and focused. It offers a concise syntax that is easy to learn and understand, making it an attractive choice for developers, particularly those new to front-end development. 2. Efficiency and Performance: Svelte's compilation approach results in highly efficient and performant applications. During the build process, Svelte analyzes the code and generates optimized JavaScript with a smaller runtime footprint. The result is faster loading times and smoother user experiences. 3. Reactivity and Component-based Architecture: Like other modern frameworks, Svelte adopts a reactive programming model. It allows developers to define reactive data variables and automatically updates the DOM when these variables change. Svelte also encourages a component-based architecture. 4. Build-time Compilation: Unlike traditional frameworks that rely on a runtime library to interpret and render components, Svelte compiles each part into highly optimized JavaScript code during the build process. This compilation step eliminates the need for a dedicated runtime framework, resulting in smaller bundle sizes and improved performance. 5. Strong Developer Experience: Svelte has a dev server with hot module reloading, enabling instant updates during development. Svelte also includes a component-based architecture, easy-to-use state management, and extensive integration options with popular build tools.Frequently Asked QuestionsQ: What is the difference between a front-end framework and a library?A: While the terms \"framework\" and \"library\" are often used interchangeably, there is a fundamental difference between the two. A front-end framework provides a complete architecture and tools for building web applications. It usually includes features like routing, state management, and data binding. Frameworks have a more opinionated structure and require developers to follow specific conventions. On the other hand, a library is a collection of pre-written functions and utilities. Libraries offer specific functionalities, such as DOM manipulation or form validation, but they don't impose a particular structure or dictate the overall architecture of the application. Developers can choose which parts of a library to use and integrate them into their projects.Q: Do I need a JavaScript front-end framework for every web development project?A: No, not every project requires a front-end framework. Smaller projects, utilities, or scripts may find using a framework too complex, with significant overheads. However, front-end frameworks can significantly enhance productivity, maintainability, and user experience for larger and more complex web applications.Q: What are the main differences between React, Vue, and Angular?A: While all three frameworks serve the purpose of building dynamic and interactive web applications, they have some differences in terms of syntax, architecture, and ecosystem. React is known for its simplicity and flexibility, utilizing a virtual DOM for efficient rendering. Vue combines the best of React and Angular, offering a progressive and incrementally adoptable framework. Angular is a comprehensive and opinionated framework with extensive tooling and a robust feature set.Q: Can I mix different JavaScript frameworks in a single project?A: While mixing different JavaScript frameworks is technically possible, it's generally not recommended. Combined, each framework's architecture, data flow patterns, and ecosystem may lead to conflicts and complexities. It's best to choose a single framework that aligns with your project requirements and utilize its ecosystem and best practices.Q: How do JavaScript frameworks handle SEO (Search Engine Optimization)?A: JavaScript frameworks initially faced challenges with SEO because search engines had difficulty crawling and indexing dynamic content. However, modern frameworks have made significant improvements in this area. Frameworks like React, Vue, and Angular offer server-side rendering solutions, which generate HTML on the server and send fully rendered pages to search engines, improving SEO capabilities.Q: Are JavaScript frameworks suitable for mobile app development?A: JavaScript frameworks are primarily designed for web development, focusing on building web applications. However, frameworks like React Native (based on React) and NativeScript (based on Angular) allow cross-platform mobile app development using JavaScript. These frameworks bridge JavaScript and native mobile APIs, enabling the development of native-like mobile apps.Q: How do I choose the best JavaScript framework for my project?A: Choosing your framework depends on various factors, including project requirements, development experience, and personal preferences. Consider factors such as the size and complexity of the project, the learning curve of the framework, the availability of community support, and the ecosystem of libraries and tools associated with the framework. Trying out different frameworks through tutorials or small projects is often beneficial to understand their strengths and weaknesses.Remember, choosing a JavaScript front-end framework is not a one-size-fits-all decision. Evaluate your project needs and objectives, consider the trade-offs, and select the framework that best aligns with your goals.Choosing the Best JavaScript Framework for Your Front-endSelecting the most appropriate JavaScript framework for your front-end development projects is a crucial decision that can significantly impact your productivity, code maintainability, and user experience. React, Angular, Vue, and Svelte are all powerful frameworks with their strengths and characteristics.With its virtual DOM, extensive ecosystem, and component-driven architecture, React remains popular for building large-scale applications with complex UIs. Conversely, Angular provides a comprehensive and opinionated framework with extensive tooling and a robust feature set, making it suitable for enterprise-level projects.Vue stands out with its simplicity, versatility, and gentle learning curve. Its progressive nature and flexibility allow developers to incrementally adopt it in existing projects or build full-fledged single-page applications. Meanwhile, Svelte's unique compilation approach, focus on performance, and minimalist philosophy make it an intriguing choice for developers seeking an efficient and lightweight framework.Ultimately, the choice between these frameworks depends on various factors, such as project requirements, team expertise, performance needs, and development preferences. Evaluate these frameworks based on their key features, advantages, and community support to determine the best fit for your project.Whichever framework you choose, staying up to date with the latest advancements, exploring community resources, and investing time in learning best practices will empower you to leverage the full potential of these frameworks and deliver exceptional front-end experiences.Key Takeaways * JavaScript front-end frameworks enhance productivity, reusability, and efficient rendering. * Popular frameworks like React, Angular, Vue.js, and Svelte offer distinct features and advantages. * When selecting a front-end framework, consider project requirements, team expertise, and trade-offs. * Stay updated with the evolving front-end landscape for emerging frameworks and technologies."
  },
  {
    "title": "Integration Testing: Ensuring Reliable Web Development",
    "plaintext": "Integration testing is a vital step in the software development process that ensures software components' seamless integration and compatibility. It bridges unit testing, which tests individual components in isolation, and end-to-end testing, which verifies the complete system functionality. Integration testing evaluates how software modules, units, or components interact with each other, identifying potential issues early on. Integration testing helps create stable and reliable software products by validating component integration and detecting defects.This article will explore the significance of integration testing, discuss different integration testing approaches, outline the testing process, highlight best practices, address common challenges, and introduce the tools and technologies that facilitate effective integration testing.Why Integration Testing MattersIntegration testing offers numerous benefits beyond defect detection. Its importance lies in the following: 1. Ensuring Software System Reliability: Integration testing validates that the software system operates perfectly and its components function as intended. Testing the interactions between modules identifies potential issues and ensures the reliability of the entire software system. 2. Verifying Requirements: Integration testing confirms that the software system meets the specified requirements. Examining the interactions between different modules ensures that the software behaves according to user expectations. 3. Reducing Risks: Integration testing mitigates risks associated with software development. Identifying issues arising from component interactions helps prevent software failures, data loss, and security breaches, safeguarding the system's overall performance.For example, in an e-Commerce system, integration testing is essential to verify that the different modules, such as the product catalog, shopping cart, payment gateway, and order management system, work seamlessly together. By simulating real-world scenarios and testing the integration points, integration testing ensures that customers can browse products, add them to the cart, make secure payments, and track their orders without glitches.By implementing comprehensive integration testing and addressing issues proactively, organizations experience smoother software integration, minimize risks, improve software reliability, and deliver high-quality systems to their end users.Approaches to Integration TestingChoosing the most suitable approach will have a significant effect on the outcome: 1. Top-Down Approach: The top-down approach begins by testing the highest-level modules first, gradually proceeding to the lower-level components. It enables developers to identify defects in critical components early, reducing overall development time and costs. However, isolating defects that arise from interactions between lower-level modules can be challenging. 2. Bottom-Up Approach: Conversely, the bottom-up approach tests lower-level components first, gradually integrating and testing higher-level modules. This approach allows for early detection of defects in lower-level modules but may delay testing higher-level features. 3. Sandwich/Hybrid Approach: The hybrid approach combines the strengths of top-down and bottom-up approaches. It divides the software system into subsystems, using top-down and bottom-up testing techniques. This approach ensures the testing of critical subsystems first while identifying issues in lower-level modules. However, it requires significant resources and can be time-consuming for comprehensive testing. 4. Big-Bang Approach: The big-bang approach involves combining all software components into a single system and testing them collectively. While it can be faster and more cost-effective for smaller systems, defects can cascade, challenging issue identification and resolution.The Integration Testing ProcessA structured approach to integration testing ensures efficient and reliable outcomes. Here are the key steps: 1.  Integration Test Plan: Develop an integration test plan that outlines the strategy, approach, tools, resources, and timelines for integration testing. 2.  Integration Test Environment: Set up an integration test environment that closely simulates the production environment, including hardware, software, and network configurations. 3.  Test Cases and Scenarios: Create realistic test cases and scenarios that cover all possible interactions between software components, ensuring comprehensive testing. 4.  Execution of Integration Tests: Execute integration tests in a controlled environment to minimize the impact on production systems. Validate the behavior of software components when integrated into the larger system. 5.  Defect Tracking and Reporting: Track and report defects discovered during integration testing, prioritizing critical issues to minimize their impact. Identify root causes and take corrective actions to prevent their recurrence. 6.  Integration Test Plan: Create an integration test plan outlining the strategy and approach for integrating and evaluating the software components. It should specify the tools, resources, and timelines required for integration testing. 7.  Integration Test Environment: Set up an integration test environment that closely simulates the production environment. This environment should include similar hardware, software, and network configurations to ensure accurate results. 8.  Test Cases and Scenarios: Develop comprehensive test cases and scenarios that cover all possible interactions between the software components. These test cases should be realistic and representative of the actual usage of the software system. 9.  Execute Integration Tests: Run integration tests in a controlled environment to minimize the risk of impacting production systems. During integration testing, validate the behavior of the software components when integrated into the larger system. 10. Defect Tracking and Reporting: Track and report any defects discovered during integration testing. Prioritize and address critical defects first to minimize their impact on the overall system. This tracking and reporting process identifies root causes and facilitates corrective actions.Best Practices for Integration TestingEnhance the effectiveness of integration testing by adopting the following: 1. Collaborative Team Approach: Encourage collaboration between development, testing, and other stakeholders to ensure a shared understanding of requirements and comprehensive test coverage. 2. Test Data Management: Create and manage a diverse set of test data that covers various scenarios, ensuring comprehensive testing and data validity. 3. Test Environment Stability: Maintain a stable test environment replicating the production environment to minimize discrepancies and ensure reliable test results. 4. Test Automation: Leverage test automation tools and frameworks to streamline test execution, reduce manual effort, and improve test coverage. 5. Continuous Integration and Deployment: Integrate integration testing into the continuous integration and deployment (CI/CD) pipeline to identify defects early and deliver software updates more frequently and reliably.Challenges in Integration TestingIntegration testing presents several challenges, including: 1. Test Environment Complexity: Creating and managing a realistic test environment that accurately represents the production environment can be challenging and resource-intensive. 2. Component Availability and Dependencies: Integration testing relies on the availability and stability of individual components. Issues with component readiness or dependencies can impact testing schedules. 3. Test Data Management: Generating and managing realistic test data covering various scenarios can be time-consuming and require specialized tools or techniques. 4. Issue Isolation and Debugging: Identifying and isolating issues that arise from component interactions can be complex. Debugging and resolving such issues may require a thorough understanding of the software system's architecture.Tools and Technologies for Integration TestingSeveral tools and technologies facilitate efficient integration testing, including: 1. Test Management Tools: Tools like Jira, TestRail, and Zephyr help manage test cases, track defects, and monitor test execution progress. 2. Test Automation Tools: Popular test automation frameworks such as Selenium, Cypress, and Appium assist in automating integration test cases, improving efficiency and coverage. 3. Virtualization and Containerization Tools: Virtualization tools like VMware and containerization platforms like Docker provide isolated and reproducible test environments, simplifying the setup and configuration process. 4. API Testing Tools: API testing tools like Postman, SoapUI, and JMeter enable testing of the interactions between software components through APIs. 5. Continuous Integration and Deployment Tools: Tools such as Jenkins, GitLab CI/CD, and Travis CI enable seamless integration of integration testing into the continuous integration and deployment (CI/CD) pipeline. They automate the build, test, and deployment processes, facilitating frequent and reliable software updates.Frequently Asked QuestionsQ: What is integration testing?A: Integration testing is a software testing technique that evaluates the interaction and integration between software components or modules. It ensures that these components work harmoniously together and detect any issues or defects that may arise during their integration.Q: What is the difference between integration testing and unit testingA: Unit testing involves testing individual components or units of code in isolation, whereas integration testing verifies how these components interact and function together when integrated. Integration testing evaluates the behavior and compatibility of interconnected modules, identifying any integration-related issues that unit testing may miss.Q: What is the relationship between integration testing and end-to-end testing?A: Integration testing serves as a bridge between unit testing and end-to-end testing. While integration testing focuses on the interaction between software components, end-to-end testing verifies the complete system functionality, including user workflows and integration with external systems. Integration testing ensures that the parts integrated into the system function correctly within the larger context.Q: What are the different types of integration testing?A: There are several types of integration testing, including top-down integration, bottom-up integration, sandwich/hybrid integration, and big-bang integration. These integration approaches vary in their conduct of the integration process, the sequence of component integration, and the level of detail they consider during testing.Q: What are the benefits of integration testing?A: Integration testing offers several benefits, such as: * Early detection of integration issues and defects * Improved software reliability and stability * Enhanced system performance and scalability * Reduced risks of failures in production environments * Greater confidence in the overall system functionality * Cost savings by preventing issues from propagating to later stages of development or production.Q: How do I get started with integration testing?A: To get started with integration testing, consider the following steps: 1. Understand the software architecture and identify the integration points. 2. Define your integration testing strategy and objectives. 3. Select appropriate integration testing approaches based on your project requirements. 4. Design integration test cases and scenarios, covering both positive and negative scenarios. 5. Set up test environments and test data to simulate real-world conditions. 6. Execute integration tests and analyze the results. 7. Collaborate with developers and stakeholders to address any issues or defects identified. 8. Iterate and refine your integration testing approach based on feedback and lessons learned.Driving Quality in Web Development through Effective Integration TestingIntegration testing is crucial for ensuring reliable and robust software systems. By thoroughly testing the interaction and compatibility of components, integration testing helps detect and resolve issues early, minimizing risks and improving overall software quality. Adopting suitable approaches, processes, best practices, and tools can streamline integration testing efforts, leading to efficient software development and enhanced customer satisfaction."
  },
  {
    "title": "Making a Choice Between Composable and Headless Commerce",
    "plaintext": "The world of e-commerce is constantly evolving as businesses strive to keep up with dynamic consumer trends and the increasing number of digital touchpoints. New architectural patterns, such as headless commerce, have emerged to meet these challenges. Headless architecture decouples the front-end from the underlying back-end commerce services through APIs. While headless commerce offers flexibility for delivering innovative digital experiences, it has limitations when making fundamental changes to a business's core model. In contrast, composable commerce provides a more modular approach that allows organizations to customize their e-commerce solutions.What is Composable Commerce?Composable commerce architecture consists of independent microservices that are combined and configured to create a customized solution. Unlike headless commerce, modularity extends to all components in composable commerce, unlike headless commerce, which only decouples the front-end. This modularity empowers businesses to select the best-of-breed solutions for their specific needs, avoiding vendor lock-in and enabling quick adaptation to changing market conditions. It's like building with LEGO bricks, allowing businesses to innovate and tailor their models to meet their customers' evolving needs. This flexibility is particularly advantageous for implementing new and in-demand business models, such as: 1. Subscription-Based Services: Composable commerce allows businesses to incorporate subscription-based services into their e-commerce offerings. Organizations can quickly launch and manage subscription models by selecting and integrating specialized services for subscription management, billing, and recurring payments. This flexibility enables businesses to tap into the growing demand for subscription services, such as monthly product boxes, software-as-a-service (SaaS) solutions, or personalized subscription plans. 2. Same-Day Delivery: With the rise of on-demand expectations, businesses can leverage composable commerce to implement same-day delivery capabilities. By integrating with third-party logistics providers or building a delivery network, businesses can offer fast and efficient delivery options to meet customer demands. Composable commerce allows seamless integration with delivery management systems, order tracking, and real-time inventory management, ensuring a smooth and reliable same-day delivery experience. 3. In-Store Returns and Exchanges: Composable commerce empowers businesses to enhance customer experience by offering convenient in-store returns and exchanges. By integrating with existing point-of-sale (POS) systems and inventory management tools, companies can give customers the flexibility to return or exchange items purchased online at physical stores. This integration streamlines the return process, improves customer satisfaction, and fosters a seamless omnichannel experience. 4. Personalized Marketing and Recommendations: With composable commerce, businesses can leverage specialized services for customer data analysis, machine learning, and personalization. By integrating these services into their e-commerce architecture, companies can deliver personalized marketing campaigns, targeted product recommendations, and tailored content to individual customers. This level of personalization enhances customer engagement, drives conversions, and fosters long-term loyalty. 5. International Expansion: Composable commerce lets businesses quickly expand into new global markets. By integrating with localization services, tax management tools, and international payment gateways, companies can adapt their e-commerce platforms to meet the unique requirements of different countries. Managing multiple currencies, localizing content, and complying with regional regulations becomes possible. Composable commerce provides the flexibility to customize the e-commerce experience based on the specific needs of each target market. 6. Partner Integrations: Businesses often collaborate with external partners, such as drop-shippers, affiliates, or marketing platforms. Composable commerce allows seamless integration with these partner services through APIs. Businesses can streamline collaboration, automate data exchange, and optimize processes by selecting and integrating the appropriate services. This integration opens new revenue streams, improves operational efficiency, and strengthens partnerships.14 Headless eCommerce Success StoriesSee how LARQ improved their conversion rate by 80%, STRONGER increased orders by 167% and Butterfly expanded to a new country every 15 days.SubscribeWe won't send you spam. Unsubscribe at any time.Built with ConvertKitFeatures of Composable Commerce 1.  Modular Design: Composable commerce platforms consist of pre-built, loosely coupled services or microservices. Each service addresses a specific aspect of the e-commerce process, such as product management, order fulfillment, or payment processing. This modular architecture enables businesses to pick and choose the services they need and easily add or remove them as necessary. 2.  API-First Approach: In a composable commerce architecture, all components, including the front-end and back-end, are independent. Businesses can choose the services that make up their back-end and create a custom front-end. Each service or microservice has its API, allowing seamless communication with other services or external systems like inventory management, shipping, or payment gateways. This API-first approach simplifies the building and integrating of new services into the platform, leveraging existing tools and services without starting from scratch. 3.  Omnichannel Support: A composable commerce platform provides omnichannel support, allowing businesses to engage customers across various sales channels, including web, mobile, social media, marketplaces, and brick-and-mortar stores. With unified tracking of the customer's journey across channels, businesses can deliver a seamless shopping experience, regardless of where customers are in their buying journey. 4.  Cloud-Native: Composable commerce platforms are typically cloud-native, eliminating the need to manage infrastructure and software updates, reducing IT costs and allowing businesses to focus on their core competencies. Furthermore, being cloud-native ensures scalability, enabling organizations to adapt to fluctuating demands for computing resources. 5.  Scalability: Composable architecture offers businesses the flexibility and scalability to scale their operations effectively and meet fluctuating demands. Here's how: 6.  Modular Scalability: Composable commerce comprises a modular design where different services or microservices can be added or removed. This modular scalability allows businesses to scale specific areas of their operations without impacting the entire system. For example, in the case of increased demand in order fulfillment, they can add or upgrade the fulfillment service without making extensive changes to other components. This level of modularity enables businesses to scale their operations in a more granular and efficient manner. 7.  Elastic Resource Allocation: Composable architecture, often deployed in the cloud, allows businesses to allocate computing resources based on demand dynamically. Cloud-native composable commerce platforms can automatically scale up or down resources such as computing power, storage, and bandwidth in response to changes in website traffic, order volume, or other metrics. This elasticity ensures that businesses have the resources available to handle spikes in demand without overprovisioning or incurring unnecessary costs during periods of lower activity. 8.  Rapid Deployment of New Services: Composable architecture enables businesses to quickly deploy new services or functionalities to address evolving market needs. With the modular design and API-first approach, organizations can integrate third-party services or develop original microservices and seamlessly add them to their existing architecture. This agility allows businesses to rapidly introduce innovative features, expand into new markets, or experiment with new business models. By staying responsive and adaptive, companies can capitalize on emerging opportunities and gain a competitive edge. 9.  Scalable Infrastructure Management: Composable architecture, especially when deployed in the cloud, offloads the responsibility of infrastructure management from businesses. Cloud providers handle the underlying infrastructure, including server provisioning, load balancing, security, and software updates. Organizations are relieved from managing their infrastructure, allowing them to focus on their core competencies and ensuring that their architecture can scale seamlessly to accommodate increased demand. 10. Performance Optimization: Composable architecture allows businesses to optimize the performance of their e-commerce platform as they scale. By leveraging modular services, companies can select specialized components designed for high performance and scalability. For example, they can integrate caching mechanisms, content delivery networks (CDNs), or load-balancing services to enhance the speed and responsiveness of their platform. These performance optimizations help ensure a smooth user experience, minimize latency, and handle high traffic volumes efficiently. 11. Real-Time Analytics and Monitoring: Composable architecture often includes built-in analytics and monitoring capabilities. By leveraging these tools, businesses can gain real-time insights into their operations, track key performance indicators (KPIs), and identify areas for optimization. This data-driven approach enables enterprises to make informed decisions about scaling their operations, identifying bottlenecks, and proactively addressing issues to ensure optimal performance and customer satisfaction.What is Headless Commerce?Headless commerce platforms share similarities with composable commerce as they decouple the front-end presentation layer from the back-end commerce functionality. However, headless commerce limits businesses to the offerings of the platform provider, hindering flexibility in changing the technology stack or adapting the business model with new services like buy-online-pick-in-store.Comparing Composable Commerce and Headless CommerceWhile it's common to use the terms composable and headless commerce interchangeably to refer to decoupled architectures, there are subtle differences that set them apart: 1. Flexibility: Composable commerce goes beyond headless commerce by separating the back-end into individual components. There is, therefore, greater flexibility to select and combine services from different vendors, ensuring the best fit for their specific requirements. With composable commerce, businesses can create a unique architecture that aligns with their vision and goals. 2. Cost Optimization: Composable commerce allows businesses to optimize costs by selecting only the services they need, avoiding unnecessary expenses on bundled features. It enables investment in best-of-breed solutions that excel in their respective areas rather than settling for a one-size-fits-all solution. This cost optimization is particularly beneficial for startups or businesses operating on a tight budget. 3. Ease of Integration: Composable commerce's modular and API-first approach simplifies the integration of new services or systems. Businesses can leverage existing tools and services, accelerating time-to-market for new features or services. In contrast, headless commerce might require more effort and resources to integrate new functionalities into the platform, limiting agility and innovation.Challenges and Considerations in Composable Commerce 1. Complexity in Integration: While composable architecture offers flexibility, integrating multiple independent services can introduce complexity. Ensuring seamless communication and integration between various microservices may require additional development effort and expertise. Proper planning, documentation, and testing are essential to overcome integration challenges effectively. 2. Vendor Management: With a composable commerce approach, the need to manage relationships with multiple vendors for different services or microservices increases. Coordinating support, updates, and contracts with numerous parties add overheads to maintenance efforts. Effective vendor management becomes crucial to ensure smooth operations and timely support when issues arise. 3. Learning Curve: Adopting a composable commerce architecture may require a learning curve for developers and technical teams. Understanding each microservice's specific APIs and functionalities and how they interact within the overall architecture may take time and resources to grasp fully. 4. Governance and Maintenance: Businesses must establish proper governance and maintenance practices with a modular architecture. These practices should include version control, security updates, monitoring, and ensuring compatibility between different components. Failure to effectively manage governance and maintenance can lead to compatibility issues and increased complexity in the long run.Challenges and Considerations in Headless Commerce 1. Back-end Development Complexity: While headless commerce offers front-end flexibility, changing the back-end can be more complex. Separating the front-end and back-end requires specialized technical knowledge and expertise to develop and maintain the back-end architecture. Modifications to the back-end may involve significant coding changes and require careful consideration to ensure compatibility with the chosen front-end technologies. 2. Front-end Development Dependency: With headless commerce, businesses must rely on their front-end development resources or external agencies to build and maintain the front-end presentation layer. This dependency can introduce challenges regarding coordination, communication, and ensuring consistency across different front-end channels. 3. Limited Business Model Flexibility: Headless commerce platforms often come with pre-determined features and functionality, limiting the ability to make fundamental changes to the core business model. Adding new services or implementing innovative business models may require significant customization and development efforts beyond the capabilities of the headless platform. 4. Potentially Higher Costs: Headless commerce platforms may involve higher upfront costs than composable commerce. Businesses typically pay for the entire platform, even if they only utilize specific features. Additionally, the complexity and specialized expertise required for back-end development and maintenance can increase costs in the long run.Deciding FactorsWhen deciding between composable commerce and headless commerce for your next e-commerce project, consider the following factors: 1. Business Needs and Objectives: Evaluate your business requirements, growth plans, and long-term objectives. Determine the customization and flexibility you need to adapt to changing market demands and deliver exceptional customer experiences. 2. Cost: Consider your budget and the cost implications of each architecture. Assess the value of customization, scalability, and potential savings from selecting individual services versus bundled solutions. 3. Time-to-Market: Evaluate the speed you need to launch new features or services. Composable commerce's modular nature and API-first approach can significantly reduce development time and enable faster innovation cycles. 4. Technical Expertise: Assess your team's technical skills and capabilities. Composable commerce might require more expertise in integrating and managing multiple services compared to headless commerce, which typically relies on a single platform provider.Frequently Asked QuestionsQ: Can I still benefit from composable commerce if I already have an existing e-commerce platform?A: Definitely. Composable commerce allows businesses to introduce modular components into their existing architecture gradually. It enables a phased approach to migration, minimizing disruptions and leveraging the existing investment in your current platform.Q: Is composable commerce only suitable for large enterprises?A: Composable commerce offers benefits to businesses of all sizes. It provides cost optimization, flexibility, and scalability, which are advantageous for startups and small to medium-sized organizations aiming to compete in a rapidly evolving market.The Path Forward: Making an Informed Decision on Commerce ArchitectureChoosing between composable commerce and headless commerce requires careful consideration of several factors, such as flexibility, customization, time-to-market, and cost. While both approaches have advantages and disadvantages, composable commerce offers greater future-proofing as businesses can add or remove components and services without significant back-end architecture modifications. Businesses can stay agile and adapt to changing customer needs and market trends, ensuring their e-commerce platform remains relevant and competitive in the long run."
  },
  {
    "title": "Custom MVP Regrets: Overcoming the Limitations of Quick-Build Solutions in Your Growing Business",
    "plaintext": "Building a minimum viable product (MVP) has become synonymous with launching a new product. It’s the smart way to tackle the problem of not knowing exactly what to build when you first start out.The magic of building an MVP is embracing the possibility of fast failure as a route to successful iteration.Often, this involves leveraging any tech stack that gets the job done, employing a 'quick and dirty' approach to sprint across the initial finish line.However, after getting the MVP to market, new challenges surface that can make the fast-paced marathon feel like a painstaking obstacle course.If you’re reading along and nodding your head, know you’re not alone in wrestling with these issues. Almost every business that does its MVP “properly” and moves quickly has to take a breath and reassess what needs to be reworked at some point down the track.This is nice to know but it doesn’t make much difference if you’re struggling to keep the technical wheels from falling off your product as it grows.In this article, I will cover a handful of the problems your post-MVP might be struggling with and what you can do to fix them.Common quick-build problemsProblem: Bringing new devs onto the project to help it grow is difficultYour MVP was probably developed quickly and under a tight deadline. This approach usually leaves little room for comprehensive documentation.When new developers join the project, they might feel as though they're navigating through a maze without a map, trying to make sense of your MVP's intricate features and functions.Then, there's the issue of the codebase. The goal with an MVP is to validate your product idea as quickly as possible, which can lead to a focus on functionality over tidiness in your codebase. This can feel like an unsorted puzzle to new devs, who must first decode this before they can contribute effectively.Depending on how quickly your MVP got up and running, coding standards might have taken a back seat. This often happens when semi-technical ideas folk take the wheel. This can be likened to reading a report with inconsistent formatting – it's possible, but it certainly slows the process down.New developers will take longer to become productive if your MVP has ticked any of these boxes. So even though you’re bringing more resources in to help, development can be slower than ever.Problem: Every change breaks something, making our users restlessThe next issue that you may encounter with your rapidly developed MVP is a sort of domino effect that occurs when you make changes to the product. It's almost as if the code is walking on eggshells - one small tweak here, and something breaks there. This can feel like playing a never-ending game of whack-a-mole, where fixing one issue inadvertently creates another.In the haste to launch the MVP, the focus is on making things work rather than creating a robust and flexible codebase that can accommodate changes down the line.Unexpected bugs and issues lead to a frustrating user experience where things don't feel like they need to be more reliable and consistent. Users can quickly become restless when they're constantly faced with glitches and bugs.Even if your core product is revolutionary, you’re going to see churn if users perceive the platform as being undercooked. They're also likely to spread the word about their negative experiences. This could lead to poor reviews, which can seriously harm your reputation. In the worst-case scenario, this can create a vicious cycle of high churn rates and negative feedback that's hard to break.Problem: No-code and poorly repurposed platforms like WordPress and Teachable aren’t flexible or scaleable and, at some point, have to be completely rebuiltAnother significant challenge with your MVP might be the limitations imposed by the platform it was built on. This is particularly relevant if your MVP was created using a no-code platform or a proprietary all-in-one solution like Teachable or WordPress. While these platforms are excellent for quickly validating an idea or launching an MVP, they might not offer more flexibility and scalability for long-term growth.Why does this matter? It comes down to control and customization. No-code platforms or proprietary solutions typically offer a predefined set of tools and features to build your app. But as your user base grows and their needs evolve, you might find that these preset options can't keep up.Moreover, there's the issue of \"vendor lock-in.\" When you build your MVP on a platform, you're essentially tying your product's fate to that platform. If the platform fails, if their prices increase, or if they decide to discontinue certain features, your product is directly affected. This dependency can leave your MVP vulnerable to changes out of your control.And here's the kicker: switching from these platforms can be challenging. You may need to completely rebuild your MVP using a more flexible and scalable technology stack. This process isn't just time-consuming; it also requires a significant investment of resources.Problem: A clean UI and thoughtful UX usually gets pushed down the list of prioritiesWhen you're in the heat of developing your MVP, user interface (UI) and user experience (UX) considerations can sometimes get sidelined. It's a common struggle. The priority often lies in packing the MVP with the features you think users want. However, this approach might overlook the importance of how users interact with these features and how they feel about the overall experience.UI and UX are the heart and soul of any product, including your MVP. Your UI is what your users interact with – it's what they see, touch, and navigate. On the other hand, UX is about how a user feels when they're interacting with your product. It's about meeting their needs and expectations and making the entire process smooth and enjoyable.In the rush to build feature sets, the user-friendliness of your MVP might suffer. If users find it hard to navigate your product or if they encounter unexpected problems, they might not stick around to appreciate the features you've worked hard to implement.Problem: You’ve accumulated a bunch of technical debtTechnical debt is a concept that refers to the implied cost of additional work caused by choosing a quick, often suboptimal, solution now instead of using a better approach that would take longer. Essentially, when you're racing against the clock to get your MVP up and running, there's a tendency to opt for shortcuts or quick fixes to issues rather than investing the time to implement more efficient, long-lasting solutions.These shortcuts can accumulate over time, creating a 'debt' that needs to be paid off eventually. And the 'interest' on this debt comes in the form of slow development speed, bugs, performance issues, and the overall decrease in code quality. This could affect the stability of your MVP, its scalability, and even user satisfaction in the long run.The tricky part about technical debt is that it's not always obvious in the early stages of your MVP. It usually becomes a significant problem when your product begins to scale or when you start adding more features. The shortcuts that helped you move quickly in the early days can become obstacles that slow you down as your codebase grows and becomes more complex.No more problems, please; how about some solutions?Hopefully, I’ve struck a chord by describing some of the problems that your MVP might be struggling with. These problems all take a bit of work to solve, but there’s a structured approach you can implement for each to get your MVP back on track.Problem: Bringing new devs onto the project to help it grow is difficultSolution: Fix up your documentationThere’s a handful of quick fixes to this situation and some more permanent ones that take more effort to implement.The first quick fix is improving your documentation. It sounds like common sense, and it is! But writing high-quality, thorough documentation is a skill plenty of devs struggle with.At a minimum, your team should record enough detail that a new developer can get the project installed locally, know where all the resources are kept, and gain access to any credentials they might need.I don’t usually pat myself on the back for small wins like writing documentation, but we’ve recently built a complex SaaS product that has excellent docs.I’m happy to provide our doc list as a template. Right now, it’s not prepared in a way I can easily share.If you want to sure up your docs by simply filling in the blanks instead of starting from scratch, use this link to book a 20-minute call with me so I can help get you set up.We’ll quickly discuss your project and figure out which parts of the documentation you need, then get them in a format you can use.I might spot other growth opportunities during the call, but this isn’t a sales call! It’s just a quick one to help you solve your documentation woes.Solution: Refactor your codeDevs often write code quickly intending to go back later to make it cleaner, easier to read and more efficient.If the code is a completely disorganized mess, then refactoring is a waste of time. But most of the time, making the code more readable will help new developers understand what’s supposed to be happening.The caveat to this suggestion is it needs to be done by the person that wrote the code or someone very close to the codebase. Otherwise, it takes way too much time, and you might find more value in rebuilding from scratch.Pair ProgrammingDevelopers don’t love pair programming, but it’s an effective way to get new devs up to speed.The idea is to sit your new developer down with someone who understands your MVP and write some code together.It’s slower than regular development but easier for the new guy to ask questions in a natural setting.Problem: Every change breaks something, making our users restlessSolution: Setting up automated tests to catch bugsIf your MVP has become a bit “unstable” and it seems like every change results in half a dozen bugs, then you’ll get some value from end-to-end testing.This kind of automated testing is written into the code to test the major user workflows (i.e. making a purchase, signing up for an account, using a key feature). Every time a change is made in your MVP, an invisible browser will open and automatically run through the steps to complete the test.If something breaks and the end result isn’t achieved, then the test will fail, and your team can have a look at what went wrong.This isn’t an end-game solution. It’s just more of a sanity check that will help you spot fires before your users start making noise.Problem: Users are churning because they’re sick of waiting for new featuresSolution: Figure out if the problem is developer velocity or feature prioritizationThese kinds of growing pains are normal. MVPs don’t grow to complete suits overnight. Every second user will have an opinion on what features are missing.Your job is to figure out if the noise that’s coming from your users is frustration because the features or changes they need are happening too slowly OR if you’re prioritizing the wrong features.Suppose you’re releasing new features regularly, and users complain that your product isn’t doing what they need. There’s a chance you’re listening to the minority complaining loudest.This is a simple fix you can tackle with surveys and polls and even just look at the volume of support tickets to spot the most common requests.However, if the problem is that users are requesting features that are taking too long to build, then the solution isn’t as clear-cut.Your MVP could be overloaded with technical debt, making simple changes a time-consuming affair and grinding progress to a halt.There are three options in this situation: 1. Refactor the code that’s causing headaches. It’s not fun and it’s not glamorous, but it can make life easier going forward.         2. Dedicate time to “paying” your technical debt. This may mean rebuilding whole parts of your MVP with different technology or laying new foundations.         3. Ignore the problem and accept that your velocity will be slow. You may be planning a complete overhaul in the future, and sometimes ignoring the problem for a little while is the right choice.Knowing the right option here is hard, especially if you’re not a developer and can’t tell if the code is in a good place or not.I can help you determine which approach will give you the best return on your investment. It’s not always building from scratch. Sometimes spending a few weeks refactoring will solve 95% of your problems.If you feel ready to accept help solving this problem, we can figure it out over a free 20-minute consultation. Grab a time from my calendar below.Problem: You started with a no-code platform, and it’s become a limitationSolution: Incremental migrationRebuilding your entire application is usually the riskiest approach (even though it can be the cleanest).Instead, consider an incremental approach. Identify the most limiting functionalities on the no-code platform and start by rebuilding these on a new platform that lives on a subdomain like newapp.yourwebsite.com.Gradually, as more features are migrated, you can switch completely to the new system. This approach allows the existing application to continue serving users while development occurs in parallel.Solution: Keep using the no-code platform’s APIThis is a similar approach to an incremental migration, but if your no-code platform has a decent API, then you can treat the old platform like a backend that stores data and drives functionality.The customer-facing frontend can be rebuilt using a more flexible, more “permanent” technology like React or Next.js.Problem: Your design and UX suck because it wasn’t a prioritySolution: Redo your UI and UXThis is probably the most straightforward problem to solve.As long as you have the resources and expertise to implement a new user interface, it’s just a matter of sitting down to figure out what a pleasant experience for your users will look like and then building it into your app.Problem: Not sure the best way to pay off your technical debtsSolution: 30-minute free consultationThere’s no quick fix or single solution to technical debt. Even if the best approach is clear, like rebuilding your entire application, it’s not always the practical solution.You might have budgetary resource constraints, or there’s a pressing need that can’t wait for you to implement a longer fix.The next step is talking through your situation. It can be hard to analyze from the inside. Book a 30-minute call below, and we’ll figure out your best three options to move forward.Wrapping upSteering a growing MVP in the right direction is a good problem to have, but it can feel like time is working against you. If you moved quickly at the start of the project, there’s going to be some technical debt that needs to be paid.Hopefully, you can take some of my suggestions hit home and you can apply them to your own project!"
  }
]